2021-03-11 11:07:11,213 [main:66] - Compilation checking started
2021-03-11 11:07:12,884 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:07:14,072 [main:194] - Type params = [UShort?]
2021-03-11 11:07:14,365 [main:302] - generating value of type = UShort true depth = 1
2021-03-11 11:07:14,695 [main:52] - Trying to change 22 nodes
2021-03-11 11:07:14,695 [main:56] - replacing (v, T)
2021-03-11 11:07:14,695 [main:38] - replacing v T
2021-03-11 11:07:14,695 [main:42] - Getting value of type T
2021-03-11 11:07:14,809 [main:302] - generating value of type = T false depth = 0
2021-03-11 11:07:14,948 [main:43] - GENERATING CALL OF fun <T> minOf(a: Comparable<T>, b: Comparable<T>): T = TODO()
2021-03-11 11:07:14,952 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Comparable<T>, b: Comparable<T>): T = TODO()
2021-03-11 11:07:15,069 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 11:07:15,235 [main:43] - GENERATING CALL OF fun KotlinVersion(major: kotlin.Int, minor: kotlin.Int, patch: kotlin.Int): Comparable<T> = TODO()
2021-03-11 11:07:15,240 [main:61] - WITHOUT TYPE PARAMS = fun KotlinVersion(major: kotlin.Int, minor: kotlin.Int, patch: kotlin.Int): Comparable<T> = TODO()
2021-03-11 11:07:15,709 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:07:15,710 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:07:15,710 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:07:15,711 [main:95] - GENERATED = KotlinVersion(-253507115, -1440221683, 1491156991)
2021-03-11 11:07:15,712 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 11:07:15,720 [main:95] - GENERATED = minOf<Comparable<T>>(KotlinVersion(-253507115, -1440221683, 1491156991), -114)
2021-03-11 11:07:15,720 [main:46] - GENERATED VALUE OF TYPE T = minOf<Comparable<T>>(KotlinVersion(-253507115, -1440221683, 1491156991), -114)
2021-03-11 11:07:15,721 [main:49] - GENERATED IS CALL =true
2021-03-11 11:07:15,819 [main:55] - randomType = Byte
2021-03-11 11:07:15,900 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:07:16,069 [main:94] - GETTING T from UShort?
2021-03-11 11:07:16,182 [main:94] - GETTING T from Boolean
2021-03-11 11:07:16,229 [main:94] - GETTING T from MyIterator<String>
2021-03-11 11:07:16,269 [main:94] - GETTING T from UShort?
2021-03-11 11:07:16,269 [main:63] - replacement of v of type T is minOf<Comparable<T>>(KotlinVersion(-253507115, -1440221683, 1491156991), -114)
2021-03-11 11:07:16,371 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:07:16,372 [main:66] - Compilation checking started
2021-03-11 11:07:17,144 [main:49] - Result = false
Text:
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = minOf<Comparable<T>>(KotlinVersion(-253507115, -1440221683, 1491156991), -114)
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}


2021-03-11 11:07:17,146 [main:56] - replacing (MyIterator<String>(""), MyIterator<String>)
2021-03-11 11:07:17,146 [main:38] - replacing MyIterator<String>("") MyIterator<String>
2021-03-11 11:07:17,147 [main:42] - Getting value of type MyIterator<String>
2021-03-11 11:07:17,250 [main:302] - generating value of type = MyIterator<String> false depth = 0
2021-03-11 11:07:17,251 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:07:17,568 [main:194] - Type params = [String]
2021-03-11 11:07:17,835 [main:302] - generating value of type = String true depth = 2
2021-03-11 11:07:17,838 [main:46] - GENERATED VALUE OF TYPE MyIterator<String> = MyIterator<String>("sikwn")
2021-03-11 11:07:17,838 [main:49] - GENERATED IS CALL =true
2021-03-11 11:07:18,166 [main:55] - randomType = ArrayDeque<UByte?>
2021-03-11 11:07:18,290 [main:302] - generating value of type = ArrayDeque<UByte?> false depth = 0
2021-03-11 11:07:18,421 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<UByte?> = TODO()
2021-03-11 11:07:18,424 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<UByte?> = TODO()
2021-03-11 11:07:18,544 [main:95] - GENERATED = ArrayDeque<UByte?>()
2021-03-11 11:07:18,868 [main:94] - GETTING MyIterator<String> from UShort?
2021-03-11 11:07:18,931 [main:94] - GETTING MyIterator<String> from MyIterator<String>
2021-03-11 11:07:18,955 [main:63] - replacement of MyIterator<String>("") of type MyIterator<String> is MyIterator<String>("")
2021-03-11 11:07:19,052 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:07:19,053 [main:56] - replacing (v, T)
2021-03-11 11:07:19,053 [main:38] - replacing v T
2021-03-11 11:07:19,053 [main:42] - Getting value of type T
2021-03-11 11:07:19,190 [main:302] - generating value of type = T false depth = 0
2021-03-11 11:07:19,317 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-11 11:07:19,319 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-11 11:07:19,415 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 11:07:19,420 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 11:07:19,425 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 11:07:19,431 [main:95] - GENERATED = maxOf<Comparable<T>>(10119.toUShort(), -1991135176, '뮵')
2021-03-11 11:07:19,431 [main:46] - GENERATED VALUE OF TYPE T = maxOf<Comparable<T>>(10119.toUShort(), -1991135176, '뮵')
2021-03-11 11:07:19,432 [main:49] - GENERATED IS CALL =true
2021-03-11 11:07:19,838 [main:55] - randomType = MyIterator<MyIterator<Int>>
2021-03-11 11:07:19,927 [main:302] - generating value of type = MyIterator<MyIterator<Int>> false depth = 0
2021-03-11 11:07:19,927 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:07:20,627 [main:194] - Type params = [MyIterator<Int>]
2021-03-11 11:07:20,849 [main:94] - GETTING T from MyIterator<String>
2021-03-11 11:07:20,871 [main:94] - GETTING T from UShort?
2021-03-11 11:07:20,922 [main:94] - GETTING T from Boolean
2021-03-11 11:07:20,936 [main:94] - GETTING T from UShort?
2021-03-11 11:07:20,936 [main:63] - replacement of v of type T is maxOf<Comparable<T>>(10119.toUShort(), -1991135176, '뮵')
2021-03-11 11:07:21,025 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:07:21,026 [main:56] - replacing (true, Boolean)
2021-03-11 11:07:21,027 [main:38] - replacing true Boolean
2021-03-11 11:07:21,027 [main:42] - Getting value of type Boolean
2021-03-11 11:07:21,114 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:07:21,115 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:07:21,116 [main:49] - GENERATED IS CALL =false
2021-03-11 11:07:21,231 [main:55] - randomType = Boolean?
2021-03-11 11:07:21,331 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:07:21,347 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:07:21,432 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:07:21,432 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:07:21,524 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:07:21,526 [main:66] - Generated call from random type = (false)?.equals("twdsz").equals("uuois")
2021-03-11 11:07:21,528 [main:94] - GETTING Boolean from UShort?
2021-03-11 11:07:21,581 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@77cb5885], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:07:21,581 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@77cb5885]
2021-03-11 11:07:21,669 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:07:21,784 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:07:21,786 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).equals(null).equals("buipd")
2021-03-11 11:07:21,786 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@30573e40], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]]
2021-03-11 11:07:21,786 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@30573e40]
2021-03-11 11:07:21,786 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:07:21,905 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:07:21,907 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).toDouble().equals("pitcq")
2021-03-11 11:07:21,907 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7f55f80e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@7b9b0006]]
2021-03-11 11:07:21,908 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7f55f80e]
2021-03-11 11:07:21,992 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:07:21,993 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@7b9b0006]
2021-03-11 11:07:22,076 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:07:22,077 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).rangeTo(28076.toUShort()).equals("jtgxc")
2021-03-11 11:07:22,078 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@148aeed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@68547c81]]
2021-03-11 11:07:22,078 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@148aeed]
2021-03-11 11:07:22,184 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:07:22,185 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@68547c81]
2021-03-11 11:07:22,288 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:07:22,292 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).div(105.toUByte()).equals("fggus")
2021-03-11 11:07:22,292 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@631c4e65], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]]
2021-03-11 11:07:22,292 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@631c4e65]
2021-03-11 11:07:22,394 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:07:22,395 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]
2021-03-11 11:07:22,481 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:07:22,482 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).compareTo(89.toUByte()).equals("mjyrm")
2021-03-11 11:07:22,483 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@38d34076], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]]
2021-03-11 11:07:22,483 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@38d34076]
2021-03-11 11:07:22,483 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]
2021-03-11 11:07:22,572 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:07:22,573 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).toFloat().equals("zldhn")
2021-03-11 11:07:22,573 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1d64adf1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@69dd5e82]]
2021-03-11 11:07:22,573 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1d64adf1]
2021-03-11 11:07:22,574 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@69dd5e82]
2021-03-11 11:07:22,680 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:07:22,681 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).toByte().equals("igewx")
2021-03-11 11:07:22,682 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7f55f80e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public operator fun kotlin.ranges.UIntRange.contains(value: kotlin.UByte): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1b946e7e]]
2021-03-11 11:07:22,682 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7f55f80e]
2021-03-11 11:07:22,778 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:07:22,779 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public operator fun kotlin.ranges.UIntRange.contains(value: kotlin.UByte): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1b946e7e]
2021-03-11 11:07:22,863 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:07:22,864 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).rangeTo(4912.toUShort()).contains(85.toUByte())
2021-03-11 11:07:22,864 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@30573e40], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]]
2021-03-11 11:07:22,864 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@30573e40]
2021-03-11 11:07:22,865 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]
2021-03-11 11:07:22,865 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).toDouble().isNaN()
2021-03-11 11:07:22,865 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@77cb5885], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:07:22,865 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@77cb5885]
2021-03-11 11:07:22,943 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:07:22,944 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:07:23,025 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:07:23,026 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).equals("yzkfc").or(false)
2021-03-11 11:07:23,026 [main:63] - replacement of true of type Boolean is (MyIterator<UShort?>(13278.toUShort()).v).toFloat().equals("zldhn")
2021-03-11 11:07:23,127 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:07:23,129 [main:56] - replacing ("", String)
2021-03-11 11:07:23,129 [main:38] - replacing "" String
2021-03-11 11:07:23,129 [main:42] - Getting value of type String
2021-03-11 11:07:23,240 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:23,241 [main:46] - GENERATED VALUE OF TYPE String = "dliku"
2021-03-11 11:07:23,241 [main:49] - GENERATED IS CALL =false
2021-03-11 11:07:23,466 [main:55] - randomType = MyIterator<Float>
2021-03-11 11:07:23,553 [main:302] - generating value of type = MyIterator<Float> false depth = 0
2021-03-11 11:07:23,553 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:07:23,856 [main:194] - Type params = [Float]
2021-03-11 11:07:24,068 [main:94] - GETTING String from MyIterator<String>
2021-03-11 11:07:24,099 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a751dd4]]
2021-03-11 11:07:24,099 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:24,100 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a751dd4]
2021-03-11 11:07:24,216 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:07:24,302 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:24,409 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:24,411 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceBefore('羐', "waxiy", "gohej")
2021-03-11 11:07:24,412 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ede372]]
2021-03-11 11:07:24,412 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:24,413 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ede372]
2021-03-11 11:07:24,414 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().capitalize()
2021-03-11 11:07:24,415 [main:101] - Case = [public final val v: kotlin.String defined in MyIterator[PropertyDescriptorImpl@4c4add5e]]
2021-03-11 11:07:24,415 [main:105] - GENERATED CALL = (MyIterator<String>("")).v
2021-03-11 11:07:24,415 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e2539ae]]
2021-03-11 11:07:24,416 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:24,416 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e2539ae]
2021-03-11 11:07:24,416 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().trim()
2021-03-11 11:07:24,417 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79bc24de]]
2021-03-11 11:07:24,417 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:24,417 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79bc24de]
2021-03-11 11:07:24,524 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:07:24,529 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().removeSurrounding(StringBuilder())
2021-03-11 11:07:24,529 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]]
2021-03-11 11:07:24,530 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:24,530 [main:105] - GENERATED CALL = (MyIterator<String>("")).next()
2021-03-11 11:07:24,531 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26e1089c]]
2021-03-11 11:07:24,531 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:24,531 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26e1089c]
2021-03-11 11:07:24,614 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:24,616 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().dropLast(-1517019658)
2021-03-11 11:07:24,616 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2485cd4a]]
2021-03-11 11:07:24,616 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:24,616 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2485cd4a]
2021-03-11 11:07:24,617 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().reversed()
2021-03-11 11:07:24,617 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cd475ae]]
2021-03-11 11:07:24,617 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:24,617 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cd475ae]
2021-03-11 11:07:24,617 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().trimEnd()
2021-03-11 11:07:24,618 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f640e0]]
2021-03-11 11:07:24,618 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:24,618 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f640e0]
2021-03-11 11:07:24,703 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:24,801 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:24,888 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:07:24,984 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:07:24,985 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:07:25,175 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:07:25,176 [main:95] - GENERATED = StringBuilder("difeo")
2021-03-11 11:07:25,177 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceRange(-993952244, 1687731296, StringBuilder("difeo"))
2021-03-11 11:07:25,177 [main:63] - replacement of "" of type String is (MyIterator<String>("")).v
2021-03-11 11:07:25,257 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:07:25,259 [main:56] - replacing ("OK", String)
2021-03-11 11:07:25,259 [main:38] - replacing "OK" String
2021-03-11 11:07:25,259 [main:42] - Getting value of type String
2021-03-11 11:07:25,347 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:25,347 [main:46] - GENERATED VALUE OF TYPE String = "uefsb"
2021-03-11 11:07:25,347 [main:49] - GENERATED IS CALL =false
2021-03-11 11:07:25,884 [main:55] - randomType = LinkedHashMap<Long, HashMap<Short?, Int>>
2021-03-11 11:07:25,958 [main:302] - generating value of type = LinkedHashMap<Long, HashMap<Short?, Int>> false depth = 0
2021-03-11 11:07:26,061 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): LinkedHashMap<Long, HashMap<Short?, Int>> = TODO()
2021-03-11 11:07:26,062 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): LinkedHashMap<Long, HashMap<Short?, Int>> = TODO()
2021-03-11 11:07:26,169 [main:95] - GENERATED = LinkedHashMap<Long, HashMap<Short?, Int>>()
2021-03-11 11:07:26,447 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:07:26,523 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:26,524 [main:66] - Generated call from random type = (LinkedHashMap<Long, HashMap<Short?, Int>>()).size.toString(1676009531)
2021-03-11 11:07:26,525 [main:94] - GETTING String from UShort?
2021-03-11 11:07:26,574 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1d64adf1], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:07:26,574 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1d64adf1]
2021-03-11 11:07:26,575 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:07:26,658 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:26,659 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).toByte().toString(-1873229724)
2021-03-11 11:07:26,659 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1db2ec9], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14734fe2]]
2021-03-11 11:07:26,659 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1db2ec9]
2021-03-11 11:07:26,659 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14734fe2]
2021-03-11 11:07:26,744 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:26,745 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).toUByte().toString(-2040398698)
2021-03-11 11:07:26,745 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@76917a4e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:07:26,746 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@76917a4e]
2021-03-11 11:07:26,746 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:07:26,830 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:26,831 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).toLong().toString(-952090088)
2021-03-11 11:07:26,831 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@148aeed], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b3d76]]
2021-03-11 11:07:26,832 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@148aeed]
2021-03-11 11:07:26,950 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:07:26,951 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b3d76]
2021-03-11 11:07:27,044 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:27,045 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).div(125.toUByte()).toString(-1185212160)
2021-03-11 11:07:27,045 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7f3defe2], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:07:27,046 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7f3defe2]
2021-03-11 11:07:27,046 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:07:27,128 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:27,129 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).toShort().toString(1504758444)
2021-03-11 11:07:27,129 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UShort): kotlin.UShort defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4d31064], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7efceb9b]]
2021-03-11 11:07:27,129 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UShort): kotlin.UShort defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4d31064]
2021-03-11 11:07:27,215 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:07:27,216 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7efceb9b]
2021-03-11 11:07:27,298 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:27,299 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).and(13770.toUShort()).toString(1064245211)
2021-03-11 11:07:27,299 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@631c4e65], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:07:27,299 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@631c4e65]
2021-03-11 11:07:27,376 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:07:27,377 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:07:27,455 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:27,456 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).v).compareTo(32.toUByte()).toString(736584503)
2021-03-11 11:07:27,456 [main:63] - replacement of "OK" of type String is (MyIterator<UShort?>(13278.toUShort()).v).toShort().toString(1504758444)
2021-03-11 11:07:27,534 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:07:27,534 [main:66] - Compilation checking started
2021-03-11 11:07:27,864 [main:49] - Result = false
Text:
class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return (MyIterator<UShort?>(13278.toUShort()).v).toShort().toString(1504758444)
}


2021-03-11 11:07:27,866 [main:56] - replacing ("OK", String)
2021-03-11 11:07:27,866 [main:38] - replacing "OK" String
2021-03-11 11:07:27,866 [main:42] - Getting value of type String
2021-03-11 11:07:28,006 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:28,007 [main:46] - GENERATED VALUE OF TYPE String = "emhen"
2021-03-11 11:07:28,007 [main:49] - GENERATED IS CALL =false
2021-03-11 11:07:28,344 [main:55] - randomType = Collection<HashSet<UInt>>
2021-03-11 11:07:28,345 [main:94] - GETTING String from Boolean
2021-03-11 11:07:28,360 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:07:28,361 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:07:28,437 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:07:28,438 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:07:28,523 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:28,524 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).hasNext()).compareTo(false).toString(-49418737)
2021-03-11 11:07:28,524 [main:63] - replacement of "OK" of type String is (MyIterator<UShort?>(13278.toUShort()).hasNext()).compareTo(false).toString(-49418737)
2021-03-11 11:07:28,603 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:07:28,603 [main:66] - Compilation checking started
2021-03-11 11:07:28,912 [main:49] - Result = false
Text:
class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return (MyIterator<UShort?>(13278.toUShort()).hasNext()).compareTo(false).toString(-49418737)
}


2021-03-11 11:07:28,913 [main:56] - replacing ("OK", String)
2021-03-11 11:07:28,913 [main:38] - replacing "OK" String
2021-03-11 11:07:28,913 [main:42] - Getting value of type String
2021-03-11 11:07:28,985 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:28,986 [main:46] - GENERATED VALUE OF TYPE String = "tdjpk"
2021-03-11 11:07:28,986 [main:49] - GENERATED IS CALL =false
2021-03-11 11:07:29,479 [main:55] - randomType = MyIterator<MyIterator<Float>>
2021-03-11 11:07:29,577 [main:302] - generating value of type = MyIterator<MyIterator<Float>> false depth = 0
2021-03-11 11:07:29,578 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:07:30,219 [main:194] - Type params = [MyIterator<Float>]
2021-03-11 11:07:30,433 [main:94] - GETTING String from MyIterator<String>
2021-03-11 11:07:30,449 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d6c99]]
2021-03-11 11:07:30,449 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:30,449 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d6c99]
2021-03-11 11:07:30,521 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:30,599 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:30,599 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceIndentByMargin("gsajv", "gakih")
2021-03-11 11:07:30,600 [main:101] - Case = [public final val v: kotlin.String defined in MyIterator[PropertyDescriptorImpl@4c4add5e]]
2021-03-11 11:07:30,600 [main:105] - GENERATED CALL = (MyIterator<String>("")).v
2021-03-11 11:07:30,600 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@599f0c8d]]
2021-03-11 11:07:30,600 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:30,600 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@599f0c8d]
2021-03-11 11:07:30,675 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:30,750 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:07:30,751 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().padEnd(-1758340195, 'ኑ')
2021-03-11 11:07:30,751 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15ce83a8]]
2021-03-11 11:07:30,751 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:30,751 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15ce83a8]
2021-03-11 11:07:30,861 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:07:30,961 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:30,962 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().substringAfterLast('ᾕ', "iacxj")
2021-03-11 11:07:30,962 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b2fa201]]
2021-03-11 11:07:30,962 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:30,963 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b2fa201]
2021-03-11 11:07:31,050 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:31,051 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceIndent("ivfvn")
2021-03-11 11:07:31,051 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f63cce]]
2021-03-11 11:07:31,051 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:31,051 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f63cce]
2021-03-11 11:07:31,132 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:07:31,210 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:31,286 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:31,287 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceAfterLast('뙷', "wgtki", "amgys")
2021-03-11 11:07:31,287 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77008b88]]
2021-03-11 11:07:31,287 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:31,287 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77008b88]
2021-03-11 11:07:31,363 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:31,363 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().substring(1457240678)
2021-03-11 11:07:31,364 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29e1c6d1]]
2021-03-11 11:07:31,364 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:31,364 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29e1c6d1]
2021-03-11 11:07:31,364 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().lowercase()
2021-03-11 11:07:31,364 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ce19e3d]]
2021-03-11 11:07:31,364 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:31,364 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ce19e3d]
2021-03-11 11:07:31,453 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:07:31,545 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:31,642 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:31,643 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceBeforeLast('᧏', "ovgmg", "tbctd")
2021-03-11 11:07:31,643 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ede372]]
2021-03-11 11:07:31,643 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:31,643 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ede372]
2021-03-11 11:07:31,643 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().capitalize()
2021-03-11 11:07:31,643 [main:63] - replacement of "OK" of type String is (MyIterator<String>("")).next().replaceIndentByMargin("gsajv", "gakih")
2021-03-11 11:07:31,720 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:07:31,721 [main:66] - Compilation checking started
2021-03-11 11:07:31,986 [main:49] - Result = false
Text:
class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return (MyIterator<String>("")).next().replaceIndentByMargin("gsajv", "gakih")
}


2021-03-11 11:07:31,988 [main:56] - replacing ("OK", String)
2021-03-11 11:07:31,988 [main:38] - replacing "OK" String
2021-03-11 11:07:31,988 [main:42] - Getting value of type String
2021-03-11 11:07:32,085 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:32,085 [main:46] - GENERATED VALUE OF TYPE String = "sxpif"
2021-03-11 11:07:32,085 [main:49] - GENERATED IS CALL =false
2021-03-11 11:07:32,173 [main:55] - randomType = UShort
2021-03-11 11:07:32,249 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:07:32,319 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@3bf11f1c]
2021-03-11 11:07:32,319 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:07:32,402 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:32,403 [main:66] - Generated call from random type = (14720.toUShort()).toByte().toString(-1776819859)
2021-03-11 11:07:32,404 [main:94] - GETTING String from MyIterator<String>
2021-03-11 11:07:32,426 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@737d8b92]]
2021-03-11 11:07:32,426 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:32,427 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@737d8b92]
2021-03-11 11:07:32,504 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 11:07:32,597 [main:43] - GENERATING CALL OF fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 11:07:32,599 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 11:07:32,756 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Int>, Unit> false depth = 3
2021-03-11 11:07:32,756 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 11:07:32,848 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:07:32,849 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:07:33,056 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 7
2021-03-11 11:07:33,057 [main:302] - generating value of type = Unit false depth = 8
2021-03-11 11:07:33,163 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:07:33,165 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:07:33,360 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 11
2021-03-11 11:07:33,360 [main:302] - generating value of type = Unit false depth = 12
2021-03-11 11:07:33,443 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:07:33,445 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:07:33,733 [main:302] - generating value of type = Boolean true depth = 15
2021-03-11 11:07:33,733 [main:302] - generating value of type = Function0<Any> false depth = 15
2021-03-11 11:07:33,733 [main:302] - generating value of type = Any false depth = 16
2021-03-11 11:07:33,735 [main:95] - GENERATED = require(false, { })
2021-03-11 11:07:33,735 [main:95] - GENERATED = contract({ require(false, { })})
2021-03-11 11:07:33,736 [main:95] - GENERATED = contract({ contract({ require(false, { })})})
2021-03-11 11:07:33,737 [main:95] - GENERATED = buildSet<Int>({ contract({ contract({ require(false, { })})})})
2021-03-11 11:07:33,740 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().slice(buildSet<Int>({ contract({ contract({ require(false, { })})})}))
2021-03-11 11:07:33,740 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@511a13e2]]
2021-03-11 11:07:33,740 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:33,741 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@511a13e2]
2021-03-11 11:07:33,828 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:07:33,828 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:07:33,829 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().filterIndexed({a: Int, b: Char -> true})
2021-03-11 11:07:33,830 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13527e6d]]
2021-03-11 11:07:33,830 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:33,830 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13527e6d]
2021-03-11 11:07:33,914 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:33,988 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:07:33,989 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().padStart(2096441941, '㩦')
2021-03-11 11:07:33,989 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]]
2021-03-11 11:07:33,989 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:33,990 [main:105] - GENERATED CALL = (MyIterator<String>("")).next()
2021-03-11 11:07:33,990 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e94f258]]
2021-03-11 11:07:33,990 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:33,991 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e94f258]
2021-03-11 11:07:34,068 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:07:34,069 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().plus("xhhju")
2021-03-11 11:07:34,069 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78dbfd14]]
2021-03-11 11:07:34,069 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:34,069 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78dbfd14]
2021-03-11 11:07:34,145 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:07:34,220 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:34,221 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().substringBefore('謅', "slper")
2021-03-11 11:07:34,221 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a751dd4]]
2021-03-11 11:07:34,221 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:34,221 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a751dd4]
2021-03-11 11:07:34,318 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:07:34,408 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:34,486 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:34,487 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceBefore('Ԑ', "sxoql", "riyow")
2021-03-11 11:07:34,487 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69706afc]]
2021-03-11 11:07:34,487 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:34,488 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69706afc]
2021-03-11 11:07:34,488 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().uppercase()
2021-03-11 11:07:34,488 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ffa03c3]]
2021-03-11 11:07:34,488 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:34,488 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ffa03c3]
2021-03-11 11:07:34,563 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:34,564 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().takeLast(-1534717790)
2021-03-11 11:07:34,564 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15ce83a8]]
2021-03-11 11:07:34,564 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:34,564 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15ce83a8]
2021-03-11 11:07:34,635 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:07:34,710 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:34,711 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().substringAfterLast('味', "pclnk")
2021-03-11 11:07:34,712 [main:63] - replacement of "OK" of type String is (MyIterator<String>("")).next().slice(buildSet<Int>({ contract({ contract({ require(false, { })})})}))
2021-03-11 11:07:34,797 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:07:34,798 [main:66] - Compilation checking started
2021-03-11 11:07:35,132 [main:49] - Result = false
Text:
class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return (MyIterator<String>("")).next().slice(buildSet<Int>({ contract({ contract({ require(false, { })})})}))
}


2021-03-11 11:07:35,133 [main:56] - replacing ("OK", String)
2021-03-11 11:07:35,134 [main:38] - replacing "OK" String
2021-03-11 11:07:35,134 [main:42] - Getting value of type String
2021-03-11 11:07:35,231 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:35,231 [main:46] - GENERATED VALUE OF TYPE String = "bmqlm"
2021-03-11 11:07:35,231 [main:49] - GENERATED IS CALL =false
2021-03-11 11:07:35,470 [main:55] - randomType = LinkedHashSet<Char>
2021-03-11 11:07:35,544 [main:302] - generating value of type = LinkedHashSet<Char> false depth = 0
2021-03-11 11:07:35,633 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Char): LkedHashSet<Char> = TODO()
2021-03-11 11:07:35,635 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Char): LkedHashSet<Char> = TODO()
2021-03-11 11:07:35,725 [main:302] - generating value of type = Char true depth = 3
2021-03-11 11:07:35,726 [main:95] - GENERATED = linkedSetOf<Char>('࢚')
2021-03-11 11:07:35,983 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@422e3f9a]
2021-03-11 11:07:35,983 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@417df2ed]
2021-03-11 11:07:35,984 [main:66] - Generated call from random type = (linkedSetOf<Char>('࢚')).toArray().contentToString()
2021-03-11 11:07:35,985 [main:94] - GETTING String from Boolean
2021-03-11 11:07:36,001 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:07:36,001 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:07:36,075 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:07:36,076 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:07:36,151 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:36,152 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).hasNext()).compareTo(true).toString(-491308137)
2021-03-11 11:07:36,152 [main:63] - replacement of "OK" of type String is (MyIterator<UShort?>(13278.toUShort()).hasNext()).compareTo(true).toString(-491308137)
2021-03-11 11:07:36,231 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:07:36,231 [main:66] - Compilation checking started
2021-03-11 11:07:36,476 [main:49] - Result = false
Text:
class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return (MyIterator<UShort?>(13278.toUShort()).hasNext()).compareTo(true).toString(-491308137)
}


2021-03-11 11:07:36,478 [main:56] - replacing ("OK", String)
2021-03-11 11:07:36,478 [main:38] - replacing "OK" String
2021-03-11 11:07:36,479 [main:42] - Getting value of type String
2021-03-11 11:07:36,565 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:36,566 [main:46] - GENERATED VALUE OF TYPE String = "wvaar"
2021-03-11 11:07:36,566 [main:49] - GENERATED IS CALL =false
2021-03-11 11:07:37,419 [main:55] - randomType = Triple<MyIterator<Byte>, Array<String>, MyIterator<MyIterator<UInt?>>?>?
2021-03-11 11:07:37,504 [main:302] - generating value of type = Triple<MyIterator<Byte>, Array<String>, MyIterator<MyIterator<UInt?>>?> false depth = 0
2021-03-11 11:07:37,583 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: MyIterator<Byte>, second: Array<String>, third: MyIterator<MyIterator<UInt?>>?): Triple<MyIterator<Byte>, Array<String>, MyIterator<MyIterator<UInt?>>?> = TODO()
2021-03-11 11:07:37,584 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: MyIterator<Byte>, second: Array<String>, third: MyIterator<MyIterator<UInt?>>?): Triple<MyIterator<Byte>, Array<String>, MyIterator<MyIterator<UInt?>>?> = TODO()
2021-03-11 11:07:37,663 [main:302] - generating value of type = MyIterator<Byte> false depth = 3
2021-03-11 11:07:37,663 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:07:37,926 [main:194] - Type params = [Byte]
2021-03-11 11:07:38,124 [main:385] - Cant generate call of fun <A, B, C> Triple(first: MyIterator<Byte>, second: Array<String>, third: MyIterator<MyIterator<UInt?>>?): Triple<MyIterator<Byte>, Array<String>, MyIterator<MyIterator<UInt?>>?> = TODO()
2021-03-11 11:07:38,163 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@abbe7b3]
2021-03-11 11:07:38,163 [main:66] - Generated call from random type = ()?.second.contentDeepToString()
2021-03-11 11:07:38,164 [main:94] - GETTING String from UShort?
2021-03-11 11:07:38,203 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1d64adf1], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:07:38,203 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1d64adf1]
2021-03-11 11:07:38,204 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:07:38,280 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:38,280 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).next()).toByte().toString(85686502)
2021-03-11 11:07:38,281 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@148aeed], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b3d76]]
2021-03-11 11:07:38,281 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@148aeed]
2021-03-11 11:07:38,355 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:07:38,356 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b3d76]
2021-03-11 11:07:38,434 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:38,434 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).next()).div(20.toUByte()).toString(-1118228426)
2021-03-11 11:07:38,435 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@631c4e65], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:07:38,435 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@631c4e65]
2021-03-11 11:07:38,513 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:07:38,514 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:07:38,603 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:38,604 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).next()).compareTo(10.toUByte()).toString(2038764003)
2021-03-11 11:07:38,604 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@76917a4e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:07:38,604 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@76917a4e]
2021-03-11 11:07:38,604 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:07:38,688 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:38,689 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).next()).toLong().toString(-1481611443)
2021-03-11 11:07:38,689 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7f3defe2], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:07:38,689 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7f3defe2]
2021-03-11 11:07:38,689 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:07:38,767 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:38,768 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).next()).toShort().toString(543700659)
2021-03-11 11:07:38,769 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UShort): kotlin.UShort defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4d31064], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7efceb9b]]
2021-03-11 11:07:38,769 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UShort): kotlin.UShort defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4d31064]
2021-03-11 11:07:38,841 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:07:38,842 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7efceb9b]
2021-03-11 11:07:38,917 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:38,918 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).next()).and(12545.toUShort()).toString(-1926138712)
2021-03-11 11:07:38,918 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1db2ec9], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14734fe2]]
2021-03-11 11:07:38,918 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1db2ec9]
2021-03-11 11:07:38,918 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14734fe2]
2021-03-11 11:07:38,996 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:38,997 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).next()).toUByte().toString(-263832693)
2021-03-11 11:07:38,997 [main:63] - replacement of "OK" of type String is (MyIterator<UShort?>(13278.toUShort()).next()).toUByte().toString(-263832693)
2021-03-11 11:07:39,070 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:07:39,071 [main:66] - Compilation checking started
2021-03-11 11:07:39,340 [main:49] - Result = false
Text:
class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return (MyIterator<UShort?>(13278.toUShort()).next()).toUByte().toString(-263832693)
}


2021-03-11 11:07:39,341 [main:56] - replacing ("OK", String)
2021-03-11 11:07:39,341 [main:38] - replacing "OK" String
2021-03-11 11:07:39,342 [main:42] - Getting value of type String
2021-03-11 11:07:39,431 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:39,431 [main:46] - GENERATED VALUE OF TYPE String = "alezr"
2021-03-11 11:07:39,431 [main:49] - GENERATED IS CALL =false
2021-03-11 11:07:39,700 [main:55] - randomType = MyIterator<UShort?>
2021-03-11 11:07:39,772 [main:302] - generating value of type = MyIterator<UShort?> false depth = 0
2021-03-11 11:07:39,772 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:07:41,665 [main:194] - Type params = [UShort?]
2021-03-11 11:07:42,029 [main:94] - GETTING String from Boolean
2021-03-11 11:07:42,045 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:07:42,045 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:07:42,125 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:07:42,126 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:07:42,205 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:42,206 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).hasNext()).compareTo(true).toString(666306029)
2021-03-11 11:07:42,206 [main:63] - replacement of "OK" of type String is (MyIterator<UShort?>(13278.toUShort()).hasNext()).compareTo(true).toString(666306029)
2021-03-11 11:07:42,281 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:07:42,281 [main:66] - Compilation checking started
2021-03-11 11:07:42,492 [main:49] - Result = false
Text:
class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return (MyIterator<UShort?>(13278.toUShort()).hasNext()).compareTo(true).toString(666306029)
}


2021-03-11 11:07:42,493 [main:56] - replacing ("OK", String)
2021-03-11 11:07:42,493 [main:38] - replacing "OK" String
2021-03-11 11:07:42,493 [main:42] - Getting value of type String
2021-03-11 11:07:42,570 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:42,570 [main:46] - GENERATED VALUE OF TYPE String = "caqci"
2021-03-11 11:07:42,571 [main:49] - GENERATED IS CALL =false
2021-03-11 11:07:42,923 [main:55] - randomType = LinkedHashMap<MyIterator<Long>, UInt>
2021-03-11 11:07:43,000 [main:302] - generating value of type = LinkedHashMap<MyIterator<Long>, UInt> false depth = 0
2021-03-11 11:07:43,079 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<MyIterator<Long>, UInt>): LkedHashMap<MyIterator<Long>, UInt> = TODO()
2021-03-11 11:07:43,080 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<MyIterator<Long>, UInt>): LkedHashMap<MyIterator<Long>, UInt> = TODO()
2021-03-11 11:07:43,156 [main:302] - generating value of type = Pair<MyIterator<Long>, UInt> false depth = 3
2021-03-11 11:07:43,232 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: MyIterator<Long>, second: UInt): Pair<MyIterator<Long>, UInt> = TODO()
2021-03-11 11:07:43,234 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: MyIterator<Long>, second: UInt): Pair<MyIterator<Long>, UInt> = TODO()
2021-03-11 11:07:43,314 [main:302] - generating value of type = MyIterator<Long> false depth = 6
2021-03-11 11:07:43,314 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:07:43,687 [main:194] - Type params = [Long]
2021-03-11 11:07:43,837 [main:385] - Cant generate call of fun <A, B> Pair(first: MyIterator<Long>, second: UInt): Pair<MyIterator<Long>, UInt> = TODO()
2021-03-11 11:07:43,838 [main:385] - Cant generate call of fun <K, V> linkedMapOf(pairs: Pair<MyIterator<Long>, UInt>): LkedHashMap<MyIterator<Long>, UInt> = TODO()
2021-03-11 11:07:44,025 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:07:44,102 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:44,102 [main:66] - Generated call from random type = ().size.toString(400799576)
2021-03-11 11:07:44,102 [main:63] - replacement of "OK" of type String is ().size.toString(400799576)
2021-03-11 11:07:44,191 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:07:44,192 [main:66] - Compilation checking started
2021-03-11 11:07:44,193 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:07:44,193 [main:49] - Result = false
Text:
class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return ().size.toString(400799576)
}


2021-03-11 11:07:44,194 [main:56] - replacing ("OK", String)
2021-03-11 11:07:44,195 [main:38] - replacing "OK" String
2021-03-11 11:07:44,195 [main:42] - Getting value of type String
2021-03-11 11:07:44,276 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:44,277 [main:46] - GENERATED VALUE OF TYPE String = "ebgdu"
2021-03-11 11:07:44,277 [main:49] - GENERATED IS CALL =false
2021-03-11 11:07:44,527 [main:55] - randomType = MyIterator<HashMap<Byte, Boolean>>
2021-03-11 11:07:44,601 [main:302] - generating value of type = MyIterator<HashMap<Byte, Boolean>> false depth = 0
2021-03-11 11:07:44,601 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:07:45,097 [main:194] - Type params = [HashMap<Byte, Boolean>]
2021-03-11 11:07:45,281 [main:94] - GETTING String from MyIterator<String>
2021-03-11 11:07:45,298 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1deb4c2e]]
2021-03-11 11:07:45,298 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:45,299 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1deb4c2e]
2021-03-11 11:07:45,385 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:07:45,471 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:45,472 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().substringAfter('', "gsddx")
2021-03-11 11:07:45,473 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b733ed6]]
2021-03-11 11:07:45,473 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:45,473 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b733ed6]
2021-03-11 11:07:45,554 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:07:45,554 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:07:45,555 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().takeLastWhile({a: Char -> true})
2021-03-11 11:07:45,555 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc499be]]
2021-03-11 11:07:45,556 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:45,556 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc499be]
2021-03-11 11:07:45,636 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:07:45,715 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:45,716 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().substringBeforeLast('밖', "qeqcg")
2021-03-11 11:07:45,716 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79bc24de]]
2021-03-11 11:07:45,716 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:45,716 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79bc24de]
2021-03-11 11:07:45,794 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:07:45,798 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().removeSurrounding("vjdme")
2021-03-11 11:07:45,799 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78dbfd14]]
2021-03-11 11:07:45,799 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:45,799 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78dbfd14]
2021-03-11 11:07:45,877 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:07:45,966 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:45,967 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().substringBefore('ጪ', "jmgrn")
2021-03-11 11:07:45,967 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d6a0eb9]]
2021-03-11 11:07:45,967 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:45,967 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d6a0eb9]
2021-03-11 11:07:46,051 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:46,052 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().trimMargin("yflpe")
2021-03-11 11:07:46,052 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@328717da]]
2021-03-11 11:07:46,052 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:46,053 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@328717da]
2021-03-11 11:07:46,131 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:07:46,131 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:07:46,132 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().filter({a: Char -> false})
2021-03-11 11:07:46,132 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@642616bc]]
2021-03-11 11:07:46,132 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:46,132 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@642616bc]
2021-03-11 11:07:46,133 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().toUpperCase()
2021-03-11 11:07:46,133 [main:101] - Case = [public final val v: kotlin.String defined in MyIterator[PropertyDescriptorImpl@4c4add5e]]
2021-03-11 11:07:46,133 [main:105] - GENERATED CALL = (MyIterator<String>("")).v
2021-03-11 11:07:46,133 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ede372]]
2021-03-11 11:07:46,133 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:46,133 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ede372]
2021-03-11 11:07:46,133 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().capitalize()
2021-03-11 11:07:46,133 [main:63] - replacement of "OK" of type String is (MyIterator<String>("")).next().takeLastWhile({a: Char -> true})
2021-03-11 11:07:46,206 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:07:46,206 [main:66] - Compilation checking started
2021-03-11 11:07:46,413 [main:49] - Result = false
Text:
class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return (MyIterator<String>("")).next().takeLastWhile({a: Char -> true})
}


2021-03-11 11:07:46,414 [main:56] - replacing ("OK", String)
2021-03-11 11:07:46,414 [main:38] - replacing "OK" String
2021-03-11 11:07:46,414 [main:42] - Getting value of type String
2021-03-11 11:07:46,497 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:46,498 [main:46] - GENERATED VALUE OF TYPE String = "mncsu"
2021-03-11 11:07:46,498 [main:49] - GENERATED IS CALL =false
2021-03-11 11:07:46,749 [main:55] - randomType = ArrayDeque<MyIterator<Double>>
2021-03-11 11:07:46,831 [main:302] - generating value of type = ArrayDeque<MyIterator<Double>> false depth = 0
2021-03-11 11:07:46,913 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<MyIterator<Double>> = TODO()
2021-03-11 11:07:46,914 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<MyIterator<Double>> = TODO()
2021-03-11 11:07:47,067 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:07:47,068 [main:95] - GENERATED = ArrayDeque<MyIterator<Double>>(1740895480)
2021-03-11 11:07:47,292 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1e259e2d]
2021-03-11 11:07:47,366 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:07:47,441 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:07:47,442 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:07:47,649 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 11:07:47,653 [main:95] - GENERATED = StringBuilder("cguwa")
2021-03-11 11:07:47,730 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:07:47,808 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:07:47,809 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:07:47,964 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:07:47,964 [main:95] - GENERATED = StringBuilder("crgoi")
2021-03-11 11:07:48,035 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:07:48,131 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:48,211 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:07:48,295 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:07:48,296 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:07:48,448 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 11:07:48,525 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:07:48,526 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:07:48,710 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-11 11:07:48,715 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-11 11:07:48,715 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder()))
2021-03-11 11:07:48,790 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 11:07:48,790 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:07:48,871 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:07:48,872 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:07:49,025 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:07:49,026 [main:95] - GENERATED = StringBuilder(701836342)
2021-03-11 11:07:49,026 [main:66] - Generated call from random type = (ArrayDeque<MyIterator<Double>>(1740895480)).joinToString(StringBuilder("cguwa"), StringBuilder("crgoi"), "mbefj", 379138689, StringBuilder(StringBuilder(StringBuilder())), {a: T -> StringBuilder(701836342)})
2021-03-11 11:07:49,027 [main:94] - GETTING String from MyIterator<String>
2021-03-11 11:07:49,044 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e2539ae]]
2021-03-11 11:07:49,044 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:49,044 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e2539ae]
2021-03-11 11:07:49,044 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().trim()
2021-03-11 11:07:49,045 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b2dbc56]]
2021-03-11 11:07:49,045 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:49,045 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b2dbc56]
2021-03-11 11:07:49,122 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:07:49,122 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:07:49,123 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().filterNot({a: Char -> true})
2021-03-11 11:07:49,123 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2485cd4a]]
2021-03-11 11:07:49,123 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:49,123 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2485cd4a]
2021-03-11 11:07:49,124 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().reversed()
2021-03-11 11:07:49,124 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ede372]]
2021-03-11 11:07:49,124 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:49,124 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ede372]
2021-03-11 11:07:49,124 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().capitalize()
2021-03-11 11:07:49,124 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78dbfd14]]
2021-03-11 11:07:49,124 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:49,125 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78dbfd14]
2021-03-11 11:07:49,199 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:07:49,289 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:49,290 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().substringBefore('♲', "jbzdi")
2021-03-11 11:07:49,290 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284d703b]]
2021-03-11 11:07:49,290 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:49,290 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284d703b]
2021-03-11 11:07:49,368 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:07:49,374 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().removePrefix(StringBuilder())
2021-03-11 11:07:49,375 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e7e1ee]]
2021-03-11 11:07:49,375 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:49,375 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e7e1ee]
2021-03-11 11:07:49,375 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().decapitalize()
2021-03-11 11:07:49,375 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b2fa201]]
2021-03-11 11:07:49,375 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:49,376 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b2fa201]
2021-03-11 11:07:49,455 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:49,455 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceIndent("ytlvc")
2021-03-11 11:07:49,456 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d6a0eb9]]
2021-03-11 11:07:49,456 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:49,456 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d6a0eb9]
2021-03-11 11:07:49,530 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:49,531 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().trimMargin("zfkfk")
2021-03-11 11:07:49,531 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@511a13e2]]
2021-03-11 11:07:49,531 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@30132d0a]
2021-03-11 11:07:49,532 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@511a13e2]
2021-03-11 11:07:49,607 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:07:49,607 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:07:49,608 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().filterIndexed({a: Int, b: Char -> false})
2021-03-11 11:07:49,608 [main:63] - replacement of "OK" of type String is (MyIterator<String>("")).next().reversed()
2021-03-11 11:07:49,681 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:07:49,681 [main:66] - Compilation checking started
2021-03-11 11:07:49,908 [main:49] - Result = false
Text:
class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return (MyIterator<String>("")).next().reversed()
}


2021-03-11 11:07:49,909 [main:56] - replacing ("OK", String)
2021-03-11 11:07:49,909 [main:38] - replacing "OK" String
2021-03-11 11:07:49,909 [main:42] - Getting value of type String
2021-03-11 11:07:50,002 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:07:50,002 [main:46] - GENERATED VALUE OF TYPE String = "vdpue"
2021-03-11 11:07:50,002 [main:49] - GENERATED IS CALL =false
2021-03-11 11:07:50,174 [main:55] - randomType = MyIterator<Char>
2021-03-11 11:07:50,252 [main:302] - generating value of type = MyIterator<Char> false depth = 0
2021-03-11 11:07:50,252 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:07:50,597 [main:194] - Type params = [Char]
2021-03-11 11:07:50,779 [main:137] - GENERATING call of type public open fun next(): kotlin.Char defined in MyIterator[SimpleFunctionDescriptorImpl@1380d514]
2021-03-11 11:07:50,779 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]
2021-03-11 11:07:50,779 [main:66] - Generated call from random type = ().next().lowercase()
2021-03-11 11:07:50,780 [main:94] - GETTING String from Boolean
2021-03-11 11:07:50,789 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:07:50,789 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:07:50,861 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:07:50,861 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:07:50,935 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:07:50,935 [main:105] - GENERATED CALL = (MyIterator<UShort?>(13278.toUShort()).hasNext()).compareTo(false).toString(535495590)
2021-03-11 11:07:50,936 [main:63] - replacement of "OK" of type String is (MyIterator<UShort?>(13278.toUShort()).hasNext()).compareTo(false).toString(535495590)
2021-03-11 11:07:51,011 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:07:51,012 [main:66] - Compilation checking started
2021-03-11 11:07:51,217 [main:49] - Result = false
Text:
class MyIterator<T>(val v: MyIterator<Int>): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return (MyIterator<UShort?>(13278.toUShort()).hasNext()).compareTo(false).toString(535495590)
}


2021-03-11 11:07:51,332 [main:46] - AFTER TRY 0 res = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}
2021-03-11 11:07:51,496 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:07:51,902 [main:194] - Type params = [Double]
2021-03-11 11:07:52,081 [main:302] - generating value of type = Double true depth = 1
2021-03-11 11:07:52,241 [main:48] - Try №0
2021-03-11 11:08:04,277 [main:48] - Already checked
2021-03-11 11:08:08,574 [main:71] - Trying to insert override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }
2021-03-11 11:08:08,810 [main:66] - Compilation checking started
2021-03-11 11:08:10,054 [main:99] - Trying to change 147 nodes
2021-03-11 11:08:10,057 [main:103] - replacing ({ error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-11 11:08:10,057 [main:38] - replacing { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-11 11:08:10,057 [main:42] - Getting value of type Function0<Nothing>
2021-03-11 11:08:10,234 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 11:08:10,236 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 11:08:10,417 [main:43] - GENERATING CALL OF fun error(message: kotlin.Any): Nothg = TODO()
2021-03-11 11:08:10,419 [main:61] - WITHOUT TYPE PARAMS = fun error(message: kotlin.Any): Nothg = TODO()
2021-03-11 11:08:10,848 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:08:10,848 [main:95] - GENERATED = error("ftwfa")
2021-03-11 11:08:10,849 [main:46] - GENERATED VALUE OF TYPE Function0<Nothing> = { error("ftwfa")}
2021-03-11 11:08:10,849 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:10,859 [main:55] - randomType = Kla2
2021-03-11 11:08:11,028 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 11:08:11,030 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 11:08:11,063 [main:94] - GETTING Function0<Nothing> from Double
2021-03-11 11:08:11,125 [main:94] - GETTING Function0<Nothing> from Boolean
2021-03-11 11:08:11,140 [main:94] - GETTING Function0<Nothing> from MyIterator<String>
2021-03-11 11:08:11,158 [main:94] - GETTING Function0<Nothing> from Double
2021-03-11 11:08:11,159 [main:110] - replacement of { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) } of type Function0<Nothing> is { error("ftwfa")}
2021-03-11 11:08:11,321 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:08:11,321 [main:66] - Compilation checking started
2021-03-11 11:08:12,086 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException("OK")
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { e.message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:12,088 [main:103] - replacing (prope2.getOrThrow(), Any?)
2021-03-11 11:08:12,088 [main:38] - replacing prope2.getOrThrow() Any?
2021-03-11 11:08:12,088 [main:42] - Getting value of type Any?
2021-03-11 11:08:12,231 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:12,232 [main:46] - GENERATED VALUE OF TYPE Any? = "yyihh"
2021-03-11 11:08:12,232 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:12,633 [main:55] - randomType = Kla3<Kla6>
2021-03-11 11:08:12,796 [main:302] - generating value of type = Kla3<Kla6> false depth = 0
2021-03-11 11:08:12,797 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:08:13,765 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:08:13,824 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:08:13,853 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:08:13,880 [main:94] - GETTING Any? from Double
2021-03-11 11:08:13,953 [main:94] - GETTING Any? from Boolean
2021-03-11 11:08:13,975 [main:94] - GETTING Any? from Double
2021-03-11 11:08:13,975 [main:110] - replacement of prope2.getOrThrow() of type Any? is "yyihh"
2021-03-11 11:08:14,120 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:08:14,120 [main:66] - Compilation checking started
2021-03-11 11:08:14,852 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException("OK")
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { e.message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:14,854 [main:103] - replacing (isSuccess, Boolean)
2021-03-11 11:08:14,855 [main:38] - replacing isSuccess Boolean
2021-03-11 11:08:14,855 [main:42] - Getting value of type Boolean
2021-03-11 11:08:15,010 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:15,011 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:08:15,011 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:15,168 [main:55] - randomType = Kla6
2021-03-11 11:08:15,299 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 11:08:15,301 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:08:15,332 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@6496216d]
2021-03-11 11:08:15,487 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:15,487 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:08:15,627 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:15,628 [main:66] - Generated call from random type = (Kla6).equals("avnwc").equals("cndrg")
2021-03-11 11:08:15,628 [main:94] - GETTING Boolean from Boolean
2021-03-11 11:08:15,643 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:08:15,643 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:08:15,782 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:15,782 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:08:15,919 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:15,920 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("shdcb").or(true)
2021-03-11 11:08:15,921 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:08:15,921 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:08:16,066 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:16,067 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)
2021-03-11 11:08:16,067 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:08:16,068 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:08:16,211 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:16,211 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:08:16,343 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:16,344 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("egitk").equals("bcavp")
2021-03-11 11:08:16,344 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]]
2021-03-11 11:08:16,344 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:08:16,484 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:16,487 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]
2021-03-11 11:08:16,700 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:16,700 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).equals("nzqej")
2021-03-11 11:08:16,700 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:08:16,700 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:08:16,897 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:16,897 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("ttctp")
2021-03-11 11:08:16,898 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:08:16,898 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:08:17,040 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:17,041 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:08:17,183 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:17,185 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("ogrhp").and(false)
2021-03-11 11:08:17,185 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:08:17,185 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:08:17,341 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:17,343 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).or(false)
2021-03-11 11:08:17,343 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:08:17,343 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:08:17,476 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:17,478 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).and(false)
2021-03-11 11:08:17,478 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:08:17,478 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:08:17,613 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:17,614 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:08:17,614 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("efvkk").not()
2021-03-11 11:08:17,614 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:08:17,614 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:08:17,614 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).not()
2021-03-11 11:08:17,614 [main:110] - replacement of isSuccess of type Boolean is (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).equals("nzqej")
2021-03-11 11:08:17,751 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:08:17,753 [main:103] - replacing (e, RuntimeException)
2021-03-11 11:08:17,754 [main:38] - replacing e RuntimeException
2021-03-11 11:08:17,754 [main:42] - Getting value of type RuntimeException
2021-03-11 11:08:17,920 [main:302] - generating value of type = RuntimeException false depth = 0
2021-03-11 11:08:17,925 [main:46] - GENERATED VALUE OF TYPE RuntimeException = RuntimeException()
2021-03-11 11:08:17,926 [main:49] - GENERATED IS CALL =true
2021-03-11 11:08:18,296 [main:55] - randomType = Collection<Int>
2021-03-11 11:08:18,302 [main:94] - GETTING RuntimeException from Boolean
2021-03-11 11:08:18,319 [main:94] - GETTING RuntimeException from Double
2021-03-11 11:08:18,375 [main:94] - GETTING RuntimeException from Double
2021-03-11 11:08:18,376 [main:94] - GETTING RuntimeException from MyIterator<String>
2021-03-11 11:08:18,395 [main:110] - replacement of e of type RuntimeException is RuntimeException()
2021-03-11 11:08:18,519 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:08:18,519 [main:66] - Compilation checking started
2021-03-11 11:08:19,384 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException("OK")
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:19,387 [main:103] - replacing (prope2, Result<Ty0>)
2021-03-11 11:08:19,387 [main:38] - replacing prope2 Result<Ty0>
2021-03-11 11:08:19,387 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:08:19,539 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:08:19,718 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:08:19,723 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:08:20,146 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:08:20,146 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:08:20,151 [main:55] - randomType = Kla5
2021-03-11 11:08:20,297 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:08:20,298 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:08:20,312 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:08:20,369 [main:94] - GETTING Result<Ty0> from MyIterator<String>
2021-03-11 11:08:20,392 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:08:20,394 [main:94] - GETTING Result<Ty0> from Boolean
2021-03-11 11:08:20,407 [main:107] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-11 11:08:20,407 [main:103] - replacing (Kla4(), Kla4)
2021-03-11 11:08:20,407 [main:38] - replacing Kla4() Kla4
2021-03-11 11:08:20,407 [main:42] - Getting value of type Kla4
2021-03-11 11:08:20,543 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:08:20,544 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-11 11:08:20,545 [main:46] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 11:08:20,545 [main:49] - GENERATED IS CALL =true
2021-03-11 11:08:22,094 [main:55] - randomType = Function1<Function2<Byte, String, Int>, Function2<Short, Kla0, Kla3<MyIterator<Byte>>?>>
2021-03-11 11:08:22,096 [main:94] - GETTING Kla4 from Double
2021-03-11 11:08:22,153 [main:94] - GETTING Kla4 from Double
2021-03-11 11:08:22,155 [main:94] - GETTING Kla4 from MyIterator<String>
2021-03-11 11:08:22,179 [main:94] - GETTING Kla4 from Boolean
2021-03-11 11:08:22,197 [main:110] - replacement of Kla4() of type Kla4 is Kla4()
2021-03-11 11:08:22,335 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:08:22,338 [main:103] - replacing (i, Int)
2021-03-11 11:08:22,339 [main:38] - replacing i Int
2021-03-11 11:08:22,339 [main:42] - Getting value of type Int
2021-03-11 11:08:22,469 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:08:22,471 [main:46] - GENERATED VALUE OF TYPE Int = -1531971050
2021-03-11 11:08:22,471 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:22,635 [main:55] - randomType = Float
2021-03-11 11:08:22,767 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:08:22,829 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@55621e8]
2021-03-11 11:08:23,029 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:08:23,032 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c20848b]
2021-03-11 11:08:23,228 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:08:23,230 [main:66] - Generated call from random type = (0.6589577f).compareTo(-126).and(1082592993)
2021-03-11 11:08:23,230 [main:110] - replacement of i of type Int is (0.6589577f).compareTo(-126).and(1082592993)
2021-03-11 11:08:23,389 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:08:23,389 [main:66] - Compilation checking started
2021-03-11 11:08:24,066 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException("OK")
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:24,068 [main:103] - replacing (false, Boolean)
2021-03-11 11:08:24,068 [main:38] - replacing false Boolean
2021-03-11 11:08:24,068 [main:42] - Getting value of type Boolean
2021-03-11 11:08:24,192 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:24,193 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:08:24,194 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:25,050 [main:55] - randomType = Triple<Kla2?, Byte?, Function1<Double, Kla2>>
2021-03-11 11:08:25,167 [main:302] - generating value of type = Triple<Kla2?, Byte?, Function1<Double, Kla2>> false depth = 0
2021-03-11 11:08:25,297 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla2?, second: Byte?, third: Function1<Double, Kla2>): Triple<Kla2?, Byte?, Function1<Double, Kla2>> = TODO()
2021-03-11 11:08:25,299 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla2?, second: Byte?, third: Function1<Double, Kla2>): Triple<Kla2?, Byte?, Function1<Double, Kla2>> = TODO()
2021-03-11 11:08:25,425 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 11:08:25,427 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}
2021-03-11 11:08:25,427 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 11:08:25,428 [main:302] - generating value of type = Function1<Double, Kla2> false depth = 3
2021-03-11 11:08:25,429 [main:302] - generating value of type = Kla2 false depth = 4
2021-03-11 11:08:25,430 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}
2021-03-11 11:08:25,431 [main:95] - GENERATED = Triple<Kla2?, Byte?, Function1<Double, Kla2>>(Kla2(), 123, {a: Double -> Kla2()})
2021-03-11 11:08:25,455 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor@253c489f]
2021-03-11 11:08:25,575 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:25,576 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:08:25,694 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:25,695 [main:66] - Generated call from random type = (Triple<Kla2?, Byte?, Function1<Double, Kla2>>(Kla2(), 123, {a: Double -> Kla2()})).equals("airhi").or(false)
2021-03-11 11:08:25,696 [main:94] - GETTING Boolean from Double
2021-03-11 11:08:25,734 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a35fbda]]
2021-03-11 11:08:25,734 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:08:25,734 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a35fbda]
2021-03-11 11:08:25,734 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
2021-03-11 11:08:25,734 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]]
2021-03-11 11:08:25,734 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:08:25,734 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:08:25,857 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:25,858 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toDouble().equals("qdmjn")
2021-03-11 11:08:25,858 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:08:25,858 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:08:25,989 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:25,989 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:08:26,152 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:26,154 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("nhdaf").and(true)
2021-03-11 11:08:26,155 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]]
2021-03-11 11:08:26,155 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:08:26,321 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:08:26,322 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]
2021-03-11 11:08:26,445 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:26,445 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(-92).equals("tyrot")
2021-03-11 11:08:26,445 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@36288e31]]
2021-03-11 11:08:26,446 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:08:26,446 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@36288e31]
2021-03-11 11:08:26,572 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:26,573 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toShort().equals("nxpnn")
2021-03-11 11:08:26,573 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b184a6]]
2021-03-11 11:08:26,573 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:08:26,573 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b184a6]
2021-03-11 11:08:26,573 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().isUpperCase()
2021-03-11 11:08:26,573 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]]
2021-03-11 11:08:26,573 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:08:26,573 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]
2021-03-11 11:08:26,696 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:26,696 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toFloat().equals("xrpuk")
2021-03-11 11:08:26,696 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@67029450]]
2021-03-11 11:08:26,696 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:08:26,696 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@67029450]
2021-03-11 11:08:26,823 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:26,823 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toLong().equals("sonmz")
2021-03-11 11:08:26,823 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:08:26,823 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:08:26,941 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:26,941 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:08:27,064 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:27,065 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("hndpw").xor(true)
2021-03-11 11:08:27,065 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:08:27,065 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:08:27,183 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:27,183 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:08:27,184 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("ptekl").not()
2021-03-11 11:08:27,184 [main:110] - replacement of false of type Boolean is (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
2021-03-11 11:08:27,332 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:08:27,332 [main:66] - Compilation checking started
2021-03-11 11:08:28,016 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException("OK")
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:28,018 [main:103] - replacing ("\n", String)
2021-03-11 11:08:28,019 [main:38] - replacing "\n" String
2021-03-11 11:08:28,019 [main:42] - Getting value of type String
2021-03-11 11:08:28,145 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:08:28,147 [main:46] - GENERATED VALUE OF TYPE String = "irohu"
2021-03-11 11:08:28,147 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:28,304 [main:55] - randomType = HashMap<Boolean, String>
2021-03-11 11:08:28,441 [main:302] - generating value of type = HashMap<Boolean, String> false depth = 0
2021-03-11 11:08:28,598 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashMap<Boolean, String> = TODO()
2021-03-11 11:08:28,601 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashMap<Boolean, String> = TODO()
2021-03-11 11:08:29,019 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:08:29,021 [main:302] - generating value of type = Float true depth = 3
2021-03-11 11:08:29,023 [main:95] - GENERATED = HashMap<Boolean, String>(1626922556, 0.6006838f)
2021-03-11 11:08:29,177 [main:137] - GENERATING call of type public open fun remove(key: kotlin.Boolean): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@2fe2ac48]
2021-03-11 11:08:29,302 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:29,304 [main:66] - Generated call from random type = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!
2021-03-11 11:08:29,304 [main:110] - replacement of "\n" of type String is (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!
2021-03-11 11:08:29,436 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(POSTFIX_EXPRESSION)
2021-03-11 11:08:29,437 [main:66] - Compilation checking started
2021-03-11 11:08:30,278 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException("OK")
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:30,281 [main:103] - replacing (true, Boolean)
2021-03-11 11:08:30,281 [main:38] - replacing true Boolean
2021-03-11 11:08:30,281 [main:42] - Getting value of type Boolean
2021-03-11 11:08:30,439 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:30,442 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:08:30,443 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:30,446 [main:55] - randomType = Double
2021-03-11 11:08:30,583 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:08:30,640 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]
2021-03-11 11:08:30,640 [main:66] - Generated call from random type = (0.8904588610665225).isNaN()
2021-03-11 11:08:30,641 [main:94] - GETTING Boolean from MyIterator<String>
2021-03-11 11:08:30,661 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:08:30,661 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0]
2021-03-11 11:08:30,800 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:30,800 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:08:30,937 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:30,940 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals("qnuhn").xor(true)
2021-03-11 11:08:30,940 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:08:30,940 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:08:30,941 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:08:30,941 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().not()
2021-03-11 11:08:30,941 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:08:30,941 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0]
2021-03-11 11:08:31,077 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:08:31,078 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals(null).not()
2021-03-11 11:08:31,078 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:08:31,078 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0]
2021-03-11 11:08:31,225 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:31,226 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:08:31,352 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:31,355 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals("bvmhi").and(false)
2021-03-11 11:08:31,355 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:08:31,356 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:08:31,356 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:08:31,487 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:31,490 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().and(true)
2021-03-11 11:08:31,490 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:08:31,490 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0]
2021-03-11 11:08:31,626 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:31,626 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:08:31,771 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:31,772 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals("fbdir").equals("vucne")
2021-03-11 11:08:31,772 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:08:31,772 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:08:31,773 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:08:31,916 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:31,918 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().xor(false)
2021-03-11 11:08:31,918 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]]
2021-03-11 11:08:31,918 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:08:31,918 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]
2021-03-11 11:08:32,052 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:32,052 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().equals("rwyri")
2021-03-11 11:08:32,052 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:08:32,052 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0]
2021-03-11 11:08:32,183 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:08:32,183 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:08:32,338 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:32,341 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals("zfvhj").or(false)
2021-03-11 11:08:32,342 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e7b42d3]]
2021-03-11 11:08:32,342 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:08:32,342 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e7b42d3]
2021-03-11 11:08:32,487 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:08:32,619 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:08:32,622 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().startsWith("llxkx", true)
2021-03-11 11:08:32,623 [main:110] - replacement of true of type Boolean is (MyIterator<String>("")).next().startsWith("llxkx", true)
2021-03-11 11:08:32,795 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:08:32,795 [main:66] - Compilation checking started
2021-03-11 11:08:33,589 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException("OK")
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:33,592 [main:103] - replacing (prope2, Result<Ty0>)
2021-03-11 11:08:33,592 [main:38] - replacing prope2 Result<Ty0>
2021-03-11 11:08:33,592 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:08:33,731 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:08:33,872 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:08:33,877 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:08:34,152 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:08:34,153 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:08:34,914 [main:55] - randomType = Map<Char, ArrayList<UByte>>?
2021-03-11 11:08:34,915 [main:94] - GETTING Result<Ty0> from Boolean
2021-03-11 11:08:34,930 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:08:34,979 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:08:34,980 [main:94] - GETTING Result<Ty0> from MyIterator<String>
2021-03-11 11:08:34,997 [main:107] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-11 11:08:34,997 [main:103] - replacing (Kla1, Kla7)
2021-03-11 11:08:34,997 [main:38] - replacing Kla1 Kla7
2021-03-11 11:08:34,997 [main:42] - Getting value of type Kla7
2021-03-11 11:08:35,136 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-11 11:08:35,138 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-11 11:08:35,139 [main:46] - GENERATED VALUE OF TYPE Kla7 = 
2021-03-11 11:08:35,147 [main:55] - randomType = Kla4
2021-03-11 11:08:35,293 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:08:35,295 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}
2021-03-11 11:08:35,303 [main:94] - GETTING Kla7 from MyIterator<String>
2021-03-11 11:08:35,325 [main:94] - GETTING Kla7 from Boolean
2021-03-11 11:08:35,340 [main:94] - GETTING Kla7 from Double
2021-03-11 11:08:35,398 [main:94] - GETTING Kla7 from Double
2021-03-11 11:08:35,398 [main:107] - Cant find and generate replacement for Kla1 type Kla7
2021-03-11 11:08:35,398 [main:103] - replacing (prope6, Function0<Unit>)
2021-03-11 11:08:35,398 [main:38] - replacing prope6 Function0<Unit>
2021-03-11 11:08:35,398 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:08:35,528 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:08:35,530 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:08:35,536 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:08:35,536 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:35,728 [main:55] - randomType = Char
2021-03-11 11:08:35,888 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:08:35,932 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:08:35,952 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:08:36,016 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:08:36,017 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:08:36,037 [main:110] - replacement of prope6 of type Function0<Unit> is { println()}
2021-03-11 11:08:36,161 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:08:36,162 [main:66] - Compilation checking started
2021-03-11 11:08:36,657 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException("OK")
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        { println()} = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:36,661 [main:103] - replacing (prope4, Int)
2021-03-11 11:08:36,661 [main:38] - replacing prope4 Int
2021-03-11 11:08:36,661 [main:42] - Getting value of type Int
2021-03-11 11:08:36,816 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:08:36,817 [main:46] - GENERATED VALUE OF TYPE Int = 71804566
2021-03-11 11:08:36,818 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:37,762 [main:55] - randomType = Function2<Function2<Int?, String, Kla1>, Triple<String, Kla0, UByte>, Byte>
2021-03-11 11:08:37,763 [main:94] - GETTING Int from Double
2021-03-11 11:08:37,819 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@27eb1cda]]
2021-03-11 11:08:37,819 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:08:37,957 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:08:37,960 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).compareTo(-82).absoluteValue
2021-03-11 11:08:37,961 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c365670]]
2021-03-11 11:08:37,961 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:08:38,095 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:08:38,097 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c365670]
2021-03-11 11:08:38,230 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:08:38,232 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).compareTo(7).plus(-125)
2021-03-11 11:08:38,232 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41b92ef5]]
2021-03-11 11:08:38,232 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:08:38,232 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41b92ef5]
2021-03-11 11:08:38,364 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:08:38,366 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toInt().ushr(-720417306)
2021-03-11 11:08:38,367 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@bf06203]]
2021-03-11 11:08:38,367 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:08:38,367 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@bf06203]
2021-03-11 11:08:38,367 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toShort().toInt()
2021-03-11 11:08:38,367 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a9358ae]]
2021-03-11 11:08:38,367 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:08:38,367 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a9358ae]
2021-03-11 11:08:38,367 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toInt().countOneBits()
2021-03-11 11:08:38,367 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@571850c]]
2021-03-11 11:08:38,367 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:08:38,367 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@571850c]
2021-03-11 11:08:38,368 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toInt().unaryMinus()
2021-03-11 11:08:38,368 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c81bb16]]
2021-03-11 11:08:38,368 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:08:38,554 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:08:38,557 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c81bb16]
2021-03-11 11:08:38,711 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:08:38,714 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).compareTo(99).compareTo(-69)
2021-03-11 11:08:38,714 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3b6fa3f]]
2021-03-11 11:08:38,714 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:08:38,714 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3b6fa3f]
2021-03-11 11:08:38,857 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:08:38,860 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toShort().div(-118)
2021-03-11 11:08:38,860 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2f8fefc6]]
2021-03-11 11:08:38,860 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:08:38,860 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2f8fefc6]
2021-03-11 11:08:38,860 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toByte().unaryPlus()
2021-03-11 11:08:38,860 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]]
2021-03-11 11:08:38,861 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:08:38,997 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:08:38,999 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]
2021-03-11 11:08:38,999 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).compareTo(113).toInt()
2021-03-11 11:08:38,999 [main:110] - replacement of prope4 of type Int is (MyIterator<Double>(0.6816303970923716).v).compareTo(113).toInt()
2021-03-11 11:08:39,118 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:08:39,118 [main:66] - Compilation checking started
2021-03-11 11:08:39,523 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException("OK")
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        (MyIterator<Double>(0.6816303970923716).v).compareTo(113).toInt()++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:39,525 [main:103] - replacing (prope1, Kla5)
2021-03-11 11:08:39,525 [main:38] - replacing prope1 Kla5
2021-03-11 11:08:39,525 [main:42] - Getting value of type Kla5
2021-03-11 11:08:39,660 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:08:39,662 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:08:39,662 [main:46] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 11:08:39,663 [main:49] - GENERATED IS CALL =true
2021-03-11 11:08:40,001 [main:55] - randomType = Function2<Byte, Kla1, Kla2>
2021-03-11 11:08:40,002 [main:94] - GETTING Kla5 from Double
2021-03-11 11:08:40,059 [main:94] - GETTING Kla5 from MyIterator<String>
2021-03-11 11:08:40,081 [main:94] - GETTING Kla5 from Double
2021-03-11 11:08:40,082 [main:94] - GETTING Kla5 from Boolean
2021-03-11 11:08:40,098 [main:110] - replacement of prope1 of type Kla5 is Kla5()
2021-03-11 11:08:40,233 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:08:40,234 [main:66] - Compilation checking started
2021-03-11 11:08:41,035 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException("OK")
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            Kla5().prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:41,037 [main:103] - replacing (it, Continuation<Unit>)
2021-03-11 11:08:41,038 [main:38] - replacing it Continuation<Unit>
2021-03-11 11:08:41,038 [main:42] - Getting value of type Continuation<Unit>
2021-03-11 11:08:41,186 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 11:08:41,347 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:08:41,350 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:08:41,819 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:08:41,947 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:08:41,950 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:08:42,294 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:08:42,448 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:08:42,452 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:08:43,060 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:08:43,060 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:08:43,060 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:08:43,060 [main:46] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 11:08:43,067 [main:55] - randomType = Kla5
2021-03-11 11:08:43,210 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:08:43,212 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:08:43,225 [main:94] - GETTING Continuation<Unit> from Double
2021-03-11 11:08:43,277 [main:94] - GETTING Continuation<Unit> from MyIterator<String>
2021-03-11 11:08:43,297 [main:94] - GETTING Continuation<Unit> from Double
2021-03-11 11:08:43,299 [main:94] - GETTING Continuation<Unit> from Boolean
2021-03-11 11:08:43,312 [main:107] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-11 11:08:43,312 [main:103] - replacing ({
            Kla5().prope5 = true
        }, Function0<Unit>)
2021-03-11 11:08:43,313 [main:38] - replacing {
            Kla5().prope5 = true
        } Function0<Unit>
2021-03-11 11:08:43,313 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:08:43,434 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:08:43,436 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:08:43,566 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:08:43,569 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:08:43,861 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:08:43,862 [main:95] - GENERATED = println("wqmkq")
2021-03-11 11:08:43,862 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("wqmkq")}
2021-03-11 11:08:43,863 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:43,873 [main:55] - randomType = Kla5
2021-03-11 11:08:44,002 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:08:44,004 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:08:44,014 [main:66] - Generated call from random type = (Kla5()).prope6
2021-03-11 11:08:44,016 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:08:44,072 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:08:44,089 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:08:44,110 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:08:44,110 [main:110] - replacement of {
            Kla5().prope5 = true
        } of type Function0<Unit> is (Kla5()).prope6
2021-03-11 11:08:44,238 [main:33] - Trying to replace LAMBDA_EXPRESSION on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:08:44,239 [main:66] - Compilation checking started
2021-03-11 11:08:44,908 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException("OK")
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:44,911 [main:103] - replacing (numberOfSuspensions, Int)
2021-03-11 11:08:44,911 [main:38] - replacing numberOfSuspensions Int
2021-03-11 11:08:44,911 [main:42] - Getting value of type Int
2021-03-11 11:08:45,160 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:08:45,163 [main:46] - GENERATED VALUE OF TYPE Int = -1049934825
2021-03-11 11:08:45,163 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:45,804 [main:55] - randomType = LinkedHashSet<ArrayList<MyIterator<Kla2?>>>
2021-03-11 11:08:45,929 [main:302] - generating value of type = LinkedHashSet<ArrayList<MyIterator<Kla2?>>> false depth = 0
2021-03-11 11:08:46,052 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<ArrayList<MyIterator<Kla2?>>> = TODO()
2021-03-11 11:08:46,054 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<ArrayList<MyIterator<Kla2?>>> = TODO()
2021-03-11 11:08:46,318 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:08:46,320 [main:95] - GENERATED = LinkedHashSet<ArrayList<MyIterator<Kla2?>>>(2097711211)
2021-03-11 11:08:46,557 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5006f340]
2021-03-11 11:08:46,682 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 11:08:46,684 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:08:46,687 [main:66] - Generated call from random type = (LinkedHashSet<ArrayList<MyIterator<Kla2?>>>(2097711211)).indexOfFirst({a: T -> false})
2021-03-11 11:08:46,688 [main:110] - replacement of numberOfSuspensions of type Int is (LinkedHashSet<ArrayList<MyIterator<Kla2?>>>(2097711211)).indexOfFirst({a: T -> false})
2021-03-11 11:08:46,806 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:08:46,807 [main:66] - Compilation checking started
2021-03-11 11:08:47,185 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException("OK")
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(LinkedHashSet<ArrayList<MyIterator<Kla2?>>>(2097711211)).indexOfFirst({a: T -> false})) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:47,188 [main:103] - replacing (prope2, Result<Ty0>)
2021-03-11 11:08:47,188 [main:38] - replacing prope2 Result<Ty0>
2021-03-11 11:08:47,188 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:08:47,303 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:08:47,416 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:08:47,418 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:08:47,666 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:08:47,666 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:08:48,209 [main:55] - randomType = HashMap<Long, List<Long>>
2021-03-11 11:08:48,319 [main:302] - generating value of type = HashMap<Long, List<Long>> false depth = 0
2021-03-11 11:08:48,432 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Long, List<Long>>): HashMap<Long, List<Long>> = TODO()
2021-03-11 11:08:48,435 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Long, List<Long>>): HashMap<Long, List<Long>> = TODO()
2021-03-11 11:08:48,551 [main:302] - generating value of type = Pair<Long, List<Long>> false depth = 3
2021-03-11 11:08:48,664 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long, second: List<Long>): Pair<Long, List<Long>> = TODO()
2021-03-11 11:08:48,668 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long, second: List<Long>): Pair<Long, List<Long>> = TODO()
2021-03-11 11:08:48,829 [main:302] - generating value of type = Long true depth = 6
2021-03-11 11:08:48,831 [main:302] - generating value of type = List<Long> false depth = 6
2021-03-11 11:08:48,977 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): List<Long> = TODO()
2021-03-11 11:08:48,980 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): List<Long> = TODO()
2021-03-11 11:08:49,219 [main:302] - generating value of type = Int true depth = 9
2021-03-11 11:08:49,221 [main:95] - GENERATED = ArrayList<Long>(1177439164)
2021-03-11 11:08:49,221 [main:95] - GENERATED = Pair<Long, List<Long>>(2622945370191197680, ArrayList<Long>(1177439164))
2021-03-11 11:08:49,222 [main:95] - GENERATED = linkedMapOf<Long, List<Long>>(Pair<Long, List<Long>>(2622945370191197680, ArrayList<Long>(1177439164)))
2021-03-11 11:08:49,333 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:08:49,361 [main:94] - GETTING Result<Ty0> from Boolean
2021-03-11 11:08:49,371 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:08:49,372 [main:94] - GETTING Result<Ty0> from MyIterator<String>
2021-03-11 11:08:49,385 [main:107] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-11 11:08:49,385 [main:103] - replacing ("OK", String)
2021-03-11 11:08:49,385 [main:38] - replacing "OK" String
2021-03-11 11:08:49,385 [main:42] - Getting value of type String
2021-03-11 11:08:49,497 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:08:49,498 [main:46] - GENERATED VALUE OF TYPE String = "qmkoc"
2021-03-11 11:08:49,498 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:49,505 [main:55] - randomType = Kla5
2021-03-11 11:08:49,611 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:08:49,613 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:08:49,620 [main:94] - GETTING String from Double
2021-03-11 11:08:49,647 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]]
2021-03-11 11:08:49,647 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:08:49,647 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]
2021-03-11 11:08:49,647 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase()
2021-03-11 11:08:49,648 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:08:49,648 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:08:49,762 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:08:49,764 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:08:49,877 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:08:49,879 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(82).toString(-670384947)
2021-03-11 11:08:49,879 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]]
2021-03-11 11:08:49,879 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:08:49,879 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]
2021-03-11 11:08:49,879 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().lowercase()
2021-03-11 11:08:49,879 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]]
2021-03-11 11:08:49,879 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:08:49,879 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]
2021-03-11 11:08:50,008 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:08:50,010 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("xaucc")
2021-03-11 11:08:50,010 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:08:50,010 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:08:50,010 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:08:50,122 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:08:50,124 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().toString(1857167829)
2021-03-11 11:08:50,125 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]]
2021-03-11 11:08:50,125 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:08:50,125 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]
2021-03-11 11:08:50,125 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase()
2021-03-11 11:08:50,125 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:08:50,125 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:08:50,125 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:08:50,244 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:08:50,247 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toShort().toString(-260526162)
2021-03-11 11:08:50,248 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:08:50,248 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:08:50,248 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:08:50,396 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:08:50,398 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toByte().toString(-402292632)
2021-03-11 11:08:50,398 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:08:50,398 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:08:50,398 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:08:50,519 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:08:50,521 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toLong().toString(-1067515744)
2021-03-11 11:08:50,521 [main:110] - replacement of "OK" of type String is (MyIterator<Double>(0.6816303970923716).next()).toByte().toString(-402292632)
2021-03-11 11:08:50,636 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:08:50,636 [main:66] - Compilation checking started
2021-03-11 11:08:51,265 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException((MyIterator<Double>(0.6816303970923716).next()).toByte().toString(-402292632))
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:51,268 [main:103] - replacing (x, Function1<Throwable, Unit>)
2021-03-11 11:08:51,269 [main:38] - replacing x Function1<Throwable, Unit>
2021-03-11 11:08:51,269 [main:42] - Getting value of type Function1<Throwable, Unit>
2021-03-11 11:08:51,434 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-11 11:08:51,436 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:08:51,571 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:08:51,574 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:08:51,837 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:08:51,837 [main:95] - GENERATED = print("jpswg")
2021-03-11 11:08:51,837 [main:46] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> print("jpswg")}
2021-03-11 11:08:51,837 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:52,518 [main:55] - randomType = Function2<ULong?, ArrayDeque<Kla5>, UShort>
2021-03-11 11:08:52,519 [main:94] - GETTING Function1<Throwable, Unit> from Double
2021-03-11 11:08:52,584 [main:94] - GETTING Function1<Throwable, Unit> from Double
2021-03-11 11:08:52,585 [main:94] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-11 11:08:52,598 [main:94] - GETTING Function1<Throwable, Unit> from MyIterator<String>
2021-03-11 11:08:52,611 [main:110] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> print("jpswg")}
2021-03-11 11:08:52,725 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:08:52,726 [main:66] - Compilation checking started
2021-03-11 11:08:53,323 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw RuntimeException((MyIterator<Double>(0.6816303970923716).next()).toByte().toString(-402292632))
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> print("jpswg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:53,326 [main:103] - replacing (RuntimeException((MyIterator<Double>(0.6816303970923716).next()).toByte().toString(-402292632)), RuntimeException)
2021-03-11 11:08:53,326 [main:38] - replacing RuntimeException((MyIterator<Double>(0.6816303970923716).next()).toByte().toString(-402292632)) RuntimeException
2021-03-11 11:08:53,326 [main:42] - Getting value of type RuntimeException
2021-03-11 11:08:53,474 [main:302] - generating value of type = RuntimeException false depth = 0
2021-03-11 11:08:53,610 [main:43] - GENERATING CALL OF fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): RuntimeException = TODO()
2021-03-11 11:08:53,612 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): RuntimeException = TODO()
2021-03-11 11:08:53,996 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:08:53,998 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 11:08:54,004 [main:95] - GENERATED = IllegalStateException("jjjbo", NumberFormatException())
2021-03-11 11:08:54,005 [main:46] - GENERATED VALUE OF TYPE RuntimeException = IllegalStateException("jjjbo", NumberFormatException())
2021-03-11 11:08:54,005 [main:49] - GENERATED IS CALL =true
2021-03-11 11:08:54,264 [main:55] - randomType = UByte?
2021-03-11 11:08:54,380 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:08:54,427 [main:94] - GETTING RuntimeException from Double
2021-03-11 11:08:54,475 [main:94] - GETTING RuntimeException from Double
2021-03-11 11:08:54,476 [main:94] - GETTING RuntimeException from Boolean
2021-03-11 11:08:54,492 [main:94] - GETTING RuntimeException from MyIterator<String>
2021-03-11 11:08:54,510 [main:110] - replacement of RuntimeException((MyIterator<Double>(0.6816303970923716).next()).toByte().toString(-402292632)) of type RuntimeException is IllegalStateException("jjjbo", NumberFormatException())
2021-03-11 11:08:54,625 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:08:54,626 [main:66] - Compilation checking started
2021-03-11 11:08:55,261 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> print("jpswg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:55,263 [main:103] - replacing (prope2, Result<Any?>)
2021-03-11 11:08:55,263 [main:38] - replacing prope2 Result<Any?>
2021-03-11 11:08:55,264 [main:42] - Getting value of type Result<Any?>
2021-03-11 11:08:55,428 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 11:08:55,558 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:08:55,562 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:08:55,824 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 11:08:55,826 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:08:55,827 [main:95] - GENERATED = runCatching<Any?>({ "ctfmc"})
2021-03-11 11:08:55,827 [main:46] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "ctfmc"})
2021-03-11 11:08:55,827 [main:49] - GENERATED IS CALL =true
2021-03-11 11:08:56,372 [main:55] - randomType = Kla3<Triple<Boolean, UByte, Char>>
2021-03-11 11:08:56,491 [main:302] - generating value of type = Kla3<Triple<Boolean, UByte, Char>> false depth = 0
2021-03-11 11:08:56,493 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:08:56,901 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:08:56,904 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:08:56,925 [main:94] - GETTING Result<Any?> from MyIterator<String>
2021-03-11 11:08:56,938 [main:94] - GETTING Result<Any?> from Boolean
2021-03-11 11:08:56,947 [main:94] - GETTING Result<Any?> from Double
2021-03-11 11:08:56,981 [main:94] - GETTING Result<Any?> from Double
2021-03-11 11:08:56,981 [main:110] - replacement of prope2 of type Result<Any?> is runCatching<Any?>({ "ctfmc"})
2021-03-11 11:08:57,092 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:08:57,092 [main:66] - Compilation checking started
2021-03-11 11:08:57,692 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> print("jpswg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:57,695 [main:103] - replacing ({ c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 11:08:57,695 [main:38] - replacing { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-11 11:08:57,695 [main:42] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 11:08:57,827 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 11:08:57,828 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:08:57,946 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:08:57,948 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:08:58,217 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:08:58,217 [main:95] - GENERATED = println("sqmnh")
2021-03-11 11:08:58,217 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println("sqmnh")}
2021-03-11 11:08:58,218 [main:49] - GENERATED IS CALL =false
2021-03-11 11:08:58,496 [main:55] - randomType = Sequence<ULong>
2021-03-11 11:08:58,498 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from MyIterator<String>
2021-03-11 11:08:58,519 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 11:08:58,533 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Double
2021-03-11 11:08:58,583 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Double
2021-03-11 11:08:58,584 [main:110] - replacement of { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println("sqmnh")}
2021-03-11 11:08:58,702 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:08:58,703 [main:66] - Compilation checking started
2021-03-11 11:08:59,334 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> print("jpswg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:08:59,337 [main:103] - replacing (getOrThrow(), Ty0)
2021-03-11 11:08:59,338 [main:38] - replacing getOrThrow() Ty0
2021-03-11 11:08:59,338 [main:42] - Getting value of type Ty0
2021-03-11 11:08:59,480 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:08:59,485 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:08:59,616 [main:55] - randomType = ULong
2021-03-11 11:08:59,735 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:08:59,783 [main:94] - GETTING Ty0 from Double
2021-03-11 11:08:59,821 [main:94] - GETTING Ty0 from Boolean
2021-03-11 11:08:59,832 [main:94] - GETTING Ty0 from Double
2021-03-11 11:08:59,833 [main:94] - GETTING Ty0 from MyIterator<String>
2021-03-11 11:08:59,849 [main:107] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 11:08:59,849 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:08:59,849 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:08:59,849 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:08:59,964 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:08:59,969 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:09:00,997 [main:55] - randomType = MyIterator<Function1<Char?, Set<UInt>>>?
2021-03-11 11:09:01,112 [main:302] - generating value of type = MyIterator<Function1<Char?, Set<UInt>>> false depth = 0
2021-03-11 11:09:01,114 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:09:01,891 [main:194] - Type params = [Function1<Char?, Set<UInt>>]
2021-03-11 11:09:02,138 [main:302] - generating value of type = Function1<Char?, Set<UInt>> false depth = 2
2021-03-11 11:09:02,141 [main:302] - generating value of type = Set<UInt> false depth = 3
2021-03-11 11:09:02,263 [main:43] - GENERATING CALL OF fun <T> emptySet(): Set<UInt> = TODO()
2021-03-11 11:09:02,266 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySet(): Set<UInt> = TODO()
2021-03-11 11:09:02,392 [main:95] - GENERATED = emptySet<UInt>()
2021-03-11 11:09:02,425 [main:94] - GETTING EmptyCoroutineContext from MyIterator<String>
2021-03-11 11:09:02,443 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:09:02,502 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:09:02,503 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:09:02,518 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:09:02,518 [main:103] - replacing (0, Int)
2021-03-11 11:09:02,519 [main:38] - replacing 0 Int
2021-03-11 11:09:02,519 [main:42] - Getting value of type Int
2021-03-11 11:09:02,651 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:02,653 [main:46] - GENERATED VALUE OF TYPE Int = 1598445060
2021-03-11 11:09:02,653 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:02,817 [main:55] - randomType = UByte
2021-03-11 11:09:02,958 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:09:03,007 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5d33eb9f]
2021-03-11 11:09:03,176 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:09:03,179 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51edcdcb]
2021-03-11 11:09:03,360 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:03,362 [main:66] - Generated call from random type = (27.toUByte()).compareTo(109.toUByte()).shl(-1896540570)
2021-03-11 11:09:03,364 [main:94] - GETTING Int from Double
2021-03-11 11:09:03,431 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41ea0f91]]
2021-03-11 11:09:03,431 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:09:03,431 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41ea0f91]
2021-03-11 11:09:03,432 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toLong().countLeadingZeroBits()
2021-03-11 11:09:03,432 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2152797]]
2021-03-11 11:09:03,432 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:03,588 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:03,590 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2152797]
2021-03-11 11:09:03,591 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(-106).takeLowestOneBit()
2021-03-11 11:09:03,591 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12855741]]
2021-03-11 11:09:03,591 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:09:03,591 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12855741]
2021-03-11 11:09:03,591 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().countTrailingZeroBits()
2021-03-11 11:09:03,591 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]]
2021-03-11 11:09:03,591 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:09:03,591 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:03,707 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:03,709 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toDouble().compareTo(-17)
2021-03-11 11:09:03,709 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57c4738e]]
2021-03-11 11:09:03,709 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:03,847 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:03,849 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57c4738e]
2021-03-11 11:09:03,849 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(-63).inc()
2021-03-11 11:09:03,849 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@11e67111]]
2021-03-11 11:09:03,849 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:09:03,849 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().sign
2021-03-11 11:09:03,849 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51edcdcb]]
2021-03-11 11:09:03,850 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:03,973 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:03,975 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51edcdcb]
2021-03-11 11:09:04,093 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:04,096 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(64).shl(2056261558)
2021-03-11 11:09:04,096 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@513dc9e2]]
2021-03-11 11:09:04,096 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:04,210 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:04,212 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@513dc9e2]
2021-03-11 11:09:04,213 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
2021-03-11 11:09:04,213 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]]
2021-03-11 11:09:04,213 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:04,365 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:04,367 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]
2021-03-11 11:09:04,368 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(76).toInt()
2021-03-11 11:09:04,368 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3feeaea8]]
2021-03-11 11:09:04,368 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:09:04,368 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3feeaea8]
2021-03-11 11:09:04,537 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:04,540 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toByte().compareTo(-36)
2021-03-11 11:09:04,541 [main:110] - replacement of 0 of type Int is (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
2021-03-11 11:09:04,681 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:04,681 [main:66] - Compilation checking started
2021-03-11 11:09:05,401 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> print("jpswg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:05,403 [main:103] - replacing (0, Int)
2021-03-11 11:09:05,403 [main:38] - replacing 0 Int
2021-03-11 11:09:05,403 [main:42] - Getting value of type Int
2021-03-11 11:09:05,528 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:05,530 [main:46] - GENERATED VALUE OF TYPE Int = 1454476859
2021-03-11 11:09:05,530 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:05,663 [main:55] - randomType = Long
2021-03-11 11:09:05,776 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:09:05,846 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@12fd8c2d]
2021-03-11 11:09:06,037 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:06,039 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24cd318b]
2021-03-11 11:09:06,165 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:06,167 [main:66] - Generated call from random type = (4750493237855092068).compareTo(-53).times(-115)
2021-03-11 11:09:06,168 [main:94] - GETTING Int from Double
2021-03-11 11:09:06,210 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12855741]]
2021-03-11 11:09:06,210 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:06,332 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:06,335 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12855741]
2021-03-11 11:09:06,335 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(9).countTrailingZeroBits()
2021-03-11 11:09:06,335 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]]
2021-03-11 11:09:06,335 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:06,457 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:06,461 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(-30)
2021-03-11 11:09:06,461 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@74705fbf]]
2021-03-11 11:09:06,461 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:09:06,461 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toLong().sign
2021-03-11 11:09:06,462 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@571850c]]
2021-03-11 11:09:06,462 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:09:06,462 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@571850c]
2021-03-11 11:09:06,462 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().unaryMinus()
2021-03-11 11:09:06,462 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]]
2021-03-11 11:09:06,462 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:09:06,462 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]
2021-03-11 11:09:06,619 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:06,621 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().or(1973435517)
2021-03-11 11:09:06,621 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@513dc9e2]]
2021-03-11 11:09:06,621 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:06,735 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:06,737 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@513dc9e2]
2021-03-11 11:09:06,737 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(91).takeHighestOneBit()
2021-03-11 11:09:06,737 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4ab2f15c]]
2021-03-11 11:09:06,737 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:09:06,737 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4ab2f15c]
2021-03-11 11:09:06,855 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:06,972 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:06,974 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().coerceIn(1303614174, 873008520)
2021-03-11 11:09:06,974 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24cd318b]]
2021-03-11 11:09:06,974 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:09:06,974 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24cd318b]
2021-03-11 11:09:07,094 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:07,096 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().times(-118)
2021-03-11 11:09:07,097 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@17cb2dfd]]
2021-03-11 11:09:07,097 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:09:07,097 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@17cb2dfd]
2021-03-11 11:09:07,097 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toFloat().toBits()
2021-03-11 11:09:07,097 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]]
2021-03-11 11:09:07,097 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:07,211 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:07,213 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]
2021-03-11 11:09:07,213 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(83).toInt()
2021-03-11 11:09:07,213 [main:110] - replacement of 0 of type Int is 1454476859
2021-03-11 11:09:07,337 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:09:07,337 [main:66] - Compilation checking started
2021-03-11 11:09:07,944 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> print("jpswg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:07,946 [main:103] - replacing (prope5, Boolean)
2021-03-11 11:09:07,946 [main:38] - replacing prope5 Boolean
2021-03-11 11:09:07,946 [main:42] - Getting value of type Boolean
2021-03-11 11:09:08,091 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:08,093 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:09:08,093 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:08,101 [main:55] - randomType = Kla5
2021-03-11 11:09:08,230 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:09:08,233 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:09:08,244 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:09:08,374 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:08,375 [main:66] - Generated call from random type = (Kla5()).prope5.equals("iisqf")
2021-03-11 11:09:08,375 [main:110] - replacement of prope5 of type Boolean is (Kla5()).prope5.equals("iisqf")
2021-03-11 11:09:08,529 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:08,529 [main:66] - Compilation checking started
2021-03-11 11:09:08,897 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> print("jpswg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        (Kla5()).prope5.equals("iisqf") = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:08,899 [main:103] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-11 11:09:08,899 [main:38] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-11 11:09:08,899 [main:42] - Getting value of type String
2021-03-11 11:09:09,027 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:09,029 [main:46] - GENERATED VALUE OF TYPE String = "duwhn"
2021-03-11 11:09:09,029 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:09,164 [main:55] - randomType = Long
2021-03-11 11:09:09,277 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:09:09,328 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:09:09,328 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:09:09,443 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:09,445 [main:66] - Generated call from random type = (3384353499874401893).toInt().toString(-881724299)
2021-03-11 11:09:09,446 [main:94] - GETTING String from Double
2021-03-11 11:09:09,493 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]]
2021-03-11 11:09:09,493 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:09,494 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]
2021-03-11 11:09:09,494 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase()
2021-03-11 11:09:09,494 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:09:09,494 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:09:09,494 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:09:09,623 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:09,625 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toShort().toString(602786801)
2021-03-11 11:09:09,625 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:09:09,625 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:09:09,625 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:09:09,737 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:09,740 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toLong().toString(-1769513250)
2021-03-11 11:09:09,740 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:09:09,740 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:09:09,740 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:09:09,859 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:09,862 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toByte().toString(1041365552)
2021-03-11 11:09:09,862 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:09:09,862 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:09,970 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:09,972 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:09:10,084 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:10,086 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(61).toString(-1881077086)
2021-03-11 11:09:10,086 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]]
2021-03-11 11:09:10,086 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:10,086 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]
2021-03-11 11:09:10,087 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase()
2021-03-11 11:09:10,087 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:09:10,087 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:09:10,087 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:09:10,196 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:10,198 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().toString(-156196758)
2021-03-11 11:09:10,198 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]]
2021-03-11 11:09:10,198 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:10,198 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]
2021-03-11 11:09:10,198 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().lowercase()
2021-03-11 11:09:10,198 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]]
2021-03-11 11:09:10,198 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:10,198 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]
2021-03-11 11:09:10,310 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:10,312 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("ahjmr")
2021-03-11 11:09:10,312 [main:110] - replacement of " is not subtype of CoroutineStackFrame" of type String is (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase()
2021-03-11 11:09:10,425 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:10,426 [main:66] - Compilation checking started
2021-03-11 11:09:10,978 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> print("jpswg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:10,980 [main:103] - replacing (prope2.(MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).equals("nzqej"), Boolean)
2021-03-11 11:09:10,980 [main:38] - replacing prope2.(MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).equals("nzqej") Boolean
2021-03-11 11:09:10,980 [main:42] - Getting value of type Boolean
2021-03-11 11:09:11,092 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:11,094 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:09:11,094 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:11,469 [main:55] - randomType = Function1<String, UShort?>
2021-03-11 11:09:11,470 [main:94] - GETTING Boolean from Double
2021-03-11 11:09:11,510 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@36288e31]]
2021-03-11 11:09:11,511 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:09:11,511 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@36288e31]
2021-03-11 11:09:11,620 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:11,621 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toShort().equals("ujegu")
2021-03-11 11:09:11,621 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:09:11,621 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:09:11,733 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:11,734 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:09:11,851 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:11,853 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).equals("getej").and(false)
2021-03-11 11:09:11,853 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]]
2021-03-11 11:09:11,853 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:09:11,854 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:09:11,965 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:11,965 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toDouble().equals("grzvo")
2021-03-11 11:09:11,965 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596476e]]
2021-03-11 11:09:11,965 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:11,965 [main:137] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596476e]
2021-03-11 11:09:11,966 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().isDefined()
2021-03-11 11:09:11,966 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cec9118]]
2021-03-11 11:09:11,966 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:11,966 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cec9118]
2021-03-11 11:09:12,080 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:09:12,190 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:12,192 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().equals('覊', false)
2021-03-11 11:09:12,192 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1868ba98]]
2021-03-11 11:09:12,192 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:12,192 [main:137] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1868ba98]
2021-03-11 11:09:12,192 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().isLowerCase()
2021-03-11 11:09:12,193 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6a4df04e]]
2021-03-11 11:09:12,193 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:09:12,193 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6a4df04e]
2021-03-11 11:09:12,193 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toFloat().isInfinite()
2021-03-11 11:09:12,193 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@c33419d]]
2021-03-11 11:09:12,193 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:09:12,193 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@c33419d]
2021-03-11 11:09:12,193 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toFloat().isNaN()
2021-03-11 11:09:12,193 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@69dd5e82]]
2021-03-11 11:09:12,193 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:09:12,193 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@69dd5e82]
2021-03-11 11:09:12,316 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toByte().equals(null)
2021-03-11 11:09:12,317 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]]
2021-03-11 11:09:12,317 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:09:12,317 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]
2021-03-11 11:09:12,317 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toDouble().isNaN()
2021-03-11 11:09:12,317 [main:110] - replacement of prope2.(MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).equals("nzqej") of type Boolean is (MyIterator<Double>(0.6816303970923716).v).toChar().isLowerCase()
2021-03-11 11:09:12,456 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:12,458 [main:103] - replacing (prope2.exceptionOrNull()?.let({a: Throwable -> print("jpswg")}), Unit?)
2021-03-11 11:09:12,458 [main:38] - replacing prope2.exceptionOrNull()?.let({a: Throwable -> print("jpswg")}) Unit?
2021-03-11 11:09:12,458 [main:42] - Getting value of type Unit?
2021-03-11 11:09:12,581 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:09:12,713 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:09:12,716 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:09:13,022 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 11:09:13,024 [main:95] - GENERATED = require(true)
2021-03-11 11:09:13,024 [main:46] - GENERATED VALUE OF TYPE Unit? = require(true)
2021-03-11 11:09:13,024 [main:49] - GENERATED IS CALL =true
2021-03-11 11:09:13,153 [main:55] - randomType = UInt
2021-03-11 11:09:13,268 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:09:13,313 [main:94] - GETTING Unit? from Double
2021-03-11 11:09:13,366 [main:94] - GETTING Unit? from Double
2021-03-11 11:09:13,368 [main:94] - GETTING Unit? from Boolean
2021-03-11 11:09:13,382 [main:94] - GETTING Unit? from MyIterator<String>
2021-03-11 11:09:13,399 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72be2170]]
2021-03-11 11:09:13,399 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72be2170]
2021-03-11 11:09:13,512 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-11 11:09:13,514 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:09:13,632 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:09:13,635 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:09:13,912 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:09:13,914 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:09:14,039 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:09:14,043 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:09:14,475 [main:302] - generating value of type = Int true depth = 8
2021-03-11 11:09:14,477 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 11:09:14,479 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:09:14,614 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:09:14,617 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:09:14,905 [main:302] - generating value of type = Boolean true depth = 12
2021-03-11 11:09:14,908 [main:95] - GENERATED = require(true)
2021-03-11 11:09:14,908 [main:95] - GENERATED = repeat(-493080063, {a: Int -> require(true)})
2021-03-11 11:09:14,908 [main:95] - GENERATED = contract({ repeat(-493080063, {a: Int -> require(true)})})
2021-03-11 11:09:14,909 [main:105] - GENERATED CALL = (MyIterator<String>(""))?.forEach({a: T -> contract({ repeat(-493080063, {a: Int -> require(true)})})})
2021-03-11 11:09:14,909 [main:101] - Case = [public final fun remove(): kotlin.Unit defined in MyIterator[SimpleFunctionDescriptorImpl@1191d08a]]
2021-03-11 11:09:14,909 [main:137] - GENERATING call of type public final fun remove(): kotlin.Unit defined in MyIterator[SimpleFunctionDescriptorImpl@1191d08a]
2021-03-11 11:09:14,909 [main:105] - GENERATED CALL = (MyIterator<String>(""))?.remove()
2021-03-11 11:09:14,909 [main:110] - replacement of prope2.exceptionOrNull()?.let({a: Throwable -> print("jpswg")}) of type Unit? is (MyIterator<String>(""))?.remove()
2021-03-11 11:09:15,033 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 11:09:15,034 [main:66] - Compilation checking started
2021-03-11 11:09:15,645 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:15,646 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:09:15,646 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:09:15,646 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:09:15,765 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:09:15,770 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:09:15,906 [main:55] - randomType = Kla6
2021-03-11 11:09:16,022 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 11:09:16,024 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:09:16,056 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:09:16,103 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:09:16,116 [main:94] - GETTING EmptyCoroutineContext from MyIterator<String>
2021-03-11 11:09:16,132 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:09:16,132 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:09:16,133 [main:103] - replacing ({
        fu6(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 11:09:16,133 [main:38] - replacing {
        fu6(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-11 11:09:16,133 [main:42] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 11:09:16,242 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 11:09:16,244 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:09:16,360 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:09:16,363 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:09:16,728 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:09:16,730 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:09:16,732 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:09:16,844 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:09:16,847 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:09:17,079 [main:302] - generating value of type = Any false depth = 8
2021-03-11 11:09:17,079 [main:95] - GENERATED = print("mxzpn")
2021-03-11 11:09:17,079 [main:95] - GENERATED = repeat(-1463009288, {a: Int -> print("mxzpn")})
2021-03-11 11:09:17,079 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}
2021-03-11 11:09:17,079 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:17,329 [main:55] - randomType = Collection<Kla2>
2021-03-11 11:09:17,330 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 11:09:17,343 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from MyIterator<String>
2021-03-11 11:09:17,358 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Double
2021-03-11 11:09:17,392 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Double
2021-03-11 11:09:17,392 [main:110] - replacement of {
        fu6(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}
2021-03-11 11:09:17,497 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:09:17,498 [main:66] - Compilation checking started
2021-03-11 11:09:18,077 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:18,079 [main:103] - replacing ({ fu3() }, String)
2021-03-11 11:09:18,080 [main:38] - replacing { fu3() } String
2021-03-11 11:09:18,080 [main:42] - Getting value of type String
2021-03-11 11:09:18,219 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:18,221 [main:46] - GENERATED VALUE OF TYPE String = "yiocj"
2021-03-11 11:09:18,221 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:18,499 [main:55] - randomType = List<Kla0?>
2021-03-11 11:09:18,500 [main:94] - GETTING String from Double
2021-03-11 11:09:18,534 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:09:18,534 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:18,650 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:18,652 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:09:18,774 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:18,777 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).compareTo(-8).toString(258865556)
2021-03-11 11:09:18,777 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]]
2021-03-11 11:09:18,778 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:18,778 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]
2021-03-11 11:09:18,778 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().uppercase()
2021-03-11 11:09:18,778 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]]
2021-03-11 11:09:18,778 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:18,778 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]
2021-03-11 11:09:18,778 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().titlecase()
2021-03-11 11:09:18,778 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]]
2021-03-11 11:09:18,778 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:18,779 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]
2021-03-11 11:09:18,911 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:18,914 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().plus("ncamf")
2021-03-11 11:09:18,914 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:09:18,914 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:09:18,914 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:09:19,027 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:19,029 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toShort().toString(2099394912)
2021-03-11 11:09:19,030 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]]
2021-03-11 11:09:19,030 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:19,030 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]
2021-03-11 11:09:19,030 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().lowercase()
2021-03-11 11:09:19,030 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:09:19,030 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:09:19,030 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:09:19,148 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:19,151 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toInt().toString(221829471)
2021-03-11 11:09:19,151 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:09:19,151 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:09:19,151 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:09:19,278 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:19,281 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toLong().toString(770454828)
2021-03-11 11:09:19,281 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:09:19,281 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:09:19,282 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:09:19,398 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:19,400 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toByte().toString(-1375498303)
2021-03-11 11:09:19,401 [main:110] - replacement of { fu3() } of type String is "yiocj"
2021-03-11 11:09:19,512 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-11 11:09:19,513 [main:66] - Compilation checking started
2021-03-11 11:09:19,517 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:09:19,517 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try "yiocj" catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:19,519 [main:103] - replacing (numberOfSuspensions, Int)
2021-03-11 11:09:19,519 [main:38] - replacing numberOfSuspensions Int
2021-03-11 11:09:19,519 [main:42] - Getting value of type Int
2021-03-11 11:09:19,635 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:19,637 [main:46] - GENERATED VALUE OF TYPE Int = 1715512709
2021-03-11 11:09:19,637 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:19,902 [main:55] - randomType = Array<Boolean>
2021-03-11 11:09:20,039 [main:302] - generating value of type = Array<Boolean> false depth = 0
2021-03-11 11:09:20,185 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Boolean): Array<Boolean> = TODO()
2021-03-11 11:09:20,191 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Boolean): Array<Boolean> = TODO()
2021-03-11 11:09:20,628 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:09:20,631 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 3
2021-03-11 11:09:20,634 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:09:20,637 [main:95] - GENERATED = Array<Boolean>(1790291140, {a: Int -> true})
2021-03-11 11:09:20,654 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12855741]
2021-03-11 11:09:20,655 [main:66] - Generated call from random type = (Array<Boolean>(1790291140, {a: Int -> true})).size.countTrailingZeroBits()
2021-03-11 11:09:20,656 [main:94] - GETTING Int from Boolean
2021-03-11 11:09:20,668 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6140623a]]
2021-03-11 11:09:20,668 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:09:20,791 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:20,793 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6140623a]
2021-03-11 11:09:20,928 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:20,930 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).shr(1931127999)
2021-03-11 11:09:20,930 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4ab2f15c]]
2021-03-11 11:09:20,930 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:09:21,055 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:21,057 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4ab2f15c]
2021-03-11 11:09:21,189 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:21,322 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:21,326 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).coerceIn(-89875608, 253367959)
2021-03-11 11:09:21,326 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@27eb1cda]]
2021-03-11 11:09:21,326 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:09:21,474 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:21,477 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).absoluteValue
2021-03-11 11:09:21,478 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]]
2021-03-11 11:09:21,478 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:09:21,601 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:21,603 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]
2021-03-11 11:09:21,725 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:21,728 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).or(645273674)
2021-03-11 11:09:21,728 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ae09ff]]
2021-03-11 11:09:21,728 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:09:21,855 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:21,858 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ae09ff]
2021-03-11 11:09:21,858 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv()
2021-03-11 11:09:21,858 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c365670]]
2021-03-11 11:09:21,858 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:09:21,979 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:21,982 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c365670]
2021-03-11 11:09:22,093 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:22,095 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).plus(113)
2021-03-11 11:09:22,096 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]]
2021-03-11 11:09:22,096 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:09:22,206 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:22,206 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:09:22,316 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:22,318 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("mdfjv").compareTo(false)
2021-03-11 11:09:22,318 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6630fdb2]]
2021-03-11 11:09:22,318 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:09:22,430 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:22,432 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6630fdb2]
2021-03-11 11:09:22,547 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:22,549 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).xor(322866509)
2021-03-11 11:09:22,549 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2152797]]
2021-03-11 11:09:22,549 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:09:22,671 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:22,673 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2152797]
2021-03-11 11:09:22,674 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).takeLowestOneBit()
2021-03-11 11:09:22,674 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f5d7156]]
2021-03-11 11:09:22,674 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:09:22,859 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:22,862 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f5d7156]
2021-03-11 11:09:22,863 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).countLeadingZeroBits()
2021-03-11 11:09:22,863 [main:110] - replacement of numberOfSuspensions of type Int is (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv()
2021-03-11 11:09:23,034 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:23,035 [main:66] - Compilation checking started
2021-03-11 11:09:23,621 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:23,624 [main:103] - replacing (1..numberOfSuspensions, IntRange)
2021-03-11 11:09:23,624 [main:38] - replacing 1..numberOfSuspensions IntRange
2021-03-11 11:09:23,624 [main:42] - Getting value of type IntRange
2021-03-11 11:09:23,747 [main:302] - generating value of type = IntRange false depth = 0
2021-03-11 11:09:23,862 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 11:09:23,865 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 11:09:24,234 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:09:24,236 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:09:24,238 [main:95] - GENERATED = IntRange(-664060725, -1475250764)
2021-03-11 11:09:24,238 [main:46] - GENERATED VALUE OF TYPE IntRange = IntRange(-664060725, -1475250764)
2021-03-11 11:09:24,239 [main:49] - GENERATED IS CALL =true
2021-03-11 11:09:24,487 [main:55] - randomType = Sequence<UByte>
2021-03-11 11:09:24,488 [main:94] - GETTING IntRange from Double
2021-03-11 11:09:24,537 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27887cfe]]
2021-03-11 11:09:24,537 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:24,647 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:24,649 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27887cfe]
2021-03-11 11:09:24,795 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:24,797 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(-82).rangeTo(-48)
2021-03-11 11:09:24,797 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27887cfe]]
2021-03-11 11:09:24,797 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:09:24,797 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27887cfe]
2021-03-11 11:09:24,911 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:24,914 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().rangeTo(-52)
2021-03-11 11:09:24,914 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7caed18d]]
2021-03-11 11:09:24,914 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:09:24,914 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7caed18d]
2021-03-11 11:09:25,029 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:25,032 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)
2021-03-11 11:09:25,032 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7b9e4b0d]]
2021-03-11 11:09:25,032 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:09:25,032 [main:137] - GENERATING call of type public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7b9e4b0d]
2021-03-11 11:09:25,142 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:25,144 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toByte().until(-52)
2021-03-11 11:09:25,144 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7cf8fb4b]]
2021-03-11 11:09:25,145 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:09:25,145 [main:137] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7cf8fb4b]
2021-03-11 11:09:25,257 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:25,259 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().until(40)
2021-03-11 11:09:25,259 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6c027ab7]]
2021-03-11 11:09:25,259 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:09:25,259 [main:137] - GENERATING call of type public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6c027ab7]
2021-03-11 11:09:25,373 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:25,375 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toShort().until(-69)
2021-03-11 11:09:25,375 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7cf8fb4b]]
2021-03-11 11:09:25,375 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:25,490 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:25,492 [main:137] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7cf8fb4b]
2021-03-11 11:09:25,617 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:25,619 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(92).until(99)
2021-03-11 11:09:25,619 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4a707c45]]
2021-03-11 11:09:25,619 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:09:25,619 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4a707c45]
2021-03-11 11:09:25,738 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:25,741 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toByte().rangeTo(-71)
2021-03-11 11:09:25,741 [main:110] - replacement of 1..numberOfSuspensions of type IntRange is (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)
2021-03-11 11:09:25,859 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:25,860 [main:66] - Compilation checking started
2021-03-11 11:09:26,451 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:26,455 [main:103] - replacing ({}, Function0<Unit>)
2021-03-11 11:09:26,455 [main:38] - replacing {} Function0<Unit>
2021-03-11 11:09:26,455 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:09:26,596 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:09:26,598 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:09:26,744 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:09:26,747 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:09:27,176 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:09:27,178 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:09:27,180 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:09:27,181 [main:95] - GENERATED = require(false, { "xjcyx"})
2021-03-11 11:09:27,181 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "xjcyx"})}
2021-03-11 11:09:27,181 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:27,685 [main:55] - randomType = Function1<MyIterator<Kla5?>, Byte>
2021-03-11 11:09:27,686 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:09:27,701 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:09:27,729 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:09:27,730 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:09:27,738 [main:110] - replacement of {} of type Function0<Unit> is { require(false, { "xjcyx"})}
2021-03-11 11:09:27,846 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:09:27,846 [main:66] - Compilation checking started
2021-03-11 11:09:28,363 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:28,367 [main:103] - replacing ({ RuntimeException().message!! }, String)
2021-03-11 11:09:28,367 [main:38] - replacing { RuntimeException().message!! } String
2021-03-11 11:09:28,367 [main:42] - Getting value of type String
2021-03-11 11:09:28,491 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:28,494 [main:46] - GENERATED VALUE OF TYPE String = "ftqjz"
2021-03-11 11:09:28,494 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:28,788 [main:55] - randomType = Function1<Collection<Int>, Kla2>
2021-03-11 11:09:28,790 [main:94] - GETTING String from MyIterator<String>
2021-03-11 11:09:28,808 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@328717da]]
2021-03-11 11:09:28,808 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:28,809 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@328717da]
2021-03-11 11:09:28,948 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:09:28,951 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:09:28,953 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().filter({a: Char -> false})
2021-03-11 11:09:28,953 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b2dbc56]]
2021-03-11 11:09:28,953 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:28,953 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b2dbc56]
2021-03-11 11:09:29,071 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:09:29,073 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:09:29,076 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().filterNot({a: Char -> false})
2021-03-11 11:09:29,076 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59b2d9bf]]
2021-03-11 11:09:29,076 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:29,076 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59b2d9bf]
2021-03-11 11:09:29,198 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:09:29,200 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:09:29,203 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().dropLastWhile({a: Char -> false})
2021-03-11 11:09:29,203 [main:101] - Case = [public final val v: kotlin.String defined in MyIterator[PropertyDescriptorImpl@38a2a387]]
2021-03-11 11:09:29,203 [main:105] - GENERATED CALL = (MyIterator<String>("")).v
2021-03-11 11:09:29,203 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284d703b]]
2021-03-11 11:09:29,203 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:29,203 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284d703b]
2021-03-11 11:09:29,318 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:09:29,324 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().removePrefix("oefer")
2021-03-11 11:09:29,324 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71537d02]]
2021-03-11 11:09:29,324 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:29,324 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71537d02]
2021-03-11 11:09:29,437 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:29,439 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().prependIndent("dfrnc")
2021-03-11 11:09:29,439 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d9c107]]
2021-03-11 11:09:29,439 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:29,439 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d9c107]
2021-03-11 11:09:29,549 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:29,662 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:29,664 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().removeRange(-1323168256, -564411190)
2021-03-11 11:09:29,664 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24d389c6]]
2021-03-11 11:09:29,664 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:29,664 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24d389c6]
2021-03-11 11:09:29,665 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().trimIndent()
2021-03-11 11:09:29,665 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@687822d0]]
2021-03-11 11:09:29,665 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:29,665 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@687822d0]
2021-03-11 11:09:29,774 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 11:09:29,776 [main:302] - generating value of type = Char true depth = 1
2021-03-11 11:09:29,778 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceFirstChar({a: Char -> 'ꗓ'})
2021-03-11 11:09:29,778 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a751dd4]]
2021-03-11 11:09:29,778 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:29,778 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a751dd4]
2021-03-11 11:09:29,886 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:09:29,998 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:30,112 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:30,114 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceBefore('', "vwces", "apxfl")
2021-03-11 11:09:30,114 [main:110] - replacement of { RuntimeException().message!! } of type String is (MyIterator<String>("")).next().dropLastWhile({a: Char -> false})
2021-03-11 11:09:30,233 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:30,234 [main:66] - Compilation checking started
2021-03-11 11:09:30,238 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:09:30,238 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) (MyIterator<String>("")).next().dropLastWhile({a: Char -> false})
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:30,240 [main:103] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-11 11:09:30,240 [main:38] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-11 11:09:30,240 [main:42] - Getting value of type Boolean
2021-03-11 11:09:30,349 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:30,351 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:09:30,352 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:30,795 [main:55] - randomType = Pair<UInt, Kla1>
2021-03-11 11:09:30,913 [main:302] - generating value of type = Pair<UInt, Kla1> false depth = 0
2021-03-11 11:09:31,027 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UInt, second: Kla1): Pair<UInt, Kla1> = TODO()
2021-03-11 11:09:31,030 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UInt, second: Kla1): Pair<UInt, Kla1> = TODO()
2021-03-11 11:09:31,143 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 11:09:31,145 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-11 11:09:31,147 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}
2021-03-11 11:09:31,255 [main:194] - Type params = []
2021-03-11 11:09:31,369 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-11 11:09:31,492 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:09:31,495 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:09:31,755 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-11 11:09:31,872 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:09:31,876 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:09:32,313 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-11 11:09:32,463 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:09:32,466 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:09:32,883 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:09:32,883 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:09:32,883 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:09:32,883 [main:95] - GENERATED = Pair<UInt, Kla1>(1620189991.toUInt(), Kla1())
2021-03-11 11:09:32,899 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@6680f9e2]
2021-03-11 11:09:33,022 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:33,022 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:09:33,134 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:33,135 [main:66] - Generated call from random type = (Pair<UInt, Kla1>(1620189991.toUInt(), Kla1())).equals("uetoa").equals("xeagj")
2021-03-11 11:09:33,136 [main:94] - GETTING Boolean from Double
2021-03-11 11:09:33,166 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@67029450]]
2021-03-11 11:09:33,167 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:09:33,167 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@67029450]
2021-03-11 11:09:33,286 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:33,287 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toLong().equals("lrarz")
2021-03-11 11:09:33,287 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]]
2021-03-11 11:09:33,287 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:09:33,287 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]
2021-03-11 11:09:33,398 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:33,398 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toFloat().equals("zqsee")
2021-03-11 11:09:33,398 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7a0dfef]]
2021-03-11 11:09:33,398 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:09:33,398 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7a0dfef]
2021-03-11 11:09:33,399 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isFinite()
2021-03-11 11:09:33,399 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54367e3e]]
2021-03-11 11:09:33,399 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:09:33,399 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54367e3e]
2021-03-11 11:09:33,399 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toFloat().isFinite()
2021-03-11 11:09:33,399 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:09:33,399 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:09:33,519 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:33,519 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:09:33,645 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:33,648 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("fbskf").and(true)
2021-03-11 11:09:33,648 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:09:33,648 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:09:33,769 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:33,769 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:09:33,898 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:33,901 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true)
2021-03-11 11:09:33,901 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@69dd5e82]]
2021-03-11 11:09:33,902 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:09:33,902 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@69dd5e82]
2021-03-11 11:09:34,071 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:34,072 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toByte().equals("rcstp")
2021-03-11 11:09:34,072 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d6ef59a]]
2021-03-11 11:09:34,072 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:34,072 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d6ef59a]
2021-03-11 11:09:34,073 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().isTitleCase()
2021-03-11 11:09:34,073 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a35fbda]]
2021-03-11 11:09:34,073 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:09:34,073 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a35fbda]
2021-03-11 11:09:34,073 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
2021-03-11 11:09:34,073 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]]
2021-03-11 11:09:34,073 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:09:34,073 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:09:34,199 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:34,200 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toDouble().equals("kmsij")
2021-03-11 11:09:34,200 [main:110] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true)
2021-03-11 11:09:34,327 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:34,328 [main:66] - Compilation checking started
2021-03-11 11:09:34,893 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:34,895 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:09:34,895 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:09:34,895 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:09:35,013 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:09:35,018 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:09:35,677 [main:55] - randomType = Function1<Function1<Boolean, LinkedHashSet<Collection<Array<Float>>>>, Char>
2021-03-11 11:09:35,678 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:09:35,715 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:09:35,724 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:09:35,725 [main:94] - GETTING EmptyCoroutineContext from MyIterator<String>
2021-03-11 11:09:35,737 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:09:35,737 [main:103] - replacing (prope5, Boolean)
2021-03-11 11:09:35,738 [main:38] - replacing prope5 Boolean
2021-03-11 11:09:35,738 [main:42] - Getting value of type Boolean
2021-03-11 11:09:35,846 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:35,848 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:09:35,848 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:35,853 [main:55] - randomType = Char
2021-03-11 11:09:35,962 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:09:35,989 [main:137] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@11c9bf6e]
2021-03-11 11:09:35,990 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@67029450]
2021-03-11 11:09:36,116 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:36,116 [main:66] - Generated call from random type = ('').toLong().equals("uuqew")
2021-03-11 11:09:36,116 [main:94] - GETTING Boolean from Boolean
2021-03-11 11:09:36,130 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:09:36,131 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:09:36,250 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:09:36,378 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:36,380 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals(null).xor(false)
2021-03-11 11:09:36,380 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:09:36,380 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:09:36,492 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:36,494 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)
2021-03-11 11:09:36,494 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:09:36,494 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:09:36,494 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).not()
2021-03-11 11:09:36,494 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]]
2021-03-11 11:09:36,494 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:09:36,605 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:36,607 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]
2021-03-11 11:09:36,728 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:36,728 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).equals("znads")
2021-03-11 11:09:36,728 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:09:36,728 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:09:36,837 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:36,839 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).and(true)
2021-03-11 11:09:36,839 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:09:36,839 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:09:36,962 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:36,964 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).or(true)
2021-03-11 11:09:36,964 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:09:36,964 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:09:37,076 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:37,077 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:09:37,210 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:37,213 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("scyiw").and(false)
2021-03-11 11:09:37,213 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:09:37,213 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:09:37,334 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:37,335 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("ggcns")
2021-03-11 11:09:37,335 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:09:37,335 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:09:37,445 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:37,446 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:09:37,556 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:37,556 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("dlyvn").equals("vcgxf")
2021-03-11 11:09:37,556 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:09:37,556 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:09:37,699 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:37,699 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:09:37,820 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:37,823 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("hgkrm").or(false)
2021-03-11 11:09:37,823 [main:110] - replacement of prope5 of type Boolean is (MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)
2021-03-11 11:09:37,963 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:37,964 [main:66] - Compilation checking started
2021-03-11 11:09:38,617 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !(MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:38,621 [main:103] - replacing (checkFinished && !(MyIterator<Double>(0.6816303970923716).hasNext()).xor(true), Boolean)
2021-03-11 11:09:38,621 [main:38] - replacing checkFinished && !(MyIterator<Double>(0.6816303970923716).hasNext()).xor(true) Boolean
2021-03-11 11:09:38,621 [main:42] - Getting value of type Boolean
2021-03-11 11:09:38,762 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:38,764 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:09:38,764 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:39,059 [main:55] - randomType = ULong?
2021-03-11 11:09:39,185 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:09:39,235 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3c650d07]
2021-03-11 11:09:39,371 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:09:39,373 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@394c697c]
2021-03-11 11:09:39,503 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:39,503 [main:66] - Generated call from random type = (7766689734033501829.toULong())?.rangeTo(5127003125899499233.toULong()).equals("iwage")
2021-03-11 11:09:39,504 [main:94] - GETTING Boolean from MyIterator<String>
2021-03-11 11:09:39,523 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:09:39,523 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:09:39,523 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:09:39,652 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:39,652 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().equals("tieur")
2021-03-11 11:09:39,652 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:09:39,653 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:09:39,653 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:09:39,653 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().not()
2021-03-11 11:09:39,653 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bfb4ebc]]
2021-03-11 11:09:39,653 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:39,653 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bfb4ebc]
2021-03-11 11:09:39,805 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:39,986 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:39,989 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().endsWith("bvvwr", false)
2021-03-11 11:09:39,989 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]]
2021-03-11 11:09:39,990 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:39,990 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]
2021-03-11 11:09:40,117 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:40,118 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().equals("qptlx")
2021-03-11 11:09:40,118 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:09:40,118 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0]
2021-03-11 11:09:40,239 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:40,239 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:09:40,351 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:40,353 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals("gixdf").xor(true)
2021-03-11 11:09:40,354 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e7b42d3]]
2021-03-11 11:09:40,354 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:40,354 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e7b42d3]
2021-03-11 11:09:40,479 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:40,604 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:40,607 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().startsWith("rpgxn", false)
2021-03-11 11:09:40,607 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:09:40,607 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0]
2021-03-11 11:09:40,720 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:40,721 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:09:40,832 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:40,835 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals("melrt").and(true)
2021-03-11 11:09:40,835 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]]
2021-03-11 11:09:40,835 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:09:40,835 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext()
2021-03-11 11:09:40,835 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:09:40,835 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:09:40,835 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:09:40,950 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:40,953 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().and(true)
2021-03-11 11:09:40,953 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:09:40,953 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:09:40,953 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:09:41,073 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:41,075 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().xor(false)
2021-03-11 11:09:41,075 [main:110] - replacement of checkFinished && !(MyIterator<Double>(0.6816303970923716).hasNext()).xor(true) of type Boolean is false
2021-03-11 11:09:41,189 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:09:41,189 [main:66] - Compilation checking started
2021-03-11 11:09:41,885 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:41,888 [main:103] - replacing (prope5, Boolean)
2021-03-11 11:09:41,888 [main:38] - replacing prope5 Boolean
2021-03-11 11:09:41,888 [main:42] - Getting value of type Boolean
2021-03-11 11:09:42,070 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:42,074 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:09:42,075 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:42,418 [main:55] - randomType = LinkedHashSet<ULong>
2021-03-11 11:09:42,555 [main:302] - generating value of type = LinkedHashSet<ULong> false depth = 0
2021-03-11 11:09:42,683 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: ULong): LkedHashSet<ULong> = TODO()
2021-03-11 11:09:42,686 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: ULong): LkedHashSet<ULong> = TODO()
2021-03-11 11:09:42,811 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 11:09:42,814 [main:95] - GENERATED = linkedSetOf<ULong>(5125888529735706511.toULong())
2021-03-11 11:09:42,987 [main:137] - GENERATING call of type public open fun add(element: kotlin.ULong): kotlin.Boolean defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@3e5bc37d]
2021-03-11 11:09:43,112 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:09:43,115 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:09:43,242 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:43,245 [main:66] - Generated call from random type = (linkedSetOf<ULong>(5125888529735706511.toULong())).add(128436305042346247.toULong()).or(false)
2021-03-11 11:09:43,247 [main:94] - GETTING Boolean from Double
2021-03-11 11:09:43,304 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ae4ecc]]
2021-03-11 11:09:43,304 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:43,304 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ae4ecc]
2021-03-11 11:09:43,305 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().isDigit()
2021-03-11 11:09:43,305 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cec9118]]
2021-03-11 11:09:43,305 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:43,305 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cec9118]
2021-03-11 11:09:43,432 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:09:43,563 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:43,565 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().equals('˚', true)
2021-03-11 11:09:43,565 [main:101] - Case = [public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]]
2021-03-11 11:09:43,565 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]
2021-03-11 11:09:43,566 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).isNaN()
2021-03-11 11:09:43,566 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]]
2021-03-11 11:09:43,566 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:09:43,699 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:43,699 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("lauqg")
2021-03-11 11:09:43,699 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]]
2021-03-11 11:09:43,699 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:09:43,699 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]
2021-03-11 11:09:43,826 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().equals(null)
2021-03-11 11:09:43,827 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@67029450]]
2021-03-11 11:09:43,827 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:09:43,827 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@67029450]
2021-03-11 11:09:43,966 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:43,966 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toLong().equals("ythzx")
2021-03-11 11:09:43,966 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2180f171]]
2021-03-11 11:09:43,966 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:43,967 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2180f171]
2021-03-11 11:09:43,967 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().isWhitespace()
2021-03-11 11:09:43,967 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]]
2021-03-11 11:09:43,967 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:09:43,967 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:09:44,112 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:44,113 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toDouble().equals("aehkn")
2021-03-11 11:09:44,113 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54367e3e]]
2021-03-11 11:09:44,113 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:09:44,113 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54367e3e]
2021-03-11 11:09:44,113 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toFloat().isFinite()
2021-03-11 11:09:44,114 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f4f761]]
2021-03-11 11:09:44,114 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:44,114 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f4f761]
2021-03-11 11:09:44,114 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().isLetter()
2021-03-11 11:09:44,114 [main:110] - replacement of prope5 of type Boolean is (linkedSetOf<ULong>(5125888529735706511.toULong())).add(128436305042346247.toULong()).or(false)
2021-03-11 11:09:44,245 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:44,246 [main:66] - Compilation checking started
2021-03-11 11:09:44,802 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        (linkedSetOf<ULong>(5125888529735706511.toULong())).add(128436305042346247.toULong()).or(false) = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:44,805 [main:103] - replacing ("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!), String)
2021-03-11 11:09:44,806 [main:38] - replacing "tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!) String
2021-03-11 11:09:44,806 [main:42] - Getting value of type String
2021-03-11 11:09:44,938 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:44,942 [main:46] - GENERATED VALUE OF TYPE String = "lvnxh"
2021-03-11 11:09:44,942 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:45,406 [main:55] - randomType = MutableMap<Int, List<ULong>>
2021-03-11 11:09:45,407 [main:94] - GETTING String from MyIterator<String>
2021-03-11 11:09:45,426 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7780c3c3]]
2021-03-11 11:09:45,426 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:45,426 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7780c3c3]
2021-03-11 11:09:45,581 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:09:45,727 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:09:45,878 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:09:45,880 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceFirst('枃', '熯', true)
2021-03-11 11:09:45,880 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1deb4c2e]]
2021-03-11 11:09:45,881 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:45,881 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1deb4c2e]
2021-03-11 11:09:46,032 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:09:46,197 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:46,200 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().substringAfter('', "euwkz")
2021-03-11 11:09:46,201 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284d703b]]
2021-03-11 11:09:46,201 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:46,201 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284d703b]
2021-03-11 11:09:46,346 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:09:46,352 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().removePrefix(StringBuilder())
2021-03-11 11:09:46,352 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21915f73]]
2021-03-11 11:09:46,352 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:46,352 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21915f73]
2021-03-11 11:09:46,480 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:46,484 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().concat("lejac")
2021-03-11 11:09:46,484 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ffa03c3]]
2021-03-11 11:09:46,484 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:46,484 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ffa03c3]
2021-03-11 11:09:46,626 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:46,629 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().takeLast(936294576)
2021-03-11 11:09:46,629 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f3c8439]]
2021-03-11 11:09:46,629 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:46,629 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f3c8439]
2021-03-11 11:09:46,629 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().toLowerCase()
2021-03-11 11:09:46,629 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@214a0c96]]
2021-03-11 11:09:46,629 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:46,629 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@214a0c96]
2021-03-11 11:09:46,764 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:46,767 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().drop(-1704043160)
2021-03-11 11:09:46,767 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f63cce]]
2021-03-11 11:09:46,767 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:46,767 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f63cce]
2021-03-11 11:09:46,968 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:09:47,177 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:47,339 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:47,342 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceAfterLast('쾝', "nskhi", "agugt")
2021-03-11 11:09:47,342 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2485cd4a]]
2021-03-11 11:09:47,343 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:47,343 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2485cd4a]
2021-03-11 11:09:47,343 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().reversed()
2021-03-11 11:09:47,343 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24d389c6]]
2021-03-11 11:09:47,343 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:47,343 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24d389c6]
2021-03-11 11:09:47,343 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().trimIndent()
2021-03-11 11:09:47,343 [main:110] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = (HashMap<Boolean, String>(1626922556, 0.6006838f)).remove(false)!!) of type String is (MyIterator<String>("")).next().toLowerCase()
2021-03-11 11:09:47,474 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:47,474 [main:66] - Compilation checking started
2021-03-11 11:09:48,113 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:48,114 [main:103] - replacing ({
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }, Any?)
2021-03-11 11:09:48,115 [main:38] - replacing {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    } Any?
2021-03-11 11:09:48,115 [main:42] - Getting value of type Any?
2021-03-11 11:09:48,256 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:09:48,256 [main:46] - GENERATED VALUE OF TYPE Any? = "ttjmz"
2021-03-11 11:09:48,256 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:48,260 [main:55] - randomType = Short
2021-03-11 11:09:48,395 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:09:48,460 [main:94] - GETTING Any? from Double
2021-03-11 11:09:48,518 [main:94] - GETTING Any? from Double
2021-03-11 11:09:48,520 [main:94] - GETTING Any? from Boolean
2021-03-11 11:09:48,537 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:09:48,559 [main:110] - replacement of {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    } of type Any? is "ttjmz"
2021-03-11 11:09:48,696 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-11 11:09:48,696 [main:66] - Compilation checking started
2021-03-11 11:09:48,701 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:09:48,702 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) "ttjmz"
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:48,705 [main:103] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv(), String)
2021-03-11 11:09:48,705 [main:38] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv() String
2021-03-11 11:09:48,705 [main:42] - Getting value of type String
2021-03-11 11:09:48,837 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:48,839 [main:46] - GENERATED VALUE OF TYPE String = "avyws"
2021-03-11 11:09:48,839 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:48,987 [main:55] - randomType = Float?
2021-03-11 11:09:49,113 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:09:49,162 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@55621e8]
2021-03-11 11:09:49,289 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:49,291 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:09:49,441 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:49,444 [main:66] - Generated call from random type = (0.035911858f)?.compareTo(106).toString(-781374365)
2021-03-11 11:09:49,444 [main:94] - GETTING String from Double
2021-03-11 11:09:49,500 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:09:49,501 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:09:49,501 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:09:49,643 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:49,645 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toLong().toString(1626493184)
2021-03-11 11:09:49,646 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:09:49,646 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:09:49,646 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:09:49,778 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:49,780 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toShort().toString(-452299497)
2021-03-11 11:09:49,781 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:09:49,781 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:09:49,781 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:09:49,905 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:49,907 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toByte().toString(1289823005)
2021-03-11 11:09:49,908 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]]
2021-03-11 11:09:49,908 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:49,908 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]
2021-03-11 11:09:49,908 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().lowercase()
2021-03-11 11:09:49,908 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]]
2021-03-11 11:09:49,908 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:49,908 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]
2021-03-11 11:09:49,908 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase()
2021-03-11 11:09:49,908 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:09:49,908 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:09:50,033 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:09:50,036 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:09:50,174 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:50,176 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(-74).toString(-5528449)
2021-03-11 11:09:50,177 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]]
2021-03-11 11:09:50,177 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:50,177 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]
2021-03-11 11:09:50,177 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase()
2021-03-11 11:09:50,177 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]]
2021-03-11 11:09:50,177 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:09:50,177 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]
2021-03-11 11:09:50,308 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:50,311 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("kjcwl")
2021-03-11 11:09:50,311 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:09:50,311 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:09:50,311 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:09:50,439 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:50,442 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().toString(-275332280)
2021-03-11 11:09:50,442 [main:110] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).inv() of type String is (MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase()
2021-03-11 11:09:50,568 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:50,569 [main:66] - Compilation checking started
2021-03-11 11:09:51,234 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:51,236 [main:103] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-11 11:09:51,237 [main:38] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-11 11:09:51,237 [main:42] - Getting value of type String
2021-03-11 11:09:51,381 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:51,384 [main:46] - GENERATED VALUE OF TYPE String = "jiafe"
2021-03-11 11:09:51,384 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:51,533 [main:55] - randomType = ArrayList<Kla4>
2021-03-11 11:09:51,656 [main:302] - generating value of type = ArrayList<Kla4> false depth = 0
2021-03-11 11:09:51,782 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla4): ArrayList<Kla4> = TODO()
2021-03-11 11:09:51,785 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla4): ArrayList<Kla4> = TODO()
2021-03-11 11:09:51,948 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-11 11:09:51,950 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}
2021-03-11 11:09:51,950 [main:95] - GENERATED = arrayListOf<Kla4>(Kla4())
2021-03-11 11:09:52,111 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1e259e2d]
2021-03-11 11:09:52,250 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:09:52,381 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:09:52,384 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:09:52,665 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:09:52,668 [main:95] - GENERATED = StringBuilder(-1225036656)
2021-03-11 11:09:52,818 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:09:52,952 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:09:53,097 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:53,225 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:09:53,353 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 11:09:53,356 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:09:53,482 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:09:53,485 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:09:53,793 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-11 11:09:53,801 [main:95] - GENERATED = StringBuilder("tebdf")
2021-03-11 11:09:53,801 [main:66] - Generated call from random type = (arrayListOf<Kla4>(Kla4())).joinToString(StringBuilder(-1225036656), "okbhr", "ngiab", 1576591719, "uhcru", {a: T -> StringBuilder("tebdf")})
2021-03-11 11:09:53,802 [main:110] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (arrayListOf<Kla4>(Kla4())).joinToString(StringBuilder(-1225036656), "okbhr", "ngiab", 1576591719, "uhcru", {a: T -> StringBuilder("tebdf")})
2021-03-11 11:09:53,942 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:53,943 [main:66] - Compilation checking started
2021-03-11 11:09:54,453 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error((arrayListOf<Kla4>(Kla4())).joinToString(StringBuilder(-1225036656), "okbhr", "ngiab", 1576591719, "uhcru", {a: T -> StringBuilder("tebdf")}))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:54,456 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:09:54,456 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:09:54,456 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:09:54,592 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:09:54,597 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:09:54,605 [main:55] - randomType = Kla5
2021-03-11 11:09:54,740 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:09:54,743 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:09:54,755 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:09:54,820 [main:94] - GETTING EmptyCoroutineContext from MyIterator<String>
2021-03-11 11:09:54,846 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:09:54,847 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:09:54,867 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:09:54,867 [main:103] - replacing ((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + ", got ", String)
2021-03-11 11:09:54,867 [main:38] - replacing (MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + ", got " String
2021-03-11 11:09:54,867 [main:42] - Getting value of type String
2021-03-11 11:09:55,025 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:55,028 [main:46] - GENERATED VALUE OF TYPE String = "syqyf"
2021-03-11 11:09:55,028 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:55,038 [main:55] - randomType = Kla5
2021-03-11 11:09:55,197 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:09:55,200 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:09:55,216 [main:94] - GETTING String from MyIterator<String>
2021-03-11 11:09:55,241 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d6a0eb9]]
2021-03-11 11:09:55,241 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:55,242 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d6a0eb9]
2021-03-11 11:09:55,378 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:09:55,381 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().trimMargin("swczy")
2021-03-11 11:09:55,382 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b733ed6]]
2021-03-11 11:09:55,382 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:55,382 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b733ed6]
2021-03-11 11:09:55,520 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:09:55,522 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:09:55,524 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().takeLastWhile({a: Char -> true})
2021-03-11 11:09:55,525 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@642616bc]]
2021-03-11 11:09:55,525 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:55,525 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@642616bc]
2021-03-11 11:09:55,525 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().toUpperCase()
2021-03-11 11:09:55,525 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c4b612e]]
2021-03-11 11:09:55,525 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:55,525 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c4b612e]
2021-03-11 11:09:55,648 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:09:55,650 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:09:55,653 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().takeWhile({a: Char -> true})
2021-03-11 11:09:55,653 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284d703b]]
2021-03-11 11:09:55,653 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:55,654 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284d703b]
2021-03-11 11:09:55,780 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:09:55,786 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().removePrefix("xerfm")
2021-03-11 11:09:55,787 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59b2d9bf]]
2021-03-11 11:09:55,787 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:55,787 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59b2d9bf]
2021-03-11 11:09:55,911 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:09:55,914 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:09:55,917 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().dropLastWhile({a: Char -> false})
2021-03-11 11:09:55,917 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@511a13e2]]
2021-03-11 11:09:55,917 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:55,917 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@511a13e2]
2021-03-11 11:09:56,066 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:09:56,069 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:09:56,071 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().filterIndexed({a: Int, b: Char -> true})
2021-03-11 11:09:56,071 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d9c107]]
2021-03-11 11:09:56,071 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:56,072 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d9c107]
2021-03-11 11:09:56,201 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:56,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:56,349 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().removeRange(-1310108364, -1895473468)
2021-03-11 11:09:56,349 [main:101] - Case = [public final val v: kotlin.String defined in MyIterator[PropertyDescriptorImpl@38a2a387]]
2021-03-11 11:09:56,349 [main:105] - GENERATED CALL = (MyIterator<String>("")).v
2021-03-11 11:09:56,349 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ffa03c3]]
2021-03-11 11:09:56,349 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:09:56,349 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ffa03c3]
2021-03-11 11:09:56,479 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:56,481 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().takeLast(1335938987)
2021-03-11 11:09:56,481 [main:110] - replacement of (MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + ", got " of type String is (MyIterator<String>("")).next().takeLast(1335938987)
2021-03-11 11:09:56,618 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:56,618 [main:66] - Compilation checking started
2021-03-11 11:09:57,273 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if (prope4 != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((MyIterator<String>("")).next().takeLast(1335938987) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:09:57,276 [main:103] - replacing (prope4, Int)
2021-03-11 11:09:57,277 [main:38] - replacing prope4 Int
2021-03-11 11:09:57,277 [main:42] - Getting value of type Int
2021-03-11 11:09:57,411 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:09:57,414 [main:46] - GENERATED VALUE OF TYPE Int = -409047754
2021-03-11 11:09:57,414 [main:49] - GENERATED IS CALL =false
2021-03-11 11:09:58,250 [main:55] - randomType = HashMap<Function1<Byte?, MyIterator<Double>>, Long>?
2021-03-11 11:09:58,366 [main:302] - generating value of type = HashMap<Function1<Byte?, MyIterator<Double>>, Long> false depth = 0
2021-03-11 11:09:58,504 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Function1<Byte?, MyIterator<Double>>, Long>): HashMap<Function1<Byte?, MyIterator<Double>>, Long> = TODO()
2021-03-11 11:09:58,507 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Function1<Byte?, MyIterator<Double>>, Long>): HashMap<Function1<Byte?, MyIterator<Double>>, Long> = TODO()
2021-03-11 11:09:58,640 [main:302] - generating value of type = Pair<Function1<Byte?, MyIterator<Double>>, Long> false depth = 3
2021-03-11 11:09:58,774 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Function1<Byte?, MyIterator<Double>>, second: Long): Pair<Function1<Byte?, MyIterator<Double>>, Long> = TODO()
2021-03-11 11:09:58,777 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Function1<Byte?, MyIterator<Double>>, second: Long): Pair<Function1<Byte?, MyIterator<Double>>, Long> = TODO()
2021-03-11 11:09:58,909 [main:302] - generating value of type = Function1<Byte?, MyIterator<Double>> false depth = 6
2021-03-11 11:09:58,911 [main:302] - generating value of type = MyIterator<Double> false depth = 7
2021-03-11 11:09:58,913 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:09:59,359 [main:194] - Type params = [Double]
2021-03-11 11:09:59,690 [main:302] - generating value of type = Double true depth = 9
2021-03-11 11:09:59,693 [main:302] - generating value of type = Long true depth = 6
2021-03-11 11:09:59,695 [main:95] - GENERATED = Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)
2021-03-11 11:09:59,696 [main:95] - GENERATED = linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155))
2021-03-11 11:09:59,864 [main:66] - Generated call from random type = (linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size
2021-03-11 11:09:59,864 [main:110] - replacement of prope4 of type Int is (linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size
2021-03-11 11:09:59,979 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:09:59,980 [main:66] - Compilation checking started
2021-03-11 11:10:00,913 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((MyIterator<String>("")).next().takeLast(1335938987) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:10:00,923 [main:103] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-11 11:10:00,923 [main:38] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-11 11:10:00,923 [main:42] - Getting value of type String
2021-03-11 11:10:01,105 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:01,110 [main:46] - GENERATED VALUE OF TYPE String = "kkpgl"
2021-03-11 11:10:01,110 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:02,768 [main:55] - randomType = Function2<MutableMap<Kla2, Boolean>, Function1<MyIterator<Double?>, HashMap<Byte, Function2<String, Float, Byte>>>, Char>
2021-03-11 11:10:02,769 [main:94] - GETTING String from Boolean
2021-03-11 11:10:02,785 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:10:02,785 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:10:02,932 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:02,936 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:10:03,072 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:03,075 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1769147385)
2021-03-11 11:10:03,076 [main:110] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is "kkpgl"
2021-03-11 11:10:03,208 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:10:03,209 [main:66] - Compilation checking started
2021-03-11 11:10:03,956 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { RuntimeException().message!! }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993)) error("kkpgl" + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((MyIterator<String>("")).next().takeLast(1335938987) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:10:03,959 [main:103] - replacing (RuntimeException().message!!, String)
2021-03-11 11:10:03,959 [main:38] - replacing RuntimeException().message!! String
2021-03-11 11:10:03,959 [main:42] - Getting value of type String
2021-03-11 11:10:04,089 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:04,092 [main:46] - GENERATED VALUE OF TYPE String = "mnbit"
2021-03-11 11:10:04,093 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:04,587 [main:55] - randomType = ArrayList<UByte?>
2021-03-11 11:10:04,728 [main:302] - generating value of type = ArrayList<UByte?> false depth = 0
2021-03-11 11:10:04,860 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UByte?): ArrayList<UByte?> = TODO()
2021-03-11 11:10:04,864 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UByte?): ArrayList<UByte?> = TODO()
2021-03-11 11:10:04,998 [main:95] - GENERATED = arrayListOf<UByte?>(null)
2021-03-11 11:10:05,202 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3d644eb8]
2021-03-11 11:10:05,203 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@abbe7b3]
2021-03-11 11:10:05,203 [main:66] - Generated call from random type = (arrayListOf<UByte?>(null)).toArray().contentDeepToString()
2021-03-11 11:10:05,205 [main:94] - GETTING String from Double
2021-03-11 11:10:05,257 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:10:05,258 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:10:05,388 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:10:05,392 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:10:05,529 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:05,532 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(121).toString(-1547056913)
2021-03-11 11:10:05,533 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:10:05,533 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:10:05,533 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:10:05,704 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:05,707 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toLong().toString(-783209646)
2021-03-11 11:10:05,707 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]]
2021-03-11 11:10:05,707 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:05,707 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]
2021-03-11 11:10:05,708 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase()
2021-03-11 11:10:05,708 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]]
2021-03-11 11:10:05,708 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:05,708 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]
2021-03-11 11:10:05,708 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().lowercase()
2021-03-11 11:10:05,708 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:10:05,708 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:10:05,708 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:10:05,834 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:05,837 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toShort().toString(1423287040)
2021-03-11 11:10:05,838 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]]
2021-03-11 11:10:05,838 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:05,838 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]
2021-03-11 11:10:05,838 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase()
2021-03-11 11:10:05,838 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:10:05,838 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:10:05,838 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:10:05,964 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:05,968 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().toString(1934397059)
2021-03-11 11:10:05,968 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:10:05,969 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:10:05,969 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:10:06,100 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:06,104 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toByte().toString(330745598)
2021-03-11 11:10:06,104 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]]
2021-03-11 11:10:06,104 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:06,104 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]
2021-03-11 11:10:06,233 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:06,236 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv")
2021-03-11 11:10:06,236 [main:110] - replacement of RuntimeException().message!! of type String is (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv")
2021-03-11 11:10:06,371 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:10:06,372 [main:66] - Compilation checking started
2021-03-11 11:10:07,105 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993)) error("kkpgl" + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((MyIterator<String>("")).next().takeLast(1335938987) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:10:07,107 [main:103] - replacing ("Continuation ", String)
2021-03-11 11:10:07,108 [main:38] - replacing "Continuation " String
2021-03-11 11:10:07,108 [main:42] - Getting value of type String
2021-03-11 11:10:07,257 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:07,260 [main:46] - GENERATED VALUE OF TYPE String = "txcjk"
2021-03-11 11:10:07,260 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:07,422 [main:55] - randomType = LinkedHashSet<Kla2>
2021-03-11 11:10:07,556 [main:302] - generating value of type = LinkedHashSet<Kla2> false depth = 0
2021-03-11 11:10:07,695 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla2): LkedHashSet<Kla2> = TODO()
2021-03-11 11:10:07,698 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla2): LkedHashSet<Kla2> = TODO()
2021-03-11 11:10:07,845 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 11:10:07,848 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}
2021-03-11 11:10:07,848 [main:95] - GENERATED = linkedSetOf<Kla2>(Kla2())
2021-03-11 11:10:08,051 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@3cf4d55f]
2021-03-11 11:10:08,052 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@abbe7b3]
2021-03-11 11:10:08,053 [main:66] - Generated call from random type = (linkedSetOf<Kla2>(Kla2())).toArray().contentDeepToString()
2021-03-11 11:10:08,054 [main:94] - GETTING String from Double
2021-03-11 11:10:08,108 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]]
2021-03-11 11:10:08,109 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:08,109 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]
2021-03-11 11:10:08,248 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:08,251 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("auaft")
2021-03-11 11:10:08,252 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:10:08,252 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:10:08,388 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:10:08,391 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:10:08,527 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:08,530 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(-79).toString(-1994528056)
2021-03-11 11:10:08,530 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]]
2021-03-11 11:10:08,530 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:08,530 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]
2021-03-11 11:10:08,531 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().lowercase()
2021-03-11 11:10:08,531 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:10:08,531 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:10:08,531 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:10:08,700 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:08,704 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().toString(-658777965)
2021-03-11 11:10:08,704 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]]
2021-03-11 11:10:08,704 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:08,704 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]
2021-03-11 11:10:08,704 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase()
2021-03-11 11:10:08,704 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:10:08,704 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:10:08,704 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:10:08,841 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:08,844 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toLong().toString(1579193499)
2021-03-11 11:10:08,844 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:10:08,845 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:10:08,845 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:10:08,985 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:08,989 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toByte().toString(1677129398)
2021-03-11 11:10:08,989 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]]
2021-03-11 11:10:08,989 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:08,989 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]
2021-03-11 11:10:08,989 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase()
2021-03-11 11:10:08,989 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:10:08,989 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:10:08,989 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:10:09,129 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:09,132 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toShort().toString(386804788)
2021-03-11 11:10:09,132 [main:110] - replacement of "Continuation " of type String is (MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase()
2021-03-11 11:10:09,266 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:10:09,266 [main:66] - Compilation checking started
2021-03-11 11:10:09,971 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993)) error("kkpgl" + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((MyIterator<String>("")).next().takeLast(1335938987) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:10:09,974 [main:103] - replacing (prope6, Function0<Unit>)
2021-03-11 11:10:09,975 [main:38] - replacing prope6 Function0<Unit>
2021-03-11 11:10:09,975 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:10:10,123 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:10:10,126 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:10:10,265 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:10:10,269 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:10:10,574 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:10:10,574 [main:95] - GENERATED = println("vxerg")
2021-03-11 11:10:10,574 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("vxerg")}
2021-03-11 11:10:10,574 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:11,086 [main:55] - randomType = ArrayList<LinkedHashSet<String>>
2021-03-11 11:10:11,250 [main:302] - generating value of type = ArrayList<LinkedHashSet<String>> false depth = 0
2021-03-11 11:10:11,389 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<LinkedHashSet<String>> = TODO()
2021-03-11 11:10:11,393 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<LinkedHashSet<String>> = TODO()
2021-03-11 11:10:11,772 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:10:11,776 [main:95] - GENERATED = ArrayList<LinkedHashSet<String>>(-923030538)
2021-03-11 11:10:11,992 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:10:12,032 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:10:12,048 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:10:12,049 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:10:12,063 [main:110] - replacement of prope6 of type Function0<Unit> is { println("vxerg")}
2021-03-11 11:10:12,198 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:10:12,199 [main:66] - Compilation checking started
2021-03-11 11:10:12,711 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993)) error("kkpgl" + prope4)
            { println("vxerg")}()
        }
        if (prope4 != numberOfSuspensions)
            error((MyIterator<String>("")).next().takeLast(1335938987) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:10:12,714 [main:103] - replacing ({ fu3() }, String)
2021-03-11 11:10:12,714 [main:38] - replacing { fu3() } String
2021-03-11 11:10:12,714 [main:42] - Getting value of type String
2021-03-11 11:10:12,868 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:12,871 [main:46] - GENERATED VALUE OF TYPE String = "liqfe"
2021-03-11 11:10:12,871 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:13,033 [main:55] - randomType = Long?
2021-03-11 11:10:13,175 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:10:13,244 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3a24986b]
2021-03-11 11:10:13,244 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:10:13,379 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:13,383 [main:66] - Generated call from random type = (6281323116756747601)?.toByte().toString(-1075868593)
2021-03-11 11:10:13,384 [main:94] - GETTING String from MyIterator<String>
2021-03-11 11:10:13,398 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@214a0c96]]
2021-03-11 11:10:13,398 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:13,398 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@214a0c96]
2021-03-11 11:10:13,533 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:13,538 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().drop(-94139321)
2021-03-11 11:10:13,538 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@511a13e2]]
2021-03-11 11:10:13,538 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:13,538 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@511a13e2]
2021-03-11 11:10:13,678 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:10:13,681 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:10:13,684 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().filterIndexed({a: Int, b: Char -> true})
2021-03-11 11:10:13,685 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@88395a6]]
2021-03-11 11:10:13,685 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:13,685 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@88395a6]
2021-03-11 11:10:13,685 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().trimStart()
2021-03-11 11:10:13,685 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cd475ae]]
2021-03-11 11:10:13,685 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:13,685 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cd475ae]
2021-03-11 11:10:13,685 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().trimEnd()
2021-03-11 11:10:13,685 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc499be]]
2021-03-11 11:10:13,685 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:13,686 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc499be]
2021-03-11 11:10:13,818 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:10:13,950 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:13,953 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().substringBeforeLast('⸇', "qkfgl")
2021-03-11 11:10:13,953 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c4b612e]]
2021-03-11 11:10:13,954 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:13,954 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c4b612e]
2021-03-11 11:10:14,104 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:10:14,108 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:10:14,111 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().takeWhile({a: Char -> false})
2021-03-11 11:10:14,111 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15ce83a8]]
2021-03-11 11:10:14,111 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:14,111 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15ce83a8]
2021-03-11 11:10:14,254 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:10:14,398 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:14,402 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().substringAfterLast('냠', "khhie")
2021-03-11 11:10:14,402 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69706afc]]
2021-03-11 11:10:14,402 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:14,402 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69706afc]
2021-03-11 11:10:14,403 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().uppercase()
2021-03-11 11:10:14,403 [main:101] - Case = [public final val v: kotlin.String defined in MyIterator[PropertyDescriptorImpl@38a2a387]]
2021-03-11 11:10:14,403 [main:105] - GENERATED CALL = (MyIterator<String>("")).v
2021-03-11 11:10:14,403 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59b2d9bf]]
2021-03-11 11:10:14,403 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:14,403 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59b2d9bf]
2021-03-11 11:10:14,534 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:10:14,537 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:10:14,540 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().dropLastWhile({a: Char -> true})
2021-03-11 11:10:14,540 [main:110] - replacement of { fu3() } of type String is (MyIterator<String>("")).next().substringAfterLast('냠', "khhie")
2021-03-11 11:10:14,668 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:10:14,669 [main:66] - Compilation checking started
2021-03-11 11:10:14,674 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:10:14,675 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try (MyIterator<String>("")).next().substringAfterLast('냠', "khhie") catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = false

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993)) error("kkpgl" + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((MyIterator<String>("")).next().takeLast(1335938987) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:10:14,677 [main:103] - replacing (false, Boolean)
2021-03-11 11:10:14,677 [main:38] - replacing false Boolean
2021-03-11 11:10:14,677 [main:42] - Getting value of type Boolean
2021-03-11 11:10:14,841 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:14,844 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:10:14,844 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:14,850 [main:55] - randomType = Char
2021-03-11 11:10:14,985 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:10:15,027 [main:137] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@14d953ce]
2021-03-11 11:10:15,027 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a35fbda]
2021-03-11 11:10:15,027 [main:66] - Generated call from random type = ('୭').toDouble().isInfinite()
2021-03-11 11:10:15,028 [main:94] - GETTING Boolean from Double
2021-03-11 11:10:15,086 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0fdc6c]]
2021-03-11 11:10:15,086 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:15,086 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0fdc6c]
2021-03-11 11:10:15,087 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().isLowSurrogate()
2021-03-11 11:10:15,087 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b184a6]]
2021-03-11 11:10:15,087 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:15,087 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b184a6]
2021-03-11 11:10:15,087 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().isUpperCase()
2021-03-11 11:10:15,087 [main:101] - Case = [public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]]
2021-03-11 11:10:15,087 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]
2021-03-11 11:10:15,088 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).isNaN()
2021-03-11 11:10:15,088 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cec9118]]
2021-03-11 11:10:15,088 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:15,088 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cec9118]
2021-03-11 11:10:15,239 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:10:15,395 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:15,398 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().equals('ʓ', true)
2021-03-11 11:10:15,398 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f0f149e]]
2021-03-11 11:10:15,398 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:15,398 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f0f149e]
2021-03-11 11:10:15,399 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().isHighSurrogate()
2021-03-11 11:10:15,399 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54367e3e]]
2021-03-11 11:10:15,399 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:10:15,399 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54367e3e]
2021-03-11 11:10:15,399 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toFloat().isFinite()
2021-03-11 11:10:15,399 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]]
2021-03-11 11:10:15,399 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:10:15,399 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]
2021-03-11 11:10:15,399 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isNaN()
2021-03-11 11:10:15,399 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:10:15,399 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:10:15,553 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:15,554 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:10:15,689 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:15,690 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("rvjfe").equals("grwvk")
2021-03-11 11:10:15,690 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:10:15,690 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:10:15,822 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:15,822 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:10:15,958 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:15,961 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("tehup").and(false)
2021-03-11 11:10:15,961 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]]
2021-03-11 11:10:15,962 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:10:16,111 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:16,112 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("ajahe")
2021-03-11 11:10:16,112 [main:110] - replacement of false of type Boolean is (MyIterator<Double>(0.6816303970923716).next()).isNaN()
2021-03-11 11:10:16,280 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:10:16,281 [main:66] - Compilation checking started
2021-03-11 11:10:16,999 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993)) error("kkpgl" + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((MyIterator<String>("")).next().takeLast(1335938987) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:10:17,002 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:10:17,003 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:10:17,003 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:10:17,161 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:10:17,169 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:10:17,586 [main:55] - randomType = Set<UShort>
2021-03-11 11:10:17,587 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:10:17,653 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:10:17,654 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:10:17,669 [main:94] - GETTING EmptyCoroutineContext from MyIterator<String>
2021-03-11 11:10:17,689 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:10:17,689 [main:103] - replacing (prope4, Int)
2021-03-11 11:10:17,689 [main:38] - replacing prope4 Int
2021-03-11 11:10:17,689 [main:42] - Getting value of type Int
2021-03-11 11:10:17,843 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:17,846 [main:46] - GENERATED VALUE OF TYPE Int = -416359037
2021-03-11 11:10:17,846 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:19,116 [main:55] - randomType = Triple<Set<Kla3<Float>>?, MyIterator<String>, Kla1?>?
2021-03-11 11:10:19,283 [main:302] - generating value of type = Triple<Set<Kla3<Float>>?, MyIterator<String>, Kla1?> false depth = 0
2021-03-11 11:10:19,438 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Set<Kla3<Float>>?, second: MyIterator<String>, third: Kla1?): Triple<Set<Kla3<Float>>?, MyIterator<String>, Kla1?> = TODO()
2021-03-11 11:10:19,443 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Set<Kla3<Float>>?, second: MyIterator<String>, third: Kla1?): Triple<Set<Kla3<Float>>?, MyIterator<String>, Kla1?> = TODO()
2021-03-11 11:10:19,618 [main:302] - generating value of type = Set<Kla3<Float>> false depth = 3
2021-03-11 11:10:19,765 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): Set<Kla3<Float>> = TODO()
2021-03-11 11:10:19,770 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): Set<Kla3<Float>> = TODO()
2021-03-11 11:10:19,915 [main:95] - GENERATED = LinkedHashSet<Kla3<Float>>()
2021-03-11 11:10:19,915 [main:302] - generating value of type = MyIterator<String> false depth = 3
2021-03-11 11:10:19,919 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:10:20,491 [main:194] - Type params = [String]
2021-03-11 11:10:20,755 [main:302] - generating value of type = String true depth = 5
2021-03-11 11:10:20,758 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-11 11:10:20,761 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}
2021-03-11 11:10:20,883 [main:194] - Type params = []
2021-03-11 11:10:21,008 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-11 11:10:21,136 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:10:21,141 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:10:21,466 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-11 11:10:21,603 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:10:21,607 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:10:22,042 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:10:22,042 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:10:22,042 [main:95] - GENERATED = Triple<Set<Kla3<Float>>?, MyIterator<String>, Kla1?>(LinkedHashSet<Kla3<Float>>(), MyIterator<String>("zjnaj"), Kla1())
2021-03-11 11:10:22,076 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor@4c030017]
2021-03-11 11:10:22,207 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:22,207 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:10:22,343 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:22,347 [main:66] - Generated call from random type = (Triple<Set<Kla3<Float>>?, MyIterator<String>, Kla1?>(LinkedHashSet<Kla3<Float>>(), MyIterator<String>("zjnaj"), Kla1()))?.equals("izkbn").compareTo(true)
2021-03-11 11:10:22,348 [main:94] - GETTING Int from Boolean
2021-03-11 11:10:22,360 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6140623a]]
2021-03-11 11:10:22,360 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:10:22,483 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:22,488 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6140623a]
2021-03-11 11:10:22,608 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:22,611 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).shr(-1459893548)
2021-03-11 11:10:22,611 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4ab2f15c]]
2021-03-11 11:10:22,611 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:10:22,734 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:22,737 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4ab2f15c]
2021-03-11 11:10:22,860 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:22,986 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:22,989 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).coerceIn(-1189469750, -1357680877)
2021-03-11 11:10:22,989 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24cd318b]]
2021-03-11 11:10:22,989 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:10:23,117 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:23,120 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24cd318b]
2021-03-11 11:10:23,272 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:10:23,277 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).times(112)
2021-03-11 11:10:23,277 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@48afc141]]
2021-03-11 11:10:23,277 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:10:23,419 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:23,424 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@48afc141]
2021-03-11 11:10:23,587 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:23,592 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).coerceAtMost(543364215)
2021-03-11 11:10:23,592 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]]
2021-03-11 11:10:23,592 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:10:23,754 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:23,757 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]
2021-03-11 11:10:23,758 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).toInt()
2021-03-11 11:10:23,758 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]]
2021-03-11 11:10:23,758 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:10:23,911 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:23,915 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]
2021-03-11 11:10:24,069 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:24,073 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).or(-527726533)
2021-03-11 11:10:24,073 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a9358ae]]
2021-03-11 11:10:24,073 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:10:24,260 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:24,263 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a9358ae]
2021-03-11 11:10:24,263 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).countOneBits()
2021-03-11 11:10:24,263 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12855741]]
2021-03-11 11:10:24,263 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:10:24,379 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:24,382 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12855741]
2021-03-11 11:10:24,382 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).countTrailingZeroBits()
2021-03-11 11:10:24,382 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]]
2021-03-11 11:10:24,383 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:10:24,506 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:24,509 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true)
2021-03-11 11:10:24,509 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@513dc9e2]]
2021-03-11 11:10:24,509 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:10:24,626 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:24,629 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@513dc9e2]
2021-03-11 11:10:24,630 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).takeHighestOneBit()
2021-03-11 11:10:24,630 [main:110] - replacement of prope4 of type Int is -416359037
2021-03-11 11:10:24,747 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 11:10:24,748 [main:66] - Compilation checking started
2021-03-11 11:10:25,338 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993)) error("kkpgl" + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((MyIterator<String>("")).next().takeLast(1335938987) + -416359037)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:10:25,340 [main:103] - replacing (prope4 != numberOfSuspensions, Boolean)
2021-03-11 11:10:25,341 [main:38] - replacing prope4 != numberOfSuspensions Boolean
2021-03-11 11:10:25,341 [main:42] - Getting value of type Boolean
2021-03-11 11:10:25,491 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:25,494 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:10:25,494 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:25,657 [main:55] - randomType = Boolean?
2021-03-11 11:10:25,821 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:25,844 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:10:25,986 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:25,987 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:10:26,111 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:26,114 [main:66] - Generated call from random type = (false)?.equals("guihd").xor(false)
2021-03-11 11:10:26,115 [main:94] - GETTING Boolean from Double
2021-03-11 11:10:26,158 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]]
2021-03-11 11:10:26,159 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:10:26,159 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:10:26,297 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:26,298 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toDouble().equals("jvzqj")
2021-03-11 11:10:26,298 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@69dd5e82]]
2021-03-11 11:10:26,298 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:10:26,298 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@69dd5e82]
2021-03-11 11:10:26,418 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:26,418 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toByte().equals("xdjze")
2021-03-11 11:10:26,418 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:10:26,418 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:10:26,538 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:26,538 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:10:26,673 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:26,676 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("klmcx").or(false)
2021-03-11 11:10:26,676 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]]
2021-03-11 11:10:26,676 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:10:26,815 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:26,815 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("klkwl")
2021-03-11 11:10:26,816 [main:101] - Case = [public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a35fbda]]
2021-03-11 11:10:26,816 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a35fbda]
2021-03-11 11:10:26,816 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).isInfinite()
2021-03-11 11:10:26,816 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]]
2021-03-11 11:10:26,816 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:10:26,816 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]
2021-03-11 11:10:26,961 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:26,962 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toFloat().equals("qddca")
2021-03-11 11:10:26,962 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54367e3e]]
2021-03-11 11:10:26,962 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:10:26,962 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54367e3e]
2021-03-11 11:10:26,962 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toFloat().isFinite()
2021-03-11 11:10:26,962 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ae4ecc]]
2021-03-11 11:10:26,962 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:26,962 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ae4ecc]
2021-03-11 11:10:26,963 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().isDigit()
2021-03-11 11:10:26,963 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1868ba98]]
2021-03-11 11:10:26,963 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:26,963 [main:137] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1868ba98]
2021-03-11 11:10:26,963 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().isLowerCase()
2021-03-11 11:10:26,963 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a35fbda]]
2021-03-11 11:10:26,963 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:10:26,963 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a35fbda]
2021-03-11 11:10:26,964 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
2021-03-11 11:10:26,964 [main:110] - replacement of prope4 != numberOfSuspensions of type Boolean is (false)?.equals("guihd").xor(false)
2021-03-11 11:10:27,092 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:10:27,092 [main:66] - Compilation checking started
2021-03-11 11:10:27,699 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((MyIterator<String>("")).next().takeLast(1335938987) + -416359037)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:10:27,703 [main:103] - replacing (exception, Throwable)
2021-03-11 11:10:27,703 [main:38] - replacing exception Throwable
2021-03-11 11:10:27,703 [main:42] - Getting value of type Throwable
2021-03-11 11:10:27,837 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:10:27,844 [main:46] - GENERATED VALUE OF TYPE Throwable = UnsupportedOperationException()
2021-03-11 11:10:27,844 [main:49] - GENERATED IS CALL =true
2021-03-11 11:10:27,850 [main:55] - randomType = Double
2021-03-11 11:10:27,973 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:10:28,006 [main:94] - GETTING Throwable from MyIterator<String>
2021-03-11 11:10:28,016 [main:94] - GETTING Throwable from Double
2021-03-11 11:10:28,044 [main:94] - GETTING Throwable from Double
2021-03-11 11:10:28,045 [main:94] - GETTING Throwable from Boolean
2021-03-11 11:10:28,053 [main:110] - replacement of exception of type Throwable is UnsupportedOperationException()
2021-03-11 11:10:28,166 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:10:28,166 [main:66] - Compilation checking started
2021-03-11 11:10:28,741 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((MyIterator<String>("")).next().takeLast(1335938987) + -416359037)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:10:28,743 [main:103] - replacing (prope2.exceptionOrNull()!!, Throwable)
2021-03-11 11:10:28,743 [main:38] - replacing prope2.exceptionOrNull()!! Throwable
2021-03-11 11:10:28,743 [main:42] - Getting value of type Throwable
2021-03-11 11:10:28,863 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:10:28,991 [main:43] - GENERATING CALL OF fun IllegalStateException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:10:28,995 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:10:29,256 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:10:29,259 [main:95] - GENERATED = IllegalStateException("hdqnm")
2021-03-11 11:10:29,259 [main:46] - GENERATED VALUE OF TYPE Throwable = IllegalStateException("hdqnm")
2021-03-11 11:10:29,259 [main:49] - GENERATED IS CALL =true
2021-03-11 11:10:29,414 [main:55] - randomType = Kla1?
2021-03-11 11:10:29,535 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:10:29,538 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}
2021-03-11 11:10:29,653 [main:194] - Type params = []
2021-03-11 11:10:29,776 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:10:29,898 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:10:29,902 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:10:30,169 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:10:30,296 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:10:30,301 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:10:30,767 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:10:30,767 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:10:30,784 [main:94] - GETTING Throwable from Double
2021-03-11 11:10:30,812 [main:94] - GETTING Throwable from Double
2021-03-11 11:10:30,813 [main:94] - GETTING Throwable from Boolean
2021-03-11 11:10:30,823 [main:94] - GETTING Throwable from MyIterator<String>
2021-03-11 11:10:30,834 [main:110] - replacement of prope2.exceptionOrNull()!! of type Throwable is IllegalStateException("hdqnm")
2021-03-11 11:10:30,949 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:10:30,951 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 11:10:30,951 [main:38] - replacing getOrThrow() Any?
2021-03-11 11:10:30,951 [main:42] - Getting value of type Any?
2021-03-11 11:10:31,072 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:31,072 [main:46] - GENERATED VALUE OF TYPE Any? = "poywf"
2021-03-11 11:10:31,072 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:31,648 [main:55] - randomType = ArrayList<MutableMap<Kla1, Char>>?
2021-03-11 11:10:31,767 [main:302] - generating value of type = ArrayList<MutableMap<Kla1, Char>> false depth = 0
2021-03-11 11:10:31,888 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: MutableMap<Kla1, Char>): ArrayList<MutableMap<Kla1, Char>> = TODO()
2021-03-11 11:10:31,891 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: MutableMap<Kla1, Char>): ArrayList<MutableMap<Kla1, Char>> = TODO()
2021-03-11 11:10:32,015 [main:302] - generating value of type = MutableMap<Kla1, Char> false depth = 3
2021-03-11 11:10:32,137 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): MutableMap<Kla1, Char> = TODO()
2021-03-11 11:10:32,141 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): MutableMap<Kla1, Char> = TODO()
2021-03-11 11:10:32,267 [main:95] - GENERATED = linkedMapOf<Kla1, Char>()
2021-03-11 11:10:32,267 [main:95] - GENERATED = arrayListOf<MutableMap<Kla1, Char>>(linkedMapOf<Kla1, Char>())
2021-03-11 11:10:32,443 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@1d6bf2e6]
2021-03-11 11:10:32,444 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5bac73ab]
2021-03-11 11:10:32,562 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:32,565 [main:66] - Generated call from random type = (arrayListOf<MutableMap<Kla1, Char>>(linkedMapOf<Kla1, Char>()))?.toArray().get(-444538448)
2021-03-11 11:10:32,566 [main:94] - GETTING Any? from Boolean
2021-03-11 11:10:32,576 [main:94] - GETTING Any? from Double
2021-03-11 11:10:32,610 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:10:32,626 [main:94] - GETTING Any? from Double
2021-03-11 11:10:32,626 [main:110] - replacement of getOrThrow() of type Any? is "poywf"
2021-03-11 11:10:32,754 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:10:32,754 [main:66] - Compilation checking started
2021-03-11 11:10:33,111 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"})."poywf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((MyIterator<String>("")).next().takeLast(1335938987) + -416359037)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:10:33,113 [main:103] - replacing (prope6, Function0<Unit>)
2021-03-11 11:10:33,113 [main:38] - replacing prope6 Function0<Unit>
2021-03-11 11:10:33,113 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:10:33,260 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:10:33,263 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:10:33,391 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:10:33,395 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:10:33,779 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:10:33,782 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:10:33,785 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:10:33,785 [main:95] - GENERATED = require(false, { "qzadt"})
2021-03-11 11:10:33,785 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "qzadt"})}
2021-03-11 11:10:33,786 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:34,055 [main:55] - randomType = Kla3<UShort>
2021-03-11 11:10:34,169 [main:302] - generating value of type = Kla3<UShort> false depth = 0
2021-03-11 11:10:34,172 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:10:34,563 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:10:34,566 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 11:10:34,580 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:10:34,609 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:10:34,618 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:10:34,618 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:10:34,630 [main:110] - replacement of prope6 of type Function0<Unit> is { require(false, { "qzadt"})}
2021-03-11 11:10:34,743 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:10:34,743 [main:66] - Compilation checking started
2021-03-11 11:10:35,116 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((MyIterator<String>("")).next().takeLast(1335938987) + -416359037)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.{ require(false, { "qzadt"})} = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:10:35,118 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 11:10:35,118 [main:38] - replacing getOrThrow() Any?
2021-03-11 11:10:35,118 [main:42] - Getting value of type Any?
2021-03-11 11:10:35,235 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:35,235 [main:46] - GENERATED VALUE OF TYPE Any? = "pumiq"
2021-03-11 11:10:35,235 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:35,241 [main:55] - randomType = Short
2021-03-11 11:10:35,358 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:10:35,416 [main:94] - GETTING Any? from Double
2021-03-11 11:10:35,464 [main:94] - GETTING Any? from Double
2021-03-11 11:10:35,465 [main:94] - GETTING Any? from Boolean
2021-03-11 11:10:35,480 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:10:35,498 [main:110] - replacement of getOrThrow() of type Any? is "pumiq"
2021-03-11 11:10:35,613 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:10:35,613 [main:66] - Compilation checking started
2021-03-11 11:10:35,983 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"})."pumiq"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((MyIterator<String>("")).next().takeLast(1335938987) + -416359037)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:10:35,985 [main:103] - replacing (c, Continuation<*>)
2021-03-11 11:10:35,985 [main:38] - replacing c Continuation<*>
2021-03-11 11:10:35,986 [main:42] - Getting value of type Continuation<*>
2021-03-11 11:10:36,126 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 11:10:36,246 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:10:36,250 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:10:36,654 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:10:36,774 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:10:36,777 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:10:37,036 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:10:37,161 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:10:37,165 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:10:37,563 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:10:37,563 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:10:37,563 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:10:37,563 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 11:10:37,569 [main:55] - randomType = Short
2021-03-11 11:10:37,688 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:10:37,734 [main:94] - GETTING Continuation<*> from MyIterator<String>
2021-03-11 11:10:37,747 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 11:10:37,756 [main:94] - GETTING Continuation<*> from Double
2021-03-11 11:10:37,786 [main:94] - GETTING Continuation<*> from Double
2021-03-11 11:10:37,786 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 11:10:37,786 [main:103] - replacing ((linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993), Boolean)
2021-03-11 11:10:37,786 [main:38] - replacing (linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993) Boolean
2021-03-11 11:10:37,786 [main:42] - Getting value of type Boolean
2021-03-11 11:10:37,901 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:37,903 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:10:37,904 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:37,915 [main:55] - randomType = Kla4
2021-03-11 11:10:38,029 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:10:38,032 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}
2021-03-11 11:10:38,037 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@6e024413]
2021-03-11 11:10:38,150 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:38,150 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:10:38,264 [main:66] - Generated call from random type = (Kla4()).equals("tklom").equals(null)
2021-03-11 11:10:38,265 [main:94] - GETTING Boolean from MyIterator<String>
2021-03-11 11:10:38,279 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:10:38,279 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:10:38,279 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:10:38,392 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:38,395 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().and(true)
2021-03-11 11:10:38,395 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e7b42d3]]
2021-03-11 11:10:38,395 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:38,395 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e7b42d3]
2021-03-11 11:10:38,509 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:38,626 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:38,629 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().startsWith("zzrxl", false)
2021-03-11 11:10:38,629 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:10:38,629 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0]
2021-03-11 11:10:38,775 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:38,776 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:10:38,776 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals("xoxpr").not()
2021-03-11 11:10:38,776 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:10:38,776 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0]
2021-03-11 11:10:38,894 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:10:39,007 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:39,010 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals(null).and(false)
2021-03-11 11:10:39,011 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:10:39,011 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0]
2021-03-11 11:10:39,125 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:39,125 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:10:39,243 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:39,243 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals("ieaaa").equals("lircg")
2021-03-11 11:10:39,244 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]]
2021-03-11 11:10:39,244 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:39,244 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]
2021-03-11 11:10:39,358 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:39,359 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().equals("mnehu")
2021-03-11 11:10:39,359 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]]
2021-03-11 11:10:39,359 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:10:39,359 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext()
2021-03-11 11:10:39,359 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bfb4ebc]]
2021-03-11 11:10:39,359 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:39,359 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bfb4ebc]
2021-03-11 11:10:39,474 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:39,598 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:39,601 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().endsWith("mddnb", false)
2021-03-11 11:10:39,602 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:10:39,602 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:10:39,602 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:10:39,602 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().not()
2021-03-11 11:10:39,602 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:10:39,602 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:10:39,602 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:10:39,722 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:39,725 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().xor(true)
2021-03-11 11:10:39,726 [main:110] - replacement of (linkedMapOf<Function1<Byte?, MyIterator<Double>>, Long>(Pair<Function1<Byte?, MyIterator<Double>>, Long>({a: Byte? -> MyIterator<Double>(0.28087200830120695)}, -3510515980526547155)))?.entries.size != (0.6589577f).compareTo(-126).and(1082592993) of type Boolean is (MyIterator<String>("")).equals(null).and(false)
2021-03-11 11:10:39,840 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:10:39,841 [main:66] - Compilation checking started
2021-03-11 11:10:40,347 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = ""

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((MyIterator<String>("")).next().takeLast(1335938987) + -416359037)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:10:40,350 [main:103] - replacing ("", String)
2021-03-11 11:10:40,350 [main:38] - replacing "" String
2021-03-11 11:10:40,350 [main:42] - Getting value of type String
2021-03-11 11:10:40,483 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:40,485 [main:46] - GENERATED VALUE OF TYPE String = "urrcb"
2021-03-11 11:10:40,486 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:40,489 [main:55] - randomType = Short
2021-03-11 11:10:40,601 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:10:40,645 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@208e2b0]
2021-03-11 11:10:40,646 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:10:40,757 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:40,759 [main:66] - Generated call from random type = (-28761).toByte().toString(1134021816)
2021-03-11 11:10:40,760 [main:94] - GETTING String from Double
2021-03-11 11:10:40,801 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]]
2021-03-11 11:10:40,802 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:40,802 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]
2021-03-11 11:10:40,802 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().uppercase()
2021-03-11 11:10:40,802 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:10:40,802 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:10:40,802 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:10:40,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:40,917 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toInt().toString(-1576779994)
2021-03-11 11:10:40,917 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:10:40,917 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:10:40,917 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:10:41,030 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:41,032 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toByte().toString(1108710542)
2021-03-11 11:10:41,032 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:10:41,033 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:10:41,144 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:10:41,146 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:10:41,259 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:41,262 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).compareTo(65).toString(994153569)
2021-03-11 11:10:41,262 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:10:41,262 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:10:41,262 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:10:41,373 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:41,376 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toLong().toString(-1835731352)
2021-03-11 11:10:41,376 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]]
2021-03-11 11:10:41,376 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:41,376 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]
2021-03-11 11:10:41,376 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().lowercase()
2021-03-11 11:10:41,376 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]]
2021-03-11 11:10:41,376 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:41,376 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]
2021-03-11 11:10:41,376 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().titlecase()
2021-03-11 11:10:41,376 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]]
2021-03-11 11:10:41,376 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:10:41,376 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]
2021-03-11 11:10:41,493 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:41,496 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().plus("ogouy")
2021-03-11 11:10:41,496 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:10:41,496 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:10:41,496 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:10:41,636 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:41,638 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toShort().toString(2056224877)
2021-03-11 11:10:41,638 [main:110] - replacement of "" of type String is "urrcb"
2021-03-11 11:10:41,748 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:10:41,748 [main:66] - Compilation checking started
2021-03-11 11:10:42,246 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((MyIterator<String>("")).next().takeLast(1335938987) + -416359037)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:10:42,248 [main:103] - replacing ({
        (MyIterator<String>(""))?.remove()
    }, Unit?)
2021-03-11 11:10:42,248 [main:38] - replacing {
        (MyIterator<String>(""))?.remove()
    } Unit?
2021-03-11 11:10:42,248 [main:42] - Getting value of type Unit?
2021-03-11 11:10:42,360 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:10:42,475 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:10:42,478 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:10:42,716 [main:95] - GENERATED = println(null)
2021-03-11 11:10:42,716 [main:46] - GENERATED VALUE OF TYPE Unit? = println(null)
2021-03-11 11:10:42,716 [main:49] - GENERATED IS CALL =true
2021-03-11 11:10:43,111 [main:55] - randomType = Kla3<MyIterator<Byte>>
2021-03-11 11:10:43,231 [main:302] - generating value of type = Kla3<MyIterator<Byte>> false depth = 0
2021-03-11 11:10:43,234 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:10:43,607 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:10:43,609 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 11:10:43,631 [main:137] - GENERATING call of type public open fun resumeWith(prope2: kotlin.Result<MyIterator<kotlin.Byte>>): kotlin.Unit defined in Kla3[SimpleFunctionDescriptorImpl@151ad905]
2021-03-11 11:10:43,744 [main:302] - generating value of type = Result<MyIterator<Byte>> false depth = 0
2021-03-11 11:10:43,917 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->MyIterator<Byte>): Result<MyIterator<Byte>> = TODO()
2021-03-11 11:10:43,921 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->MyIterator<Byte>): Result<MyIterator<Byte>> = TODO()
2021-03-11 11:10:44,249 [main:302] - generating value of type = Function0<MyIterator<Byte>> false depth = 3
2021-03-11 11:10:44,251 [main:302] - generating value of type = MyIterator<Byte> false depth = 4
2021-03-11 11:10:44,253 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:10:45,210 [main:194] - Type params = [Byte]
2021-03-11 11:10:45,558 [main:302] - generating value of type = Byte true depth = 6
2021-03-11 11:10:45,561 [main:95] - GENERATED = runCatching<MyIterator<Byte>>({ MyIterator<Byte>(60)})
2021-03-11 11:10:45,561 [main:66] - Generated call from random type = (Kla6).resumeWith(runCatching<MyIterator<Byte>>({ MyIterator<Byte>(60)}))
2021-03-11 11:10:45,561 [main:110] - replacement of {
        (MyIterator<String>(""))?.remove()
    } of type Unit? is (Kla6).resumeWith(runCatching<MyIterator<Byte>>({ MyIterator<Byte>(60)}))
2021-03-11 11:10:45,688 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:10:45,689 [main:66] - Compilation checking started
2021-03-11 11:10:45,693 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:10:45,693 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) (Kla6).resumeWith(runCatching<MyIterator<Byte>>({ MyIterator<Byte>(60)}))
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((MyIterator<String>("")).next().takeLast(1335938987) + -416359037)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:10:45,695 [main:103] - replacing (prope6, Function0<Unit>)
2021-03-11 11:10:45,695 [main:38] - replacing prope6 Function0<Unit>
2021-03-11 11:10:45,695 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:10:45,823 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:10:45,825 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:10:45,831 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:10:45,831 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:45,969 [main:55] - randomType = ULong
2021-03-11 11:10:46,089 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:10:46,135 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:10:46,154 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:10:46,168 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:10:46,217 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:10:46,217 [main:110] - replacement of prope6 of type Function0<Unit> is { println()}
2021-03-11 11:10:46,343 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:10:46,344 [main:66] - Compilation checking started
2021-03-11 11:10:46,786 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = {}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((MyIterator<String>("")).next().takeLast(1335938987) + -416359037)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        { println()}()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:10:46,788 [main:103] - replacing ({}, Function0<Unit>)
2021-03-11 11:10:46,788 [main:38] - replacing {} Function0<Unit>
2021-03-11 11:10:46,788 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:10:46,923 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:10:46,925 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:10:47,064 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:10:47,068 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:10:47,458 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:10:47,460 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:10:47,462 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:10:47,462 [main:95] - GENERATED = check(true, { "zffxp"})
2021-03-11 11:10:47,462 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "zffxp"})}
2021-03-11 11:10:47,462 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:47,587 [main:55] - randomType = UInt
2021-03-11 11:10:47,699 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:10:47,731 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:10:47,763 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:10:47,774 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:10:47,775 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:10:47,789 [main:110] - replacement of {} of type Function0<Unit> is { check(true, { "zffxp"})}
2021-03-11 11:10:47,902 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:10:47,902 [main:66] - Compilation checking started
2021-03-11 11:10:48,459 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((MyIterator<String>("")).next().takeLast(1335938987) + -416359037)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:10:48,461 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:10:48,461 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:10:48,461 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:10:48,575 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:10:48,580 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:10:48,731 [main:55] - randomType = ArrayDeque<Kla2>
2021-03-11 11:10:48,861 [main:302] - generating value of type = ArrayDeque<Kla2> false depth = 0
2021-03-11 11:10:48,986 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Kla2>): ArrayDeque<Kla2> = TODO()
2021-03-11 11:10:48,989 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Kla2>): ArrayDeque<Kla2> = TODO()
2021-03-11 11:10:49,242 [main:302] - generating value of type = Collection<Kla2> false depth = 3
2021-03-11 11:10:49,363 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla2): Collection<Kla2> = TODO()
2021-03-11 11:10:49,366 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla2): Collection<Kla2> = TODO()
2021-03-11 11:10:49,491 [main:302] - generating value of type = Kla2 false depth = 6
2021-03-11 11:10:49,493 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}
2021-03-11 11:10:49,494 [main:95] - GENERATED = arrayListOf<Kla2>(Kla2())
2021-03-11 11:10:49,494 [main:95] - GENERATED = ArrayDeque<Kla2>(arrayListOf<Kla2>(Kla2()))
2021-03-11 11:10:49,677 [main:137] - GENERATING call of type public abstract fun get(index: kotlin.Int): Kla2 defined in kotlin.collections.AbstractMutableList[DeserializedSimpleFunctionDescriptor@46d4c5d3]
2021-03-11 11:10:49,800 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:49,803 [main:66] - Generated call from random type = (ArrayDeque<Kla2>(arrayListOf<Kla2>(Kla2()))).get(829020527).context
2021-03-11 11:10:49,804 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:10:49,851 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:10:49,863 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:10:49,863 [main:94] - GETTING EmptyCoroutineContext from MyIterator<String>
2021-03-11 11:10:49,880 [main:110] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is (ArrayDeque<Kla2>(arrayListOf<Kla2>(Kla2()))).get(829020527).context
2021-03-11 11:10:49,997 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:10:49,999 [main:103] - replacing (prope5, Boolean)
2021-03-11 11:10:49,999 [main:38] - replacing prope5 Boolean
2021-03-11 11:10:49,999 [main:42] - Getting value of type Boolean
2021-03-11 11:10:50,114 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:50,116 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:10:50,117 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:50,251 [main:55] - randomType = UByte
2021-03-11 11:10:50,368 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:10:50,408 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7428e0e0]
2021-03-11 11:10:50,521 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:50,522 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:10:50,635 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:50,636 [main:66] - Generated call from random type = (62.toUByte()).equals("xuwhg").equals("ldpwr")
2021-03-11 11:10:50,637 [main:94] - GETTING Boolean from MyIterator<String>
2021-03-11 11:10:50,653 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyIterator[DeserializedSimpleFunctionDescriptor@671c93a5]]
2021-03-11 11:10:50,653 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyIterator[DeserializedSimpleFunctionDescriptor@671c93a5]
2021-03-11 11:10:50,765 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:50,765 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals("pasmz")
2021-03-11 11:10:50,766 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]]
2021-03-11 11:10:50,766 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:50,766 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]
2021-03-11 11:10:50,881 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:50,881 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().equals("vacbc")
2021-03-11 11:10:50,881 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bfb4ebc]]
2021-03-11 11:10:50,882 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:50,882 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bfb4ebc]
2021-03-11 11:10:50,993 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:51,119 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:51,122 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().endsWith("nxjpv", true)
2021-03-11 11:10:51,122 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:10:51,122 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0]
2021-03-11 11:10:51,241 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:51,241 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:10:51,355 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:51,357 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals("fuzxr").xor(false)
2021-03-11 11:10:51,357 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7aa50747]]
2021-03-11 11:10:51,358 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:10:51,358 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7aa50747]
2021-03-11 11:10:51,358 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().toBoolean()
2021-03-11 11:10:51,358 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:10:51,358 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:10:51,358 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:10:51,507 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:51,507 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().equals("iqmir")
2021-03-11 11:10:51,507 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]]
2021-03-11 11:10:51,507 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:10:51,507 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext()
2021-03-11 11:10:51,507 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:10:51,507 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0]
2021-03-11 11:10:51,632 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:10:51,633 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:10:51,760 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:51,762 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals("jjgrs").and(false)
2021-03-11 11:10:51,762 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:10:51,762 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:10:51,762 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:10:51,877 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:51,879 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().xor(true)
2021-03-11 11:10:51,879 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:10:51,879 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:10:51,880 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:10:51,992 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:10:51,994 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().and(false)
2021-03-11 11:10:51,994 [main:110] - replacement of prope5 of type Boolean is (MyIterator<String>("")).hasNext().and(false)
2021-03-11 11:10:52,112 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:10:52,113 [main:66] - Compilation checking started
2021-03-11 11:10:52,508 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        (MyIterator<String>("")).hasNext().and(false) = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((MyIterator<String>("")).next().takeLast(1335938987) + -416359037)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:10:52,510 [main:103] - replacing ({
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>)
2021-03-11 11:10:52,510 [main:38] - replacing {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 11:10:52,510 [main:42] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 11:10:52,647 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 0
2021-03-11 11:10:52,650 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:10:52,775 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:10:52,778 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:10:53,028 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:10:53,030 [main:95] - GENERATED = require(false)
2021-03-11 11:10:53,031 [main:46] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> = {a: Kla0 -> require(false)}
2021-03-11 11:10:53,031 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:53,525 [main:55] - randomType = ArrayDeque<Pair<Short, Kla1?>>
2021-03-11 11:10:53,675 [main:302] - generating value of type = ArrayDeque<Pair<Short, Kla1?>> false depth = 0
2021-03-11 11:10:53,832 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Pair<Short, Kla1?>> = TODO()
2021-03-11 11:10:53,835 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Pair<Short, Kla1?>> = TODO()
2021-03-11 11:10:53,983 [main:95] - GENERATED = ArrayDeque<Pair<Short, Kla1?>>()
2021-03-11 11:10:54,274 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from MyIterator<String>
2021-03-11 11:10:54,303 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from Double
2021-03-11 11:10:54,364 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from Boolean
2021-03-11 11:10:54,385 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from Double
2021-03-11 11:10:54,385 [main:110] - replacement of {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> is {a: Kla0 -> require(false)}
2021-03-11 11:10:54,509 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:10:54,510 [main:66] - Compilation checking started
2021-03-11 11:10:54,913 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {a: Kla0 -> require(false)}

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((MyIterator<String>("")).next().takeLast(1335938987) + -416359037)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:10:54,916 [main:103] - replacing ((MyIterator<String>("")).next().takeLast(1335938987) + -416359037, String)
2021-03-11 11:10:54,916 [main:38] - replacing (MyIterator<String>("")).next().takeLast(1335938987) + -416359037 String
2021-03-11 11:10:54,916 [main:42] - Getting value of type String
2021-03-11 11:10:55,132 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:10:55,135 [main:46] - GENERATED VALUE OF TYPE String = "dzicz"
2021-03-11 11:10:55,135 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:55,320 [main:55] - randomType = Int?
2021-03-11 11:10:55,454 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:55,521 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6184047b]
2021-03-11 11:10:55,522 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:10:55,676 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:10:55,678 [main:66] - Generated call from random type = (584342140)?.toShort().toString(-1734654453)
2021-03-11 11:10:55,679 [main:110] - replacement of (MyIterator<String>("")).next().takeLast(1335938987) + -416359037 of type String is (584342140)?.toShort().toString(-1734654453)
2021-03-11 11:10:55,802 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:10:55,803 [main:66] - Compilation checking started
2021-03-11 11:10:56,514 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:10:56,517 [main:103] - replacing (Kla0(), Kla0)
2021-03-11 11:10:56,517 [main:38] - replacing Kla0() Kla0
2021-03-11 11:10:56,517 [main:42] - Getting value of type Kla0
2021-03-11 11:10:56,695 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:10:56,698 [main:112] - generating klass Kla0 text = class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}
2021-03-11 11:10:56,699 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-11 11:10:56,699 [main:49] - GENERATED IS CALL =true
2021-03-11 11:10:56,884 [main:55] - randomType = UShort
2021-03-11 11:10:57,008 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:10:57,055 [main:94] - GETTING Kla0 from Double
2021-03-11 11:10:57,128 [main:94] - GETTING Kla0 from Double
2021-03-11 11:10:57,130 [main:94] - GETTING Kla0 from MyIterator<String>
2021-03-11 11:10:57,158 [main:94] - GETTING Kla0 from Boolean
2021-03-11 11:10:57,175 [main:110] - replacement of Kla0() of type Kla0 is Kla0()
2021-03-11 11:10:57,330 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:10:57,332 [main:103] - replacing (Kla5(), Kla5)
2021-03-11 11:10:57,332 [main:38] - replacing Kla5() Kla5
2021-03-11 11:10:57,332 [main:42] - Getting value of type Kla5
2021-03-11 11:10:57,445 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:10:57,447 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:10:57,447 [main:46] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 11:10:57,447 [main:49] - GENERATED IS CALL =true
2021-03-11 11:10:57,575 [main:55] - randomType = UInt
2021-03-11 11:10:57,690 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:10:57,728 [main:94] - GETTING Kla5 from Boolean
2021-03-11 11:10:57,739 [main:94] - GETTING Kla5 from Double
2021-03-11 11:10:57,778 [main:94] - GETTING Kla5 from MyIterator<String>
2021-03-11 11:10:57,791 [main:94] - GETTING Kla5 from Double
2021-03-11 11:10:57,792 [main:110] - replacement of Kla5() of type Kla5 is Kla5()
2021-03-11 11:10:57,904 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:10:57,906 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 11:10:57,906 [main:38] - replacing getOrThrow() Any?
2021-03-11 11:10:57,906 [main:42] - Getting value of type Any?
2021-03-11 11:10:58,020 [main:46] - GENERATED VALUE OF TYPE Any? = null
2021-03-11 11:10:58,020 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:58,151 [main:55] - randomType = UInt
2021-03-11 11:10:58,264 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:10:58,304 [main:94] - GETTING Any? from Boolean
2021-03-11 11:10:58,316 [main:94] - GETTING Any? from Double
2021-03-11 11:10:58,354 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:10:58,365 [main:94] - GETTING Any? from Double
2021-03-11 11:10:58,365 [main:110] - replacement of getOrThrow() of type Any? is null
2021-03-11 11:10:58,475 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(NULL)
2021-03-11 11:10:58,475 [main:66] - Compilation checking started
2021-03-11 11:10:58,830 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).null
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:10:58,832 [main:103] - replacing (x, Function1<Ty0, Unit>)
2021-03-11 11:10:58,832 [main:38] - replacing x Function1<Ty0, Unit>
2021-03-11 11:10:58,832 [main:42] - Getting value of type Function1<Ty0, Unit>
2021-03-11 11:10:58,976 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-11 11:10:58,978 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:10:59,095 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:10:59,098 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:10:59,343 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:10:59,345 [main:95] - GENERATED = require(false)
2021-03-11 11:10:59,345 [main:46] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> require(false)}
2021-03-11 11:10:59,345 [main:49] - GENERATED IS CALL =false
2021-03-11 11:10:59,611 [main:55] - randomType = MutableMap<String, Kla6>
2021-03-11 11:10:59,612 [main:94] - GETTING Function1<Ty0, Unit> from Double
2021-03-11 11:10:59,657 [main:94] - GETTING Function1<Ty0, Unit> from Boolean
2021-03-11 11:10:59,668 [main:94] - GETTING Function1<Ty0, Unit> from Double
2021-03-11 11:10:59,669 [main:94] - GETTING Function1<Ty0, Unit> from MyIterator<String>
2021-03-11 11:10:59,685 [main:110] - replacement of x of type Function1<Ty0, Unit> is {a: Ty0 -> require(false)}
2021-03-11 11:10:59,795 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:10:59,796 [main:66] - Compilation checking started
2021-03-11 11:11:00,345 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:00,347 [main:103] - replacing (prope2, Any?)
2021-03-11 11:11:00,347 [main:38] - replacing prope2 Any?
2021-03-11 11:11:00,347 [main:42] - Getting value of type Any?
2021-03-11 11:11:00,486 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:00,486 [main:46] - GENERATED VALUE OF TYPE Any? = "ycvth"
2021-03-11 11:11:00,486 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:00,490 [main:55] - randomType = Int
2021-03-11 11:11:00,606 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:00,648 [main:94] - GETTING Any? from Double
2021-03-11 11:11:00,677 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:11:00,689 [main:94] - GETTING Any? from Boolean
2021-03-11 11:11:00,699 [main:94] - GETTING Any? from Double
2021-03-11 11:11:00,699 [main:110] - replacement of prope2 of type Any? is "ycvth"
2021-03-11 11:11:00,812 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:11:00,812 [main:66] - Compilation checking started
2021-03-11 11:11:01,182 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this."ycvth" = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:01,185 [main:103] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 11:11:01,185 [main:38] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 11:11:01,185 [main:42] - Getting value of type String
2021-03-11 11:11:01,306 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:01,308 [main:46] - GENERATED VALUE OF TYPE String = "bzgwm"
2021-03-11 11:11:01,308 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:01,437 [main:55] - randomType = UInt
2021-03-11 11:11:01,554 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:11:01,594 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2b7a1e01]
2021-03-11 11:11:01,594 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:11:01,707 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:01,709 [main:66] - Generated call from random type = (355579881.toUInt()).toByte().toString(1726379468)
2021-03-11 11:11:01,710 [main:94] - GETTING String from Boolean
2021-03-11 11:11:01,722 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:11:01,722 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:11:01,834 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:01,836 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:11:01,950 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:01,953 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).toString(-159459214)
2021-03-11 11:11:01,954 [main:110] - replacement of "Wrong state-machine generated: it is finished early" of type String is (355579881.toUInt()).toByte().toString(1726379468)
2021-03-11 11:11:02,073 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:02,073 [main:66] - Compilation checking started
2021-03-11 11:11:02,616 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "ctfmc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:02,619 [main:103] - replacing (prope2, Result<Ty0>)
2021-03-11 11:11:02,620 [main:38] - replacing prope2 Result<Ty0>
2021-03-11 11:11:02,620 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:11:02,761 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:11:02,889 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:11:02,892 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:11:03,144 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:11:03,144 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:11:03,283 [main:55] - randomType = Kla4?
2021-03-11 11:11:03,403 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:11:03,405 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}
2021-03-11 11:11:03,414 [main:94] - GETTING Result<Ty0> from MyIterator<String>
2021-03-11 11:11:03,431 [main:94] - GETTING Result<Ty0> from Boolean
2021-03-11 11:11:03,444 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:11:03,477 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:11:03,477 [main:107] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-11 11:11:03,477 [main:103] - replacing (runCatching<Any?>({ "ctfmc"}).getOrThrow(), Any?)
2021-03-11 11:11:03,477 [main:38] - replacing runCatching<Any?>({ "ctfmc"}).getOrThrow() Any?
2021-03-11 11:11:03,477 [main:42] - Getting value of type Any?
2021-03-11 11:11:03,591 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:03,591 [main:46] - GENERATED VALUE OF TYPE Any? = "kdqhf"
2021-03-11 11:11:03,591 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:03,732 [main:55] - randomType = Kla0?
2021-03-11 11:11:03,865 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:11:03,867 [main:112] - generating klass Kla0 text = class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}
2021-03-11 11:11:03,876 [main:94] - GETTING Any? from Double
2021-03-11 11:11:03,921 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:11:03,937 [main:94] - GETTING Any? from Boolean
2021-03-11 11:11:03,949 [main:94] - GETTING Any? from Double
2021-03-11 11:11:03,950 [main:110] - replacement of runCatching<Any?>({ "ctfmc"}).getOrThrow() of type Any? is "kdqhf"
2021-03-11 11:11:04,080 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:11:04,081 [main:66] - Compilation checking started
2021-03-11 11:11:04,598 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + prope4)
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:04,601 [main:103] - replacing (prope4, Int)
2021-03-11 11:11:04,601 [main:38] - replacing prope4 Int
2021-03-11 11:11:04,601 [main:42] - Getting value of type Int
2021-03-11 11:11:04,730 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:04,732 [main:46] - GENERATED VALUE OF TYPE Int = -2006046265
2021-03-11 11:11:04,732 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:04,883 [main:55] - randomType = Array<MyIterator<String>>
2021-03-11 11:11:05,013 [main:302] - generating value of type = Array<MyIterator<String>> false depth = 0
2021-03-11 11:11:05,151 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->MyIterator<String>): Array<MyIterator<String>> = TODO()
2021-03-11 11:11:05,154 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->MyIterator<String>): Array<MyIterator<String>> = TODO()
2021-03-11 11:11:05,554 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:11:05,556 [main:302] - generating value of type = Function1<Int, MyIterator<String>> false depth = 3
2021-03-11 11:11:05,558 [main:302] - generating value of type = MyIterator<String> false depth = 4
2021-03-11 11:11:05,560 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:11:06,158 [main:194] - Type params = [String]
2021-03-11 11:11:06,392 [main:302] - generating value of type = String true depth = 6
2021-03-11 11:11:06,395 [main:95] - GENERATED = Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})
2021-03-11 11:11:06,413 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@72653b9d]
2021-03-11 11:11:06,413 [main:66] - Generated call from random type = (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec()
2021-03-11 11:11:06,414 [main:94] - GETTING Int from Double
2021-03-11 11:11:06,455 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57c4738e]]
2021-03-11 11:11:06,455 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:11:06,455 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57c4738e]
2021-03-11 11:11:06,456 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toInt().inc()
2021-03-11 11:11:06,456 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6aabf6f5]]
2021-03-11 11:11:06,456 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:06,456 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6aabf6f5]
2021-03-11 11:11:06,568 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:11:06,570 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().minus('闚')
2021-03-11 11:11:06,570 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@49475c0a]]
2021-03-11 11:11:06,570 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:11:06,570 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@49475c0a]
2021-03-11 11:11:06,571 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toShort().countTrailingZeroBits()
2021-03-11 11:11:06,571 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f0e1b71]]
2021-03-11 11:11:06,571 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:11:06,571 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f0e1b71]
2021-03-11 11:11:06,700 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:11:06,702 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toInt().minus(12)
2021-03-11 11:11:06,702 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5a06a235]]
2021-03-11 11:11:06,702 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:11:06,702 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5a06a235]
2021-03-11 11:11:06,832 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:11:06,834 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toByte().times(15)
2021-03-11 11:11:06,834 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@62ba5744]]
2021-03-11 11:11:06,834 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:11:06,834 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@62ba5744]
2021-03-11 11:11:06,834 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toFloat().toInt()
2021-03-11 11:11:06,835 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1765e890]]
2021-03-11 11:11:06,835 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:11:06,835 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1765e890]
2021-03-11 11:11:06,835 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toByte().countLeadingZeroBits()
2021-03-11 11:11:06,835 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24cd318b]]
2021-03-11 11:11:06,835 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:11:06,957 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:11:06,959 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24cd318b]
2021-03-11 11:11:07,087 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:11:07,089 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).compareTo(-51).times(-78)
2021-03-11 11:11:07,089 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@472bf56c]]
2021-03-11 11:11:07,089 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@472bf56c]
2021-03-11 11:11:07,090 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toInt()
2021-03-11 11:11:07,090 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6630fdb2]]
2021-03-11 11:11:07,090 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:11:07,219 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:11:07,221 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6630fdb2]
2021-03-11 11:11:07,334 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:07,336 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).compareTo(49).xor(-407086279)
2021-03-11 11:11:07,336 [main:110] - replacement of prope4 of type Int is (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec()
2021-03-11 11:11:07,449 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:07,450 [main:66] - Compilation checking started
2021-03-11 11:11:08,010 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:08,012 [main:103] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-11 11:11:08,012 [main:38] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-11 11:11:08,012 [main:42] - Getting value of type String
2021-03-11 11:11:08,129 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:08,132 [main:46] - GENERATED VALUE OF TYPE String = "bulyd"
2021-03-11 11:11:08,132 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:08,138 [main:55] - randomType = Short
2021-03-11 11:11:08,253 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:11:08,308 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7e6707c5]
2021-03-11 11:11:08,308 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]
2021-03-11 11:11:08,308 [main:66] - Generated call from random type = (-29130).toChar().uppercase()
2021-03-11 11:11:08,309 [main:94] - GETTING String from Double
2021-03-11 11:11:08,357 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:11:08,358 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:11:08,475 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:11:08,478 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:11:08,592 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:08,595 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).compareTo(106).toString(-1713348021)
2021-03-11 11:11:08,595 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:11:08,595 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:11:08,595 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:11:08,711 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:08,713 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toInt().toString(2130854239)
2021-03-11 11:11:08,714 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]]
2021-03-11 11:11:08,714 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:08,714 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]
2021-03-11 11:11:08,714 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().titlecase()
2021-03-11 11:11:08,714 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:11:08,714 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:11:08,714 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:11:08,827 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:08,830 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toShort().toString(910903813)
2021-03-11 11:11:08,830 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]]
2021-03-11 11:11:08,830 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:08,830 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]
2021-03-11 11:11:08,943 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:08,946 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().plus("mzlcj")
2021-03-11 11:11:08,946 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]]
2021-03-11 11:11:08,946 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:08,946 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]
2021-03-11 11:11:08,946 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().uppercase()
2021-03-11 11:11:08,946 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:11:08,946 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:11:08,946 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:11:09,100 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:09,103 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toLong().toString(-399106607)
2021-03-11 11:11:09,103 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]]
2021-03-11 11:11:09,103 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:09,103 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]
2021-03-11 11:11:09,103 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().lowercase()
2021-03-11 11:11:09,103 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:11:09,103 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:11:09,103 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:11:09,219 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:09,222 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toByte().toString(328288650)
2021-03-11 11:11:09,222 [main:110] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (MyIterator<Double>(0.6816303970923716).v).toChar().titlecase()
2021-03-11 11:11:09,338 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:09,338 [main:66] - Compilation checking started
2021-03-11 11:11:09,857 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:09,859 [main:103] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 11:11:09,860 [main:38] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 11:11:09,860 [main:42] - Getting value of type Boolean
2021-03-11 11:11:09,975 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:09,977 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:11:09,978 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:09,983 [main:55] - randomType = String
2021-03-11 11:11:10,102 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:10,130 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83]
2021-03-11 11:11:10,244 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:10,362 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:10,365 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7430d9b3]
2021-03-11 11:11:10,478 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:11:10,481 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:11:10,484 [main:66] - Generated call from random type = ("opaeh").subSequence(684716397, 293483779).all({a: Char -> true})
2021-03-11 11:11:10,485 [main:94] - GETTING Boolean from Double
2021-03-11 11:11:10,527 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]]
2021-03-11 11:11:10,527 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:11:10,527 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]
2021-03-11 11:11:10,641 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:10,642 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toFloat().equals("bhjgk")
2021-03-11 11:11:10,642 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:11:10,642 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:11:10,756 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:10,756 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:11:10,756 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("rgemn").not()
2021-03-11 11:11:10,756 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1868ba98]]
2021-03-11 11:11:10,757 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:10,757 [main:137] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1868ba98]
2021-03-11 11:11:10,757 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().isLowerCase()
2021-03-11 11:11:10,757 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@69dd5e82]]
2021-03-11 11:11:10,757 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:11:10,757 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@69dd5e82]
2021-03-11 11:11:10,871 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:10,871 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toByte().equals("fgvhx")
2021-03-11 11:11:10,872 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:11:10,872 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:11:10,988 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:10,988 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:11:11,108 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:11,108 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("pludo").equals("sywof")
2021-03-11 11:11:11,108 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0fdc6c]]
2021-03-11 11:11:11,108 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:11,108 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0fdc6c]
2021-03-11 11:11:11,109 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().isLowSurrogate()
2021-03-11 11:11:11,109 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]]
2021-03-11 11:11:11,109 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:11:11,109 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:11:11,224 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:11,224 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toDouble().equals("neycn")
2021-03-11 11:11:11,225 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:11:11,225 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:11:11,347 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:11,348 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:11:11,483 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:11,486 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("znizi").xor(false)
2021-03-11 11:11:11,486 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:11:11,486 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:11:11,614 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:11,615 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:11:11,729 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:11,732 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).equals("ctkpn").or(false)
2021-03-11 11:11:11,732 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]]
2021-03-11 11:11:11,732 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:11:11,854 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:11:11,856 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]
2021-03-11 11:11:11,970 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:11,970 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(50).equals("chetv")
2021-03-11 11:11:11,970 [main:110] - replacement of c !is CoroutineStackFrame of type Boolean is ("opaeh").subSequence(684716397, 293483779).all({a: Char -> true})
2021-03-11 11:11:12,085 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:12,085 [main:66] - Compilation checking started
2021-03-11 11:11:12,478 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (("opaeh").subSequence(684716397, 293483779).all({a: Char -> true})) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:12,481 [main:103] - replacing (c, Continuation<*>)
2021-03-11 11:11:12,481 [main:38] - replacing c Continuation<*>
2021-03-11 11:11:12,481 [main:42] - Getting value of type Continuation<*>
2021-03-11 11:11:12,614 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 11:11:12,753 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:11:12,757 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:11:13,195 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:11:13,317 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:11:13,321 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:11:13,584 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:11:13,707 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:11:13,711 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:11:14,109 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 11:11:14,233 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:11:14,237 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:11:14,636 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-11 11:11:14,761 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:11:14,765 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:11:15,187 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-11 11:11:15,340 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:11:15,344 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:11:15,947 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 18
2021-03-11 11:11:15,947 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:11:15,947 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:11:15,947 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:11:15,947 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:11:15,947 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:11:15,947 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:11:15,948 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 11:11:16,093 [main:55] - randomType = ULong
2021-03-11 11:11:16,206 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:11:16,243 [main:94] - GETTING Continuation<*> from Double
2021-03-11 11:11:16,283 [main:94] - GETTING Continuation<*> from MyIterator<String>
2021-03-11 11:11:16,298 [main:94] - GETTING Continuation<*> from Double
2021-03-11 11:11:16,299 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 11:11:16,310 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 11:11:16,310 [main:103] - replacing (this, Kla2)
2021-03-11 11:11:16,310 [main:38] - replacing this Kla2
2021-03-11 11:11:16,310 [main:42] - Getting value of type Kla2
2021-03-11 11:11:16,424 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 11:11:16,427 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "yyihh"
    }

    var prope2: Any? = null
}
2021-03-11 11:11:16,427 [main:46] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-11 11:11:16,427 [main:49] - GENERATED IS CALL =true
2021-03-11 11:11:16,433 [main:55] - randomType = Short
2021-03-11 11:11:16,548 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:11:16,600 [main:94] - GETTING Kla2 from MyIterator<String>
2021-03-11 11:11:16,617 [main:94] - GETTING Kla2 from Double
2021-03-11 11:11:16,659 [main:94] - GETTING Kla2 from Boolean
2021-03-11 11:11:16,670 [main:94] - GETTING Kla2 from Double
2021-03-11 11:11:16,670 [main:110] - replacement of this of type Kla2 is Kla2()
2021-03-11 11:11:16,794 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:11:16,794 [main:66] - Compilation checking started
2021-03-11 11:11:17,398 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:17,400 [main:103] - replacing (prope2, String)
2021-03-11 11:11:17,401 [main:38] - replacing prope2 String
2021-03-11 11:11:17,401 [main:42] - Getting value of type String
2021-03-11 11:11:17,515 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:17,517 [main:46] - GENERATED VALUE OF TYPE String = "qwcjd"
2021-03-11 11:11:17,518 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:17,652 [main:55] - randomType = Float
2021-03-11 11:11:17,774 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:11:17,824 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6cd99ca5]
2021-03-11 11:11:17,824 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]
2021-03-11 11:11:17,943 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:17,946 [main:66] - Generated call from random type = (0.15658933f).toChar().plus("fzgwt")
2021-03-11 11:11:17,946 [main:110] - replacement of prope2 of type String is (0.15658933f).toChar().plus("fzgwt")
2021-03-11 11:11:18,060 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:18,061 [main:66] - Compilation checking started
2021-03-11 11:11:18,421 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        (0.15658933f).toChar().plus("fzgwt") = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:18,423 [main:103] - replacing (prope1.prope6, Function0<Unit>)
2021-03-11 11:11:18,423 [main:38] - replacing prope1.prope6 Function0<Unit>
2021-03-11 11:11:18,423 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:11:18,573 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:11:18,577 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:11:18,729 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:11:18,732 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:11:18,993 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:11:18,994 [main:95] - GENERATED = print("krilg")
2021-03-11 11:11:18,994 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("krilg")}
2021-03-11 11:11:18,994 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:19,000 [main:55] - randomType = Int
2021-03-11 11:11:19,118 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:19,159 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:11:19,200 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:11:19,202 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:11:19,222 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:11:19,239 [main:110] - replacement of prope1.prope6 of type Function0<Unit> is { print("krilg")}
2021-03-11 11:11:19,384 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:11:19,385 [main:66] - Compilation checking started
2021-03-11 11:11:19,889 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        { print("krilg")} = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:19,891 [main:103] - replacing (prope4, Int)
2021-03-11 11:11:19,891 [main:38] - replacing prope4 Int
2021-03-11 11:11:19,891 [main:42] - Getting value of type Int
2021-03-11 11:11:20,016 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:20,019 [main:46] - GENERATED VALUE OF TYPE Int = 1599367474
2021-03-11 11:11:20,019 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:20,621 [main:55] - randomType = Collection<Kla6?>?
2021-03-11 11:11:20,622 [main:94] - GETTING Int from MyIterator<String>
2021-03-11 11:11:20,641 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]]
2021-03-11 11:11:20,641 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68cdb2e0]
2021-03-11 11:11:20,762 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:20,763 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:11:20,886 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:20,890 [main:105] - GENERATED CALL = (MyIterator<String>("")).equals("hursp").compareTo(true)
2021-03-11 11:11:20,890 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f62a3f0]]
2021-03-11 11:11:20,890 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:11:20,890 [main:137] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f62a3f0]
2021-03-11 11:11:20,890 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().toInt()
2021-03-11 11:11:20,890 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6107966a]]
2021-03-11 11:11:20,890 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:11:20,891 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().length
2021-03-11 11:11:20,891 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@486db24e]]
2021-03-11 11:11:20,891 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:11:20,891 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@486db24e]
2021-03-11 11:11:21,009 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:21,138 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:21,142 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().compareTo("mfzpi", false)
2021-03-11 11:11:21,142 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]]
2021-03-11 11:11:21,143 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@2a42cd05]
2021-03-11 11:11:21,143 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:11:21,267 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:21,270 [main:105] - GENERATED CALL = (MyIterator<String>("")).hasNext().compareTo(true)
2021-03-11 11:11:21,271 [main:110] - replacement of prope4 of type Int is (MyIterator<String>("")).hasNext().compareTo(true)
2021-03-11 11:11:21,388 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:21,388 [main:66] - Compilation checking started
2021-03-11 11:11:21,747 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        (MyIterator<String>("")).hasNext().compareTo(true) = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:21,750 [main:103] - replacing (prope2, String)
2021-03-11 11:11:21,750 [main:38] - replacing prope2 String
2021-03-11 11:11:21,750 [main:42] - Getting value of type String
2021-03-11 11:11:21,865 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:21,867 [main:46] - GENERATED VALUE OF TYPE String = "jdoti"
2021-03-11 11:11:21,868 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:22,711 [main:55] - randomType = Kla3<Triple<Int?, Short, Function1<UShort, Float>>>
2021-03-11 11:11:22,828 [main:302] - generating value of type = Kla3<Triple<Int?, Short, Function1<UShort, Float>>> false depth = 0
2021-03-11 11:11:22,831 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:11:23,378 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:11:23,381 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 11:11:23,409 [main:94] - GETTING String from MyIterator<String>
2021-03-11 11:11:23,425 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7780c3c3]]
2021-03-11 11:11:23,425 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:11:23,425 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7780c3c3]
2021-03-11 11:11:23,542 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:11:23,662 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:11:23,782 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:23,785 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceFirst('쒕', '馈', false)
2021-03-11 11:11:23,785 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@680fb5c2]]
2021-03-11 11:11:23,785 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:11:23,786 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@680fb5c2]
2021-03-11 11:11:23,903 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:11:23,909 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().removeSuffix("kcoml")
2021-03-11 11:11:23,909 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2485cd4a]]
2021-03-11 11:11:23,909 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:11:23,909 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2485cd4a]
2021-03-11 11:11:23,909 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().reversed()
2021-03-11 11:11:23,909 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b2dbc56]]
2021-03-11 11:11:23,909 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:11:23,909 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b2dbc56]
2021-03-11 11:11:24,028 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:11:24,031 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:11:24,034 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().filterNot({a: Char -> false})
2021-03-11 11:11:24,034 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d6a0eb9]]
2021-03-11 11:11:24,034 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:11:24,034 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d6a0eb9]
2021-03-11 11:11:24,149 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:24,152 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().trimMargin("qplri")
2021-03-11 11:11:24,152 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e94f258]]
2021-03-11 11:11:24,152 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:11:24,152 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e94f258]
2021-03-11 11:11:24,268 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:24,269 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().plus("gqmtk")
2021-03-11 11:11:24,269 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21915f73]]
2021-03-11 11:11:24,269 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:11:24,269 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21915f73]
2021-03-11 11:11:24,385 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:24,388 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().concat("xqbib")
2021-03-11 11:11:24,388 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]]
2021-03-11 11:11:24,388 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:11:24,388 [main:105] - GENERATED CALL = (MyIterator<String>("")).next()
2021-03-11 11:11:24,388 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ce19e3d]]
2021-03-11 11:11:24,388 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:11:24,388 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ce19e3d]
2021-03-11 11:11:24,508 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:11:24,635 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:24,752 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:24,756 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceBeforeLast('㨎', "kvjpm", "pgead")
2021-03-11 11:11:24,756 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@737d8b92]]
2021-03-11 11:11:24,756 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@6211f1ff]
2021-03-11 11:11:24,756 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@737d8b92]
2021-03-11 11:11:24,874 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 11:11:24,996 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 11:11:25,000 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 11:11:25,122 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:11:25,125 [main:95] - GENERATED = mutableListOf<Int>(1300976811)
2021-03-11 11:11:25,125 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().slice(mutableListOf<Int>(1300976811))
2021-03-11 11:11:25,125 [main:110] - replacement of prope2 of type String is (MyIterator<String>("")).next()
2021-03-11 11:11:25,241 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:25,242 [main:66] - Compilation checking started
2021-03-11 11:11:25,785 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:25,787 [main:103] - replacing ({
        (MyIterator<String>(""))?.remove()
    }, Unit?)
2021-03-11 11:11:25,787 [main:38] - replacing {
        (MyIterator<String>(""))?.remove()
    } Unit?
2021-03-11 11:11:25,787 [main:42] - Getting value of type Unit?
2021-03-11 11:11:25,904 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:11:26,025 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:11:26,029 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:11:26,291 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 11:11:26,294 [main:95] - GENERATED = check(false)
2021-03-11 11:11:26,294 [main:46] - GENERATED VALUE OF TYPE Unit? = check(false)
2021-03-11 11:11:26,294 [main:49] - GENERATED IS CALL =true
2021-03-11 11:11:28,498 [main:55] - randomType = Function2<Kla5, String, Function2<Kla6, MutableMap<Kla3<Short?>?, Set<String>>, MutableMap<LinkedHashMap<HashMap<ULong, String>, ULong>, Boolean?>>>
2021-03-11 11:11:28,499 [main:94] - GETTING Unit? from Double
2021-03-11 11:11:28,554 [main:94] - GETTING Unit? from MyIterator<String>
2021-03-11 11:11:28,574 [main:101] - Case = [public final fun remove(): kotlin.Unit defined in MyIterator[SimpleFunctionDescriptorImpl@1191d08a]]
2021-03-11 11:11:28,574 [main:137] - GENERATING call of type public final fun remove(): kotlin.Unit defined in MyIterator[SimpleFunctionDescriptorImpl@1191d08a]
2021-03-11 11:11:28,574 [main:105] - GENERATED CALL = (MyIterator<String>(""))?.remove()
2021-03-11 11:11:28,575 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72be2170]]
2021-03-11 11:11:28,575 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72be2170]
2021-03-11 11:11:28,733 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-11 11:11:28,736 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:11:28,905 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:11:28,912 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:11:29,203 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:11:29,203 [main:95] - GENERATED = print("wztth")
2021-03-11 11:11:29,204 [main:105] - GENERATED CALL = (MyIterator<String>(""))?.forEach({a: T -> print("wztth")})
2021-03-11 11:11:29,204 [main:110] - replacement of {
        (MyIterator<String>(""))?.remove()
    } of type Unit? is check(false)
2021-03-11 11:11:29,335 [main:33] - Trying to replace BLOCK on Element(CALL_EXPRESSION)
2021-03-11 11:11:29,336 [main:66] - Compilation checking started
2021-03-11 11:11:29,341 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:11:29,341 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) check(false)
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:29,343 [main:103] - replacing (method, String)
2021-03-11 11:11:29,343 [main:38] - replacing method String
2021-03-11 11:11:29,343 [main:42] - Getting value of type String
2021-03-11 11:11:29,465 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:29,468 [main:46] - GENERATED VALUE OF TYPE String = "liucu"
2021-03-11 11:11:29,468 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:29,480 [main:55] - randomType = Kla4
2021-03-11 11:11:29,616 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:11:29,619 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}
2021-03-11 11:11:29,625 [main:94] - GETTING String from Double
2021-03-11 11:11:29,665 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:11:29,665 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:11:29,665 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:11:29,790 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:29,793 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toLong().toString(-1709213263)
2021-03-11 11:11:29,793 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:11:29,793 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:11:29,917 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:11:29,919 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:11:30,043 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:30,046 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).compareTo(121).toString(-192320729)
2021-03-11 11:11:30,046 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]]
2021-03-11 11:11:30,046 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:30,046 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]
2021-03-11 11:11:30,046 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase()
2021-03-11 11:11:30,046 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]]
2021-03-11 11:11:30,046 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:30,046 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]
2021-03-11 11:11:30,168 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:30,171 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nupki")
2021-03-11 11:11:30,171 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]]
2021-03-11 11:11:30,171 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:30,171 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]
2021-03-11 11:11:30,172 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().lowercase()
2021-03-11 11:11:30,172 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:11:30,172 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:11:30,172 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:11:30,286 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:30,289 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toInt().toString(1603038666)
2021-03-11 11:11:30,289 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]]
2021-03-11 11:11:30,289 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:30,289 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]
2021-03-11 11:11:30,290 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase()
2021-03-11 11:11:30,290 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:11:30,290 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:11:30,290 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:11:30,414 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:30,417 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toByte().toString(-1760271416)
2021-03-11 11:11:30,417 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:11:30,417 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:11:30,417 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:11:30,540 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:30,543 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).next()).toShort().toString(-1181478418)
2021-03-11 11:11:30,543 [main:110] - replacement of method of type String is (MyIterator<Double>(0.6816303970923716).next()).toInt().toString(1603038666)
2021-03-11 11:11:30,656 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:30,656 [main:66] - Compilation checking started
2021-03-11 11:11:31,214 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith((MyIterator<Double>(0.6816303970923716).next()).toInt().toString(1603038666)) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:31,216 [main:103] - replacing (prope2, Result<Ty0>)
2021-03-11 11:11:31,216 [main:38] - replacing prope2 Result<Ty0>
2021-03-11 11:11:31,216 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:11:31,334 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:11:31,457 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:11:31,461 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:11:31,720 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:11:31,720 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:11:33,976 [main:55] - randomType = Triple<HashMap<Function2<List<LinkedHashMap<UInt?, Map<UByte, Boolean>>>, LinkedHashSet<Array<Kla5>>, Triple<Byte, Kla6, Kla0>>, UInt>?, Byte, Kla6>
2021-03-11 11:11:34,124 [main:302] - generating value of type = Triple<HashMap<Function2<List<LinkedHashMap<UInt?, Map<UByte, Boolean>>>, LinkedHashSet<Array<Kla5>>, Triple<Byte, Kla6, Kla0>>, UInt>?, Byte, Kla6> false depth = 0
2021-03-11 11:11:34,255 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: HashMap<Function2<List<LinkedHashMap<UInt?, Map<UByte, Boolean>>>, LinkedHashSet<Array<Kla5>>, Triple<Byte, Kla6, Kla0>>, UInt>?, second: Byte, third: Kla6): Triple<HashMap<Function2<List<LinkedHashMap<UInt?, Map<UByte, Boolean>>>, LinkedHashSet<Array<Kla5>>, Triple<Byte, Kla6, Kla0>>, UInt>?, Byte, Kla6> = TODO()
2021-03-11 11:11:34,259 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: HashMap<Function2<List<LinkedHashMap<UInt?, Map<UByte, Boolean>>>, LinkedHashSet<Array<Kla5>>, Triple<Byte, Kla6, Kla0>>, UInt>?, second: Byte, third: Kla6): Triple<HashMap<Function2<List<LinkedHashMap<UInt?, Map<UByte, Boolean>>>, LinkedHashSet<Array<Kla5>>, Triple<Byte, Kla6, Kla0>>, UInt>?, Byte, Kla6> = TODO()
2021-03-11 11:11:34,387 [main:302] - generating value of type = HashMap<Function2<List<LinkedHashMap<UInt?, Map<UByte, Boolean>>>, LinkedHashSet<Array<Kla5>>, Triple<Byte, Kla6, Kla0>>, UInt> false depth = 3
2021-03-11 11:11:34,515 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Function2<List<LkedHashMap<UInt?, Map<UByte, Boolean>>>, LkedHashSet<Array<Kla5>>, Triple<Byte, Kla6, Kla0>>, UInt> = TODO()
2021-03-11 11:11:34,519 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Function2<List<LkedHashMap<UInt?, Map<UByte, Boolean>>>, LkedHashSet<Array<Kla5>>, Triple<Byte, Kla6, Kla0>>, UInt> = TODO()
2021-03-11 11:11:34,672 [main:95] - GENERATED = hashMapOf<Function2<List<LinkedHashMap<UInt?, Map<UByte, Boolean>>>, LinkedHashSet<Array<Kla5>>, Triple<Byte, Kla6, Kla0>>, UInt>()
2021-03-11 11:11:34,672 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 11:11:34,675 [main:302] - generating value of type = Kla6 false depth = 3
2021-03-11 11:11:34,678 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 11:11:34,678 [main:95] - GENERATED = Triple<HashMap<Function2<List<LinkedHashMap<UInt?, Map<UByte, Boolean>>>, LinkedHashSet<Array<Kla5>>, Triple<Byte, Kla6, Kla0>>, UInt>?, Byte, Kla6>(hashMapOf<Function2<List<LinkedHashMap<UInt?, Map<UByte, Boolean>>>, LinkedHashSet<Array<Kla5>>, Triple<Byte, Kla6, Kla0>>, UInt>(), -33, Kla6)
2021-03-11 11:11:34,721 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:11:34,752 [main:94] - GETTING Result<Ty0> from MyIterator<String>
2021-03-11 11:11:34,765 [main:94] - GETTING Result<Ty0> from Boolean
2021-03-11 11:11:34,774 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:11:34,774 [main:107] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-11 11:11:34,774 [main:103] - replacing (prope2, Result<Ty0>)
2021-03-11 11:11:34,774 [main:38] - replacing prope2 Result<Ty0>
2021-03-11 11:11:34,774 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:11:34,889 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:11:35,009 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:11:35,013 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:11:35,269 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:11:35,269 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:11:35,280 [main:55] - randomType = Kla5
2021-03-11 11:11:35,399 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:11:35,402 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}
2021-03-11 11:11:35,414 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:11:35,452 [main:94] - GETTING Result<Ty0> from Boolean
2021-03-11 11:11:35,462 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:11:35,463 [main:94] - GETTING Result<Ty0> from MyIterator<String>
2021-03-11 11:11:35,475 [main:107] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-11 11:11:35,475 [main:103] - replacing (prope2, Any?)
2021-03-11 11:11:35,475 [main:38] - replacing prope2 Any?
2021-03-11 11:11:35,475 [main:42] - Getting value of type Any?
2021-03-11 11:11:35,591 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:35,591 [main:46] - GENERATED VALUE OF TYPE Any? = "dhzbx"
2021-03-11 11:11:35,591 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:35,602 [main:55] - randomType = Kla0
2021-03-11 11:11:35,717 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:11:35,720 [main:112] - generating klass Kla0 text = class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}
2021-03-11 11:11:35,726 [main:94] - GETTING Any? from Double
2021-03-11 11:11:35,758 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:11:35,778 [main:94] - GETTING Any? from Double
2021-03-11 11:11:35,780 [main:94] - GETTING Any? from Boolean
2021-03-11 11:11:35,795 [main:110] - replacement of prope2 of type Any? is "dhzbx"
2021-03-11 11:11:35,939 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:11:35,939 [main:66] - Compilation checking started
2021-03-11 11:11:36,315 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2()."dhzbx" = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith((MyIterator<Double>(0.6816303970923716).next()).toInt().toString(1603038666)) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:36,319 [main:103] - replacing (try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") }, String)
2021-03-11 11:11:36,319 [main:38] - replacing try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") } String
2021-03-11 11:11:36,319 [main:42] - Getting value of type String
2021-03-11 11:11:36,455 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:11:36,458 [main:46] - GENERATED VALUE OF TYPE String = "igiiy"
2021-03-11 11:11:36,458 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:37,026 [main:55] - randomType = MyIterator<ArrayDeque<ULong>>
2021-03-11 11:11:37,156 [main:302] - generating value of type = MyIterator<ArrayDeque<ULong>> false depth = 0
2021-03-11 11:11:37,158 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:11:37,599 [main:194] - Type params = [ArrayDeque<ULong>]
2021-03-11 11:11:37,862 [main:302] - generating value of type = ArrayDeque<ULong> false depth = 2
2021-03-11 11:11:37,985 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<ULong> = TODO()
2021-03-11 11:11:37,988 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<ULong> = TODO()
2021-03-11 11:11:38,110 [main:95] - GENERATED = ArrayDeque<ULong>()
2021-03-11 11:11:38,133 [main:94] - GETTING String from Boolean
2021-03-11 11:11:38,142 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:11:38,142 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:11:38,256 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:38,259 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:11:38,373 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:11:38,376 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
2021-03-11 11:11:38,376 [main:110] - replacement of try { fu3() } catch (e: RuntimeException) { (MyIterator<Double>(0.6816303970923716).next()).toChar().plus("nntwv") } of type String is (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
2021-03-11 11:11:38,508 [main:33] - Trying to replace Element(TRY) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:38,509 [main:66] - Compilation checking started
2021-03-11 11:11:39,007 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith((MyIterator<Double>(0.6816303970923716).next()).toInt().toString(1603038666)) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:39,011 [main:103] - replacing (true, Boolean)
2021-03-11 11:11:39,012 [main:38] - replacing true Boolean
2021-03-11 11:11:39,012 [main:42] - Getting value of type Boolean
2021-03-11 11:11:39,142 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:39,145 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:11:39,145 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:39,151 [main:55] - randomType = Short
2021-03-11 11:11:39,263 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:11:39,310 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:11:39,310 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7a0dfef]
2021-03-11 11:11:39,311 [main:66] - Generated call from random type = (23887).toDouble().isFinite()
2021-03-11 11:11:39,311 [main:94] - GETTING Boolean from Double
2021-03-11 11:11:39,350 [main:101] - Case = [public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]]
2021-03-11 11:11:39,350 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]
2021-03-11 11:11:39,351 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).isNaN()
2021-03-11 11:11:39,351 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cec9118]]
2021-03-11 11:11:39,351 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:39,351 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cec9118]
2021-03-11 11:11:39,463 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:11:39,576 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:39,579 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().equals('', false)
2021-03-11 11:11:39,579 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:11:39,579 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:11:39,689 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:39,689 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:11:39,800 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:39,803 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).equals("cqldi").and(false)
2021-03-11 11:11:39,803 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@c33419d]]
2021-03-11 11:11:39,803 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:11:39,803 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@c33419d]
2021-03-11 11:11:39,804 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toFloat().isNaN()
2021-03-11 11:11:39,804 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0fdc6c]]
2021-03-11 11:11:39,804 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:39,804 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0fdc6c]
2021-03-11 11:11:39,804 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().isLowSurrogate()
2021-03-11 11:11:39,804 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7a0dfef]]
2021-03-11 11:11:39,804 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:11:39,804 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7a0dfef]
2021-03-11 11:11:39,804 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toDouble().isFinite()
2021-03-11 11:11:39,804 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]]
2021-03-11 11:11:39,804 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:11:39,804 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]
2021-03-11 11:11:39,918 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:39,918 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toFloat().equals("bvulr")
2021-03-11 11:11:39,918 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ae4ecc]]
2021-03-11 11:11:39,918 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:11:39,919 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ae4ecc]
2021-03-11 11:11:39,919 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()
2021-03-11 11:11:39,919 [main:101] - Case = [public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7a0dfef]]
2021-03-11 11:11:39,919 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7a0dfef]
2021-03-11 11:11:39,919 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).isFinite()
2021-03-11 11:11:39,919 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54367e3e]]
2021-03-11 11:11:39,919 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:11:39,919 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54367e3e]
2021-03-11 11:11:39,919 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).v).toFloat().isFinite()
2021-03-11 11:11:39,919 [main:110] - replacement of true of type Boolean is (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()
2021-03-11 11:11:40,030 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:40,031 [main:66] - Compilation checking started
2021-03-11 11:11:40,527 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith((MyIterator<Double>(0.6816303970923716).next()).toInt().toString(1603038666)) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if (prope5) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:40,529 [main:103] - replacing (Kla1, Kla7)
2021-03-11 11:11:40,529 [main:38] - replacing Kla1 Kla7
2021-03-11 11:11:40,529 [main:42] - Getting value of type Kla7
2021-03-11 11:11:40,647 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-11 11:11:40,649 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-11 11:11:40,650 [main:46] - GENERATED VALUE OF TYPE Kla7 = 
2021-03-11 11:11:40,656 [main:55] - randomType = Byte
2021-03-11 11:11:40,773 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:11:40,821 [main:94] - GETTING Kla7 from Double
2021-03-11 11:11:40,850 [main:94] - GETTING Kla7 from Double
2021-03-11 11:11:40,851 [main:94] - GETTING Kla7 from MyIterator<String>
2021-03-11 11:11:40,861 [main:94] - GETTING Kla7 from Boolean
2021-03-11 11:11:40,870 [main:107] - Cant find and generate replacement for Kla1 type Kla7
2021-03-11 11:11:40,870 [main:103] - replacing (prope5, Boolean)
2021-03-11 11:11:40,870 [main:38] - replacing prope5 Boolean
2021-03-11 11:11:40,870 [main:42] - Getting value of type Boolean
2021-03-11 11:11:40,983 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:40,985 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:11:40,986 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:40,991 [main:55] - randomType = Byte
2021-03-11 11:11:41,103 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:11:41,151 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:11:41,151 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]
2021-03-11 11:11:41,263 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:41,263 [main:66] - Generated call from random type = (-67).toInt().equals("xuidc")
2021-03-11 11:11:41,263 [main:94] - GETTING Boolean from Boolean
2021-03-11 11:11:41,275 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:11:41,275 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:11:41,276 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).not()
2021-03-11 11:11:41,276 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]]
2021-03-11 11:11:41,276 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:11:41,387 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:41,390 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]
2021-03-11 11:11:41,508 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:41,508 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).equals("binbt")
2021-03-11 11:11:41,508 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:11:41,508 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:11:41,621 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:41,624 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).and(false)
2021-03-11 11:11:41,624 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:11:41,624 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:11:41,737 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:41,737 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:11:41,853 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:41,853 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("rgauz").equals("cgryb")
2021-03-11 11:11:41,853 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:11:41,853 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:11:41,972 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:41,972 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:11:42,088 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:42,091 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("oghih").and(false)
2021-03-11 11:11:42,091 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:11:42,091 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:11:42,203 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:42,203 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:11:42,203 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("prhnl").not()
2021-03-11 11:11:42,203 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:11:42,203 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:11:42,315 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:42,315 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("umymv")
2021-03-11 11:11:42,315 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:11:42,315 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:11:42,446 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:42,447 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:11:42,558 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:42,561 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("fhtxr").xor(false)
2021-03-11 11:11:42,562 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:11:42,562 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:11:42,673 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:42,676 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).or(true)
2021-03-11 11:11:42,676 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:11:42,676 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:11:42,786 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:42,789 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)
2021-03-11 11:11:42,789 [main:110] - replacement of prope5 of type Boolean is (MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)
2021-03-11 11:11:42,904 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:42,905 [main:66] - Compilation checking started
2021-03-11 11:11:43,437 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith((MyIterator<Double>(0.6816303970923716).next()).toInt().toString(1603038666)) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:43,439 [main:103] - replacing (c, Continuation<*>)
2021-03-11 11:11:43,439 [main:38] - replacing c Continuation<*>
2021-03-11 11:11:43,439 [main:42] - Getting value of type Continuation<*>
2021-03-11 11:11:43,572 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 11:11:43,734 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:11:43,738 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:11:44,154 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:11:44,270 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:11:44,274 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:11:44,555 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:11:44,710 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:11:44,714 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:11:45,115 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 11:11:45,240 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:11:45,244 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:11:45,643 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:11:45,643 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:11:45,643 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:11:45,643 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:11:45,643 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 11:11:45,654 [main:55] - randomType = Kla1
2021-03-11 11:11:45,786 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:11:45,790 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}
2021-03-11 11:11:45,937 [main:194] - Type params = []
2021-03-11 11:11:46,083 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:11:46,209 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:11:46,213 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:11:46,543 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:11:46,692 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:11:46,696 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:11:47,144 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:11:47,144 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:11:47,166 [main:94] - GETTING Continuation<*> from MyIterator<String>
2021-03-11 11:11:47,186 [main:94] - GETTING Continuation<*> from Double
2021-03-11 11:11:47,235 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 11:11:47,248 [main:94] - GETTING Continuation<*> from Double
2021-03-11 11:11:47,248 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 11:11:47,248 [main:103] - replacing (prope2.getOrThrow(), Ty0)
2021-03-11 11:11:47,248 [main:38] - replacing prope2.getOrThrow() Ty0
2021-03-11 11:11:47,248 [main:42] - Getting value of type Ty0
2021-03-11 11:11:47,374 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:11:47,381 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:11:47,678 [main:55] - randomType = List<Kla6>
2021-03-11 11:11:47,679 [main:94] - GETTING Ty0 from Boolean
2021-03-11 11:11:47,692 [main:94] - GETTING Ty0 from Double
2021-03-11 11:11:47,740 [main:94] - GETTING Ty0 from Double
2021-03-11 11:11:47,740 [main:94] - GETTING Ty0 from MyIterator<String>
2021-03-11 11:11:47,755 [main:107] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-11 11:11:47,755 [main:103] - replacing (prope6, Function0<Unit>)
2021-03-11 11:11:47,756 [main:38] - replacing prope6 Function0<Unit>
2021-03-11 11:11:47,756 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:11:47,873 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:11:47,876 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:11:48,006 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:11:48,009 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:11:48,451 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:11:48,454 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:11:48,457 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:11:48,458 [main:95] - GENERATED = check(false, { "cuflp"})
2021-03-11 11:11:48,458 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "cuflp"})}
2021-03-11 11:11:48,458 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:49,243 [main:55] - randomType = HashMap<Long, Float>
2021-03-11 11:11:49,403 [main:302] - generating value of type = HashMap<Long, Float> false depth = 0
2021-03-11 11:11:49,563 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): HashMap<Long, Float> = TODO()
2021-03-11 11:11:49,567 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): HashMap<Long, Float> = TODO()
2021-03-11 11:11:49,915 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:11:49,919 [main:95] - GENERATED = LinkedHashMap<Long, Float>(-1592329091)
2021-03-11 11:11:50,056 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:11:50,104 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:11:50,121 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:11:50,123 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:11:50,135 [main:110] - replacement of prope6 of type Function0<Unit> is { check(false, { "cuflp"})}
2021-03-11 11:11:50,248 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:11:50,249 [main:66] - Compilation checking started
2021-03-11 11:11:50,668 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith((MyIterator<Double>(0.6816303970923716).next()).toInt().toString(1603038666)) == (MyIterator<String>("")).next().startsWith("llxkx", true) }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            { check(false, { "cuflp"})}()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:50,671 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:11:50,671 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:11:50,671 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:11:50,803 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:11:50,809 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:11:50,946 [main:55] - randomType = Char?
2021-03-11 11:11:51,063 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:11:51,097 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:11:51,142 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:11:51,143 [main:94] - GETTING EmptyCoroutineContext from MyIterator<String>
2021-03-11 11:11:51,161 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:11:51,198 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:11:51,198 [main:103] - replacing (prope2, Result<Ty0>)
2021-03-11 11:11:51,198 [main:38] - replacing prope2 Result<Ty0>
2021-03-11 11:11:51,198 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:11:51,314 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:11:51,436 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:11:51,440 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:11:51,702 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:11:51,702 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:11:51,847 [main:55] - randomType = Kla3<Double>
2021-03-11 11:11:51,963 [main:302] - generating value of type = Kla3<Double> false depth = 0
2021-03-11 11:11:51,966 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:11:52,493 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:11:52,496 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 11:11:52,519 [main:94] - GETTING Result<Ty0> from MyIterator<String>
2021-03-11 11:11:52,538 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:11:52,592 [main:94] - GETTING Result<Ty0> from Double
2021-03-11 11:11:52,594 [main:94] - GETTING Result<Ty0> from Boolean
2021-03-11 11:11:52,608 [main:107] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-11 11:11:52,608 [main:103] - replacing (prope2.getOrThrow(), Ty0)
2021-03-11 11:11:52,608 [main:38] - replacing prope2.getOrThrow() Ty0
2021-03-11 11:11:52,609 [main:42] - Getting value of type Ty0
2021-03-11 11:11:52,743 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:11:52,750 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:11:52,757 [main:55] - randomType = UInt
2021-03-11 11:11:52,887 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:11:52,935 [main:94] - GETTING Ty0 from Double
2021-03-11 11:11:52,991 [main:94] - GETTING Ty0 from MyIterator<String>
2021-03-11 11:11:53,010 [main:94] - GETTING Ty0 from Boolean
2021-03-11 11:11:53,024 [main:94] - GETTING Ty0 from Double
2021-03-11 11:11:53,024 [main:107] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-11 11:11:53,024 [main:103] - replacing (it?.methodName?.startsWith((MyIterator<Double>(0.6816303970923716).next()).toInt().toString(1603038666)) == (MyIterator<String>("")).next().startsWith("llxkx", true), Boolean)
2021-03-11 11:11:53,025 [main:38] - replacing it?.methodName?.startsWith((MyIterator<Double>(0.6816303970923716).next()).toInt().toString(1603038666)) == (MyIterator<String>("")).next().startsWith("llxkx", true) Boolean
2021-03-11 11:11:53,025 [main:42] - Getting value of type Boolean
2021-03-11 11:11:53,143 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:53,146 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:11:53,146 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:53,152 [main:55] - randomType = Short
2021-03-11 11:11:53,271 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:11:53,327 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7e6707c5]
2021-03-11 11:11:53,327 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cec9118]
2021-03-11 11:11:53,448 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:11:53,571 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:53,574 [main:66] - Generated call from random type = (-26384).toChar().equals('坔', true)
2021-03-11 11:11:53,574 [main:94] - GETTING Boolean from Boolean
2021-03-11 11:11:53,586 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:11:53,586 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:11:53,713 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:53,714 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:11:53,844 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:53,848 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("ycpge").and(false)
2021-03-11 11:11:53,849 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:11:53,849 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:11:53,972 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:53,973 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:11:54,099 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:54,103 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("untap").or(true)
2021-03-11 11:11:54,103 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:11:54,103 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:11:54,223 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:54,223 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:11:54,223 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("lorre").not()
2021-03-11 11:11:54,223 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:11:54,223 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:11:54,338 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:54,339 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:11:54,453 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:54,453 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce")
2021-03-11 11:11:54,453 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:11:54,453 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:11:54,569 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:54,572 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)
2021-03-11 11:11:54,573 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]]
2021-03-11 11:11:54,573 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:11:54,703 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:54,707 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]
2021-03-11 11:11:54,832 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(true).equals(null)
2021-03-11 11:11:54,832 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:11:54,832 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:11:54,959 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:54,962 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).or(false)
2021-03-11 11:11:54,962 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:11:54,963 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:11:55,089 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:11:55,089 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).equals("efevb")
2021-03-11 11:11:55,089 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:11:55,089 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:11:55,251 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:11:55,254 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).and(false)
2021-03-11 11:11:55,254 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:11:55,254 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:11:55,255 [main:105] - GENERATED CALL = (MyIterator<Double>(0.6816303970923716).hasNext()).not()
2021-03-11 11:11:55,255 [main:110] - replacement of it?.methodName?.startsWith((MyIterator<Double>(0.6816303970923716).next()).toInt().toString(1603038666)) == (MyIterator<String>("")).next().startsWith("llxkx", true) of type Boolean is (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce")
2021-03-11 11:11:55,388 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:55,389 [main:66] - Compilation checking started
2021-03-11 11:11:55,929 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:55,931 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:11:55,931 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:11:55,931 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:11:56,046 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:11:56,052 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:11:56,064 [main:55] - randomType = Kla2
2021-03-11 11:11:56,179 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 11:11:56,182 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}
2021-03-11 11:11:56,213 [main:66] - Generated call from random type = (Kla2()).context
2021-03-11 11:11:56,215 [main:94] - GETTING EmptyCoroutineContext from MyIterator<String>
2021-03-11 11:11:56,239 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:11:56,254 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:11:56,317 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:11:56,317 [main:110] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is (Kla2()).context
2021-03-11 11:11:56,467 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:56,468 [main:66] - Compilation checking started
2021-03-11 11:11:57,088 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:57,092 [main:103] - replacing ({
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>)
2021-03-11 11:11:57,092 [main:38] - replacing {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 11:11:57,092 [main:42] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 11:11:57,233 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 0
2021-03-11 11:11:57,236 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:11:57,243 [main:46] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> = {a: Kla0 -> println()}
2021-03-11 11:11:57,243 [main:49] - GENERATED IS CALL =false
2021-03-11 11:11:58,048 [main:55] - randomType = Function1<Map<String?, Int>, Set<Kla3<Kla2>>>
2021-03-11 11:11:58,052 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from Double
2021-03-11 11:11:58,107 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from Boolean
2021-03-11 11:11:58,126 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from Double
2021-03-11 11:11:58,130 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from MyIterator<String>
2021-03-11 11:11:58,150 [main:110] - replacement of {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> is {a: Kla0 -> println()}
2021-03-11 11:11:58,283 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:11:58,283 [main:66] - Compilation checking started
2021-03-11 11:11:58,805 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {a: Kla0 -> println()}

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(0.6816303970923716).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:58,956 [main:137] - TRYING TO REPLACE CONSTANT 0.6816303970923716
2021-03-11 11:11:59,075 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:59,075 [main:66] - Compilation checking started
2021-03-11 11:11:59,631 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo(19).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:11:59,632 [main:137] - TRYING TO REPLACE CONSTANT 19
2021-03-11 11:11:59,758 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:11:59,759 [main:66] - Compilation checking started
2021-03-11 11:12:00,372 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:00,373 [main:137] - TRYING TO REPLACE CONSTANT 0.6816303970923716
2021-03-11 11:12:00,505 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:12:00,506 [main:66] - Compilation checking started
2021-03-11 11:12:00,886 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>(0.6816303970923716).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(v).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:00,887 [main:137] - TRYING TO REPLACE CONSTANT 0.6816303970923716
2021-03-11 11:12:01,014 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 11:12:01,014 [main:66] - Compilation checking started
2021-03-11 11:12:01,523 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1463009288, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:01,523 [main:137] - TRYING TO REPLACE CONSTANT 1463009288
2021-03-11 11:12:01,641 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:12:01,642 [main:66] - Compilation checking started
2021-03-11 11:12:02,170 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo(93)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:02,170 [main:137] - TRYING TO REPLACE CONSTANT 93
2021-03-11 11:12:02,300 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:12:02,300 [main:66] - Compilation checking started
2021-03-11 11:12:02,823 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(false, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:02,823 [main:137] - TRYING TO REPLACE CONSTANT 0.6816303970923716
2021-03-11 11:12:02,945 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 11:12:02,946 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 11:12:03,063 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:12:03,063 [main:66] - Compilation checking started
2021-03-11 11:12:03,577 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(true) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:03,578 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 11:12:03,697 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:12:03,698 [main:66] - Compilation checking started
2021-03-11 11:12:04,215 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:04,216 [main:137] - TRYING TO REPLACE CONSTANT 0.6816303970923716
2021-03-11 11:12:04,342 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 11:12:04,342 [main:66] - Compilation checking started
2021-03-11 11:12:04,898 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(0.6816303970923716).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:04,899 [main:137] - TRYING TO REPLACE CONSTANT 0.6816303970923716
2021-03-11 11:12:05,025 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 11:12:05,026 [main:137] - TRYING TO REPLACE CONSTANT 0.6816303970923716
2021-03-11 11:12:05,148 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:12:05,149 [main:66] - Compilation checking started
2021-03-11 11:12:05,662 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if ((false)?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:05,663 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 11:12:05,790 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 11:12:05,790 [main:66] - Compilation checking started
2021-03-11 11:12:06,328 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(false))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:06,329 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 11:12:06,449 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 11:12:06,449 [main:66] - Compilation checking started
2021-03-11 11:12:06,972 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(false)) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:06,972 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 11:12:07,096 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 11:12:07,096 [main:66] - Compilation checking started
2021-03-11 11:12:07,622 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:07,623 [main:137] - TRYING TO REPLACE CONSTANT null
2021-03-11 11:12:07,746 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-11 11:12:07,746 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 11:12:07,868 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 11:12:07,868 [main:66] - Compilation checking started
2021-03-11 11:12:08,242 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(prope7 != null, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error((584342140)?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:08,242 [main:137] - TRYING TO REPLACE CONSTANT 584342140
2021-03-11 11:12:08,359 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:12:08,360 [main:66] - Compilation checking started
2021-03-11 11:12:08,892 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(-1734654453))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:08,893 [main:137] - TRYING TO REPLACE CONSTANT 1734654453
2021-03-11 11:12:09,015 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 11:12:09,015 [main:66] - Compilation checking started
2021-03-11 11:12:09,627 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:09,628 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 11:12:09,757 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 11:12:09,757 [main:66] - Compilation checking started
2021-03-11 11:12:10,119 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(and(equals("ywdcx")))}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((355579881.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:10,119 [main:137] - TRYING TO REPLACE CONSTANT 355579881
2021-03-11 11:12:10,241 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:12:10,242 [main:66] - Compilation checking started
2021-03-11 11:12:10,780 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(1726379468))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:10,780 [main:137] - TRYING TO REPLACE CONSTANT 1726379468
2021-03-11 11:12:10,906 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:12:10,906 [main:66] - Compilation checking started
2021-03-11 11:12:11,440 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:11,440 [main:137] - TRYING TO REPLACE CONSTANT 509617650
2021-03-11 11:12:11,564 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:12:11,565 [main:66] - Compilation checking started
2021-03-11 11:12:12,116 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(1183797740)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:12,117 [main:137] - TRYING TO REPLACE CONSTANT 0.6816303970923716
2021-03-11 11:12:12,251 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 11:12:12,252 [main:137] - TRYING TO REPLACE CONSTANT 1183797740
2021-03-11 11:12:12,394 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:12:12,395 [main:66] - Compilation checking started
2021-03-11 11:12:12,917 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>(0.6816303970923716).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:12,917 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 11:12:13,050 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:12:13,051 [main:137] - TRYING TO REPLACE CONSTANT 0.6816303970923716
2021-03-11 11:12:13,192 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:12:13,192 [main:66] - Compilation checking started
2021-03-11 11:12:13,741 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>(0.6816303970923716).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:13,741 [main:137] - TRYING TO REPLACE CONSTANT 0.6816303970923716
2021-03-11 11:12:13,900 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 11:12:13,901 [main:66] - Compilation checking started
2021-03-11 11:12:14,439 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:14,439 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 11:12:14,563 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 11:12:14,564 [main:66] - Compilation checking started
2021-03-11 11:12:14,946 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(0.6816303970923716).hasNext()).xor(and(equals("ywdcx")))) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:14,947 [main:137] - TRYING TO REPLACE CONSTANT 0.6816303970923716
2021-03-11 11:12:15,077 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:12:15,078 [main:66] - Compilation checking started
2021-03-11 11:12:15,629 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:15,630 [main:137] - TRYING TO REPLACE CONSTANT 0.6816303970923716
2021-03-11 11:12:15,758 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 11:12:15,759 [main:46] - AFTER TRY 1 res = 
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 11:12:16,016 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:12:16,485 [main:194] - Type params = [UByte]
2021-03-11 11:12:16,752 [main:302] - generating value of type = UByte true depth = 1
2021-03-11 11:12:16,756 [main:112] - generating klass Kla0 text = class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}
2021-03-11 11:12:16,756 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}
2021-03-11 11:12:16,879 [main:194] - Type params = []
2021-03-11 11:12:17,010 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-11 11:12:17,154 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:12:17,158 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:12:17,439 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-11 11:12:17,572 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:12:17,576 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:12:18,011 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 7
2021-03-11 11:12:18,147 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:12:18,152 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:12:18,646 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:12:18,646 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:12:18,647 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:12:18,647 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}
2021-03-11 11:12:18,647 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:12:19,216 [main:302] - generating value of type = Kla6 false depth = 1
2021-03-11 11:12:19,219 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 11:12:19,219 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}
2021-03-11 11:12:19,220 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}
2021-03-11 11:12:19,220 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 11:12:19,220 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}
2021-03-11 11:12:19,220 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}
2021-03-11 11:12:19,220 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-11 11:12:19,537 [main:43] - GENERATING CALL OF fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}
2021-03-11 11:12:19,541 [main:61] - WITHOUT TYPE PARAMS = fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}
2021-03-11 11:12:19,839 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 1
2021-03-11 11:12:19,842 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 11:12:20,001 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:12:20,005 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:12:20,319 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 5
2021-03-11 11:12:20,322 [main:302] - generating value of type = Unit false depth = 6
2021-03-11 11:12:20,454 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:12:20,458 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:12:20,746 [main:95] - GENERATED = println(null)
2021-03-11 11:12:20,746 [main:95] - GENERATED = contract({ println(null)})
2021-03-11 11:12:20,746 [main:95] - GENERATED = fu0({a: Kla0 -> contract({ println(null)})})
2021-03-11 11:12:20,875 [main:43] - GENERATING CALL OF fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}
2021-03-11 11:12:21,355 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu1(x: (LinkedHashSet<UInt?>?) -> Unit): Continuation<LinkedHashSet<UInt?>?> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}
2021-03-11 11:12:21,653 [main:302] - generating value of type = Function1<LinkedHashSet<UInt?>?, Unit> false depth = 1
2021-03-11 11:12:21,656 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 11:12:21,790 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:12:21,794 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:12:22,233 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 11:12:22,236 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-11 11:12:22,239 [main:302] - generating value of type = Any false depth = 6
2021-03-11 11:12:22,239 [main:95] - GENERATED = require(false, { "fgetk"})
2021-03-11 11:12:22,239 [main:95] - GENERATED = fu1<LinkedHashSet<UInt?>?>({a: LinkedHashSet<UInt?>? -> require(false, { "fgetk"})})
2021-03-11 11:12:22,364 [main:43] - GENERATING CALL OF fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}
2021-03-11 11:12:22,367 [main:61] - WITHOUT TYPE PARAMS = fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}
2021-03-11 11:12:22,707 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-11 11:12:22,710 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 11:12:22,839 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:12:22,843 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:12:23,123 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 5
2021-03-11 11:12:23,126 [main:302] - generating value of type = Unit false depth = 6
2021-03-11 11:12:23,256 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:12:23,260 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:12:23,685 [main:302] - generating value of type = Int true depth = 9
2021-03-11 11:12:23,688 [main:302] - generating value of type = Function1<Int, Unit> false depth = 9
2021-03-11 11:12:23,691 [main:302] - generating value of type = Unit false depth = 10
2021-03-11 11:12:23,822 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:12:23,826 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:12:24,100 [main:302] - generating value of type = Boolean true depth = 13
2021-03-11 11:12:24,104 [main:95] - GENERATED = check(false)
2021-03-11 11:12:24,104 [main:95] - GENERATED = repeat(-1160412621, {a: Int -> check(false)})
2021-03-11 11:12:24,104 [main:95] - GENERATED = contract({ repeat(-1160412621, {a: Int -> check(false)})})
2021-03-11 11:12:24,104 [main:95] - GENERATED = fu2({a: Throwable -> contract({ repeat(-1160412621, {a: Int -> check(false)})})})
2021-03-11 11:12:24,254 [main:48] - Try №1
2021-03-11 11:12:30,967 [main:48] - Already checked
2021-03-11 11:12:33,533 [main:71] - Trying to insert override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }
2021-03-11 11:12:33,624 [main:66] - Compilation checking started
2021-03-11 11:12:34,854 [main:99] - Trying to change 184 nodes
2021-03-11 11:12:34,854 [main:103] - replacing ("+", String)
2021-03-11 11:12:34,855 [main:38] - replacing "+" String
2021-03-11 11:12:34,855 [main:42] - Getting value of type String
2021-03-11 11:12:35,031 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:12:35,036 [main:46] - GENERATED VALUE OF TYPE String = "ehgzg"
2021-03-11 11:12:35,037 [main:49] - GENERATED IS CALL =false
2021-03-11 11:12:35,263 [main:55] - randomType = LinkedHashSet<UInt>
2021-03-11 11:12:35,437 [main:302] - generating value of type = LinkedHashSet<UInt> false depth = 0
2021-03-11 11:12:35,624 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: UInt): LkedHashSet<UInt> = TODO()
2021-03-11 11:12:35,630 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: UInt): LkedHashSet<UInt> = TODO()
2021-03-11 11:12:35,814 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 11:12:35,820 [main:95] - GENERATED = linkedSetOf<UInt>(1169212038.toUInt())
2021-03-11 11:12:35,987 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:12:36,162 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:36,167 [main:66] - Generated call from random type = (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
2021-03-11 11:12:36,168 [main:94] - GETTING String from UByte
2021-03-11 11:12:36,209 [main:101] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:12:36,209 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c]
2021-03-11 11:12:36,389 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:12:36,394 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:12:36,566 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:36,571 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).compareTo(104.toUByte()).toString(473903119)
2021-03-11 11:12:36,571 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14734fe2]]
2021-03-11 11:12:36,571 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14734fe2]
2021-03-11 11:12:36,738 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:36,744 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).toString(-921956459)
2021-03-11 11:12:36,744 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7dde3752], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:12:36,744 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7dde3752]
2021-03-11 11:12:36,744 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:12:36,910 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:36,916 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).toByte().toString(602200547)
2021-03-11 11:12:36,916 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@749f0281], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:12:36,916 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@749f0281]
2021-03-11 11:12:36,916 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:12:37,085 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:37,090 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).toLong().toString(-1772259852)
2021-03-11 11:12:37,090 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@22843cbe], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7efceb9b]]
2021-03-11 11:12:37,090 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@22843cbe]
2021-03-11 11:12:37,090 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7efceb9b]
2021-03-11 11:12:37,258 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:37,264 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).toUShort().toString(-15451095)
2021-03-11 11:12:37,264 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11fc1d80], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:12:37,264 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11fc1d80]
2021-03-11 11:12:37,264 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:12:37,440 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:37,446 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).toShort().toString(-1049333839)
2021-03-11 11:12:37,446 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52a19ae5], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b3d76]]
2021-03-11 11:12:37,446 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52a19ae5]
2021-03-11 11:12:37,672 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:12:37,678 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b3d76]
2021-03-11 11:12:37,853 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:37,859 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).div(82.toUByte()).toString(-1162636443)
2021-03-11 11:12:37,859 [main:110] - replacement of "+" of type String is (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
2021-03-11 11:12:38,031 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:12:38,032 [main:66] - Compilation checking started
2021-03-11 11:12:38,846 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 56
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "fail 1: $prope12"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:12:38,849 [main:103] - replacing (prope12.exceptionOrNull()?.let(x), Unit?)
2021-03-11 11:12:38,851 [main:38] - replacing prope12.exceptionOrNull()?.let(x) Unit?
2021-03-11 11:12:38,851 [main:42] - Getting value of type Unit?
2021-03-11 11:12:39,054 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:12:39,238 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:12:39,246 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:12:39,639 [main:302] - generating value of type = Any false depth = 3
2021-03-11 11:12:39,639 [main:95] - GENERATED = print("aeaui")
2021-03-11 11:12:39,639 [main:46] - GENERATED VALUE OF TYPE Unit? = print("aeaui")
2021-03-11 11:12:39,639 [main:49] - GENERATED IS CALL =true
2021-03-11 11:12:39,857 [main:55] - randomType = Char?
2021-03-11 11:12:40,039 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:12:40,085 [main:94] - GETTING Unit? from CoroutineContext
2021-03-11 11:12:40,098 [main:94] - GETTING Unit? from Boolean
2021-03-11 11:12:40,115 [main:94] - GETTING Unit? from MyIterator<String>
2021-03-11 11:12:40,139 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72be2170]]
2021-03-11 11:12:40,139 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72be2170]
2021-03-11 11:12:40,312 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-11 11:12:40,318 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:12:40,326 [main:105] - GENERATED CALL = ((MyIterator<String>("")))?.forEach({a: T -> println()})
2021-03-11 11:12:40,326 [main:101] - Case = [public final fun remove(): kotlin.Unit defined in MyIterator[SimpleFunctionDescriptorImpl@653ee422]]
2021-03-11 11:12:40,326 [main:137] - GENERATING call of type public final fun remove(): kotlin.Unit defined in MyIterator[SimpleFunctionDescriptorImpl@653ee422]
2021-03-11 11:12:40,327 [main:105] - GENERATED CALL = ((MyIterator<String>("")))?.remove()
2021-03-11 11:12:40,327 [main:110] - replacement of prope12.exceptionOrNull()?.let(x) of type Unit? is ((MyIterator<String>("")))?.remove()
2021-03-11 11:12:40,502 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 11:12:40,503 [main:66] - Compilation checking started
2021-03-11 11:12:41,313 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 56
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "fail 1: $prope12"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:12:41,316 [main:103] - replacing (Kla13(), Kla13)
2021-03-11 11:12:41,316 [main:38] - replacing Kla13() Kla13
2021-03-11 11:12:41,316 [main:42] - Getting value of type Kla13
2021-03-11 11:12:41,536 [main:302] - generating value of type = Kla13 false depth = 0
2021-03-11 11:12:41,542 [main:112] - generating klass Kla13 text = class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:12:41,542 [main:46] - GENERATED VALUE OF TYPE Kla13 = Kla13()
2021-03-11 11:12:41,542 [main:49] - GENERATED IS CALL =true
2021-03-11 11:12:41,564 [main:55] - randomType = Kla9
2021-03-11 11:12:41,738 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-11 11:12:41,743 [main:112] - generating klass Kla9 text = open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}
2021-03-11 11:12:41,918 [main:194] - Type params = []
2021-03-11 11:12:42,090 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:12:42,273 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:12:42,280 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:12:42,687 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:12:42,874 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:12:42,882 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:12:43,602 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-11 11:12:43,800 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:12:43,807 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:12:44,451 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:12:44,451 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:12:44,451 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:12:44,473 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:12:44,484 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:12:44,498 [main:94] - GETTING Kla13 from Int
2021-03-11 11:12:44,550 [main:94] - GETTING Kla13 from Any?
2021-03-11 11:12:44,554 [main:94] - GETTING Kla13 from UByte
2021-03-11 11:12:44,588 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:12:44,589 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:12:44,590 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:12:44,590 [main:94] - GETTING Kla13 from Double
2021-03-11 11:12:44,637 [main:94] - GETTING Kla13 from String
2021-03-11 11:12:44,665 [main:94] - GETTING Kla13 from UByte
2021-03-11 11:12:44,666 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:12:44,667 [main:94] - GETTING Kla13 from EmptyCoroutineContext
2021-03-11 11:12:44,692 [main:94] - GETTING Kla13 from MyIterator<Double>
2021-03-11 11:12:44,712 [main:94] - GETTING Kla13 from Continuation<Any?>
2021-03-11 11:12:44,723 [main:94] - GETTING Kla13 from MyIterator<String>
2021-03-11 11:12:44,742 [main:94] - GETTING Kla13 from Double
2021-03-11 11:12:44,743 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:12:44,744 [main:94] - GETTING Kla13 from Function0<Unit>
2021-03-11 11:12:44,756 [main:94] - GETTING Kla13 from MyIterator<Double>
2021-03-11 11:12:44,757 [main:94] - GETTING Kla13 from MyIterator<Double>
2021-03-11 11:12:44,758 [main:94] - GETTING Kla13 from MyIterator<String>
2021-03-11 11:12:44,759 [main:94] - GETTING Kla13 from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:12:44,771 [main:94] - GETTING Kla13 from String
2021-03-11 11:12:44,771 [main:110] - replacement of Kla13() of type Kla13 is Kla13()
2021-03-11 11:12:44,946 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:12:44,948 [main:103] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i, String)
2021-03-11 11:12:44,948 [main:38] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i String
2021-03-11 11:12:44,948 [main:42] - Getting value of type String
2021-03-11 11:12:45,124 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:12:45,131 [main:46] - GENERATED VALUE OF TYPE String = "zpoys"
2021-03-11 11:12:45,131 [main:49] - GENERATED IS CALL =false
2021-03-11 11:12:45,359 [main:55] - randomType = Array<Char>
2021-03-11 11:12:45,542 [main:302] - generating value of type = Array<Char> false depth = 0
2021-03-11 11:12:45,734 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Char> = TODO()
2021-03-11 11:12:45,741 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Char> = TODO()
2021-03-11 11:12:45,931 [main:95] - GENERATED = enumValues<Char>()
2021-03-11 11:12:45,946 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:12:46,134 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:46,140 [main:66] - Generated call from random type = (enumValues<Char>()).size.toString(2066318035)
2021-03-11 11:12:46,141 [main:94] - GETTING String from MyIterator<String>
2021-03-11 11:12:46,159 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59b2d9bf]]
2021-03-11 11:12:46,159 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e]
2021-03-11 11:12:46,159 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59b2d9bf]
2021-03-11 11:12:46,337 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:12:46,342 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:12:46,348 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().dropLastWhile({a: Char -> false})
2021-03-11 11:12:46,348 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f63cce]]
2021-03-11 11:12:46,348 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e]
2021-03-11 11:12:46,348 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f63cce]
2021-03-11 11:12:46,526 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:12:46,716 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:12:46,907 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:12:46,913 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceAfterLast('⬵', "klapj", "jgbeo")
2021-03-11 11:12:46,913 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d9c107]]
2021-03-11 11:12:46,913 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e]
2021-03-11 11:12:46,913 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d9c107]
2021-03-11 11:12:47,094 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:47,276 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:47,282 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().removeRange(-1439338317, 1404345932)
2021-03-11 11:12:47,282 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284d703b]]
2021-03-11 11:12:47,282 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e]
2021-03-11 11:12:47,283 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284d703b]
2021-03-11 11:12:47,468 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:12:47,656 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:12:47,663 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:12:48,062 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:12:48,069 [main:95] - GENERATED = StringBuilder("fmmiy")
2021-03-11 11:12:48,069 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().removePrefix(StringBuilder("fmmiy"))
2021-03-11 11:12:48,069 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b2fa201]]
2021-03-11 11:12:48,069 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e]
2021-03-11 11:12:48,069 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b2fa201]
2021-03-11 11:12:48,293 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:12:48,299 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceIndent("kbogi")
2021-03-11 11:12:48,299 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29e1c6d1]]
2021-03-11 11:12:48,299 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e]
2021-03-11 11:12:48,299 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29e1c6d1]
2021-03-11 11:12:48,300 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().lowercase()
2021-03-11 11:12:48,300 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ede372]]
2021-03-11 11:12:48,300 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e]
2021-03-11 11:12:48,300 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ede372]
2021-03-11 11:12:48,300 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().capitalize()
2021-03-11 11:12:48,300 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@687822d0]]
2021-03-11 11:12:48,300 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e]
2021-03-11 11:12:48,300 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@687822d0]
2021-03-11 11:12:48,478 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 11:12:48,484 [main:302] - generating value of type = Char true depth = 1
2021-03-11 11:12:48,489 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().replaceFirstChar({a: Char -> '⡅'})
2021-03-11 11:12:48,489 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17d89ed5]]
2021-03-11 11:12:48,489 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e]
2021-03-11 11:12:48,490 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17d89ed5]
2021-03-11 11:12:48,665 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:12:48,670 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:12:48,676 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().dropWhile({a: Char -> false})
2021-03-11 11:12:48,676 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cd475ae]]
2021-03-11 11:12:48,676 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@41ef1e]
2021-03-11 11:12:48,677 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cd475ae]
2021-03-11 11:12:48,677 [main:105] - GENERATED CALL = (MyIterator<String>("")).next().trimEnd()
2021-03-11 11:12:48,677 [main:110] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i of type String is "zpoys"
2021-03-11 11:12:48,851 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:12:48,851 [main:66] - Compilation checking started
2021-03-11 11:12:49,625 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 56
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "fail 1: $prope12"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:12:49,627 [main:103] - replacing (numberOfSuspensions, Int)
2021-03-11 11:12:49,628 [main:38] - replacing numberOfSuspensions Int
2021-03-11 11:12:49,628 [main:42] - Getting value of type Int
2021-03-11 11:12:49,839 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:49,845 [main:46] - GENERATED VALUE OF TYPE Int = 1137527201
2021-03-11 11:12:49,846 [main:49] - GENERATED IS CALL =false
2021-03-11 11:12:50,077 [main:55] - randomType = Int?
2021-03-11 11:12:50,258 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:50,324 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6184047b]
2021-03-11 11:12:50,325 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@49475c0a]
2021-03-11 11:12:50,325 [main:66] - Generated call from random type = (-827324451)?.toShort().countTrailingZeroBits()
2021-03-11 11:12:50,326 [main:94] - GETTING Int from UByte
2021-03-11 11:12:50,362 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@749f0281], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@12fd8c2d]]
2021-03-11 11:12:50,362 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@749f0281]
2021-03-11 11:12:50,363 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@12fd8c2d]
2021-03-11 11:12:50,547 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:12:50,553 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toLong().compareTo(121)
2021-03-11 11:12:50,553 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@22843cbe], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UShort.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76f51ce2]]
2021-03-11 11:12:50,553 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@22843cbe]
2021-03-11 11:12:50,553 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UShort.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76f51ce2]
2021-03-11 11:12:50,553 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toUShort().countLeadingZeroBits()
2021-03-11 11:12:50,553 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@749f0281], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@132eba2c]]
2021-03-11 11:12:50,553 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@749f0281]
2021-03-11 11:12:50,553 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@132eba2c]
2021-03-11 11:12:50,554 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toLong().countTrailingZeroBits()
2021-03-11 11:12:50,554 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52a19ae5], @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@46b9da5a]]
2021-03-11 11:12:50,554 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52a19ae5]
2021-03-11 11:12:50,735 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:12:50,740 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@46b9da5a]
2021-03-11 11:12:50,741 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt()
2021-03-11 11:12:50,741 [main:101] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a9358ae]]
2021-03-11 11:12:50,741 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c]
2021-03-11 11:12:50,920 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:12:50,926 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a9358ae]
2021-03-11 11:12:50,927 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).compareTo(92.toUByte()).countOneBits()
2021-03-11 11:12:50,927 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7dde3752], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7828b500]]
2021-03-11 11:12:50,927 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7dde3752]
2021-03-11 11:12:50,927 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7828b500]
2021-03-11 11:12:50,927 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toByte().toInt()
2021-03-11 11:12:50,927 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7dde3752], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@67c0ba8a]]
2021-03-11 11:12:50,927 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7dde3752]
2021-03-11 11:12:50,927 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@67c0ba8a]
2021-03-11 11:12:51,112 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:12:51,118 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toByte().div(92)
2021-03-11 11:12:51,118 [main:101] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@38f964a5]]
2021-03-11 11:12:51,119 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c]
2021-03-11 11:12:51,294 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:12:51,300 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@38f964a5]
2021-03-11 11:12:51,481 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:51,487 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).compareTo(99.toUByte()).rotateRight(-1493339767)
2021-03-11 11:12:51,487 [main:101] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24cd318b]]
2021-03-11 11:12:51,487 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c]
2021-03-11 11:12:51,662 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:12:51,668 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24cd318b]
2021-03-11 11:12:51,842 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:12:51,849 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).compareTo(126.toUByte()).times(-47)
2021-03-11 11:12:51,849 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4d4c5791], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@62ba5744]]
2021-03-11 11:12:51,849 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4d4c5791]
2021-03-11 11:12:51,849 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@62ba5744]
2021-03-11 11:12:51,850 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toFloat().toInt()
2021-03-11 11:12:51,850 [main:110] - replacement of numberOfSuspensions of type Int is (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt()
2021-03-11 11:12:52,025 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:12:52,025 [main:66] - Compilation checking started
2021-03-11 11:12:52,882 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 56
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "fail 1: $prope12"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:12:52,884 [main:103] - replacing (prope9.prope16, Boolean)
2021-03-11 11:12:52,885 [main:38] - replacing prope9.prope16 Boolean
2021-03-11 11:12:52,885 [main:42] - Getting value of type Boolean
2021-03-11 11:12:53,084 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:12:53,090 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:12:53,090 [main:49] - GENERATED IS CALL =false
2021-03-11 11:12:53,102 [main:55] - randomType = Boolean
2021-03-11 11:12:53,282 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:12:53,301 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:12:53,483 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:12:53,483 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:12:53,660 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:12:53,666 [main:66] - Generated call from random type = (true).equals("rfetx").or(false)
2021-03-11 11:12:53,667 [main:94] - GETTING Boolean from Double
2021-03-11 11:12:53,715 [main:101] - Case = [public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]]
2021-03-11 11:12:53,715 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]
2021-03-11 11:12:53,715 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).isNaN()
2021-03-11 11:12:53,715 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2180f171]]
2021-03-11 11:12:53,715 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:12:53,715 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2180f171]
2021-03-11 11:12:53,715 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isWhitespace()
2021-03-11 11:12:53,715 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d6ef59a]]
2021-03-11 11:12:53,715 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:12:53,715 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d6ef59a]
2021-03-11 11:12:53,716 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isTitleCase()
2021-03-11 11:12:53,716 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1868ba98]]
2021-03-11 11:12:53,716 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:12:53,716 [main:137] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1868ba98]
2021-03-11 11:12:53,716 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLowerCase()
2021-03-11 11:12:53,716 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6a4df04e]]
2021-03-11 11:12:53,716 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:12:53,716 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6a4df04e]
2021-03-11 11:12:53,716 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toFloat().isInfinite()
2021-03-11 11:12:53,716 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]]
2021-03-11 11:12:53,716 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:12:53,716 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]
2021-03-11 11:12:53,716 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toDouble().isNaN()
2021-03-11 11:12:53,717 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@36288e31]]
2021-03-11 11:12:53,717 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:12:53,717 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@36288e31]
2021-03-11 11:12:53,939 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:12:53,939 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toShort().equals("ybszu")
2021-03-11 11:12:53,939 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:12:53,939 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:12:54,121 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:12:54,122 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:12:54,304 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:12:54,305 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).equals("pjuzm").equals("wwrhh")
2021-03-11 11:12:54,305 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ae4ecc]]
2021-03-11 11:12:54,305 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:12:54,305 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ae4ecc]
2021-03-11 11:12:54,305 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isDigit()
2021-03-11 11:12:54,305 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a35fbda]]
2021-03-11 11:12:54,305 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:12:54,305 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a35fbda]
2021-03-11 11:12:54,305 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toDouble().isInfinite()
2021-03-11 11:12:54,305 [main:110] - replacement of prope9.prope16 of type Boolean is ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toDouble().isNaN()
2021-03-11 11:12:54,495 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:12:54,495 [main:66] - Compilation checking started
2021-03-11 11:12:55,022 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 56
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "fail 1: $prope12"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toDouble().isNaN() = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:12:55,024 [main:103] - replacing ("fail 1: $prope12", String)
2021-03-11 11:12:55,024 [main:38] - replacing "fail 1: $prope12" String
2021-03-11 11:12:55,024 [main:42] - Getting value of type String
2021-03-11 11:12:55,202 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:12:55,208 [main:46] - GENERATED VALUE OF TYPE String = "llvgf"
2021-03-11 11:12:55,208 [main:49] - GENERATED IS CALL =false
2021-03-11 11:12:55,220 [main:55] - randomType = Char
2021-03-11 11:12:55,396 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:12:55,431 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]
2021-03-11 11:12:55,431 [main:66] - Generated call from random type = ('꼄').titlecase()
2021-03-11 11:12:55,432 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:12:55,442 [main:94] - GETTING String from Boolean
2021-03-11 11:12:55,456 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:12:55,456 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:12:55,636 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:12:55,641 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:12:55,821 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:55,827 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(-102727032)
2021-03-11 11:12:55,827 [main:110] - replacement of "fail 1: $prope12" of type String is "llvgf"
2021-03-11 11:12:56,013 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:12:56,014 [main:66] - Compilation checking started
2021-03-11 11:12:56,857 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 56
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:12:56,859 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 11:12:56,860 [main:38] - replacing getOrThrow() Any?
2021-03-11 11:12:56,860 [main:42] - Getting value of type Any?
2021-03-11 11:12:57,040 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:12:57,040 [main:46] - GENERATED VALUE OF TYPE Any? = "ixfdm"
2021-03-11 11:12:57,040 [main:49] - GENERATED IS CALL =false
2021-03-11 11:12:57,052 [main:55] - randomType = Int
2021-03-11 11:12:57,230 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:12:57,272 [main:94] - GETTING Any? from Continuation<Any?>
2021-03-11 11:12:57,281 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:12:57,296 [main:94] - GETTING Any? from Int
2021-03-11 11:12:57,333 [main:94] - GETTING Any? from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:12:57,343 [main:94] - GETTING Any? from EmptyCoroutineContext
2021-03-11 11:12:57,357 [main:94] - GETTING Any? from Double
2021-03-11 11:12:57,392 [main:94] - GETTING Any? from Boolean
2021-03-11 11:12:57,404 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:12:57,405 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:12:57,416 [main:94] - GETTING Any? from UByte
2021-03-11 11:12:57,455 [main:94] - GETTING Any? from String
2021-03-11 11:12:57,488 [main:94] - GETTING Any? from Boolean
2021-03-11 11:12:57,489 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:12:57,490 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:12:57,491 [main:94] - GETTING Any? from UByte
2021-03-11 11:12:57,493 [main:94] - GETTING Any? from Any?
2021-03-11 11:12:57,500 [main:94] - GETTING Any? from Boolean
2021-03-11 11:12:57,502 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:12:57,521 [main:94] - GETTING Any? from Function0<Unit>
2021-03-11 11:12:57,536 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:12:57,537 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:12:57,539 [main:94] - GETTING Any? from String
2021-03-11 11:12:57,541 [main:94] - GETTING Any? from Double
2021-03-11 11:12:57,542 [main:94] - GETTING Any? from Boolean
2021-03-11 11:12:57,542 [main:110] - replacement of getOrThrow() of type Any? is "ixfdm"
2021-03-11 11:12:57,718 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:12:57,718 [main:66] - Compilation checking started
2021-03-11 11:12:58,240 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 56
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12."ixfdm"
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:12:58,243 [main:103] - replacing ("\n", String)
2021-03-11 11:12:58,244 [main:38] - replacing "\n" String
2021-03-11 11:12:58,244 [main:42] - Getting value of type String
2021-03-11 11:12:58,421 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:12:58,427 [main:46] - GENERATED VALUE OF TYPE String = "aepop"
2021-03-11 11:12:58,427 [main:49] - GENERATED IS CALL =false
2021-03-11 11:12:58,883 [main:55] - randomType = HashSet<Kla12?>
2021-03-11 11:12:59,064 [main:302] - generating value of type = HashSet<Kla12?> false depth = 0
2021-03-11 11:12:59,300 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla12?): HashSet<Kla12?> = TODO()
2021-03-11 11:12:59,308 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla12?): HashSet<Kla12?> = TODO()
2021-03-11 11:12:59,502 [main:95] - GENERATED = linkedSetOf<Kla12?>(null)
2021-03-11 11:12:59,661 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@2614e0be]
2021-03-11 11:12:59,661 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@abbe7b3]
2021-03-11 11:12:59,661 [main:66] - Generated call from random type = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()
2021-03-11 11:12:59,662 [main:94] - GETTING String from Boolean
2021-03-11 11:12:59,675 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:12:59,675 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:12:59,855 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:12:59,861 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:13:00,042 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:00,048 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(false).toString(2071660867)
2021-03-11 11:13:00,048 [main:110] - replacement of "\n" of type String is (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()
2021-03-11 11:13:00,228 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:13:00,228 [main:66] - Compilation checking started
2021-03-11 11:13:01,205 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 56
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:01,207 [main:103] - replacing (method, String)
2021-03-11 11:13:01,208 [main:38] - replacing method String
2021-03-11 11:13:01,208 [main:42] - Getting value of type String
2021-03-11 11:13:01,424 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:13:01,429 [main:46] - GENERATED VALUE OF TYPE String = "tdfxy"
2021-03-11 11:13:01,430 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:01,452 [main:55] - randomType = Kla12
2021-03-11 11:13:01,639 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-11 11:13:01,645 [main:112] - generating klass Kla12 text = class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}
2021-03-11 11:13:01,653 [main:94] - GETTING String from MyIterator<Double>
2021-03-11 11:13:01,672 [main:94] - GETTING String from Boolean
2021-03-11 11:13:01,682 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:13:01,682 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:13:01,867 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:01,873 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:13:02,064 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:02,070 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700)
2021-03-11 11:13:02,070 [main:110] - replacement of method of type String is (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700)
2021-03-11 11:13:02,258 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:13:02,258 [main:66] - Compilation checking started
2021-03-11 11:13:03,094 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 56
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:03,096 [main:103] - replacing (!prope16, Boolean)
2021-03-11 11:13:03,097 [main:38] - replacing !prope16 Boolean
2021-03-11 11:13:03,097 [main:42] - Getting value of type Boolean
2021-03-11 11:13:03,291 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:03,297 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:13:03,297 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:03,516 [main:55] - randomType = UShort
2021-03-11 11:13:03,707 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:13:03,747 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@565f105f]
2021-03-11 11:13:03,747 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7a0dfef]
2021-03-11 11:13:03,747 [main:66] - Generated call from random type = (1232.toUShort()).toDouble().isFinite()
2021-03-11 11:13:03,748 [main:110] - replacement of !prope16 of type Boolean is (1232.toUShort()).toDouble().isFinite()
2021-03-11 11:13:03,934 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:13:03,934 [main:66] - Compilation checking started
2021-03-11 11:13:04,770 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 56
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:04,772 [main:103] - replacing (prope9, Kla13)
2021-03-11 11:13:04,772 [main:38] - replacing prope9 Kla13
2021-03-11 11:13:04,772 [main:42] - Getting value of type Kla13
2021-03-11 11:13:05,010 [main:302] - generating value of type = Kla13 false depth = 0
2021-03-11 11:13:05,016 [main:112] - generating klass Kla13 text = class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:13:05,017 [main:46] - GENERATED VALUE OF TYPE Kla13 = Kla13()
2021-03-11 11:13:05,017 [main:49] - GENERATED IS CALL =true
2021-03-11 11:13:05,040 [main:55] - randomType = Kla12
2021-03-11 11:13:05,224 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-11 11:13:05,229 [main:112] - generating klass Kla12 text = class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}
2021-03-11 11:13:05,235 [main:94] - GETTING Kla13 from String
2021-03-11 11:13:05,255 [main:94] - GETTING Kla13 from String
2021-03-11 11:13:05,256 [main:94] - GETTING Kla13 from MyIterator<String>
2021-03-11 11:13:05,271 [main:94] - GETTING Kla13 from Continuation<Any?>
2021-03-11 11:13:05,279 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:13:05,289 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:13:05,290 [main:94] - GETTING Kla13 from MyIterator<Double>
2021-03-11 11:13:05,306 [main:94] - GETTING Kla13 from Double
2021-03-11 11:13:05,341 [main:94] - GETTING Kla13 from EmptyCoroutineContext
2021-03-11 11:13:05,356 [main:94] - GETTING Kla13 from UByte
2021-03-11 11:13:05,381 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:13:05,381 [main:94] - GETTING Kla13 from Double
2021-03-11 11:13:05,382 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:13:05,383 [main:94] - GETTING Kla13 from UByte
2021-03-11 11:13:05,383 [main:94] - GETTING Kla13 from Function0<Unit>
2021-03-11 11:13:05,392 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:13:05,399 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:13:05,399 [main:94] - GETTING Kla13 from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:13:05,408 [main:94] - GETTING Kla13 from MyIterator<Double>
2021-03-11 11:13:05,408 [main:94] - GETTING Kla13 from MyIterator<String>
2021-03-11 11:13:05,409 [main:94] - GETTING Kla13 from Any?
2021-03-11 11:13:05,415 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:13:05,415 [main:94] - GETTING Kla13 from Int
2021-03-11 11:13:05,451 [main:94] - GETTING Kla13 from MyIterator<Double>
2021-03-11 11:13:05,451 [main:110] - replacement of prope9 of type Kla13 is Kla13()
2021-03-11 11:13:05,629 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:13:05,629 [main:66] - Compilation checking started
2021-03-11 11:13:06,449 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 56
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:06,451 [main:103] - replacing (56, Int)
2021-03-11 11:13:06,451 [main:38] - replacing 56 Int
2021-03-11 11:13:06,451 [main:42] - Getting value of type Int
2021-03-11 11:13:06,638 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:06,644 [main:46] - GENERATED VALUE OF TYPE Int = 44815437
2021-03-11 11:13:06,644 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:06,656 [main:55] - randomType = Int
2021-03-11 11:13:06,839 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:06,887 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:13:06,887 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4ab2f15c]
2021-03-11 11:13:07,071 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:07,261 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:07,267 [main:66] - Generated call from random type = (-1263364744).toInt().coerceIn(-906003957, 2060299343)
2021-03-11 11:13:07,268 [main:94] - GETTING Int from String
2021-03-11 11:13:07,287 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6107966a], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4ab2f15c]]
2021-03-11 11:13:07,288 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4ab2f15c]
2021-03-11 11:13:07,467 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:07,653 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:07,659 [main:105] - GENERATED CALL = (prope2).length.coerceIn(-1509201150, -592368473)
2021-03-11 11:13:07,659 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78eb4fee]]
2021-03-11 11:13:07,660 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588]
2021-03-11 11:13:07,848 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:13:07,854 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78eb4fee]
2021-03-11 11:13:08,037 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:08,043 [main:105] - GENERATED CALL = (prope2).compareTo("txarv").rotateLeft(306378403)
2021-03-11 11:13:08,043 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@835a7d0]]
2021-03-11 11:13:08,043 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c]
2021-03-11 11:13:08,228 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:08,233 [main:105] - GENERATED CALL = (prope2).get(-2099640359).code
2021-03-11 11:13:08,234 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6107966a], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a9358ae]]
2021-03-11 11:13:08,234 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a9358ae]
2021-03-11 11:13:08,234 [main:105] - GENERATED CALL = (prope2).length.countOneBits()
2021-03-11 11:13:08,234 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@39f8db0e]]
2021-03-11 11:13:08,234 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c]
2021-03-11 11:13:08,418 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:08,424 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@39f8db0e]
2021-03-11 11:13:08,605 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:13:08,612 [main:105] - GENERATED CALL = (prope2).get(1558046700).compareTo('塌')
2021-03-11 11:13:08,612 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6107966a], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6630fdb2]]
2021-03-11 11:13:08,612 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6630fdb2]
2021-03-11 11:13:08,798 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:08,804 [main:105] - GENERATED CALL = (prope2).length.xor(-25227980)
2021-03-11 11:13:08,804 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@48afc141]]
2021-03-11 11:13:08,804 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588]
2021-03-11 11:13:08,988 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:13:08,994 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@48afc141]
2021-03-11 11:13:09,177 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:09,183 [main:105] - GENERATED CALL = (prope2).compareTo("skcms").coerceAtMost(1580191345)
2021-03-11 11:13:09,183 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]]
2021-03-11 11:13:09,183 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588]
2021-03-11 11:13:09,369 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:13:09,375 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]
2021-03-11 11:13:09,558 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:09,563 [main:105] - GENERATED CALL = (prope2).compareTo("iuccj").or(-740228317)
2021-03-11 11:13:09,564 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46f05a1d]]
2021-03-11 11:13:09,564 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83]
2021-03-11 11:13:09,745 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:09,935 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:09,941 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46f05a1d]
2021-03-11 11:13:10,168 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:13:10,363 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:10,556 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:10,562 [main:105] - GENERATED CALL = (prope2).subSequence(1623045232, 832632522).indexOf('瑠', 362914872, true)
2021-03-11 11:13:10,562 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6107966a], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6140623a]]
2021-03-11 11:13:10,562 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6140623a]
2021-03-11 11:13:10,752 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:10,757 [main:105] - GENERATED CALL = (prope2).length.shr(936292432)
2021-03-11 11:13:10,757 [main:110] - replacement of 56 of type Int is (prope2).compareTo("skcms").coerceAtMost(1580191345)
2021-03-11 11:13:10,945 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:13:10,946 [main:66] - Compilation checking started
2021-03-11 11:13:11,992 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 (prope2).compareTo("skcms").coerceAtMost(1580191345)
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:11,994 [main:103] - replacing ({ c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 11:13:11,995 [main:38] - replacing { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-11 11:13:11,995 [main:42] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 11:13:12,183 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 11:13:12,189 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:13:12,387 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:13:12,395 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:13:12,822 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:13:12,822 [main:95] - GENERATED = println("izrtz")
2021-03-11 11:13:12,822 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println("izrtz")}
2021-03-11 11:13:12,822 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:13,299 [main:55] - randomType = ArrayList<UInt>
2021-03-11 11:13:13,489 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 11:13:13,703 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-11 11:13:13,712 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-11 11:13:13,925 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 11:13:13,932 [main:95] - GENERATED = arrayListOf<UInt>(1447055926.toUInt())
2021-03-11 11:13:14,116 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from MyIterator<Double>
2021-03-11 11:13:14,136 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 11:13:14,149 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from MyIterator<Double>
2021-03-11 11:13:14,151 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 11:13:14,184 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 11:13:14,185 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-11 11:13:14,193 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 11:13:14,195 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-11 11:13:14,205 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Double
2021-03-11 11:13:14,259 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-11 11:13:14,261 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-11 11:13:14,303 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from MyIterator<String>
2021-03-11 11:13:14,323 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:13:14,337 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 11:13:14,390 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from EmptyCoroutineContext
2021-03-11 11:13:14,413 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-11 11:13:14,415 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-11 11:13:14,425 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Any?>
2021-03-11 11:13:14,436 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from MyIterator<Double>
2021-03-11 11:13:14,438 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-11 11:13:14,440 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Double
2021-03-11 11:13:14,441 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 11:13:14,443 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 11:13:14,446 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from MyIterator<String>
2021-03-11 11:13:14,446 [main:110] - replacement of { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println("izrtz")}
2021-03-11 11:13:14,634 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:13:14,634 [main:66] - Compilation checking started
2021-03-11 11:13:15,523 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 (prope2).compareTo("skcms").coerceAtMost(1580191345)
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:15,526 [main:103] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 11:13:15,526 [main:38] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 11:13:15,526 [main:42] - Getting value of type String
2021-03-11 11:13:15,711 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:13:15,717 [main:46] - GENERATED VALUE OF TYPE String = "kfvfi"
2021-03-11 11:13:15,717 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:15,729 [main:55] - randomType = Boolean
2021-03-11 11:13:15,959 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:15,978 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:13:16,174 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:16,181 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:13:16,366 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:16,372 [main:66] - Generated call from random type = (true).compareTo(false).toString(1452586418)
2021-03-11 11:13:16,373 [main:94] - GETTING String from MyIterator<Double>
2021-03-11 11:13:16,394 [main:94] - GETTING String from MyIterator<Double>
2021-03-11 11:13:16,394 [main:94] - GETTING String from Boolean
2021-03-11 11:13:16,406 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:13:16,406 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:13:16,594 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:16,599 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:13:16,782 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:16,788 [main:105] - GENERATED CALL = (Kla5().prope5).compareTo(true).toString(-1591097764)
2021-03-11 11:13:16,788 [main:110] - replacement of "Wrong state-machine generated: it is finished early" of type String is (Kla5().prope5).compareTo(true).toString(-1591097764)
2021-03-11 11:13:16,978 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:13:16,978 [main:66] - Compilation checking started
2021-03-11 11:13:17,809 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 (prope2).compareTo("skcms").coerceAtMost(1580191345)
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:17,811 [main:103] - replacing ("tail-call optimization miss: method at " + it, String)
2021-03-11 11:13:17,812 [main:38] - replacing "tail-call optimization miss: method at " + it String
2021-03-11 11:13:17,812 [main:42] - Getting value of type String
2021-03-11 11:13:17,994 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:13:17,999 [main:46] - GENERATED VALUE OF TYPE String = "qrhgr"
2021-03-11 11:13:18,000 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:18,433 [main:55] - randomType = Float?
2021-03-11 11:13:18,621 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:13:18,677 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:13:18,677 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:13:18,866 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:18,872 [main:66] - Generated call from random type = (0.5506193f)?.toInt().toString(-94744526)
2021-03-11 11:13:18,873 [main:94] - GETTING String from Any?
2021-03-11 11:13:18,878 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@170f6972]]
2021-03-11 11:13:18,878 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@170f6972]
2021-03-11 11:13:18,879 [main:105] - GENERATED CALL = (Kla2().prope2).toString()
2021-03-11 11:13:18,879 [main:110] - replacement of "tail-call optimization miss: method at " + it of type String is (Kla2().prope2).toString()
2021-03-11 11:13:19,060 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:13:19,061 [main:66] - Compilation checking started
2021-03-11 11:13:19,927 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 (prope2).compareTo("skcms").coerceAtMost(1580191345)
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:19,929 [main:103] - replacing (getOrThrow(), Ty1)
2021-03-11 11:13:19,931 [main:38] - replacing getOrThrow() Ty1
2021-03-11 11:13:19,931 [main:42] - Getting value of type Ty1
2021-03-11 11:13:20,122 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 11:13:20,131 [main:46] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 11:13:20,143 [main:55] - randomType = Char
2021-03-11 11:13:20,333 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:13:20,367 [main:94] - GETTING Ty1 from Continuation<Any?>
2021-03-11 11:13:20,380 [main:94] - GETTING Ty1 from UByte
2021-03-11 11:13:20,421 [main:94] - GETTING Ty1 from String
2021-03-11 11:13:20,450 [main:94] - GETTING Ty1 from MyIterator<Double>
2021-03-11 11:13:20,469 [main:94] - GETTING Ty1 from Double
2021-03-11 11:13:20,515 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:13:20,527 [main:94] - GETTING Ty1 from UByte
2021-03-11 11:13:20,527 [main:94] - GETTING Ty1 from String
2021-03-11 11:13:20,528 [main:94] - GETTING Ty1 from Any?
2021-03-11 11:13:20,534 [main:94] - GETTING Ty1 from MyIterator<Double>
2021-03-11 11:13:20,534 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:13:20,535 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:13:20,543 [main:94] - GETTING Ty1 from MyIterator<Double>
2021-03-11 11:13:20,543 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:13:20,544 [main:94] - GETTING Ty1 from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:13:20,553 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:13:20,553 [main:94] - GETTING Ty1 from MyIterator<String>
2021-03-11 11:13:20,570 [main:94] - GETTING Ty1 from Double
2021-03-11 11:13:20,571 [main:94] - GETTING Ty1 from Function0<Unit>
2021-03-11 11:13:20,584 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:13:20,585 [main:94] - GETTING Ty1 from MyIterator<String>
2021-03-11 11:13:20,586 [main:94] - GETTING Ty1 from EmptyCoroutineContext
2021-03-11 11:13:20,608 [main:94] - GETTING Ty1 from Int
2021-03-11 11:13:20,649 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:13:20,649 [main:107] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-11 11:13:20,649 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:13:20,649 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:13:20,649 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:13:20,838 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:13:20,847 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:13:21,106 [main:55] - randomType = Kla13?
2021-03-11 11:13:21,299 [main:302] - generating value of type = Kla13 false depth = 0
2021-03-11 11:13:21,305 [main:112] - generating klass Kla13 text = class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:13:21,317 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:13:21,367 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:13:21,368 [main:94] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-11 11:13:21,376 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:13:21,377 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:13:21,417 [main:94] - GETTING EmptyCoroutineContext from MyIterator<String>
2021-03-11 11:13:21,431 [main:94] - GETTING EmptyCoroutineContext from Any?
2021-03-11 11:13:21,435 [main:94] - GETTING EmptyCoroutineContext from MyIterator<Double>
2021-03-11 11:13:21,449 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:13:21,456 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:13:21,456 [main:94] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-11 11:13:21,482 [main:110] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla2().context
2021-03-11 11:13:21,668 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:13:21,669 [main:66] - Compilation checking started
2021-03-11 11:13:22,486 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 (prope2).compareTo("skcms").coerceAtMost(1580191345)
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:22,489 [main:103] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 11:13:22,489 [main:38] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 11:13:22,489 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 11:13:22,676 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 11:13:22,683 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:13:22,688 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 11:13:22,688 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:23,166 [main:55] - randomType = HashSet<Kla5>
2021-03-11 11:13:23,358 [main:302] - generating value of type = HashSet<Kla5> false depth = 0
2021-03-11 11:13:23,556 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Kla5): HashSet<Kla5> = TODO()
2021-03-11 11:13:23,563 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Kla5): HashSet<Kla5> = TODO()
2021-03-11 11:13:23,763 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-11 11:13:23,769 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}
2021-03-11 11:13:23,770 [main:95] - GENERATED = hashSetOf<Kla5>(Kla5())
2021-03-11 11:13:23,914 [main:94] - GETTING Function0<Boolean> from MyIterator<String>
2021-03-11 11:13:23,934 [main:94] - GETTING Function0<Boolean> from Continuation<Any?>
2021-03-11 11:13:23,944 [main:94] - GETTING Function0<Boolean> from Any?
2021-03-11 11:13:23,949 [main:94] - GETTING Function0<Boolean> from UByte
2021-03-11 11:13:23,986 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 11:13:24,034 [main:94] - GETTING Function0<Boolean> from UByte
2021-03-11 11:13:24,035 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 11:13:24,047 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 11:13:24,077 [main:94] - GETTING Function0<Boolean> from MyIterator<Double>
2021-03-11 11:13:24,099 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 11:13:24,100 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 11:13:24,101 [main:94] - GETTING Function0<Boolean> from CoroutineContext
2021-03-11 11:13:24,111 [main:94] - GETTING Function0<Boolean> from Double
2021-03-11 11:13:24,154 [main:94] - GETTING Function0<Boolean> from Function0<Unit>
2021-03-11 11:13:24,164 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 11:13:24,165 [main:94] - GETTING Function0<Boolean> from MyIterator<Double>
2021-03-11 11:13:24,166 [main:94] - GETTING Function0<Boolean> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:13:24,178 [main:94] - GETTING Function0<Boolean> from MyIterator<Double>
2021-03-11 11:13:24,180 [main:94] - GETTING Function0<Boolean> from MyIterator<String>
2021-03-11 11:13:24,181 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 11:13:24,182 [main:94] - GETTING Function0<Boolean> from EmptyCoroutineContext
2021-03-11 11:13:24,206 [main:94] - GETTING Function0<Boolean> from Double
2021-03-11 11:13:24,207 [main:94] - GETTING Function0<Boolean> from CoroutineContext
2021-03-11 11:13:24,209 [main:94] - GETTING Function0<Boolean> from CoroutineContext
2021-03-11 11:13:24,209 [main:110] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { false}
2021-03-11 11:13:24,396 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:13:24,397 [main:66] - Compilation checking started
2021-03-11 11:13:25,198 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 (prope2).compareTo("skcms").coerceAtMost(1580191345)
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:25,200 [main:103] - replacing (false, Boolean)
2021-03-11 11:13:25,201 [main:38] - replacing false Boolean
2021-03-11 11:13:25,201 [main:42] - Getting value of type Boolean
2021-03-11 11:13:25,396 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:25,402 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:13:25,402 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:25,639 [main:55] - randomType = Int?
2021-03-11 11:13:25,827 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:25,888 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]
2021-03-11 11:13:26,075 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:26,075 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:13:26,076 [main:66] - Generated call from random type = (1002810518)?.equals("vwghe").not()
2021-03-11 11:13:26,077 [main:94] - GETTING Boolean from Function0<Unit>
2021-03-11 11:13:26,089 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@1892da73], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:13:26,089 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@1892da73]
2021-03-11 11:13:26,276 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:26,277 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:13:26,462 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:26,463 [main:105] - GENERATED CALL = (Kla5().prope6).equals("lngqa").equals("yvndg")
2021-03-11 11:13:26,463 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@1892da73], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:13:26,463 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@1892da73]
2021-03-11 11:13:26,695 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:26,695 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:13:26,880 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:26,886 [main:105] - GENERATED CALL = (Kla5().prope6).equals("ariee").and(false)
2021-03-11 11:13:26,886 [main:101] - Case = [public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@43efe1e9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@10e9dd46]]
2021-03-11 11:13:26,886 [main:137] - GENERATING call of type public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@43efe1e9]
2021-03-11 11:13:26,886 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@10e9dd46]
2021-03-11 11:13:27,080 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:27,080 [main:105] - GENERATED CALL = (Kla5().prope6).invoke().equals("wvcrs")
2021-03-11 11:13:27,080 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@1892da73], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:13:27,080 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@1892da73]
2021-03-11 11:13:27,271 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:27,272 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:13:27,467 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:27,473 [main:105] - GENERATED CALL = (Kla5().prope6).equals("uhzue").xor(false)
2021-03-11 11:13:27,473 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@1892da73], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:13:27,474 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@1892da73]
2021-03-11 11:13:27,666 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:13:27,854 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:27,860 [main:105] - GENERATED CALL = (Kla5().prope6).equals(null).or(true)
2021-03-11 11:13:27,860 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@1892da73], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:13:27,860 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@1892da73]
2021-03-11 11:13:28,046 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:13:28,046 [main:105] - GENERATED CALL = (Kla5().prope6).equals(null).not()
2021-03-11 11:13:28,046 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@1892da73]]
2021-03-11 11:13:28,046 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@1892da73]
2021-03-11 11:13:28,242 [main:105] - GENERATED CALL = (Kla5().prope6).equals(null)
2021-03-11 11:13:28,242 [main:110] - replacement of false of type Boolean is (Kla5().prope6).invoke().equals("wvcrs")
2021-03-11 11:13:28,429 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:13:28,429 [main:66] - Compilation checking started
2021-03-11 11:13:29,287 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 (prope2).compareTo("skcms").coerceAtMost(1580191345)
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:29,290 [main:103] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 11:13:29,290 [main:38] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 11:13:29,291 [main:42] - Getting value of type Boolean
2021-03-11 11:13:29,489 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:29,495 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:13:29,496 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:29,717 [main:55] - randomType = Long
2021-03-11 11:13:29,898 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:13:29,942 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:13:29,942 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:13:30,127 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:30,127 [main:66] - Generated call from random type = (-5711292615743755713).toDouble().equals("pkbgp")
2021-03-11 11:13:30,127 [main:110] - replacement of c !is CoroutineStackFrame of type Boolean is (-5711292615743755713).toDouble().equals("pkbgp")
2021-03-11 11:13:30,311 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:13:30,312 [main:66] - Compilation checking started
2021-03-11 11:13:30,870 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 (prope2).compareTo("skcms").coerceAtMost(1580191345)
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }.prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if ((-5711292615743755713).toDouble().equals("pkbgp")) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:30,873 [main:103] - replacing (fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 (prope2).compareTo("skcms").coerceAtMost(1580191345)
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    }, Kla8)
2021-03-11 11:13:30,873 [main:38] - replacing fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 (prope2).compareTo("skcms").coerceAtMost(1580191345)
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    } Kla8
2021-03-11 11:13:30,873 [main:42] - Getting value of type Kla8
2021-03-11 11:13:31,057 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:13:31,063 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}
2021-03-11 11:13:31,063 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:13:31,063 [main:49] - GENERATED IS CALL =true
2021-03-11 11:13:31,076 [main:55] - randomType = Char
2021-03-11 11:13:31,258 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:13:31,285 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:13:31,295 [main:94] - GETTING Kla8 from MyIterator<Double>
2021-03-11 11:13:31,308 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:13:31,309 [main:94] - GETTING Kla8 from UByte
2021-03-11 11:13:31,336 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:13:31,343 [main:94] - GETTING Kla8 from MyIterator<String>
2021-03-11 11:13:31,356 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:13:31,360 [main:94] - GETTING Kla8 from Double
2021-03-11 11:13:31,394 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:13:31,400 [main:94] - GETTING Kla8 from Int
2021-03-11 11:13:31,434 [main:94] - GETTING Kla8 from Double
2021-03-11 11:13:31,435 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:13:31,435 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:13:31,453 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:13:31,453 [main:94] - GETTING Kla8 from UByte
2021-03-11 11:13:31,454 [main:94] - GETTING Kla8 from MyIterator<Double>
2021-03-11 11:13:31,454 [main:94] - GETTING Kla8 from MyIterator<String>
2021-03-11 11:13:31,455 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:13:31,456 [main:94] - GETTING Kla8 from String
2021-03-11 11:13:31,480 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:13:31,488 [main:94] - GETTING Kla8 from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:13:31,500 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:13:31,501 [main:94] - GETTING Kla8 from String
2021-03-11 11:13:31,501 [main:94] - GETTING Kla8 from MyIterator<Double>
2021-03-11 11:13:31,501 [main:110] - replacement of fu11 {
        prope12 += "-"
        fu12 {
            prope12 += fu15(it).toString()
            if (it == 2) return@fu11 (prope2).compareTo("skcms").coerceAtMost(1580191345)
        }
        // Should be unreachable
        prope12 += (linkedSetOf<UInt>(1169212038.toUInt())).size.toString(-2048158951)
        1
    } of type Kla8 is Kla8()
2021-03-11 11:13:31,686 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:13:31,687 [main:66] - Compilation checking started
2021-03-11 11:13:32,493 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope9.prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:32,495 [main:103] - replacing (prope9, Kla13)
2021-03-11 11:13:32,495 [main:38] - replacing prope9 Kla13
2021-03-11 11:13:32,495 [main:42] - Getting value of type Kla13
2021-03-11 11:13:32,680 [main:302] - generating value of type = Kla13 false depth = 0
2021-03-11 11:13:32,686 [main:112] - generating klass Kla13 text = class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:13:32,686 [main:46] - GENERATED VALUE OF TYPE Kla13 = Kla13()
2021-03-11 11:13:32,686 [main:49] - GENERATED IS CALL =true
2021-03-11 11:13:32,913 [main:55] - randomType = Kla4?
2021-03-11 11:13:33,083 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:13:33,088 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}
2021-03-11 11:13:33,098 [main:94] - GETTING Kla13 from Double
2021-03-11 11:13:33,134 [main:94] - GETTING Kla13 from Any?
2021-03-11 11:13:33,138 [main:94] - GETTING Kla13 from EmptyCoroutineContext
2021-03-11 11:13:33,152 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:13:33,159 [main:94] - GETTING Kla13 from UByte
2021-03-11 11:13:33,186 [main:94] - GETTING Kla13 from Continuation<Any?>
2021-03-11 11:13:33,196 [main:94] - GETTING Kla13 from MyIterator<String>
2021-03-11 11:13:33,207 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:13:33,220 [main:94] - GETTING Kla13 from Int
2021-03-11 11:13:33,253 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:13:33,253 [main:94] - GETTING Kla13 from MyIterator<Double>
2021-03-11 11:13:33,268 [main:94] - GETTING Kla13 from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:13:33,278 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:13:33,278 [main:94] - GETTING Kla13 from String
2021-03-11 11:13:33,300 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:13:33,301 [main:94] - GETTING Kla13 from String
2021-03-11 11:13:33,302 [main:94] - GETTING Kla13 from UByte
2021-03-11 11:13:33,302 [main:94] - GETTING Kla13 from Double
2021-03-11 11:13:33,303 [main:94] - GETTING Kla13 from Function0<Unit>
2021-03-11 11:13:33,315 [main:94] - GETTING Kla13 from MyIterator<Double>
2021-03-11 11:13:33,316 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:13:33,316 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:13:33,317 [main:94] - GETTING Kla13 from MyIterator<Double>
2021-03-11 11:13:33,317 [main:94] - GETTING Kla13 from MyIterator<String>
2021-03-11 11:13:33,317 [main:110] - replacement of prope9 of type Kla13 is Kla13()
2021-03-11 11:13:33,486 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:13:33,486 [main:66] - Compilation checking started
2021-03-11 11:13:34,247 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:34,249 [main:103] - replacing (prope17, Function0<Unit>)
2021-03-11 11:13:34,250 [main:38] - replacing prope17 Function0<Unit>
2021-03-11 11:13:34,250 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:13:34,439 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:13:34,446 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:13:34,632 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:13:34,639 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:13:35,250 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:13:35,255 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:13:35,262 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:13:35,262 [main:95] - GENERATED = check(false, { "fdokb"})
2021-03-11 11:13:35,262 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "fdokb"})}
2021-03-11 11:13:35,262 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:35,275 [main:55] - randomType = String
2021-03-11 11:13:35,446 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:13:35,473 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:13:35,509 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 11:13:35,517 [main:110] - replacement of prope17 of type Function0<Unit> is { check(false, { "fdokb"})}
2021-03-11 11:13:35,694 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:13:35,694 [main:66] - Compilation checking started
2021-03-11 11:13:36,205 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        { check(false, { "fdokb"})} = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:36,207 [main:103] - replacing (isSuccess, Boolean)
2021-03-11 11:13:36,209 [main:38] - replacing isSuccess Boolean
2021-03-11 11:13:36,209 [main:42] - Getting value of type Boolean
2021-03-11 11:13:36,397 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:36,402 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:13:36,402 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:36,415 [main:55] - randomType = UInt
2021-03-11 11:13:36,586 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:13:36,624 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@68789a3]
2021-03-11 11:13:36,797 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:36,797 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:13:36,999 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:37,007 [main:66] - Generated call from random type = (417372215.toUInt()).equals("yuaxu").xor(true)
2021-03-11 11:13:37,008 [main:94] - GETTING Boolean from Boolean
2021-03-11 11:13:37,024 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:13:37,024 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:13:37,269 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:37,269 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:13:37,454 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:37,460 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).equals("cuvju").or(false)
2021-03-11 11:13:37,460 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:13:37,460 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:13:37,635 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:37,636 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:13:37,812 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:37,812 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).equals("ejool").equals("gfkar")
2021-03-11 11:13:37,812 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:13:37,812 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:13:38,003 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:38,003 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:13:38,004 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).equals("xqiea").not()
2021-03-11 11:13:38,004 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:13:38,004 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:13:38,190 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:38,190 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:13:38,368 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:38,373 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).equals("tjotn").and(false)
2021-03-11 11:13:38,374 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]]
2021-03-11 11:13:38,374 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:13:38,551 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:38,557 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]
2021-03-11 11:13:38,737 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:38,737 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).compareTo(false).equals("qmpnz")
2021-03-11 11:13:38,737 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:13:38,737 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:13:38,915 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:38,915 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).equals("wfyja")
2021-03-11 11:13:38,915 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:13:38,915 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:13:39,099 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:39,105 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).xor(true)
2021-03-11 11:13:39,105 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:13:39,105 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:13:39,300 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:39,306 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).or(false)
2021-03-11 11:13:39,306 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:13:39,306 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@390d7327]
2021-03-11 11:13:39,484 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:39,484 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:13:39,664 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:39,670 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).equals("qwbkz").xor(true)
2021-03-11 11:13:39,670 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:13:39,670 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:13:39,849 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:39,855 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).and(false)
2021-03-11 11:13:39,855 [main:110] - replacement of isSuccess of type Boolean is (417372215.toUInt()).equals("yuaxu").xor(true)
2021-03-11 11:13:40,031 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:13:40,031 [main:66] - Compilation checking started
2021-03-11 11:13:40,557 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.(417372215.toUInt()).equals("yuaxu").xor(true)) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:40,559 [main:103] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 11:13:40,559 [main:38] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 11:13:40,559 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 11:13:40,740 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 11:13:40,746 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:13:40,751 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 11:13:40,751 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:40,764 [main:55] - randomType = Char
2021-03-11 11:13:40,937 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:13:40,964 [main:94] - GETTING Function0<Boolean> from CoroutineContext
2021-03-11 11:13:40,970 [main:94] - GETTING Function0<Boolean> from CoroutineContext
2021-03-11 11:13:40,971 [main:94] - GETTING Function0<Boolean> from Double
2021-03-11 11:13:41,022 [main:94] - GETTING Function0<Boolean> from CoroutineContext
2021-03-11 11:13:41,024 [main:94] - GETTING Function0<Boolean> from EmptyCoroutineContext
2021-03-11 11:13:41,049 [main:94] - GETTING Function0<Boolean> from MyIterator<String>
2021-03-11 11:13:41,067 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 11:13:41,082 [main:94] - GETTING Function0<Boolean> from Double
2021-03-11 11:13:41,083 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 11:13:41,114 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 11:13:41,115 [main:94] - GETTING Function0<Boolean> from UByte
2021-03-11 11:13:41,152 [main:94] - GETTING Function0<Boolean> from Function0<Unit>
2021-03-11 11:13:41,165 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 11:13:41,166 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 11:13:41,220 [main:94] - GETTING Function0<Boolean> from Any?
2021-03-11 11:13:41,225 [main:94] - GETTING Function0<Boolean> from UByte
2021-03-11 11:13:41,226 [main:94] - GETTING Function0<Boolean> from MyIterator<String>
2021-03-11 11:13:41,227 [main:94] - GETTING Function0<Boolean> from MyIterator<Double>
2021-03-11 11:13:41,245 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 11:13:41,246 [main:94] - GETTING Function0<Boolean> from Continuation<Any?>
2021-03-11 11:13:41,257 [main:94] - GETTING Function0<Boolean> from MyIterator<Double>
2021-03-11 11:13:41,259 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 11:13:41,260 [main:94] - GETTING Function0<Boolean> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:13:41,272 [main:94] - GETTING Function0<Boolean> from MyIterator<Double>
2021-03-11 11:13:41,272 [main:110] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-11 11:13:41,444 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:13:41,444 [main:66] - Compilation checking started
2021-03-11 11:13:42,223 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        prope17()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:42,225 [main:103] - replacing (prope17, Function0<Unit>)
2021-03-11 11:13:42,225 [main:38] - replacing prope17 Function0<Unit>
2021-03-11 11:13:42,225 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:13:42,394 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:13:42,400 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:13:42,617 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:13:42,624 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:13:43,012 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:13:43,012 [main:95] - GENERATED = print("aymsk")
2021-03-11 11:13:43,012 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("aymsk")}
2021-03-11 11:13:43,013 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:43,234 [main:55] - randomType = Char?
2021-03-11 11:13:43,405 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:13:43,434 [main:94] - GETTING Function0<Unit> from MyIterator<Double>
2021-03-11 11:13:43,449 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:13:43,458 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:13:43,480 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:13:43,481 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:13:43,495 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 11:13:43,533 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:13:43,539 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:13:43,540 [main:94] - GETTING Function0<Unit> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:13:43,549 [main:94] - GETTING Function0<Unit> from Any?
2021-03-11 11:13:43,553 [main:94] - GETTING Function0<Unit> from MyIterator<Double>
2021-03-11 11:13:43,554 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:13:43,555 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:13:43,556 [main:94] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-11 11:13:43,565 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:13:43,566 [main:94] - GETTING Function0<Unit> from MyIterator<Double>
2021-03-11 11:13:43,567 [main:94] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-11 11:13:43,586 [main:94] - GETTING Function0<Unit> from UByte
2021-03-11 11:13:43,615 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:13:43,616 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:13:43,617 [main:94] - GETTING Function0<Unit> from UByte
2021-03-11 11:13:43,617 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 11:13:43,626 [main:110] - replacement of prope17 of type Function0<Unit> is Kla5().prope6
2021-03-11 11:13:43,801 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:13:43,802 [main:66] - Compilation checking started
2021-03-11 11:13:44,624 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:44,626 [main:103] - replacing (prope13 != 56, Boolean)
2021-03-11 11:13:44,626 [main:38] - replacing prope13 != 56 Boolean
2021-03-11 11:13:44,626 [main:42] - Getting value of type Boolean
2021-03-11 11:13:44,801 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:13:44,807 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:13:44,807 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:45,239 [main:55] - randomType = Array<Double?>
2021-03-11 11:13:45,425 [main:302] - generating value of type = Array<Double?> false depth = 0
2021-03-11 11:13:45,614 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Double?): Array<Double?> = TODO()
2021-03-11 11:13:45,621 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Double?): Array<Double?> = TODO()
2021-03-11 11:13:46,227 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:13:46,233 [main:302] - generating value of type = Function1<Int, Double?> false depth = 3
2021-03-11 11:13:46,238 [main:302] - generating value of type = Double true depth = 4
2021-03-11 11:13:46,246 [main:95] - GENERATED = Array<Double?>(370617231, {a: Int -> 0.16858508396593175})
2021-03-11 11:13:46,263 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Double? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@6bd9ef41]
2021-03-11 11:13:46,439 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:46,446 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:13:46,622 [main:66] - Generated call from random type = (Array<Double?>(370617231, {a: Int -> 0.16858508396593175})).get(-1438412642)?.equals(null)!!
2021-03-11 11:13:46,623 [main:94] - GETTING Boolean from Double
2021-03-11 11:13:46,671 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]]
2021-03-11 11:13:46,671 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:13:46,847 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:46,847 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).equals("qtfyv")
2021-03-11 11:13:46,847 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a35fbda]]
2021-03-11 11:13:46,847 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:13:46,847 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a35fbda]
2021-03-11 11:13:46,847 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toDouble().isInfinite()
2021-03-11 11:13:46,848 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f0f149e]]
2021-03-11 11:13:46,848 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:13:46,848 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f0f149e]
2021-03-11 11:13:46,848 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isHighSurrogate()
2021-03-11 11:13:46,848 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@c33419d]]
2021-03-11 11:13:46,848 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:13:46,848 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@c33419d]
2021-03-11 11:13:46,848 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toFloat().isNaN()
2021-03-11 11:13:46,848 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ae4ecc]]
2021-03-11 11:13:46,848 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:13:46,848 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ae4ecc]
2021-03-11 11:13:46,848 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isDigit()
2021-03-11 11:13:46,848 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@69dd5e82]]
2021-03-11 11:13:46,848 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:13:46,848 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@69dd5e82]
2021-03-11 11:13:47,022 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:47,022 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toByte().equals("njfmr")
2021-03-11 11:13:47,022 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]]
2021-03-11 11:13:47,022 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:13:47,195 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:13:47,201 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cdc0e3]
2021-03-11 11:13:47,379 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:47,380 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).compareTo(24).equals("uotag")
2021-03-11 11:13:47,380 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccd48de]]
2021-03-11 11:13:47,380 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:13:47,380 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccd48de]
2021-03-11 11:13:47,380 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()
2021-03-11 11:13:47,380 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f4f761]]
2021-03-11 11:13:47,380 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:13:47,380 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f4f761]
2021-03-11 11:13:47,380 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetter()
2021-03-11 11:13:47,380 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:13:47,380 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:13:47,550 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:47,550 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:13:47,720 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).equals("laoxa").equals(null)
2021-03-11 11:13:47,720 [main:110] - replacement of prope13 != 56 of type Boolean is ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()
2021-03-11 11:13:47,930 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:13:47,931 [main:66] - Compilation checking started
2021-03-11 11:13:48,679 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:48,681 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:13:48,681 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:13:48,681 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:13:48,852 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:13:48,861 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:13:48,873 [main:55] - randomType = Short
2021-03-11 11:13:49,043 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:13:49,098 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:13:49,109 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:13:49,109 [main:94] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-11 11:13:49,119 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 11:13:49,156 [main:94] - GETTING EmptyCoroutineContext from Any?
2021-03-11 11:13:49,160 [main:94] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-11 11:13:49,169 [main:94] - GETTING EmptyCoroutineContext from MyIterator<String>
2021-03-11 11:13:49,184 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:13:49,184 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:13:49,222 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:13:49,239 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:13:49,247 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:13:49,248 [main:94] - GETTING EmptyCoroutineContext from UByte
2021-03-11 11:13:49,276 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:13:49,277 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:13:49,277 [main:94] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-11 11:13:49,293 [main:110] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla2().context
2021-03-11 11:13:49,464 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:13:49,465 [main:66] - Compilation checking started
2021-03-11 11:13:50,219 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:50,222 [main:103] - replacing (prope12.getOrThrow(), Ty1)
2021-03-11 11:13:50,222 [main:38] - replacing prope12.getOrThrow() Ty1
2021-03-11 11:13:50,222 [main:42] - Getting value of type Ty1
2021-03-11 11:13:50,399 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 11:13:50,409 [main:46] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 11:13:50,630 [main:55] - randomType = Char?
2021-03-11 11:13:50,806 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:13:50,844 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:13:50,856 [main:94] - GETTING Ty1 from MyIterator<String>
2021-03-11 11:13:50,877 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:13:50,878 [main:94] - GETTING Ty1 from MyIterator<Double>
2021-03-11 11:13:50,897 [main:94] - GETTING Ty1 from Int
2021-03-11 11:13:50,950 [main:94] - GETTING Ty1 from Double
2021-03-11 11:13:50,999 [main:94] - GETTING Ty1 from Function0<Unit>
2021-03-11 11:13:51,013 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:13:51,014 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:13:51,024 [main:94] - GETTING Ty1 from MyIterator<Double>
2021-03-11 11:13:51,025 [main:94] - GETTING Ty1 from Continuation<Any?>
2021-03-11 11:13:51,034 [main:94] - GETTING Ty1 from Any?
2021-03-11 11:13:51,040 [main:94] - GETTING Ty1 from String
2021-03-11 11:13:51,071 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:13:51,072 [main:94] - GETTING Ty1 from MyIterator<String>
2021-03-11 11:13:51,072 [main:94] - GETTING Ty1 from EmptyCoroutineContext
2021-03-11 11:13:51,099 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:13:51,100 [main:94] - GETTING Ty1 from MyIterator<Double>
2021-03-11 11:13:51,101 [main:94] - GETTING Ty1 from String
2021-03-11 11:13:51,102 [main:94] - GETTING Ty1 from UByte
2021-03-11 11:13:51,141 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:13:51,141 [main:94] - GETTING Ty1 from UByte
2021-03-11 11:13:51,142 [main:94] - GETTING Ty1 from Double
2021-03-11 11:13:51,143 [main:94] - GETTING Ty1 from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:13:51,154 [main:107] - Cant find and generate replacement for prope12.getOrThrow() type Ty1
2021-03-11 11:13:51,154 [main:103] - replacing ({
        prope12.getOrThrow()
    }, Any?)
2021-03-11 11:13:51,155 [main:38] - replacing {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    } Any?
2021-03-11 11:13:51,155 [main:42] - Getting value of type Any?
2021-03-11 11:13:51,329 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:13:51,330 [main:46] - GENERATED VALUE OF TYPE Any? = "beept"
2021-03-11 11:13:51,330 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:51,758 [main:55] - randomType = Long?
2021-03-11 11:13:51,935 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:13:51,993 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:13:52,011 [main:94] - GETTING Any? from Double
2021-03-11 11:13:52,056 [main:94] - GETTING Any? from UByte
2021-03-11 11:13:52,092 [main:94] - GETTING Any? from EmptyCoroutineContext
2021-03-11 11:13:52,116 [main:94] - GETTING Any? from Int
2021-03-11 11:13:52,165 [main:94] - GETTING Any? from Boolean
2021-03-11 11:13:52,180 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:13:52,189 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:13:52,206 [main:94] - GETTING Any? from UByte
2021-03-11 11:13:52,208 [main:94] - GETTING Any? from String
2021-03-11 11:13:52,236 [main:94] - GETTING Any? from Double
2021-03-11 11:13:52,237 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:13:52,238 [main:94] - GETTING Any? from Continuation<Any?>
2021-03-11 11:13:52,250 [main:94] - GETTING Any? from Boolean
2021-03-11 11:13:52,251 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:13:52,252 [main:94] - GETTING Any? from Any?
2021-03-11 11:13:52,258 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:13:52,260 [main:94] - GETTING Any? from Boolean
2021-03-11 11:13:52,261 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:13:52,262 [main:94] - GETTING Any? from String
2021-03-11 11:13:52,263 [main:94] - GETTING Any? from Function0<Unit>
2021-03-11 11:13:52,278 [main:94] - GETTING Any? from Boolean
2021-03-11 11:13:52,279 [main:94] - GETTING Any? from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:13:52,290 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:13:52,290 [main:110] - replacement of {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    } of type Any? is "beept"
2021-03-11 11:13:52,466 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-11 11:13:52,466 [main:66] - Compilation checking started
2021-03-11 11:13:52,477 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:13:52,626 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) "beept"
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:13:52,628 [main:103] - replacing (prope12, Result<Ty1>)
2021-03-11 11:13:52,629 [main:38] - replacing prope12 Result<Ty1>
2021-03-11 11:13:52,629 [main:42] - Getting value of type Result<Ty1>
2021-03-11 11:13:52,805 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-11 11:13:52,988 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:13:52,996 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:13:53,440 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:13:53,441 [main:46] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-11 11:13:53,902 [main:55] - randomType = Kla11<Kla2?>
2021-03-11 11:13:54,078 [main:302] - generating value of type = Kla11<Kla2?> false depth = 0
2021-03-11 11:13:54,084 [main:112] - generating klass Kla11 text = abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 11:13:54,911 [main:302] - generating value of type = Kla14 false depth = 2
2021-03-11 11:13:54,917 [main:112] - generating klass Kla14 text = object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:13:54,940 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:13:54,950 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:13:54,964 [main:94] - GETTING Result<Ty1> from UByte
2021-03-11 11:13:55,001 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 11:13:55,049 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 11:13:55,102 [main:94] - GETTING Result<Ty1> from MyIterator<String>
2021-03-11 11:13:55,120 [main:94] - GETTING Result<Ty1> from Continuation<Any?>
2021-03-11 11:13:55,133 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:13:55,135 [main:94] - GETTING Result<Ty1> from Any?
2021-03-11 11:13:55,140 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:13:55,153 [main:94] - GETTING Result<Ty1> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:13:55,164 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:13:55,166 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:13:55,167 [main:94] - GETTING Result<Ty1> from UByte
2021-03-11 11:13:55,168 [main:94] - GETTING Result<Ty1> from MyIterator<String>
2021-03-11 11:13:55,169 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:13:55,170 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:13:55,171 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 11:13:55,173 [main:94] - GETTING Result<Ty1> from EmptyCoroutineContext
2021-03-11 11:13:55,199 [main:94] - GETTING Result<Ty1> from String
2021-03-11 11:13:55,229 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:13:55,230 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:13:55,231 [main:94] - GETTING Result<Ty1> from Function0<Unit>
2021-03-11 11:13:55,247 [main:94] - GETTING Result<Ty1> from String
2021-03-11 11:13:55,247 [main:107] - Cant find and generate replacement for prope12 type Result<Ty1>
2021-03-11 11:13:55,247 [main:103] - replacing (Kla8(), Kla8)
2021-03-11 11:13:55,248 [main:38] - replacing Kla8() Kla8
2021-03-11 11:13:55,248 [main:42] - Getting value of type Kla8
2021-03-11 11:13:55,427 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:13:55,432 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}
2021-03-11 11:13:55,433 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:13:55,433 [main:49] - GENERATED IS CALL =true
2021-03-11 11:13:56,616 [main:55] - randomType = HashMap<Map<Short?, Kla0>, Kla2?>?
2021-03-11 11:13:56,792 [main:302] - generating value of type = HashMap<Map<Short?, Kla0>, Kla2?> false depth = 0
2021-03-11 11:13:56,984 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Map<Short?, Kla0>, Kla2?> = TODO()
2021-03-11 11:13:56,992 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Map<Short?, Kla0>, Kla2?> = TODO()
2021-03-11 11:13:57,192 [main:95] - GENERATED = linkedMapOf<Map<Short?, Kla0>, Kla2?>()
2021-03-11 11:13:57,349 [main:94] - GETTING Kla8 from UByte
2021-03-11 11:13:57,385 [main:94] - GETTING Kla8 from UByte
2021-03-11 11:13:57,386 [main:94] - GETTING Kla8 from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:13:57,399 [main:94] - GETTING Kla8 from MyIterator<String>
2021-03-11 11:13:57,419 [main:94] - GETTING Kla8 from Double
2021-03-11 11:13:57,469 [main:94] - GETTING Kla8 from String
2021-03-11 11:13:57,500 [main:94] - GETTING Kla8 from MyIterator<Double>
2021-03-11 11:13:57,516 [main:94] - GETTING Kla8 from MyIterator<Double>
2021-03-11 11:13:57,517 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:13:57,527 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:13:57,527 [main:94] - GETTING Kla8 from MyIterator<String>
2021-03-11 11:13:57,528 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:13:57,536 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:13:57,536 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:13:57,537 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:13:57,543 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:13:57,556 [main:94] - GETTING Kla8 from Int
2021-03-11 11:13:57,595 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:13:57,595 [main:94] - GETTING Kla8 from Double
2021-03-11 11:13:57,596 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:13:57,605 [main:94] - GETTING Kla8 from MyIterator<Double>
2021-03-11 11:13:57,605 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:13:57,606 [main:94] - GETTING Kla8 from String
2021-03-11 11:13:57,606 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:13:57,612 [main:110] - replacement of Kla8() of type Kla8 is Kla8()
2021-03-11 11:13:57,791 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:13:57,794 [main:103] - replacing ("tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine ", String)
2021-03-11 11:13:57,795 [main:38] - replacing "tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " String
2021-03-11 11:13:57,795 [main:42] - Getting value of type String
2021-03-11 11:13:57,978 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:13:57,984 [main:46] - GENERATED VALUE OF TYPE String = "qweap"
2021-03-11 11:13:57,984 [main:49] - GENERATED IS CALL =false
2021-03-11 11:13:57,998 [main:55] - randomType = Char
2021-03-11 11:13:58,218 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:13:58,246 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@39f8db0e]
2021-03-11 11:13:58,428 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:13:58,434 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:13:58,616 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:58,622 [main:66] - Generated call from random type = ('').compareTo('芑').toString(-593524641)
2021-03-11 11:13:58,623 [main:94] - GETTING String from EmptyCoroutineContext
2021-03-11 11:13:58,646 [main:94] - GETTING String from Double
2021-03-11 11:13:58,689 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]]
2021-03-11 11:13:58,689 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:13:58,689 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]
2021-03-11 11:13:58,689 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().lowercase()
2021-03-11 11:13:58,689 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:13:58,689 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:13:58,883 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:13:58,889 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:13:59,082 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:59,089 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).compareTo(72).toString(-563176324)
2021-03-11 11:13:59,089 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:13:59,089 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:13:59,089 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:13:59,309 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:59,316 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toLong().toString(-1556415518)
2021-03-11 11:13:59,316 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]]
2021-03-11 11:13:59,316 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:13:59,316 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]
2021-03-11 11:13:59,316 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().uppercase()
2021-03-11 11:13:59,316 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]]
2021-03-11 11:13:59,316 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:13:59,316 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]
2021-03-11 11:13:59,501 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:13:59,507 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt")
2021-03-11 11:13:59,507 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:13:59,507 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:13:59,508 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:13:59,690 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:59,697 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toShort().toString(192936207)
2021-03-11 11:13:59,697 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:13:59,697 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:13:59,697 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:13:59,875 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:13:59,881 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toInt().toString(-480378878)
2021-03-11 11:13:59,882 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:13:59,882 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:13:59,882 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:14:00,067 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:00,074 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toByte().toString(1897936847)
2021-03-11 11:14:00,074 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]]
2021-03-11 11:14:00,075 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:14:00,075 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]
2021-03-11 11:14:00,075 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().titlecase()
2021-03-11 11:14:00,075 [main:110] - replacement of "tail-call optimization hit: method " + (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(true).toString(876761700) + " has no state-machine " of type String is (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt")
2021-03-11 11:14:00,268 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:14:00,268 [main:66] - Compilation checking started
2021-03-11 11:14:01,068 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:01,070 [main:103] - replacing (true, Boolean)
2021-03-11 11:14:01,070 [main:38] - replacing true Boolean
2021-03-11 11:14:01,070 [main:42] - Getting value of type Boolean
2021-03-11 11:14:01,274 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:01,280 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:14:01,280 [main:49] - GENERATED IS CALL =false
2021-03-11 11:14:01,944 [main:55] - randomType = MyIterator<ULong>
2021-03-11 11:14:02,153 [main:302] - generating value of type = MyIterator<ULong> false depth = 0
2021-03-11 11:14:02,161 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:14:02,606 [main:194] - Type params = [ULong]
2021-03-11 11:14:03,028 [main:302] - generating value of type = ULong true depth = 2
2021-03-11 11:14:03,052 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@695929bc]
2021-03-11 11:14:03,255 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:03,255 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:14:03,442 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:03,448 [main:66] - Generated call from random type = (MyIterator<ULong>(5711572257979940849.toULong())).equals("wfknj").and(false)
2021-03-11 11:14:03,449 [main:94] - GETTING Boolean from MyIterator<String>
2021-03-11 11:14:03,468 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@27b02f56], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7680ec7a]]
2021-03-11 11:14:03,468 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@27b02f56]
2021-03-11 11:14:03,468 [main:137] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7680ec7a]
2021-03-11 11:14:03,652 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:14:03,659 [main:105] - GENERATED CALL = ((MyIterator<String>(""))).next().matches("ylpry")
2021-03-11 11:14:03,659 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@66f12719], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:14:03,659 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@66f12719]
2021-03-11 11:14:03,659 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:14:03,892 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:03,892 [main:105] - GENERATED CALL = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
2021-03-11 11:14:03,892 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@13d1d6f8], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:14:03,892 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@13d1d6f8]
2021-03-11 11:14:04,064 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:04,065 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:14:04,065 [main:105] - GENERATED CALL = ((MyIterator<String>(""))).equals("qrpnj").not()
2021-03-11 11:14:04,065 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@13d1d6f8], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:14:04,065 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@13d1d6f8]
2021-03-11 11:14:04,240 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:04,240 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:14:04,412 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:04,418 [main:105] - GENERATED CALL = ((MyIterator<String>(""))).equals("ljwrc").or(true)
2021-03-11 11:14:04,418 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@66f12719], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:14:04,418 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@66f12719]
2021-03-11 11:14:04,418 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:14:04,599 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:04,605 [main:105] - GENERATED CALL = ((MyIterator<String>(""))).hasNext().and(false)
2021-03-11 11:14:04,605 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@66f12719], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:14:04,605 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@66f12719]
2021-03-11 11:14:04,605 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:14:04,783 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:04,789 [main:105] - GENERATED CALL = ((MyIterator<String>(""))).hasNext().xor(true)
2021-03-11 11:14:04,789 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyIterator[DeserializedSimpleFunctionDescriptor@35223d65]]
2021-03-11 11:14:04,789 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyIterator[DeserializedSimpleFunctionDescriptor@35223d65]
2021-03-11 11:14:04,967 [main:105] - GENERATED CALL = ((MyIterator<String>(""))).equals(null)
2021-03-11 11:14:04,967 [main:101] - Case = [public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@66f12719], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:14:04,967 [main:137] - GENERATING call of type public open fun hasNext(): kotlin.Boolean defined in MyIterator[SimpleFunctionDescriptorImpl@66f12719]
2021-03-11 11:14:04,967 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:14:05,144 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:05,150 [main:105] - GENERATED CALL = ((MyIterator<String>(""))).hasNext().or(true)
2021-03-11 11:14:05,150 [main:101] - Case = [public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@27b02f56], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]]
2021-03-11 11:14:05,150 [main:137] - GENERATING call of type public open fun next(): kotlin.String defined in MyIterator[SimpleFunctionDescriptorImpl@27b02f56]
2021-03-11 11:14:05,150 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]
2021-03-11 11:14:05,325 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:05,325 [main:105] - GENERATED CALL = ((MyIterator<String>(""))).next().equals("uckyg")
2021-03-11 11:14:05,325 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@13d1d6f8], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:14:05,325 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@13d1d6f8]
2021-03-11 11:14:05,516 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:05,517 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:14:05,693 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:05,699 [main:105] - GENERATED CALL = ((MyIterator<String>(""))).equals("laueo").xor(true)
2021-03-11 11:14:05,699 [main:110] - replacement of true of type Boolean is ((MyIterator<String>(""))).hasNext().equals("lcxbz")
2021-03-11 11:14:05,876 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:14:05,876 [main:66] - Compilation checking started
2021-03-11 11:14:06,634 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:06,636 [main:103] - replacing (it, Continuation<Unit>)
2021-03-11 11:14:06,636 [main:38] - replacing it Continuation<Unit>
2021-03-11 11:14:06,636 [main:42] - Getting value of type Continuation<Unit>
2021-03-11 11:14:06,810 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 11:14:06,993 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:14:07,001 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:14:07,645 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:14:07,832 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:14:07,839 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:14:08,261 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:14:08,452 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:14:08,460 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:14:09,108 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 11:14:09,367 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:14:09,375 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:14:10,021 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:14:10,021 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:14:10,021 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:14:10,022 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:14:10,022 [main:46] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 11:14:10,248 [main:55] - randomType = UShort?
2021-03-11 11:14:10,437 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:14:10,492 [main:94] - GETTING Continuation<Unit> from CoroutineContext
2021-03-11 11:14:10,503 [main:94] - GETTING Continuation<Unit> from MyIterator<Double>
2021-03-11 11:14:10,523 [main:94] - GETTING Continuation<Unit> from Function0<Unit>
2021-03-11 11:14:10,537 [main:94] - GETTING Continuation<Unit> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:14:10,549 [main:94] - GETTING Continuation<Unit> from Any?
2021-03-11 11:14:10,554 [main:94] - GETTING Continuation<Unit> from MyIterator<Double>
2021-03-11 11:14:10,556 [main:94] - GETTING Continuation<Unit> from Boolean
2021-03-11 11:14:10,570 [main:94] - GETTING Continuation<Unit> from Boolean
2021-03-11 11:14:10,571 [main:94] - GETTING Continuation<Unit> from CoroutineContext
2021-03-11 11:14:10,572 [main:94] - GETTING Continuation<Unit> from Boolean
2021-03-11 11:14:10,573 [main:94] - GETTING Continuation<Unit> from Int
2021-03-11 11:14:10,628 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 11:14:10,658 [main:94] - GETTING Continuation<Unit> from Double
2021-03-11 11:14:10,706 [main:94] - GETTING Continuation<Unit> from Continuation<Any?>
2021-03-11 11:14:10,718 [main:94] - GETTING Continuation<Unit> from MyIterator<Double>
2021-03-11 11:14:10,719 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 11:14:10,720 [main:94] - GETTING Continuation<Unit> from EmptyCoroutineContext
2021-03-11 11:14:10,742 [main:94] - GETTING Continuation<Unit> from UByte
2021-03-11 11:14:10,781 [main:94] - GETTING Continuation<Unit> from UByte
2021-03-11 11:14:10,782 [main:94] - GETTING Continuation<Unit> from CoroutineContext
2021-03-11 11:14:10,783 [main:94] - GETTING Continuation<Unit> from MyIterator<String>
2021-03-11 11:14:10,800 [main:94] - GETTING Continuation<Unit> from Boolean
2021-03-11 11:14:10,801 [main:94] - GETTING Continuation<Unit> from Double
2021-03-11 11:14:10,802 [main:94] - GETTING Continuation<Unit> from MyIterator<String>
2021-03-11 11:14:10,803 [main:107] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-11 11:14:10,803 [main:103] - replacing (prope15, Int)
2021-03-11 11:14:10,803 [main:38] - replacing prope15 Int
2021-03-11 11:14:10,803 [main:42] - Getting value of type Int
2021-03-11 11:14:10,999 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:11,005 [main:46] - GENERATED VALUE OF TYPE Int = 2094775857
2021-03-11 11:14:11,005 [main:49] - GENERATED IS CALL =false
2021-03-11 11:14:11,747 [main:55] - randomType = Set<MyIterator<UInt?>>
2021-03-11 11:14:11,748 [main:94] - GETTING Int from CoroutineContext
2021-03-11 11:14:11,754 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3422593a], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]]
2021-03-11 11:14:11,754 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3422593a]
2021-03-11 11:14:11,930 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:11,930 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:12,116 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:12,122 [main:105] - GENERATED CALL = (Kla1().context).equals("ckvff").compareTo(true)
2021-03-11 11:14:12,122 [main:110] - replacement of prope15 of type Int is (Kla1().context).equals("ckvff").compareTo(true)
2021-03-11 11:14:12,300 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:14:12,300 [main:66] - Compilation checking started
2021-03-11 11:14:13,073 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((Kla1().context).equals("ckvff").compareTo(true) != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:13,075 [main:103] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 11:14:13,075 [main:38] - replacing exceptionOrNull() Throwable?
2021-03-11 11:14:13,075 [main:42] - Getting value of type Throwable?
2021-03-11 11:14:13,250 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:14:13,260 [main:46] - GENERATED VALUE OF TYPE Throwable? = NoSuchElementException()
2021-03-11 11:14:13,260 [main:49] - GENERATED IS CALL =true
2021-03-11 11:14:13,990 [main:55] - randomType = Triple<List<Kla4?>, Byte, UShort>
2021-03-11 11:14:14,169 [main:302] - generating value of type = Triple<List<Kla4?>, Byte, UShort> false depth = 0
2021-03-11 11:14:14,362 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: List<Kla4?>, second: Byte, third: UShort): Triple<List<Kla4?>, Byte, UShort> = TODO()
2021-03-11 11:14:14,370 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: List<Kla4?>, second: Byte, third: UShort): Triple<List<Kla4?>, Byte, UShort> = TODO()
2021-03-11 11:14:14,611 [main:302] - generating value of type = List<Kla4?> false depth = 3
2021-03-11 11:14:14,819 [main:43] - GENERATING CALL OF fun <T> listOf(element: Kla4?): List<Kla4?> = TODO()
2021-03-11 11:14:14,829 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(element: Kla4?): List<Kla4?> = TODO()
2021-03-11 11:14:15,034 [main:302] - generating value of type = Kla4 false depth = 6
2021-03-11 11:14:15,041 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}
2021-03-11 11:14:15,041 [main:95] - GENERATED = listOf<Kla4?>(Kla4())
2021-03-11 11:14:15,041 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 11:14:15,048 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 11:14:15,054 [main:95] - GENERATED = Triple<List<Kla4?>, Byte, UShort>(listOf<Kla4?>(Kla4()), 98, 1813.toUShort())
2021-03-11 11:14:15,080 [main:94] - GETTING Throwable? from MyIterator<Double>
2021-03-11 11:14:15,100 [main:94] - GETTING Throwable? from MyIterator<Double>
2021-03-11 11:14:15,101 [main:94] - GETTING Throwable? from Double
2021-03-11 11:14:15,149 [main:94] - GETTING Throwable? from Double
2021-03-11 11:14:15,149 [main:94] - GETTING Throwable? from String
2021-03-11 11:14:15,181 [main:94] - GETTING Throwable? from MyIterator<String>
2021-03-11 11:14:15,206 [main:94] - GETTING Throwable? from Function0<Unit>
2021-03-11 11:14:15,225 [main:94] - GETTING Throwable? from CoroutineContext
2021-03-11 11:14:15,238 [main:94] - GETTING Throwable? from Boolean
2021-03-11 11:14:15,257 [main:94] - GETTING Throwable? from Int
2021-03-11 11:14:15,317 [main:94] - GETTING Throwable? from MyIterator<String>
2021-03-11 11:14:15,318 [main:94] - GETTING Throwable? from UByte
2021-03-11 11:14:15,340 [main:94] - GETTING Throwable? from Continuation<Any?>
2021-03-11 11:14:15,349 [main:94] - GETTING Throwable? from Boolean
2021-03-11 11:14:15,349 [main:94] - GETTING Throwable? from Boolean
2021-03-11 11:14:15,350 [main:94] - GETTING Throwable? from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:14:15,361 [main:94] - GETTING Throwable? from UByte
2021-03-11 11:14:15,362 [main:94] - GETTING Throwable? from EmptyCoroutineContext
2021-03-11 11:14:15,379 [main:94] - GETTING Throwable? from CoroutineContext
2021-03-11 11:14:15,379 [main:94] - GETTING Throwable? from Boolean
2021-03-11 11:14:15,380 [main:94] - GETTING Throwable? from String
2021-03-11 11:14:15,381 [main:94] - GETTING Throwable? from CoroutineContext
2021-03-11 11:14:15,381 [main:94] - GETTING Throwable? from Any?
2021-03-11 11:14:15,385 [main:94] - GETTING Throwable? from MyIterator<Double>
2021-03-11 11:14:15,385 [main:110] - replacement of exceptionOrNull() of type Throwable? is NoSuchElementException()
2021-03-11 11:14:15,563 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:14:15,566 [main:103] - replacing (getOrThrow(), Ty1)
2021-03-11 11:14:15,566 [main:38] - replacing getOrThrow() Ty1
2021-03-11 11:14:15,566 [main:42] - Getting value of type Ty1
2021-03-11 11:14:15,746 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 11:14:15,754 [main:46] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 11:14:15,987 [main:55] - randomType = UByte?
2021-03-11 11:14:16,168 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:14:16,219 [main:94] - GETTING Ty1 from MyIterator<String>
2021-03-11 11:14:16,240 [main:94] - GETTING Ty1 from Function0<Unit>
2021-03-11 11:14:16,254 [main:94] - GETTING Ty1 from Any?
2021-03-11 11:14:16,260 [main:94] - GETTING Ty1 from MyIterator<Double>
2021-03-11 11:14:16,278 [main:94] - GETTING Ty1 from String
2021-03-11 11:14:16,308 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:14:16,321 [main:94] - GETTING Ty1 from Continuation<Any?>
2021-03-11 11:14:16,331 [main:94] - GETTING Ty1 from Double
2021-03-11 11:14:16,373 [main:94] - GETTING Ty1 from MyIterator<Double>
2021-03-11 11:14:16,374 [main:94] - GETTING Ty1 from EmptyCoroutineContext
2021-03-11 11:14:16,401 [main:94] - GETTING Ty1 from UByte
2021-03-11 11:14:16,434 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:14:16,435 [main:94] - GETTING Ty1 from Int
2021-03-11 11:14:16,487 [main:94] - GETTING Ty1 from MyIterator<Double>
2021-03-11 11:14:16,488 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:14:16,489 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:14:16,499 [main:94] - GETTING Ty1 from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:14:16,512 [main:94] - GETTING Ty1 from MyIterator<String>
2021-03-11 11:14:16,513 [main:94] - GETTING Ty1 from Double
2021-03-11 11:14:16,514 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:14:16,515 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:14:16,515 [main:94] - GETTING Ty1 from String
2021-03-11 11:14:16,516 [main:94] - GETTING Ty1 from UByte
2021-03-11 11:14:16,517 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:14:16,517 [main:107] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-11 11:14:16,517 [main:103] - replacing (v * 2, Int)
2021-03-11 11:14:16,517 [main:38] - replacing v * 2 Int
2021-03-11 11:14:16,517 [main:42] - Getting value of type Int
2021-03-11 11:14:16,697 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:16,703 [main:46] - GENERATED VALUE OF TYPE Int = -1459259729
2021-03-11 11:14:16,703 [main:49] - GENERATED IS CALL =false
2021-03-11 11:14:20,047 [main:55] - randomType = Function2<Array<MyIterator<ULong>>, Kla3<Sequence<Float?>>, Function2<Map<Collection<Boolean>, ULong>, Kla3<Kla8?>, Kla8>>
2021-03-11 11:14:20,048 [main:94] - GETTING Int from Boolean
2021-03-11 11:14:20,061 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]]
2021-03-11 11:14:20,061 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:20,254 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:20,261 [main:105] - GENERATED CALL = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)
2021-03-11 11:14:20,261 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]]
2021-03-11 11:14:20,261 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:20,445 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:20,451 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]
2021-03-11 11:14:20,451 [main:105] - GENERATED CALL = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toInt()
2021-03-11 11:14:20,452 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]]
2021-03-11 11:14:20,452 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:20,630 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:20,636 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]
2021-03-11 11:14:20,815 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:20,821 [main:105] - GENERATED CALL = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).or(1036365779)
2021-03-11 11:14:20,822 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@27eb1cda]]
2021-03-11 11:14:20,822 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:21,002 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:21,008 [main:105] - GENERATED CALL = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).absoluteValue
2021-03-11 11:14:21,008 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4ab2f15c]]
2021-03-11 11:14:21,008 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:21,188 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:21,197 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4ab2f15c]
2021-03-11 11:14:21,380 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:21,569 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:21,576 [main:105] - GENERATED CALL = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).coerceIn(-137976334, -1975131532)
2021-03-11 11:14:21,576 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@571850c]]
2021-03-11 11:14:21,576 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:21,757 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:21,763 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@571850c]
2021-03-11 11:14:21,763 [main:105] - GENERATED CALL = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(true).unaryMinus()
2021-03-11 11:14:21,763 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@48afc141]]
2021-03-11 11:14:21,764 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:21,946 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:21,952 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@48afc141]
2021-03-11 11:14:22,149 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:22,156 [main:105] - GENERATED CALL = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(true).coerceAtMost(435505783)
2021-03-11 11:14:22,156 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12855741]]
2021-03-11 11:14:22,156 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:22,335 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:22,341 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12855741]
2021-03-11 11:14:22,341 [main:105] - GENERATED CALL = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(true).countTrailingZeroBits()
2021-03-11 11:14:22,341 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51edcdcb]]
2021-03-11 11:14:22,341 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:22,525 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:22,531 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51edcdcb]
2021-03-11 11:14:22,722 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:22,728 [main:105] - GENERATED CALL = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).shl(1497347776)
2021-03-11 11:14:22,728 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@72653b9d]]
2021-03-11 11:14:22,728 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:22,903 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:22,909 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@72653b9d]
2021-03-11 11:14:22,909 [main:105] - GENERATED CALL = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).dec()
2021-03-11 11:14:22,909 [main:110] - replacement of v * 2 of type Int is -1459259729
2021-03-11 11:14:23,084 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 11:14:23,085 [main:66] - Compilation checking started
2021-03-11 11:14:23,894 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((Kla1().context).equals("ckvff").compareTo(true) != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:23,897 [main:103] - replacing (prope10, Int)
2021-03-11 11:14:23,897 [main:38] - replacing prope10 Int
2021-03-11 11:14:23,897 [main:42] - Getting value of type Int
2021-03-11 11:14:24,072 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:24,078 [main:46] - GENERATED VALUE OF TYPE Int = 2061126166
2021-03-11 11:14:24,078 [main:49] - GENERATED IS CALL =false
2021-03-11 11:14:24,326 [main:55] - randomType = Kla3<Boolean>
2021-03-11 11:14:24,506 [main:302] - generating value of type = Kla3<Boolean> false depth = 0
2021-03-11 11:14:24,512 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:14:25,158 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:14:25,164 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 11:14:25,186 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@53fb3895]
2021-03-11 11:14:25,366 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:25,366 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:25,589 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:25,596 [main:66] - Generated call from random type = (Kla6).equals("deutv").compareTo(true)
2021-03-11 11:14:25,597 [main:94] - GETTING Int from Any?
2021-03-11 11:14:25,601 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@25f92ffd], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]]
2021-03-11 11:14:25,601 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@25f92ffd]
2021-03-11 11:14:25,776 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:25,776 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:25,950 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:25,957 [main:105] - GENERATED CALL = (Kla2().prope2).equals("uvyyd").compareTo(true)
2021-03-11 11:14:25,957 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2179e280]]
2021-03-11 11:14:25,957 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2179e280]
2021-03-11 11:14:25,957 [main:105] - GENERATED CALL = (Kla2().prope2).hashCode()
2021-03-11 11:14:25,957 [main:110] - replacement of prope10 of type Int is (Kla6).equals("deutv").compareTo(true)
2021-03-11 11:14:26,143 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:14:26,143 [main:66] - Compilation checking started
2021-03-11 11:14:26,666 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().(Kla6).equals("deutv").compareTo(true)

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((Kla1().context).equals("ckvff").compareTo(true) != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:26,668 [main:103] - replacing (numberOfSuspensions, Int)
2021-03-11 11:14:26,668 [main:38] - replacing numberOfSuspensions Int
2021-03-11 11:14:26,668 [main:42] - Getting value of type Int
2021-03-11 11:14:26,843 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:26,849 [main:46] - GENERATED VALUE OF TYPE Int = 1124434314
2021-03-11 11:14:26,849 [main:49] - GENERATED IS CALL =false
2021-03-11 11:14:27,273 [main:55] - randomType = Long?
2021-03-11 11:14:27,449 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:14:27,495 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@77ccd734]
2021-03-11 11:14:27,495 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a2b797]
2021-03-11 11:14:27,495 [main:66] - Generated call from random type = (-7684937937511763634)?.toLong().countOneBits()
2021-03-11 11:14:27,496 [main:94] - GETTING Int from String
2021-03-11 11:14:27,516 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@72653b9d]]
2021-03-11 11:14:27,516 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588]
2021-03-11 11:14:27,693 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:14:27,699 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@72653b9d]
2021-03-11 11:14:27,699 [main:105] - GENERATED CALL = (Kla0().fu3()).compareTo("xttrl").dec()
2021-03-11 11:14:27,699 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@39f8db0e]]
2021-03-11 11:14:27,699 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c]
2021-03-11 11:14:27,873 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:27,880 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@39f8db0e]
2021-03-11 11:14:28,055 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:14:28,062 [main:105] - GENERATED CALL = (Kla0().fu3()).get(323701135).compareTo('䷃')
2021-03-11 11:14:28,062 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4ab2f15c]]
2021-03-11 11:14:28,062 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588]
2021-03-11 11:14:28,235 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:14:28,241 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4ab2f15c]
2021-03-11 11:14:28,421 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:28,605 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:28,611 [main:105] - GENERATED CALL = (Kla0().fu3()).compareTo("vepiu").coerceIn(1919270277, -332110730)
2021-03-11 11:14:28,611 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cae67d2]]
2021-03-11 11:14:28,611 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c]
2021-03-11 11:14:28,787 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:28,793 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cae67d2]
2021-03-11 11:14:28,793 [main:105] - GENERATED CALL = (Kla0().fu3()).get(2082296313).digitToInt()
2021-03-11 11:14:28,793 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@38f964a5]]
2021-03-11 11:14:28,793 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588]
2021-03-11 11:14:28,971 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:14:28,978 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@38f964a5]
2021-03-11 11:14:29,153 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:29,159 [main:105] - GENERATED CALL = (Kla0().fu3()).compareTo("xkdpr").rotateRight(-2123254523)
2021-03-11 11:14:29,159 [main:101] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a30b472]]
2021-03-11 11:14:29,159 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a30b472]
2021-03-11 11:14:29,336 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:14:29,343 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:14:29,349 [main:105] - GENERATED CALL = (Kla0().fu3()).indexOfLast({a: Char -> false})
2021-03-11 11:14:29,349 [main:101] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@126043d3]]
2021-03-11 11:14:29,349 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@126043d3]
2021-03-11 11:14:29,526 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:14:29,707 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:29,887 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:29,894 [main:105] - GENERATED CALL = (Kla0().fu3()).lastIndexOf('싹', -1274023699, false)
2021-03-11 11:14:29,894 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@27eb1cda]]
2021-03-11 11:14:29,894 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588]
2021-03-11 11:14:30,069 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:14:30,075 [main:105] - GENERATED CALL = (Kla0().fu3()).compareTo("buypj").absoluteValue
2021-03-11 11:14:30,076 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6107966a], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2152797]]
2021-03-11 11:14:30,076 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2152797]
2021-03-11 11:14:30,076 [main:105] - GENERATED CALL = (Kla0().fu3()).length.takeLowestOneBit()
2021-03-11 11:14:30,076 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@365e3ddd]]
2021-03-11 11:14:30,076 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588]
2021-03-11 11:14:30,251 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:14:30,257 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@365e3ddd]
2021-03-11 11:14:30,433 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:30,440 [main:105] - GENERATED CALL = (Kla0().fu3()).compareTo("skpjw").coerceAtLeast(-560789308)
2021-03-11 11:14:30,440 [main:110] - replacement of numberOfSuspensions of type Int is (-7684937937511763634)?.toLong().countOneBits()
2021-03-11 11:14:30,613 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:14:30,614 [main:66] - Compilation checking started
2021-03-11 11:14:31,417 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((Kla1().context).equals("ckvff").compareTo(true) != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:31,419 [main:103] - replacing (prope12, Any?)
2021-03-11 11:14:31,419 [main:38] - replacing prope12 Any?
2021-03-11 11:14:31,419 [main:42] - Getting value of type Any?
2021-03-11 11:14:31,602 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:31,602 [main:46] - GENERATED VALUE OF TYPE Any? = "ccfto"
2021-03-11 11:14:31,602 [main:49] - GENERATED IS CALL =false
2021-03-11 11:14:32,294 [main:55] - randomType = Kla11<ArrayDeque<List<Kla12>>>
2021-03-11 11:14:32,471 [main:302] - generating value of type = Kla11<ArrayDeque<List<Kla12>>> false depth = 0
2021-03-11 11:14:32,477 [main:112] - generating klass Kla11 text = abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 11:14:33,315 [main:302] - generating value of type = Kla14 false depth = 2
2021-03-11 11:14:33,321 [main:112] - generating klass Kla14 text = object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:14:33,342 [main:94] - GETTING Any? from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:14:33,350 [main:94] - GETTING Any? from Continuation<Any?>
2021-03-11 11:14:33,360 [main:94] - GETTING Any? from Boolean
2021-03-11 11:14:33,368 [main:94] - GETTING Any? from Boolean
2021-03-11 11:14:33,369 [main:94] - GETTING Any? from Any?
2021-03-11 11:14:33,373 [main:94] - GETTING Any? from Double
2021-03-11 11:14:33,408 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:14:33,415 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:14:33,427 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:14:33,428 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:14:33,442 [main:94] - GETTING Any? from UByte
2021-03-11 11:14:33,470 [main:94] - GETTING Any? from Boolean
2021-03-11 11:14:33,471 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:14:33,472 [main:94] - GETTING Any? from Int
2021-03-11 11:14:33,510 [main:94] - GETTING Any? from String
2021-03-11 11:14:33,528 [main:94] - GETTING Any? from Function0<Unit>
2021-03-11 11:14:33,537 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:14:33,538 [main:94] - GETTING Any? from UByte
2021-03-11 11:14:33,538 [main:94] - GETTING Any? from EmptyCoroutineContext
2021-03-11 11:14:33,553 [main:94] - GETTING Any? from Double
2021-03-11 11:14:33,554 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:14:33,555 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:14:33,555 [main:94] - GETTING Any? from String
2021-03-11 11:14:33,557 [main:94] - GETTING Any? from Boolean
2021-03-11 11:14:33,557 [main:110] - replacement of prope12 of type Any? is "ccfto"
2021-03-11 11:14:33,731 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:14:33,731 [main:66] - Compilation checking started
2021-03-11 11:14:34,285 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this."ccfto" = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((Kla1().context).equals("ckvff").compareTo(true) != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:34,287 [main:103] - replacing ({
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }, Unit?)
2021-03-11 11:14:34,287 [main:38] - replacing {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    } Unit?
2021-03-11 11:14:34,287 [main:42] - Getting value of type Unit?
2021-03-11 11:14:34,464 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:14:34,648 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:14:34,656 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:14:35,063 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 11:14:35,069 [main:95] - GENERATED = require(true)
2021-03-11 11:14:35,069 [main:46] - GENERATED VALUE OF TYPE Unit? = require(true)
2021-03-11 11:14:35,069 [main:49] - GENERATED IS CALL =true
2021-03-11 11:14:35,083 [main:55] - randomType = String
2021-03-11 11:14:35,260 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:14:35,287 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14d7a18]
2021-03-11 11:14:35,473 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 11:14:35,479 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:14:35,664 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:14:35,671 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:14:36,079 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:14:36,085 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:14:36,282 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:14:36,289 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:14:36,960 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:14:36,966 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:14:36,972 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:14:36,972 [main:95] - GENERATED = require(false, { "tomuy"})
2021-03-11 11:14:36,972 [main:95] - GENERATED = contract({ require(false, { "tomuy"})})
2021-03-11 11:14:36,973 [main:66] - Generated call from random type = ("lqajv").forEachIndexed({a: Int, b: Char -> contract({ require(false, { "tomuy"})})})
2021-03-11 11:14:36,974 [main:94] - GETTING Unit? from MyIterator<String>
2021-03-11 11:14:36,985 [main:101] - Case = [public final fun remove(): kotlin.Unit defined in MyIterator[SimpleFunctionDescriptorImpl@653ee422]]
2021-03-11 11:14:36,985 [main:137] - GENERATING call of type public final fun remove(): kotlin.Unit defined in MyIterator[SimpleFunctionDescriptorImpl@653ee422]
2021-03-11 11:14:36,985 [main:105] - GENERATED CALL = ((MyIterator<String>("")))?.remove()
2021-03-11 11:14:36,985 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72be2170]]
2021-03-11 11:14:36,985 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72be2170]
2021-03-11 11:14:37,162 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-11 11:14:37,168 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:14:37,352 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:14:37,359 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:14:37,770 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:14:37,770 [main:95] - GENERATED = print("ztsiv")
2021-03-11 11:14:37,770 [main:105] - GENERATED CALL = ((MyIterator<String>("")))?.forEach({a: T -> print("ztsiv")})
2021-03-11 11:14:37,770 [main:110] - replacement of {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    } of type Unit? is ("lqajv").forEachIndexed({a: Int, b: Char -> contract({ require(false, { "tomuy"})})})
2021-03-11 11:14:37,945 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:14:37,946 [main:66] - Compilation checking started
2021-03-11 11:14:37,957 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:14:37,957 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) ("lqajv").forEachIndexed({a: Int, b: Char -> contract({ require(false, { "tomuy"})})})
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((Kla1().context).equals("ckvff").compareTo(true) != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:37,959 [main:103] - replacing (prope15, Int)
2021-03-11 11:14:37,959 [main:38] - replacing prope15 Int
2021-03-11 11:14:37,959 [main:42] - Getting value of type Int
2021-03-11 11:14:38,148 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:38,154 [main:46] - GENERATED VALUE OF TYPE Int = -1664087253
2021-03-11 11:14:38,154 [main:49] - GENERATED IS CALL =false
2021-03-11 11:14:38,626 [main:55] - randomType = Kla3<Byte>
2021-03-11 11:14:38,805 [main:302] - generating value of type = Kla3<Byte> false depth = 0
2021-03-11 11:14:38,811 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:14:39,432 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:14:39,438 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 11:14:39,454 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@3a4641f1]
2021-03-11 11:14:39,634 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:39,634 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:39,809 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:39,815 [main:66] - Generated call from random type = (Kla6).equals("cdekx").compareTo(false)
2021-03-11 11:14:39,816 [main:94] - GETTING Int from String
2021-03-11 11:14:39,835 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]]
2021-03-11 11:14:39,835 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]
2021-03-11 11:14:40,015 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:40,015 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:40,193 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:40,199 [main:105] - GENERATED CALL = (Kla0().fu3()).equals("oxuxx").compareTo(false)
2021-03-11 11:14:40,200 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@571850c]]
2021-03-11 11:14:40,200 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588]
2021-03-11 11:14:40,377 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:14:40,383 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@571850c]
2021-03-11 11:14:40,383 [main:105] - GENERATED CALL = (Kla0().fu3()).compareTo("iggst").unaryMinus()
2021-03-11 11:14:40,383 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]]
2021-03-11 11:14:40,383 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588]
2021-03-11 11:14:40,561 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:14:40,567 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]
2021-03-11 11:14:40,567 [main:105] - GENERATED CALL = (Kla0().fu3()).compareTo("zvydu").toInt()
2021-03-11 11:14:40,567 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@513dc9e2]]
2021-03-11 11:14:40,568 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588]
2021-03-11 11:14:40,745 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:14:40,751 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@513dc9e2]
2021-03-11 11:14:40,751 [main:105] - GENERATED CALL = (Kla0().fu3()).compareTo("djzss").takeHighestOneBit()
2021-03-11 11:14:40,751 [main:101] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4421a115]]
2021-03-11 11:14:40,751 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4421a115]
2021-03-11 11:14:40,931 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:14:40,937 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:14:40,944 [main:105] - GENERATED CALL = (Kla0().fu3()).indexOfFirst({a: Char -> false})
2021-03-11 11:14:40,944 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6630fdb2]]
2021-03-11 11:14:40,944 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e8a588]
2021-03-11 11:14:41,119 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:14:41,125 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6630fdb2]
2021-03-11 11:14:41,300 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:41,306 [main:105] - GENERATED CALL = (Kla0().fu3()).compareTo("xyoma").xor(775531410)
2021-03-11 11:14:41,306 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6107966a]]
2021-03-11 11:14:41,306 [main:105] - GENERATED CALL = (Kla0().fu3()).length
2021-03-11 11:14:41,306 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6107966a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@27eb1cda]]
2021-03-11 11:14:41,306 [main:105] - GENERATED CALL = (Kla0().fu3()).length.absoluteValue
2021-03-11 11:14:41,306 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6107966a], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]]
2021-03-11 11:14:41,306 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]
2021-03-11 11:14:41,482 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:41,488 [main:105] - GENERATED CALL = (Kla0().fu3()).length.or(1546099443)
2021-03-11 11:14:41,488 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cae67d2]]
2021-03-11 11:14:41,488 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c]
2021-03-11 11:14:41,663 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:41,670 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cae67d2]
2021-03-11 11:14:41,670 [main:105] - GENERATED CALL = (Kla0().fu3()).get(-1666921787).digitToInt()
2021-03-11 11:14:41,670 [main:110] - replacement of prope15 of type Int is (Kla0().fu3()).length
2021-03-11 11:14:41,893 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:14:41,894 [main:66] - Compilation checking started
2021-03-11 11:14:42,422 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
(Kla0().fu3()).length = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((Kla1().context).equals("ckvff").compareTo(true) != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:42,424 [main:103] - replacing (fu13 {
        prope11.prope10 = it
    }, Continuation<Int>)
2021-03-11 11:14:42,424 [main:38] - replacing fu13 {
        prope11.prope10 = it
    } Continuation<Int>
2021-03-11 11:14:42,424 [main:42] - Getting value of type Continuation<Int>
2021-03-11 11:14:42,606 [main:302] - generating value of type = Continuation<Int> false depth = 0
2021-03-11 11:14:42,793 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Int>)->kotlin.Unit): Contuation<Int> = TODO()
2021-03-11 11:14:42,801 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Int>)->kotlin.Unit): Contuation<Int> = TODO()
2021-03-11 11:14:43,440 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:14:43,625 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:14:43,632 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:14:44,051 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:14:44,243 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:14:44,250 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:14:44,896 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:14:44,896 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:14:44,896 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Int>)->kotlin.Unit): Contuation<Int> = TODO()
2021-03-11 11:14:44,896 [main:46] - GENERATED VALUE OF TYPE Continuation<Int> = 
2021-03-11 11:14:44,908 [main:55] - randomType = Long
2021-03-11 11:14:45,087 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:14:45,132 [main:94] - GETTING Continuation<Int> from String
2021-03-11 11:14:45,153 [main:94] - GETTING Continuation<Int> from Double
2021-03-11 11:14:45,190 [main:94] - GETTING Continuation<Int> from Int
2021-03-11 11:14:45,226 [main:94] - GETTING Continuation<Int> from MyIterator<String>
2021-03-11 11:14:45,237 [main:94] - GETTING Continuation<Int> from CoroutineContext
2021-03-11 11:14:45,247 [main:94] - GETTING Continuation<Int> from Function0<Unit>
2021-03-11 11:14:45,258 [main:94] - GETTING Continuation<Int> from Boolean
2021-03-11 11:14:45,266 [main:94] - GETTING Continuation<Int> from String
2021-03-11 11:14:45,267 [main:94] - GETTING Continuation<Int> from Any?
2021-03-11 11:14:45,271 [main:94] - GETTING Continuation<Int> from CoroutineContext
2021-03-11 11:14:45,272 [main:94] - GETTING Continuation<Int> from CoroutineContext
2021-03-11 11:14:45,274 [main:94] - GETTING Continuation<Int> from UByte
2021-03-11 11:14:45,300 [main:94] - GETTING Continuation<Int> from Boolean
2021-03-11 11:14:45,301 [main:94] - GETTING Continuation<Int> from MyIterator<Double>
2021-03-11 11:14:45,318 [main:94] - GETTING Continuation<Int> from MyIterator<Double>
2021-03-11 11:14:45,319 [main:94] - GETTING Continuation<Int> from UByte
2021-03-11 11:14:45,319 [main:94] - GETTING Continuation<Int> from Continuation<Any?>
2021-03-11 11:14:45,327 [main:94] - GETTING Continuation<Int> from Boolean
2021-03-11 11:14:45,328 [main:94] - GETTING Continuation<Int> from MyIterator<Double>
2021-03-11 11:14:45,329 [main:94] - GETTING Continuation<Int> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:14:45,340 [main:94] - GETTING Continuation<Int> from EmptyCoroutineContext
2021-03-11 11:14:45,354 [main:94] - GETTING Continuation<Int> from Boolean
2021-03-11 11:14:45,355 [main:94] - GETTING Continuation<Int> from MyIterator<String>
2021-03-11 11:14:45,356 [main:94] - GETTING Continuation<Int> from Double
2021-03-11 11:14:45,356 [main:107] - Cant find and generate replacement for fu13 {
        prope11.prope10 = it
    } type Continuation<Int>
2021-03-11 11:14:45,356 [main:103] - replacing (prope12, Result<Ty1>)
2021-03-11 11:14:45,356 [main:38] - replacing prope12 Result<Ty1>
2021-03-11 11:14:45,357 [main:42] - Getting value of type Result<Ty1>
2021-03-11 11:14:45,534 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-11 11:14:45,720 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:14:45,727 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:14:46,142 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:14:46,142 [main:46] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-11 11:14:46,167 [main:55] - randomType = Kla0
2021-03-11 11:14:46,363 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:14:46,369 [main:112] - generating klass Kla0 text = class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}
2021-03-11 11:14:46,378 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:14:46,393 [main:94] - GETTING Result<Ty1> from String
2021-03-11 11:14:46,414 [main:94] - GETTING Result<Ty1> from Continuation<Any?>
2021-03-11 11:14:46,421 [main:94] - GETTING Result<Ty1> from Any?
2021-03-11 11:14:46,427 [main:94] - GETTING Result<Ty1> from String
2021-03-11 11:14:46,428 [main:94] - GETTING Result<Ty1> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:14:46,438 [main:94] - GETTING Result<Ty1> from UByte
2021-03-11 11:14:46,475 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:14:46,477 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:14:46,485 [main:94] - GETTING Result<Ty1> from Function0<Unit>
2021-03-11 11:14:46,496 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 11:14:46,534 [main:94] - GETTING Result<Ty1> from UByte
2021-03-11 11:14:46,535 [main:94] - GETTING Result<Ty1> from MyIterator<String>
2021-03-11 11:14:46,550 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:14:46,562 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 11:14:46,599 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:14:46,600 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:14:46,601 [main:94] - GETTING Result<Ty1> from EmptyCoroutineContext
2021-03-11 11:14:46,617 [main:94] - GETTING Result<Ty1> from MyIterator<String>
2021-03-11 11:14:46,618 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:14:46,619 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 11:14:46,620 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:14:46,621 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:14:46,623 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:14:46,623 [main:107] - Cant find and generate replacement for prope12 type Result<Ty1>
2021-03-11 11:14:46,623 [main:103] - replacing (prope13, Int)
2021-03-11 11:14:46,624 [main:38] - replacing prope13 Int
2021-03-11 11:14:46,624 [main:42] - Getting value of type Int
2021-03-11 11:14:46,804 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:46,810 [main:46] - GENERATED VALUE OF TYPE Int = 741691985
2021-03-11 11:14:46,810 [main:49] - GENERATED IS CALL =false
2021-03-11 11:14:48,031 [main:55] - randomType = Triple<Kla14?, HashMap<Kla6, UInt>, Byte>
2021-03-11 11:14:48,210 [main:302] - generating value of type = Triple<Kla14?, HashMap<Kla6, UInt>, Byte> false depth = 0
2021-03-11 11:14:48,399 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla14?, second: HashMap<Kla6, UInt>, third: Byte): Triple<Kla14?, HashMap<Kla6, UInt>, Byte> = TODO()
2021-03-11 11:14:48,406 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla14?, second: HashMap<Kla6, UInt>, third: Byte): Triple<Kla14?, HashMap<Kla6, UInt>, Byte> = TODO()
2021-03-11 11:14:48,598 [main:302] - generating value of type = Kla14 false depth = 3
2021-03-11 11:14:48,604 [main:112] - generating klass Kla14 text = object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:14:48,604 [main:302] - generating value of type = HashMap<Kla6, UInt> false depth = 3
2021-03-11 11:14:48,795 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<Kla6, UInt> = TODO()
2021-03-11 11:14:48,803 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<Kla6, UInt> = TODO()
2021-03-11 11:14:49,237 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:14:49,244 [main:95] - GENERATED = HashMap<Kla6, UInt>(414571085)
2021-03-11 11:14:49,244 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 11:14:49,252 [main:95] - GENERATED = Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)
2021-03-11 11:14:49,279 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7828b500]
2021-03-11 11:14:49,279 [main:66] - Generated call from random type = (Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()
2021-03-11 11:14:49,280 [main:94] - GETTING Int from CoroutineContext
2021-03-11 11:14:49,287 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3422593a], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]]
2021-03-11 11:14:49,287 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3422593a]
2021-03-11 11:14:49,469 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:49,469 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:49,647 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:49,653 [main:105] - GENERATED CALL = (Kla6.context).equals("jwkmh").compareTo(true)
2021-03-11 11:14:49,653 [main:110] - replacement of prope13 of type Int is (Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()
2021-03-11 11:14:49,838 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:14:49,838 [main:66] - Compilation checking started
2021-03-11 11:14:50,610 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((Kla1().context).equals("ckvff").compareTo(true) != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:50,612 [main:103] - replacing ({ error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-11 11:14:50,612 [main:38] - replacing { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-11 11:14:50,612 [main:42] - Getting value of type Function0<Nothing>
2021-03-11 11:14:50,797 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 11:14:50,803 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 11:14:50,998 [main:43] - GENERATING CALL OF fun error(message: kotlin.Any): Nothg = TODO()
2021-03-11 11:14:51,006 [main:61] - WITHOUT TYPE PARAMS = fun error(message: kotlin.Any): Nothg = TODO()
2021-03-11 11:14:51,411 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:14:51,412 [main:95] - GENERATED = error("jdssk")
2021-03-11 11:14:51,412 [main:46] - GENERATED VALUE OF TYPE Function0<Nothing> = { error("jdssk")}
2021-03-11 11:14:51,412 [main:49] - GENERATED IS CALL =false
2021-03-11 11:14:51,425 [main:55] - randomType = Boolean
2021-03-11 11:14:51,607 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:51,625 [main:94] - GETTING Function0<Nothing> from MyIterator<String>
2021-03-11 11:14:51,636 [main:94] - GETTING Function0<Nothing> from Any?
2021-03-11 11:14:51,643 [main:94] - GETTING Function0<Nothing> from Function0<Unit>
2021-03-11 11:14:51,653 [main:94] - GETTING Function0<Nothing> from Boolean
2021-03-11 11:14:51,664 [main:94] - GETTING Function0<Nothing> from MyIterator<String>
2021-03-11 11:14:51,665 [main:94] - GETTING Function0<Nothing> from CoroutineContext
2021-03-11 11:14:51,677 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 11:14:51,699 [main:94] - GETTING Function0<Nothing> from UByte
2021-03-11 11:14:51,726 [main:94] - GETTING Function0<Nothing> from Boolean
2021-03-11 11:14:51,727 [main:94] - GETTING Function0<Nothing> from UByte
2021-03-11 11:14:51,728 [main:94] - GETTING Function0<Nothing> from MyIterator<Double>
2021-03-11 11:14:51,743 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 11:14:51,744 [main:94] - GETTING Function0<Nothing> from CoroutineContext
2021-03-11 11:14:51,745 [main:94] - GETTING Function0<Nothing> from MyIterator<Double>
2021-03-11 11:14:51,746 [main:94] - GETTING Function0<Nothing> from Boolean
2021-03-11 11:14:51,747 [main:94] - GETTING Function0<Nothing> from Double
2021-03-11 11:14:51,781 [main:94] - GETTING Function0<Nothing> from MyIterator<Double>
2021-03-11 11:14:51,782 [main:94] - GETTING Function0<Nothing> from EmptyCoroutineContext
2021-03-11 11:14:51,801 [main:94] - GETTING Function0<Nothing> from Continuation<Any?>
2021-03-11 11:14:51,809 [main:94] - GETTING Function0<Nothing> from Int
2021-03-11 11:14:51,846 [main:94] - GETTING Function0<Nothing> from CoroutineContext
2021-03-11 11:14:51,847 [main:94] - GETTING Function0<Nothing> from Boolean
2021-03-11 11:14:51,848 [main:94] - GETTING Function0<Nothing> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:14:51,861 [main:94] - GETTING Function0<Nothing> from Double
2021-03-11 11:14:51,861 [main:110] - replacement of { error((Kla2().prope2).toString() + " has state-machine " +
                prope14.joinToString(separator = "\n")) } of type Function0<Nothing> is { error("jdssk")}
2021-03-11 11:14:52,046 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:14:52,046 [main:66] - Compilation checking started
2021-03-11 11:14:52,842 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((Kla1().context).equals("ckvff").compareTo(true) != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:52,845 [main:103] - replacing (1, Int)
2021-03-11 11:14:52,846 [main:38] - replacing 1 Int
2021-03-11 11:14:52,846 [main:42] - Getting value of type Int
2021-03-11 11:14:53,066 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:53,075 [main:46] - GENERATED VALUE OF TYPE Int = 737632577
2021-03-11 11:14:53,075 [main:49] - GENERATED IS CALL =false
2021-03-11 11:14:53,107 [main:55] - randomType = Kla2
2021-03-11 11:14:53,294 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 11:14:53,300 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}
2021-03-11 11:14:53,324 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2179e280]
2021-03-11 11:14:53,324 [main:66] - Generated call from random type = (Kla2()).prope2?.hashCode()!!
2021-03-11 11:14:53,325 [main:94] - GETTING Int from Any?
2021-03-11 11:14:53,329 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@25f92ffd], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]]
2021-03-11 11:14:53,329 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@25f92ffd]
2021-03-11 11:14:53,517 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:14:53,518 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:14:53,711 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:53,718 [main:105] - GENERATED CALL = (Kla2().prope2).equals("jwhrs").compareTo(true)
2021-03-11 11:14:53,718 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2179e280]]
2021-03-11 11:14:53,718 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2179e280]
2021-03-11 11:14:53,718 [main:105] - GENERATED CALL = (Kla2().prope2).hashCode()
2021-03-11 11:14:53,718 [main:110] - replacement of 1 of type Int is (Kla2().prope2).hashCode()
2021-03-11 11:14:53,898 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:14:53,898 [main:66] - Compilation checking started
2021-03-11 11:14:54,689 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((Kla1().context).equals("ckvff").compareTo(true) != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:54,693 [main:103] - replacing (prope15, Int)
2021-03-11 11:14:54,693 [main:38] - replacing prope15 Int
2021-03-11 11:14:54,693 [main:42] - Getting value of type Int
2021-03-11 11:14:54,875 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:54,882 [main:46] - GENERATED VALUE OF TYPE Int = -1959489174
2021-03-11 11:14:54,882 [main:49] - GENERATED IS CALL =false
2021-03-11 11:14:54,897 [main:55] - randomType = UInt
2021-03-11 11:14:55,073 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:14:55,112 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@494b20a4]
2021-03-11 11:14:55,112 [main:66] - Generated call from random type = (457302771.toUInt()).countLeadingZeroBits()
2021-03-11 11:14:55,113 [main:94] - GETTING Int from UByte
2021-03-11 11:14:55,136 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7dde3752], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@67c0ba8a]]
2021-03-11 11:14:55,136 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7dde3752]
2021-03-11 11:14:55,136 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@67c0ba8a]
2021-03-11 11:14:55,315 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:14:55,321 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toByte().div(-89)
2021-03-11 11:14:55,321 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@749f0281], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@74705fbf]]
2021-03-11 11:14:55,321 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@749f0281]
2021-03-11 11:14:55,321 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toLong().sign
2021-03-11 11:14:55,321 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11fc1d80], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2c37c571]]
2021-03-11 11:14:55,321 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11fc1d80]
2021-03-11 11:14:55,321 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2c37c571]
2021-03-11 11:14:55,498 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:14:55,504 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toShort().minus(-94)
2021-03-11 11:14:55,505 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11fc1d80], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5fa7e903]]
2021-03-11 11:14:55,505 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11fc1d80]
2021-03-11 11:14:55,505 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5fa7e903]
2021-03-11 11:14:55,683 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:14:55,690 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toShort().rem(30)
2021-03-11 11:14:55,690 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14fe2f15], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]]
2021-03-11 11:14:55,690 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14fe2f15]
2021-03-11 11:14:55,690 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:14:55,866 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:14:55,872 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toDouble().compareTo(-48)
2021-03-11 11:14:55,873 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11fc1d80], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@bf06203]]
2021-03-11 11:14:55,873 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11fc1d80]
2021-03-11 11:14:55,873 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@bf06203]
2021-03-11 11:14:55,873 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toShort().toInt()
2021-03-11 11:14:55,873 [main:101] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f5d7156]]
2021-03-11 11:14:55,873 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c]
2021-03-11 11:14:56,049 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:14:56,055 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f5d7156]
2021-03-11 11:14:56,056 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).compareTo(10.toUByte()).countLeadingZeroBits()
2021-03-11 11:14:56,056 [main:101] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78eb4fee]]
2021-03-11 11:14:56,056 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c]
2021-03-11 11:14:56,242 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:14:56,249 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78eb4fee]
2021-03-11 11:14:56,429 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:56,435 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).compareTo(10.toUByte()).rotateLeft(1836726019)
2021-03-11 11:14:56,435 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4d4c5791], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5a44b349]]
2021-03-11 11:14:56,435 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4d4c5791]
2021-03-11 11:14:56,435 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5a44b349]
2021-03-11 11:14:56,435 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toFloat().toRawBits()
2021-03-11 11:14:56,435 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4d4c5791], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@3de71b61]]
2021-03-11 11:14:56,435 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4d4c5791]
2021-03-11 11:14:56,435 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@3de71b61]
2021-03-11 11:14:56,435 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).v).toFloat().roundToInt()
2021-03-11 11:14:56,435 [main:110] - replacement of prope15 of type Int is (MyIterator<UByte>(112.toUByte()).v).compareTo(10.toUByte()).countLeadingZeroBits()
2021-03-11 11:14:56,613 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:14:56,613 [main:66] - Compilation checking started
2021-03-11 11:14:57,156 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
(MyIterator<UByte>(112.toUByte()).v).compareTo(10.toUByte()).countLeadingZeroBits() = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((Kla1().context).equals("ckvff").compareTo(true) != i) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:57,158 [main:103] - replacing ((Kla1().context).equals("ckvff").compareTo(true) != i, Boolean)
2021-03-11 11:14:57,158 [main:38] - replacing (Kla1().context).equals("ckvff").compareTo(true) != i Boolean
2021-03-11 11:14:57,158 [main:42] - Getting value of type Boolean
2021-03-11 11:14:57,337 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:14:57,343 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:14:57,343 [main:49] - GENERATED IS CALL =false
2021-03-11 11:14:57,356 [main:55] - randomType = String
2021-03-11 11:14:57,534 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:14:57,562 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83]
2021-03-11 11:14:57,767 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:57,956 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:57,963 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1632d899]
2021-03-11 11:14:57,963 [main:66] - Generated call from random type = ("eelvo").subSequence(223153920, 368827209).isBlank()
2021-03-11 11:14:57,963 [main:110] - replacement of (Kla1().context).equals("ckvff").compareTo(true) != i of type Boolean is ("eelvo").subSequence(223153920, 368827209).isBlank()
2021-03-11 11:14:58,141 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:14:58,141 [main:66] - Compilation checking started
2021-03-11 11:14:58,965 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..2) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:14:58,969 [main:103] - replacing (2, Int)
2021-03-11 11:14:58,969 [main:38] - replacing 2 Int
2021-03-11 11:14:58,969 [main:42] - Getting value of type Int
2021-03-11 11:14:59,164 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:14:59,170 [main:46] - GENERATED VALUE OF TYPE Int = 1929746390
2021-03-11 11:14:59,170 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:05,768 [main:55] - randomType = Function1<Triple<Array<Function2<ULong, LinkedHashMap<Long, Kla6>, Function2<Collection<Kla10?>, LinkedHashMap<UShort, Set<Triple<ULong, UInt, Function2<Triple<Kla13, Array<Short>, Kla2?>, Kla6, Sequence<String?>>>?>>?, Function1<ULong, Int>>>>?, Kla13, Int?>, Int>
2021-03-11 11:15:05,769 [main:94] - GETTING Int from Boolean
2021-03-11 11:15:05,779 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@48afc141]]
2021-03-11 11:15:05,779 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:15:05,957 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:05,963 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@48afc141]
2021-03-11 11:15:06,148 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:06,154 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).compareTo(true).coerceAtMost(-1088110482)
2021-03-11 11:15:06,155 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f0e1b71]]
2021-03-11 11:15:06,155 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:15:06,333 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:06,339 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f0e1b71]
2021-03-11 11:15:06,516 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:06,522 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).compareTo(true).minus(-6)
2021-03-11 11:15:06,522 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@27eb1cda]]
2021-03-11 11:15:06,522 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:15:06,699 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:06,705 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).compareTo(false).absoluteValue
2021-03-11 11:15:06,705 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]]
2021-03-11 11:15:06,706 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:15:06,884 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:06,891 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]
2021-03-11 11:15:07,069 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:07,078 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).compareTo(false).or(1677673518)
2021-03-11 11:15:07,078 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@11e67111]]
2021-03-11 11:15:07,078 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:15:07,256 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:07,262 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).compareTo(false).sign
2021-03-11 11:15:07,262 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]]
2021-03-11 11:15:07,262 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:15:07,441 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:07,447 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78cd1d5c]
2021-03-11 11:15:07,447 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).compareTo(true).toInt()
2021-03-11 11:15:07,447 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78eb4fee]]
2021-03-11 11:15:07,447 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:15:07,627 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:07,633 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78eb4fee]
2021-03-11 11:15:07,813 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:07,819 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).compareTo(false).rotateLeft(-695099893)
2021-03-11 11:15:07,819 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@72653b9d]]
2021-03-11 11:15:07,820 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:15:08,000 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:08,006 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@72653b9d]
2021-03-11 11:15:08,006 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).compareTo(true).dec()
2021-03-11 11:15:08,007 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ae09ff]]
2021-03-11 11:15:08,007 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:15:08,185 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:08,192 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ae09ff]
2021-03-11 11:15:08,192 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).compareTo(true).inv()
2021-03-11 11:15:08,192 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6140623a]]
2021-03-11 11:15:08,192 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:15:08,375 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:08,381 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6140623a]
2021-03-11 11:15:08,560 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:08,566 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext())).compareTo(true).shr(-941625209)
2021-03-11 11:15:08,567 [main:110] - replacement of 2 of type Int is 1929746390
2021-03-11 11:15:08,745 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:15:08,745 [main:66] - Compilation checking started
2021-03-11 11:15:09,511 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:09,514 [main:103] - replacing (x, Function1<Ty1, Unit>)
2021-03-11 11:15:09,514 [main:38] - replacing x Function1<Ty1, Unit>
2021-03-11 11:15:09,514 [main:42] - Getting value of type Function1<Ty1, Unit>
2021-03-11 11:15:09,706 [main:302] - generating value of type = Function1<Ty1, Unit> false depth = 0
2021-03-11 11:15:09,713 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:15:09,954 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:15:09,962 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:15:10,367 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:15:10,367 [main:95] - GENERATED = print("dgvuz")
2021-03-11 11:15:10,367 [main:46] - GENERATED VALUE OF TYPE Function1<Ty1, Unit> = {a: Ty1 -> print("dgvuz")}
2021-03-11 11:15:10,367 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:10,829 [main:55] - randomType = Set<Kla10>
2021-03-11 11:15:10,830 [main:94] - GETTING Function1<Ty1, Unit> from MyIterator<Double>
2021-03-11 11:15:10,847 [main:94] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-11 11:15:10,856 [main:94] - GETTING Function1<Ty1, Unit> from MyIterator<Double>
2021-03-11 11:15:10,858 [main:94] - GETTING Function1<Ty1, Unit> from CoroutineContext
2021-03-11 11:15:10,865 [main:94] - GETTING Function1<Ty1, Unit> from String
2021-03-11 11:15:10,886 [main:94] - GETTING Function1<Ty1, Unit> from EmptyCoroutineContext
2021-03-11 11:15:10,903 [main:94] - GETTING Function1<Ty1, Unit> from CoroutineContext
2021-03-11 11:15:10,905 [main:94] - GETTING Function1<Ty1, Unit> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:15:10,915 [main:94] - GETTING Function1<Ty1, Unit> from Any?
2021-03-11 11:15:10,919 [main:94] - GETTING Function1<Ty1, Unit> from Double
2021-03-11 11:15:10,950 [main:94] - GETTING Function1<Ty1, Unit> from UByte
2021-03-11 11:15:10,978 [main:94] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-11 11:15:10,979 [main:94] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-11 11:15:10,980 [main:94] - GETTING Function1<Ty1, Unit> from MyIterator<String>
2021-03-11 11:15:10,997 [main:94] - GETTING Function1<Ty1, Unit> from CoroutineContext
2021-03-11 11:15:10,998 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 11:15:11,032 [main:94] - GETTING Function1<Ty1, Unit> from Function0<Unit>
2021-03-11 11:15:11,045 [main:94] - GETTING Function1<Ty1, Unit> from Double
2021-03-11 11:15:11,046 [main:94] - GETTING Function1<Ty1, Unit> from String
2021-03-11 11:15:11,047 [main:94] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-11 11:15:11,048 [main:94] - GETTING Function1<Ty1, Unit> from Continuation<Any?>
2021-03-11 11:15:11,059 [main:94] - GETTING Function1<Ty1, Unit> from MyIterator<Double>
2021-03-11 11:15:11,061 [main:94] - GETTING Function1<Ty1, Unit> from UByte
2021-03-11 11:15:11,062 [main:94] - GETTING Function1<Ty1, Unit> from MyIterator<String>
2021-03-11 11:15:11,062 [main:110] - replacement of x of type Function1<Ty1, Unit> is {a: Ty1 -> print("dgvuz")}
2021-03-11 11:15:11,240 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:15:11,241 [main:66] - Compilation checking started
2021-03-11 11:15:11,787 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
{a: Ty1 -> print("dgvuz")}(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:11,789 [main:103] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-11 11:15:11,789 [main:38] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-11 11:15:11,790 [main:42] - Getting value of type String
2021-03-11 11:15:11,972 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:15:11,978 [main:46] - GENERATED VALUE OF TYPE String = "eauop"
2021-03-11 11:15:11,978 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:13,418 [main:55] - randomType = MutableMap<Triple<Double, Sequence<Long>, Kla3<Char>>, Int?>?
2021-03-11 11:15:13,419 [main:94] - GETTING String from Function0<Unit>
2021-03-11 11:15:13,432 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:15:13,437 [main:94] - GETTING String from MyIterator<Double>
2021-03-11 11:15:13,452 [main:94] - GETTING String from Int
2021-03-11 11:15:13,488 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f77b570], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]]
2021-03-11 11:15:13,488 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f77b570]
2021-03-11 11:15:13,488 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]
2021-03-11 11:15:13,489 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().titlecase()
2021-03-11 11:15:13,489 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f77b570], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]]
2021-03-11 11:15:13,489 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f77b570]
2021-03-11 11:15:13,489 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4574f874]
2021-03-11 11:15:13,489 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().uppercase()
2021-03-11 11:15:13,489 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f77b570], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]]
2021-03-11 11:15:13,489 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f77b570]
2021-03-11 11:15:13,489 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20b5f4b2]
2021-03-11 11:15:13,489 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().lowercase()
2021-03-11 11:15:13,489 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15114c44], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:15:13,489 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15114c44]
2021-03-11 11:15:13,665 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:15:13,672 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:15:13,854 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:13,861 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).div(4982394220346568137).toString(-940115472)
2021-03-11 11:15:13,861 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f77b570], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]]
2021-03-11 11:15:13,861 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f77b570]
2021-03-11 11:15:13,861 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e034cac]
2021-03-11 11:15:14,037 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:15:14,044 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().plus("mclvr")
2021-03-11 11:15:14,044 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:15:14,044 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:15:14,044 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:15:14,231 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:14,237 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toInt().toString(1713925817)
2021-03-11 11:15:14,237 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@251ead09], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:15:14,237 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@251ead09]
2021-03-11 11:15:14,237 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:15:14,416 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:14,423 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071)
2021-03-11 11:15:14,423 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:15:14,423 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:15:14,604 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:14,610 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toString(91113906)
2021-03-11 11:15:14,610 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@77ccd734], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:15:14,610 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@77ccd734]
2021-03-11 11:15:14,611 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:15:14,790 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:14,797 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toLong().toString(333389549)
2021-03-11 11:15:14,797 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6184047b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:15:14,797 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6184047b]
2021-03-11 11:15:14,797 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:15:14,974 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:14,980 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toShort().toString(-1190651713)
2021-03-11 11:15:14,980 [main:110] - replacement of " is not subtype of CoroutineStackFrame" of type String is ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071)
2021-03-11 11:15:15,157 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:15:15,157 [main:66] - Compilation checking started
2021-03-11 11:15:15,976 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + prope15)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:15,979 [main:103] - replacing (prope15, Int)
2021-03-11 11:15:15,979 [main:38] - replacing prope15 Int
2021-03-11 11:15:15,979 [main:42] - Getting value of type Int
2021-03-11 11:15:16,175 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:16,182 [main:46] - GENERATED VALUE OF TYPE Int = -1856019446
2021-03-11 11:15:16,182 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:16,418 [main:55] - randomType = Byte?
2021-03-11 11:15:16,604 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:16,651 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@66e9e248]
2021-03-11 11:15:16,831 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:15:16,839 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@6fdd0764]
2021-03-11 11:15:16,839 [main:66] - Generated call from random type = (76)?.div(0.9332428117332106).roundToInt()
2021-03-11 11:15:16,840 [main:94] - GETTING Int from Double
2021-03-11 11:15:16,873 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@365e3ddd]]
2021-03-11 11:15:16,873 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:15:17,053 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:17,060 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@365e3ddd]
2021-03-11 11:15:17,237 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:17,245 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).compareTo(-124).coerceAtLeast(980777076)
2021-03-11 11:15:17,245 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@513dc9e2]]
2021-03-11 11:15:17,245 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:15:17,423 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:17,431 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@513dc9e2]
2021-03-11 11:15:17,431 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).compareTo(-101).takeHighestOneBit()
2021-03-11 11:15:17,431 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cae67d2]]
2021-03-11 11:15:17,431 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:15:17,431 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cae67d2]
2021-03-11 11:15:17,431 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().digitToInt()
2021-03-11 11:15:17,431 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ae09ff]]
2021-03-11 11:15:17,431 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:15:17,610 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:17,617 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ae09ff]
2021-03-11 11:15:17,618 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).compareTo(26).inv()
2021-03-11 11:15:17,618 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5a44b349]]
2021-03-11 11:15:17,618 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:15:17,618 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5a44b349]
2021-03-11 11:15:17,618 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toFloat().toRawBits()
2021-03-11 11:15:17,618 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7828b500]]
2021-03-11 11:15:17,618 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@423c246a]
2021-03-11 11:15:17,618 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7828b500]
2021-03-11 11:15:17,618 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toByte().toInt()
2021-03-11 11:15:17,618 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51edcdcb]]
2021-03-11 11:15:17,618 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:15:17,797 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:17,804 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51edcdcb]
2021-03-11 11:15:17,986 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:17,994 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).compareTo(34).shl(-633258362)
2021-03-11 11:15:17,994 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24cd318b]]
2021-03-11 11:15:17,994 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:15:18,175 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:18,182 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24cd318b]
2021-03-11 11:15:18,364 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:18,372 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).compareTo(125).times(-118)
2021-03-11 11:15:18,372 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c20848b]]
2021-03-11 11:15:18,373 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:15:18,373 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c20848b]
2021-03-11 11:15:18,552 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:18,559 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toInt().and(-1774267767)
2021-03-11 11:15:18,559 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@835a7d0]]
2021-03-11 11:15:18,559 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:15:18,559 [main:105] - GENERATED CALL = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().code
2021-03-11 11:15:18,559 [main:110] - replacement of prope15 of type Int is -1856019446
2021-03-11 11:15:18,738 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 11:15:18,739 [main:66] - Compilation checking started
2021-03-11 11:15:19,694 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:19,697 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:15:19,698 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:15:19,698 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:15:19,883 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:15:19,894 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:15:20,152 [main:55] - randomType = Collection<Byte>
2021-03-11 11:15:20,153 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:15:20,184 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:15:20,231 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:15:20,245 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 11:15:20,299 [main:94] - GETTING EmptyCoroutineContext from UByte
2021-03-11 11:15:20,334 [main:94] - GETTING EmptyCoroutineContext from MyIterator<String>
2021-03-11 11:15:20,352 [main:94] - GETTING EmptyCoroutineContext from MyIterator<Double>
2021-03-11 11:15:20,370 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:15:20,371 [main:94] - GETTING EmptyCoroutineContext from UByte
2021-03-11 11:15:20,372 [main:94] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-11 11:15:20,383 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 11:15:20,383 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:15:20,384 [main:94] - GETTING EmptyCoroutineContext from Any?
2021-03-11 11:15:20,390 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:15:20,391 [main:94] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-11 11:15:20,405 [main:94] - GETTING EmptyCoroutineContext from MyIterator<Double>
2021-03-11 11:15:20,405 [main:94] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-11 11:15:20,427 [main:110] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla2().context
2021-03-11 11:15:20,614 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:15:20,615 [main:66] - Compilation checking started
2021-03-11 11:15:21,416 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:21,419 [main:103] - replacing (false, Boolean)
2021-03-11 11:15:21,419 [main:38] - replacing false Boolean
2021-03-11 11:15:21,419 [main:42] - Getting value of type Boolean
2021-03-11 11:15:21,605 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:21,612 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:15:21,613 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:21,861 [main:55] - randomType = Kla10?
2021-03-11 11:15:22,043 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-11 11:15:22,050 [main:112] - generating klass Kla10 text = class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}
2021-03-11 11:15:22,067 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla10[DeserializedSimpleFunctionDescriptor@1b613c56]
2021-03-11 11:15:22,246 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:22,246 [main:66] - Generated call from random type = (Kla10())?.equals("boivn")
2021-03-11 11:15:22,247 [main:94] - GETTING Boolean from Double
2021-03-11 11:15:22,283 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f803f]]
2021-03-11 11:15:22,283 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:15:22,283 [main:137] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f803f]
2021-03-11 11:15:22,283 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isSurrogate()
2021-03-11 11:15:22,283 [main:101] - Case = [public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7a0dfef]]
2021-03-11 11:15:22,283 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7a0dfef]
2021-03-11 11:15:22,283 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).isFinite()
2021-03-11 11:15:22,283 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@36288e31]]
2021-03-11 11:15:22,283 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-11 11:15:22,283 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@36288e31]
2021-03-11 11:15:22,463 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:22,464 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toShort().equals("gcqvo")
2021-03-11 11:15:22,464 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ed78c76]]
2021-03-11 11:15:22,464 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:15:22,464 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ed78c76]
2021-03-11 11:15:22,464 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isISOControl()
2021-03-11 11:15:22,464 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:15:22,464 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:15:22,651 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:22,652 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:15:22,836 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:22,844 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).equals("uheow").and(true)
2021-03-11 11:15:22,844 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]]
2021-03-11 11:15:22,844 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:15:23,028 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:23,028 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).equals("kqfye")
2021-03-11 11:15:23,028 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]]
2021-03-11 11:15:23,029 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@641792f0]
2021-03-11 11:15:23,029 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7758f478]
2021-03-11 11:15:23,214 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:23,214 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toFloat().equals("zqosl")
2021-03-11 11:15:23,214 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:15:23,215 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:15:23,401 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:23,401 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:15:23,588 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:23,596 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).equals("ahrvo").or(true)
2021-03-11 11:15:23,596 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@67029450]]
2021-03-11 11:15:23,596 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-11 11:15:23,596 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@67029450]
2021-03-11 11:15:23,783 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:23,784 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
2021-03-11 11:15:23,784 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:15:23,784 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@40609a70]
2021-03-11 11:15:23,968 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:23,968 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:15:24,156 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:24,156 [main:105] - GENERATED CALL = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).equals("vbkck").equals("qpyqp")
2021-03-11 11:15:24,156 [main:110] - replacement of false of type Boolean is ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
2021-03-11 11:15:24,341 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:15:24,342 [main:66] - Compilation checking started
2021-03-11 11:15:25,256 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:25,258 [main:103] - replacing (prope12, Any?)
2021-03-11 11:15:25,258 [main:38] - replacing prope12 Any?
2021-03-11 11:15:25,258 [main:42] - Getting value of type Any?
2021-03-11 11:15:25,450 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:25,450 [main:46] - GENERATED VALUE OF TYPE Any? = "bqcot"
2021-03-11 11:15:25,450 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:25,923 [main:55] - randomType = Float?
2021-03-11 11:15:26,110 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:15:26,168 [main:94] - GETTING Any? from UByte
2021-03-11 11:15:26,205 [main:94] - GETTING Any? from String
2021-03-11 11:15:26,232 [main:94] - GETTING Any? from Continuation<Any?>
2021-03-11 11:15:26,244 [main:94] - GETTING Any? from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:15:26,256 [main:94] - GETTING Any? from UByte
2021-03-11 11:15:26,257 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:15:26,267 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:15:26,268 [main:94] - GETTING Any? from Boolean
2021-03-11 11:15:26,282 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:15:26,302 [main:94] - GETTING Any? from Boolean
2021-03-11 11:15:26,303 [main:94] - GETTING Any? from Boolean
2021-03-11 11:15:26,304 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:15:26,305 [main:94] - GETTING Any? from Any?
2021-03-11 11:15:26,311 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:15:26,329 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:15:26,330 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:15:26,331 [main:94] - GETTING Any? from Double
2021-03-11 11:15:26,380 [main:94] - GETTING Any? from String
2021-03-11 11:15:26,380 [main:94] - GETTING Any? from Boolean
2021-03-11 11:15:26,381 [main:94] - GETTING Any? from Function0<Unit>
2021-03-11 11:15:26,396 [main:94] - GETTING Any? from Int
2021-03-11 11:15:26,446 [main:94] - GETTING Any? from EmptyCoroutineContext
2021-03-11 11:15:26,470 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:15:26,471 [main:94] - GETTING Any? from Double
2021-03-11 11:15:26,471 [main:110] - replacement of prope12 of type Any? is "bqcot"
2021-03-11 11:15:26,653 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:15:26,653 [main:66] - Compilation checking started
2021-03-11 11:15:27,210 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this."bqcot" = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:27,213 [main:103] - replacing ({
        prope11.prope10 = it
    }, Function1<Int, Unit>)
2021-03-11 11:15:27,213 [main:38] - replacing {
        prope11.prope10 = it
    } Function1<Int, Unit>
2021-03-11 11:15:27,213 [main:42] - Getting value of type Function1<Int, Unit>
2021-03-11 11:15:27,432 [main:302] - generating value of type = Function1<Int, Unit> false depth = 0
2021-03-11 11:15:27,440 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:15:27,628 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:15:27,638 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:15:28,279 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:15:28,287 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:15:28,296 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:15:28,296 [main:95] - GENERATED = check(true, { "zleck"})
2021-03-11 11:15:28,296 [main:46] - GENERATED VALUE OF TYPE Function1<Int, Unit> = {a: Int -> check(true, { "zleck"})}
2021-03-11 11:15:28,296 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:28,540 [main:55] - randomType = ArrayList<Byte>
2021-03-11 11:15:28,730 [main:302] - generating value of type = ArrayList<Byte> false depth = 0
2021-03-11 11:15:28,924 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Byte> = TODO()
2021-03-11 11:15:28,932 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Byte> = TODO()
2021-03-11 11:15:29,130 [main:95] - GENERATED = arrayListOf<Byte>()
2021-03-11 11:15:29,267 [main:94] - GETTING Function1<Int, Unit> from Double
2021-03-11 11:15:29,302 [main:94] - GETTING Function1<Int, Unit> from Continuation<Any?>
2021-03-11 11:15:29,313 [main:94] - GETTING Function1<Int, Unit> from CoroutineContext
2021-03-11 11:15:29,319 [main:94] - GETTING Function1<Int, Unit> from EmptyCoroutineContext
2021-03-11 11:15:29,334 [main:94] - GETTING Function1<Int, Unit> from MyIterator<Double>
2021-03-11 11:15:29,348 [main:94] - GETTING Function1<Int, Unit> from Double
2021-03-11 11:15:29,349 [main:94] - GETTING Function1<Int, Unit> from CoroutineContext
2021-03-11 11:15:29,350 [main:94] - GETTING Function1<Int, Unit> from Boolean
2021-03-11 11:15:29,363 [main:94] - GETTING Function1<Int, Unit> from MyIterator<Double>
2021-03-11 11:15:29,364 [main:94] - GETTING Function1<Int, Unit> from Boolean
2021-03-11 11:15:29,365 [main:94] - GETTING Function1<Int, Unit> from MyIterator<String>
2021-03-11 11:15:29,380 [main:94] - GETTING Function1<Int, Unit> from Int
2021-03-11 11:15:29,415 [main:94] - GETTING Function1<Int, Unit> from UByte
2021-03-11 11:15:29,443 [main:94] - GETTING Function1<Int, Unit> from MyIterator<String>
2021-03-11 11:15:29,444 [main:94] - GETTING Function1<Int, Unit> from CoroutineContext
2021-03-11 11:15:29,445 [main:94] - GETTING Function1<Int, Unit> from String
2021-03-11 11:15:29,467 [main:94] - GETTING Function1<Int, Unit> from Boolean
2021-03-11 11:15:29,468 [main:94] - GETTING Function1<Int, Unit> from String
2021-03-11 11:15:29,469 [main:94] - GETTING Function1<Int, Unit> from MyIterator<Double>
2021-03-11 11:15:29,470 [main:94] - GETTING Function1<Int, Unit> from Boolean
2021-03-11 11:15:29,471 [main:94] - GETTING Function1<Int, Unit> from UByte
2021-03-11 11:15:29,473 [main:94] - GETTING Function1<Int, Unit> from Any?
2021-03-11 11:15:29,479 [main:94] - GETTING Function1<Int, Unit> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:15:29,491 [main:94] - GETTING Function1<Int, Unit> from Function0<Unit>
2021-03-11 11:15:29,498 [main:110] - replacement of {
        prope11.prope10 = it
    } of type Function1<Int, Unit> is {a: Int -> check(true, { "zleck"})}
2021-03-11 11:15:29,677 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:15:29,678 [main:66] - Compilation checking started
2021-03-11 11:15:30,464 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            prope17()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:30,466 [main:103] - replacing (prope12.getOrThrow(), Ty1)
2021-03-11 11:15:30,466 [main:38] - replacing prope12.getOrThrow() Ty1
2021-03-11 11:15:30,466 [main:42] - Getting value of type Ty1
2021-03-11 11:15:30,650 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 11:15:30,660 [main:46] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 11:15:30,675 [main:55] - randomType = UShort
2021-03-11 11:15:30,860 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:15:30,911 [main:94] - GETTING Ty1 from Double
2021-03-11 11:15:30,953 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:15:30,965 [main:94] - GETTING Ty1 from String
2021-03-11 11:15:30,983 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:15:30,984 [main:94] - GETTING Ty1 from EmptyCoroutineContext
2021-03-11 11:15:31,001 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:15:31,007 [main:94] - GETTING Ty1 from Int
2021-03-11 11:15:31,042 [main:94] - GETTING Ty1 from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:15:31,051 [main:94] - GETTING Ty1 from String
2021-03-11 11:15:31,052 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:15:31,053 [main:94] - GETTING Ty1 from MyIterator<String>
2021-03-11 11:15:31,068 [main:94] - GETTING Ty1 from MyIterator<String>
2021-03-11 11:15:31,068 [main:94] - GETTING Ty1 from Continuation<Any?>
2021-03-11 11:15:31,080 [main:94] - GETTING Ty1 from MyIterator<Double>
2021-03-11 11:15:31,098 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:15:31,099 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:15:31,099 [main:94] - GETTING Ty1 from Function0<Unit>
2021-03-11 11:15:31,114 [main:94] - GETTING Ty1 from UByte
2021-03-11 11:15:31,150 [main:94] - GETTING Ty1 from MyIterator<Double>
2021-03-11 11:15:31,151 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:15:31,151 [main:94] - GETTING Ty1 from UByte
2021-03-11 11:15:31,152 [main:94] - GETTING Ty1 from Any?
2021-03-11 11:15:31,158 [main:94] - GETTING Ty1 from MyIterator<Double>
2021-03-11 11:15:31,159 [main:94] - GETTING Ty1 from Double
2021-03-11 11:15:31,159 [main:107] - Cant find and generate replacement for prope12.getOrThrow() type Ty1
2021-03-11 11:15:31,159 [main:103] - replacing (prope17, Function0<Unit>)
2021-03-11 11:15:31,159 [main:38] - replacing prope17 Function0<Unit>
2021-03-11 11:15:31,159 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:15:31,347 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:15:31,355 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:15:31,551 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:15:31,561 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:15:32,226 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:15:32,234 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:15:32,241 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:15:32,435 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:15:32,444 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:15:32,926 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:15:32,934 [main:95] - GENERATED = require(true)
2021-03-11 11:15:32,934 [main:95] - GENERATED = repeat(685073719, {a: Int -> require(true)})
2021-03-11 11:15:32,934 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(685073719, {a: Int -> require(true)})}
2021-03-11 11:15:32,934 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:32,963 [main:55] - randomType = Kla5
2021-03-11 11:15:33,148 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:15:33,156 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}
2021-03-11 11:15:33,167 [main:66] - Generated call from random type = (Kla5()).prope6
2021-03-11 11:15:33,168 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:15:33,217 [main:94] - GETTING Function0<Unit> from Any?
2021-03-11 11:15:33,222 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:15:33,235 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:15:33,246 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:15:33,265 [main:94] - GETTING Function0<Unit> from MyIterator<Double>
2021-03-11 11:15:33,285 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:15:33,286 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:15:33,288 [main:94] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-11 11:15:33,300 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:15:33,328 [main:94] - GETTING Function0<Unit> from MyIterator<Double>
2021-03-11 11:15:33,329 [main:94] - GETTING Function0<Unit> from MyIterator<Double>
2021-03-11 11:15:33,330 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 11:15:33,385 [main:94] - GETTING Function0<Unit> from UByte
2021-03-11 11:15:33,422 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:15:33,423 [main:94] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-11 11:15:33,449 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:15:33,450 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:15:33,451 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:15:33,452 [main:94] - GETTING Function0<Unit> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:15:33,465 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:15:33,466 [main:94] - GETTING Function0<Unit> from UByte
2021-03-11 11:15:33,466 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 11:15:33,479 [main:110] - replacement of prope17 of type Function0<Unit> is Kla5().prope6
2021-03-11 11:15:33,664 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:15:33,664 [main:66] - Compilation checking started
2021-03-11 11:15:34,435 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = 0
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:34,439 [main:103] - replacing (0, Int)
2021-03-11 11:15:34,439 [main:38] - replacing 0 Int
2021-03-11 11:15:34,439 [main:42] - Getting value of type Int
2021-03-11 11:15:34,631 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:34,639 [main:46] - GENERATED VALUE OF TYPE Int = 194336107
2021-03-11 11:15:34,639 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:34,655 [main:55] - randomType = Boolean
2021-03-11 11:15:34,835 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:34,851 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:15:35,033 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:35,041 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51edcdcb]
2021-03-11 11:15:35,221 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:35,229 [main:66] - Generated call from random type = (true).compareTo(true).shl(-1097782057)
2021-03-11 11:15:35,229 [main:94] - GETTING Int from Int
2021-03-11 11:15:35,267 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f77b570], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cae67d2]]
2021-03-11 11:15:35,267 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f77b570]
2021-03-11 11:15:35,267 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cae67d2]
2021-03-11 11:15:35,267 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().digitToInt()
2021-03-11 11:15:35,267 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1faaa7e1], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f0e1b71]]
2021-03-11 11:15:35,267 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1faaa7e1]
2021-03-11 11:15:35,451 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:35,460 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f0e1b71]
2021-03-11 11:15:35,647 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:35,655 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).compareTo(1164163844).minus(-30)
2021-03-11 11:15:35,655 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@251ead09], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@44414bd4]]
2021-03-11 11:15:35,655 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@251ead09]
2021-03-11 11:15:35,655 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@44414bd4]
2021-03-11 11:15:35,844 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:35,852 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().rem(-8)
2021-03-11 11:15:35,852 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2152797]]
2021-03-11 11:15:35,852 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:15:35,853 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2152797]
2021-03-11 11:15:35,853 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toInt().takeLowestOneBit()
2021-03-11 11:15:35,853 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c20848b]]
2021-03-11 11:15:35,853 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c20848b]
2021-03-11 11:15:36,042 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:36,050 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).and(1343929259)
2021-03-11 11:15:36,051 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24cd318b]]
2021-03-11 11:15:36,051 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:15:36,051 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24cd318b]
2021-03-11 11:15:36,239 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:36,247 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toInt().times(-117)
2021-03-11 11:15:36,247 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f77b570], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6baac161]]
2021-03-11 11:15:36,247 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f77b570]
2021-03-11 11:15:36,247 [main:137] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6baac161]
2021-03-11 11:15:36,248 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
2021-03-11 11:15:36,248 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1faaa7e1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2152797]]
2021-03-11 11:15:36,248 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1faaa7e1]
2021-03-11 11:15:36,430 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:36,438 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2152797]
2021-03-11 11:15:36,438 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).compareTo(-1543328178).takeLowestOneBit()
2021-03-11 11:15:36,438 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@48afc141]]
2021-03-11 11:15:36,438 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@331f603d]
2021-03-11 11:15:36,438 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@48afc141]
2021-03-11 11:15:36,626 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:36,634 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toInt().coerceAtMost(-354225308)
2021-03-11 11:15:36,634 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@6fdd0764]]
2021-03-11 11:15:36,634 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-11 11:15:36,634 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@6fdd0764]
2021-03-11 11:15:36,634 [main:105] - GENERATED CALL = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toDouble().roundToInt()
2021-03-11 11:15:36,634 [main:110] - replacement of 0 of type Int is ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
2021-03-11 11:15:36,819 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:15:36,820 [main:66] - Compilation checking started
2021-03-11 11:15:37,613 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:37,617 [main:103] - replacing (prope12, Any?)
2021-03-11 11:15:37,617 [main:38] - replacing prope12 Any?
2021-03-11 11:15:37,617 [main:42] - Getting value of type Any?
2021-03-11 11:15:37,808 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:37,808 [main:46] - GENERATED VALUE OF TYPE Any? = "nlugh"
2021-03-11 11:15:37,808 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:37,824 [main:55] - randomType = Boolean
2021-03-11 11:15:38,015 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:38,036 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:15:38,047 [main:94] - GETTING Any? from Any?
2021-03-11 11:15:38,052 [main:94] - GETTING Any? from String
2021-03-11 11:15:38,085 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:15:38,105 [main:94] - GETTING Any? from Boolean
2021-03-11 11:15:38,118 [main:94] - GETTING Any? from Boolean
2021-03-11 11:15:38,119 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:15:38,134 [main:94] - GETTING Any? from Int
2021-03-11 11:15:38,178 [main:94] - GETTING Any? from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:15:38,187 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:15:38,188 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:15:38,188 [main:94] - GETTING Any? from Double
2021-03-11 11:15:38,227 [main:94] - GETTING Any? from Continuation<Any?>
2021-03-11 11:15:38,235 [main:94] - GETTING Any? from Boolean
2021-03-11 11:15:38,236 [main:94] - GETTING Any? from Function0<Unit>
2021-03-11 11:15:38,251 [main:94] - GETTING Any? from UByte
2021-03-11 11:15:38,289 [main:94] - GETTING Any? from String
2021-03-11 11:15:38,289 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:15:38,290 [main:94] - GETTING Any? from Double
2021-03-11 11:15:38,291 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:15:38,292 [main:94] - GETTING Any? from Boolean
2021-03-11 11:15:38,292 [main:94] - GETTING Any? from UByte
2021-03-11 11:15:38,293 [main:94] - GETTING Any? from EmptyCoroutineContext
2021-03-11 11:15:38,319 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:15:38,319 [main:110] - replacement of prope12 of type Any? is "nlugh"
2021-03-11 11:15:38,542 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:15:38,542 [main:66] - Compilation checking started
2021-03-11 11:15:39,094 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this."nlugh" = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:39,097 [main:103] - replacing (prope12.NoSuchElementException()!!, Throwable)
2021-03-11 11:15:39,097 [main:38] - replacing prope12.NoSuchElementException()!! Throwable
2021-03-11 11:15:39,097 [main:42] - Getting value of type Throwable
2021-03-11 11:15:39,287 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:15:39,484 [main:43] - GENERATING CALL OF fun Throwable(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:15:39,493 [main:61] - WITHOUT TYPE PARAMS = fun Throwable(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:15:40,151 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:15:40,161 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 11:15:40,172 [main:95] - GENERATED = Throwable("otfts", ConcurrentModificationException())
2021-03-11 11:15:40,173 [main:46] - GENERATED VALUE OF TYPE Throwable = Throwable("otfts", ConcurrentModificationException())
2021-03-11 11:15:40,173 [main:49] - GENERATED IS CALL =true
2021-03-11 11:15:40,424 [main:55] - randomType = Long?
2021-03-11 11:15:40,611 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:15:40,673 [main:94] - GETTING Throwable from MyIterator<String>
2021-03-11 11:15:40,691 [main:94] - GETTING Throwable from String
2021-03-11 11:15:40,721 [main:94] - GETTING Throwable from Double
2021-03-11 11:15:40,767 [main:94] - GETTING Throwable from Any?
2021-03-11 11:15:40,774 [main:94] - GETTING Throwable from EmptyCoroutineContext
2021-03-11 11:15:40,799 [main:94] - GETTING Throwable from MyIterator<Double>
2021-03-11 11:15:40,817 [main:94] - GETTING Throwable from CoroutineContext
2021-03-11 11:15:40,826 [main:94] - GETTING Throwable from UByte
2021-03-11 11:15:40,861 [main:94] - GETTING Throwable from Boolean
2021-03-11 11:15:40,875 [main:94] - GETTING Throwable from MyIterator<Double>
2021-03-11 11:15:40,876 [main:94] - GETTING Throwable from Boolean
2021-03-11 11:15:40,877 [main:94] - GETTING Throwable from CoroutineContext
2021-03-11 11:15:40,878 [main:94] - GETTING Throwable from CoroutineContext
2021-03-11 11:15:40,879 [main:94] - GETTING Throwable from Boolean
2021-03-11 11:15:40,880 [main:94] - GETTING Throwable from MyIterator<Double>
2021-03-11 11:15:40,881 [main:94] - GETTING Throwable from Boolean
2021-03-11 11:15:40,882 [main:94] - GETTING Throwable from Continuation<Any?>
2021-03-11 11:15:40,894 [main:94] - GETTING Throwable from String
2021-03-11 11:15:40,895 [main:94] - GETTING Throwable from Function0<Unit>
2021-03-11 11:15:40,909 [main:94] - GETTING Throwable from MyIterator<String>
2021-03-11 11:15:40,910 [main:94] - GETTING Throwable from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:15:40,922 [main:94] - GETTING Throwable from Int
2021-03-11 11:15:40,972 [main:94] - GETTING Throwable from Double
2021-03-11 11:15:40,973 [main:94] - GETTING Throwable from UByte
2021-03-11 11:15:40,973 [main:110] - replacement of prope12.NoSuchElementException()!! of type Throwable is Throwable("otfts", ConcurrentModificationException())
2021-03-11 11:15:41,161 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:15:41,164 [main:103] - replacing (prope12, Result<Ty1>)
2021-03-11 11:15:41,164 [main:38] - replacing prope12 Result<Ty1>
2021-03-11 11:15:41,164 [main:42] - Getting value of type Result<Ty1>
2021-03-11 11:15:41,346 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-11 11:15:41,539 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:15:41,549 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:15:41,979 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:15:41,980 [main:46] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-11 11:15:42,206 [main:55] - randomType = ULong
2021-03-11 11:15:42,396 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:15:42,445 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:15:42,459 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:15:42,478 [main:94] - GETTING Result<Ty1> from String
2021-03-11 11:15:42,508 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:15:42,518 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:15:42,519 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 11:15:42,567 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:15:42,568 [main:94] - GETTING Result<Ty1> from MyIterator<String>
2021-03-11 11:15:42,589 [main:94] - GETTING Result<Ty1> from Function0<Unit>
2021-03-11 11:15:42,602 [main:94] - GETTING Result<Ty1> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:15:42,614 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:15:42,615 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 11:15:42,663 [main:94] - GETTING Result<Ty1> from MyIterator<String>
2021-03-11 11:15:42,664 [main:94] - GETTING Result<Ty1> from UByte
2021-03-11 11:15:42,702 [main:94] - GETTING Result<Ty1> from Any?
2021-03-11 11:15:42,709 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:15:42,710 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 11:15:42,712 [main:94] - GETTING Result<Ty1> from String
2021-03-11 11:15:42,713 [main:94] - GETTING Result<Ty1> from EmptyCoroutineContext
2021-03-11 11:15:42,732 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:15:42,733 [main:94] - GETTING Result<Ty1> from Continuation<Any?>
2021-03-11 11:15:42,744 [main:94] - GETTING Result<Ty1> from UByte
2021-03-11 11:15:42,746 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:15:42,747 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:15:42,747 [main:107] - Cant find and generate replacement for prope12 type Result<Ty1>
2021-03-11 11:15:42,747 [main:103] - replacing (this.prope12, Any?)
2021-03-11 11:15:42,747 [main:38] - replacing this.prope12 Any?
2021-03-11 11:15:42,747 [main:42] - Getting value of type Any?
2021-03-11 11:15:42,932 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:42,932 [main:46] - GENERATED VALUE OF TYPE Any? = "hjljb"
2021-03-11 11:15:42,932 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:43,206 [main:55] - randomType = MyIterator<Kla13>
2021-03-11 11:15:43,393 [main:302] - generating value of type = MyIterator<Kla13> false depth = 0
2021-03-11 11:15:43,400 [main:112] - generating klass MyIterator text = class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}
2021-03-11 11:15:43,871 [main:194] - Type params = [Kla13]
2021-03-11 11:15:44,324 [main:302] - generating value of type = Kla13 false depth = 2
2021-03-11 11:15:44,334 [main:112] - generating klass Kla13 text = class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:15:44,350 [main:94] - GETTING Any? from Int
2021-03-11 11:15:44,405 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:15:44,413 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:15:44,414 [main:94] - GETTING Any? from Boolean
2021-03-11 11:15:44,427 [main:94] - GETTING Any? from String
2021-03-11 11:15:44,459 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:15:44,478 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:15:44,479 [main:94] - GETTING Any? from Any?
2021-03-11 11:15:44,485 [main:94] - GETTING Any? from Double
2021-03-11 11:15:44,534 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:15:44,535 [main:94] - GETTING Any? from UByte
2021-03-11 11:15:44,574 [main:94] - GETTING Any? from Boolean
2021-03-11 11:15:44,575 [main:94] - GETTING Any? from EmptyCoroutineContext
2021-03-11 11:15:44,600 [main:94] - GETTING Any? from Function0<Unit>
2021-03-11 11:15:44,612 [main:94] - GETTING Any? from UByte
2021-03-11 11:15:44,613 [main:94] - GETTING Any? from Boolean
2021-03-11 11:15:44,614 [main:94] - GETTING Any? from String
2021-03-11 11:15:44,614 [main:94] - GETTING Any? from Double
2021-03-11 11:15:44,615 [main:94] - GETTING Any? from Continuation<Any?>
2021-03-11 11:15:44,626 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:15:44,645 [main:94] - GETTING Any? from Boolean
2021-03-11 11:15:44,646 [main:94] - GETTING Any? from MyIterator<Double>
2021-03-11 11:15:44,647 [main:94] - GETTING Any? from MyIterator<String>
2021-03-11 11:15:44,648 [main:94] - GETTING Any? from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:15:44,660 [main:110] - replacement of this.prope12 of type Any? is "hjljb"
2021-03-11 11:15:44,848 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:15:44,848 [main:66] - Compilation checking started
2021-03-11 11:15:45,398 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        x(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
"hjljb" = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:45,401 [main:103] - replacing (x, Function1<Int, Unit>)
2021-03-11 11:15:45,401 [main:38] - replacing x Function1<Int, Unit>
2021-03-11 11:15:45,401 [main:42] - Getting value of type Function1<Int, Unit>
2021-03-11 11:15:45,591 [main:302] - generating value of type = Function1<Int, Unit> false depth = 0
2021-03-11 11:15:45,599 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:15:45,798 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:15:45,807 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:15:46,484 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:15:46,492 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:15:46,499 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:15:46,697 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:15:46,706 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:15:47,133 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:15:47,141 [main:95] - GENERATED = require(false)
2021-03-11 11:15:47,141 [main:95] - GENERATED = repeat(-1690666293, {a: Int -> require(false)})
2021-03-11 11:15:47,141 [main:46] - GENERATED VALUE OF TYPE Function1<Int, Unit> = {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}
2021-03-11 11:15:47,141 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:47,172 [main:55] - randomType = Kla10
2021-03-11 11:15:47,362 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-11 11:15:47,370 [main:112] - generating klass Kla10 text = class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}
2021-03-11 11:15:47,395 [main:94] - GETTING Function1<Int, Unit> from Any?
2021-03-11 11:15:47,400 [main:94] - GETTING Function1<Int, Unit> from UByte
2021-03-11 11:15:47,435 [main:94] - GETTING Function1<Int, Unit> from MyIterator<String>
2021-03-11 11:15:47,457 [main:94] - GETTING Function1<Int, Unit> from MyIterator<Double>
2021-03-11 11:15:47,476 [main:94] - GETTING Function1<Int, Unit> from Boolean
2021-03-11 11:15:47,490 [main:94] - GETTING Function1<Int, Unit> from MyIterator<Double>
2021-03-11 11:15:47,491 [main:94] - GETTING Function1<Int, Unit> from Function0<Unit>
2021-03-11 11:15:47,506 [main:94] - GETTING Function1<Int, Unit> from Boolean
2021-03-11 11:15:47,507 [main:94] - GETTING Function1<Int, Unit> from Boolean
2021-03-11 11:15:47,508 [main:94] - GETTING Function1<Int, Unit> from Double
2021-03-11 11:15:47,553 [main:94] - GETTING Function1<Int, Unit> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:15:47,565 [main:94] - GETTING Function1<Int, Unit> from String
2021-03-11 11:15:47,594 [main:94] - GETTING Function1<Int, Unit> from Continuation<Any?>
2021-03-11 11:15:47,605 [main:94] - GETTING Function1<Int, Unit> from UByte
2021-03-11 11:15:47,606 [main:94] - GETTING Function1<Int, Unit> from String
2021-03-11 11:15:47,607 [main:94] - GETTING Function1<Int, Unit> from Int
2021-03-11 11:15:47,655 [main:94] - GETTING Function1<Int, Unit> from Boolean
2021-03-11 11:15:47,657 [main:94] - GETTING Function1<Int, Unit> from CoroutineContext
2021-03-11 11:15:47,665 [main:94] - GETTING Function1<Int, Unit> from MyIterator<String>
2021-03-11 11:15:47,666 [main:94] - GETTING Function1<Int, Unit> from Double
2021-03-11 11:15:47,667 [main:94] - GETTING Function1<Int, Unit> from CoroutineContext
2021-03-11 11:15:47,668 [main:94] - GETTING Function1<Int, Unit> from MyIterator<Double>
2021-03-11 11:15:47,670 [main:94] - GETTING Function1<Int, Unit> from CoroutineContext
2021-03-11 11:15:47,671 [main:94] - GETTING Function1<Int, Unit> from EmptyCoroutineContext
2021-03-11 11:15:47,696 [main:110] - replacement of x of type Function1<Int, Unit> is {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}
2021-03-11 11:15:47,887 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:15:47,888 [main:66] - Compilation checking started
2021-03-11 11:15:48,691 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:48,696 [main:103] - replacing (prope12, Result<Ty1>)
2021-03-11 11:15:48,696 [main:38] - replacing prope12 Result<Ty1>
2021-03-11 11:15:48,696 [main:42] - Getting value of type Result<Ty1>
2021-03-11 11:15:48,904 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-11 11:15:49,104 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:15:49,114 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:15:49,545 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:15:49,545 [main:46] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-11 11:15:49,770 [main:55] - randomType = ULong
2021-03-11 11:15:49,993 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:15:50,031 [main:94] - GETTING Result<Ty1> from Any?
2021-03-11 11:15:50,034 [main:94] - GETTING Result<Ty1> from String
2021-03-11 11:15:50,059 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:15:50,068 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:15:50,084 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:15:50,085 [main:94] - GETTING Result<Ty1> from Function0<Unit>
2021-03-11 11:15:50,096 [main:94] - GETTING Result<Ty1> from UByte
2021-03-11 11:15:50,125 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 11:15:50,156 [main:94] - GETTING Result<Ty1> from MyIterator<String>
2021-03-11 11:15:50,171 [main:94] - GETTING Result<Ty1> from EmptyCoroutineContext
2021-03-11 11:15:50,190 [main:94] - GETTING Result<Ty1> from UByte
2021-03-11 11:15:50,191 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 11:15:50,227 [main:94] - GETTING Result<Ty1> from Continuation<Any?>
2021-03-11 11:15:50,234 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:15:50,235 [main:94] - GETTING Result<Ty1> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:15:50,247 [main:94] - GETTING Result<Ty1> from MyIterator<String>
2021-03-11 11:15:50,248 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 11:15:50,249 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:15:50,250 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:15:50,259 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:15:50,260 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:15:50,261 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:15:50,263 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:15:50,264 [main:94] - GETTING Result<Ty1> from String
2021-03-11 11:15:50,264 [main:107] - Cant find and generate replacement for prope12 type Result<Ty1>
2021-03-11 11:15:50,264 [main:103] - replacing (suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    }, Int)
2021-03-11 11:15:50,264 [main:38] - replacing suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    } Int
2021-03-11 11:15:50,264 [main:42] - Getting value of type Int
2021-03-11 11:15:50,447 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:50,455 [main:46] - GENERATED VALUE OF TYPE Int = 747569036
2021-03-11 11:15:50,455 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:50,471 [main:55] - randomType = Byte
2021-03-11 11:15:50,654 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:50,699 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@73e08a42]
2021-03-11 11:15:50,699 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@59fdce16]
2021-03-11 11:15:50,899 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:50,911 [main:66] - Generated call from random type = (1).toShort().compareTo(-122)
2021-03-11 11:15:50,912 [main:94] - GETTING Int from CoroutineContext
2021-03-11 11:15:50,924 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3422593a], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]]
2021-03-11 11:15:50,924 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3422593a]
2021-03-11 11:15:51,117 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:51,118 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:15:51,301 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:51,309 [main:105] - GENERATED CALL = (Kla1().context).equals("kmdtu").compareTo(true)
2021-03-11 11:15:51,309 [main:110] - replacement of suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(-1459259729)
        COROUTINE_SUSPENDED
    } of type Int is (1).toShort().compareTo(-122)
2021-03-11 11:15:51,492 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:15:51,493 [main:66] - Compilation checking started
2021-03-11 11:15:52,269 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = (1).toShort().compareTo(-122)
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:52,273 [main:103] - replacing (c, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int>)
2021-03-11 11:15:52,273 [main:38] - replacing c [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int>
2021-03-11 11:15:52,273 [main:42] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int>
2021-03-11 11:15:52,457 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> false depth = 0
2021-03-11 11:15:52,464 [main:302] - generating value of type = Int true depth = 1
2021-03-11 11:15:52,471 [main:46] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> = {a: Kla8 -> 1706796847}
2021-03-11 11:15:52,472 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:52,487 [main:55] - randomType = Double
2021-03-11 11:15:52,675 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:15:52,723 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from CoroutineContext
2021-03-11 11:15:52,735 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from String
2021-03-11 11:15:52,767 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from Any?
2021-03-11 11:15:52,776 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from MyIterator<Double>
2021-03-11 11:15:52,799 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from Double
2021-03-11 11:15:52,850 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from UByte
2021-03-11 11:15:52,891 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from CoroutineContext
2021-03-11 11:15:52,895 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from Boolean
2021-03-11 11:15:52,912 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from Int
2021-03-11 11:15:52,975 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from MyIterator<String>
2021-03-11 11:15:52,997 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from MyIterator<Double>
2021-03-11 11:15:53,001 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from Boolean
2021-03-11 11:15:53,004 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:15:53,018 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from Continuation<Any?>
2021-03-11 11:15:53,032 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from MyIterator<Double>
2021-03-11 11:15:53,036 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from String
2021-03-11 11:15:53,042 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from Boolean
2021-03-11 11:15:53,046 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from EmptyCoroutineContext
2021-03-11 11:15:53,074 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from UByte
2021-03-11 11:15:53,078 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from MyIterator<String>
2021-03-11 11:15:53,082 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from CoroutineContext
2021-03-11 11:15:53,086 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from Boolean
2021-03-11 11:15:53,091 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from Double
2021-03-11 11:15:53,094 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> from Function0<Unit>
2021-03-11 11:15:53,108 [main:110] - replacement of c of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8, Int> is {a: Kla8 -> 1706796847}
2021-03-11 11:15:53,296 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:15:53,296 [main:66] - Compilation checking started
2021-03-11 11:15:53,856 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = (1).toShort().compareTo(-122)
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    {a: Kla8 -> 1706796847}.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().prope10

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:53,859 [main:103] - replacing (prope10, Int)
2021-03-11 11:15:53,859 [main:38] - replacing prope10 Int
2021-03-11 11:15:53,859 [main:42] - Getting value of type Int
2021-03-11 11:15:54,046 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:54,055 [main:46] - GENERATED VALUE OF TYPE Int = 36905057
2021-03-11 11:15:54,055 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:54,086 [main:55] - randomType = Kla4
2021-03-11 11:15:54,273 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:15:54,281 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}
2021-03-11 11:15:54,287 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@6cc59550]
2021-03-11 11:15:54,477 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:15:54,477 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:15:54,662 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:15:54,669 [main:66] - Generated call from random type = (Kla4()).equals("vhxhn").compareTo(false)
2021-03-11 11:15:54,670 [main:110] - replacement of prope10 of type Int is (Kla4()).equals("vhxhn").compareTo(false)
2021-03-11 11:15:54,857 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:15:54,857 [main:66] - Compilation checking started
2021-03-11 11:15:55,399 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = (1).toShort().compareTo(-122)
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = Kla8().(Kla4()).equals("vhxhn").compareTo(false)

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:55,402 [main:103] - replacing (prope12, Result<Ty1>)
2021-03-11 11:15:55,402 [main:38] - replacing prope12 Result<Ty1>
2021-03-11 11:15:55,402 [main:42] - Getting value of type Result<Ty1>
2021-03-11 11:15:55,621 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-11 11:15:55,814 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:15:55,826 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:15:56,254 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 11:15:56,254 [main:46] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-11 11:15:56,506 [main:55] - randomType = ArrayDeque<Byte>
2021-03-11 11:15:56,693 [main:302] - generating value of type = ArrayDeque<Byte> false depth = 0
2021-03-11 11:15:56,891 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Byte> = TODO()
2021-03-11 11:15:56,900 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Byte> = TODO()
2021-03-11 11:15:57,320 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:15:57,327 [main:95] - GENERATED = ArrayDeque<Byte>(202024766)
2021-03-11 11:15:57,464 [main:94] - GETTING Result<Ty1> from Continuation<Any?>
2021-03-11 11:15:57,473 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 11:15:57,514 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:15:57,523 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:15:57,531 [main:94] - GETTING Result<Ty1> from UByte
2021-03-11 11:15:57,557 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 11:15:57,559 [main:94] - GETTING Result<Ty1> from String
2021-03-11 11:15:57,579 [main:94] - GETTING Result<Ty1> from Any?
2021-03-11 11:15:57,583 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:15:57,584 [main:94] - GETTING Result<Ty1> from MyIterator<String>
2021-03-11 11:15:57,602 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:15:57,603 [main:94] - GETTING Result<Ty1> from MyIterator<String>
2021-03-11 11:15:57,605 [main:94] - GETTING Result<Ty1> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:15:57,613 [main:94] - GETTING Result<Ty1> from EmptyCoroutineContext
2021-03-11 11:15:57,631 [main:94] - GETTING Result<Ty1> from Function0<Unit>
2021-03-11 11:15:57,644 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:15:57,660 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:15:57,661 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:15:57,662 [main:94] - GETTING Result<Ty1> from MyIterator<Double>
2021-03-11 11:15:57,663 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 11:15:57,664 [main:94] - GETTING Result<Ty1> from CoroutineContext
2021-03-11 11:15:57,665 [main:94] - GETTING Result<Ty1> from String
2021-03-11 11:15:57,666 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 11:15:57,709 [main:94] - GETTING Result<Ty1> from UByte
2021-03-11 11:15:57,710 [main:107] - Cant find and generate replacement for prope12 type Result<Ty1>
2021-03-11 11:15:57,710 [main:103] - replacing (Kla8().prope10, Int)
2021-03-11 11:15:57,710 [main:38] - replacing Kla8().prope10 Int
2021-03-11 11:15:57,710 [main:42] - Getting value of type Int
2021-03-11 11:15:57,898 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:57,907 [main:46] - GENERATED VALUE OF TYPE Int = 1813398665
2021-03-11 11:15:57,907 [main:49] - GENERATED IS CALL =false
2021-03-11 11:15:57,923 [main:55] - randomType = Double
2021-03-11 11:15:58,117 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:15:58,159 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@15ef38a5]
2021-03-11 11:15:58,351 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:15:58,359 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c70c64d]
2021-03-11 11:15:58,545 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:58,553 [main:66] - Generated call from random type = (0.05748171365108323).compareTo(-60).or(657368842)
2021-03-11 11:15:58,553 [main:110] - replacement of Kla8().prope10 of type Int is (0.05748171365108323).compareTo(-60).or(657368842)
2021-03-11 11:15:58,740 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:15:58,740 [main:66] - Compilation checking started
2021-03-11 11:15:59,544 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = 0
    suspend fun fu15(v: Int): Int = (1).toShort().compareTo(-122)
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = (0.05748171365108323).compareTo(-60).or(657368842)

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:15:59,547 [main:103] - replacing (0, Int)
2021-03-11 11:15:59,548 [main:38] - replacing 0 Int
2021-03-11 11:15:59,548 [main:42] - Getting value of type Int
2021-03-11 11:15:59,736 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:15:59,743 [main:46] - GENERATED VALUE OF TYPE Int = 16345306
2021-03-11 11:15:59,744 [main:49] - GENERATED IS CALL =false
2021-03-11 11:16:00,592 [main:55] - randomType = Triple<Kla1, Function1<Long, Kla4>, Long?>
2021-03-11 11:16:00,780 [main:302] - generating value of type = Triple<Kla1, Function1<Long, Kla4>, Long?> false depth = 0
2021-03-11 11:16:00,988 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla1, second: Function1<Long, Kla4>, third: Long?): Triple<Kla1, Function1<Long, Kla4>, Long?> = TODO()
2021-03-11 11:16:00,998 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla1, second: Function1<Long, Kla4>, third: Long?): Triple<Kla1, Function1<Long, Kla4>, Long?> = TODO()
2021-03-11 11:16:01,248 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-11 11:16:01,256 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}
2021-03-11 11:16:01,445 [main:194] - Type params = []
2021-03-11 11:16:01,641 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-11 11:16:01,837 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:16:01,848 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:16:02,312 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-11 11:16:02,517 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:16:02,526 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:16:03,236 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-11 11:16:03,441 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:16:03,450 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:16:04,130 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-11 11:16:04,330 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:16:04,339 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:16:05,030 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:16:05,030 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:16:05,030 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:16:05,030 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:16:05,031 [main:302] - generating value of type = Function1<Long, Kla4> false depth = 3
2021-03-11 11:16:05,039 [main:302] - generating value of type = Kla4 false depth = 4
2021-03-11 11:16:05,046 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}
2021-03-11 11:16:05,046 [main:302] - generating value of type = Long true depth = 3
2021-03-11 11:16:05,055 [main:95] - GENERATED = Triple<Kla1, Function1<Long, Kla4>, Long?>(Kla1(), {a: Long -> Kla4()}, 7132512638957183407)
2021-03-11 11:16:05,076 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor@792f54a5]
2021-03-11 11:16:05,266 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:05,266 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:16:05,448 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:16:05,455 [main:66] - Generated call from random type = (Triple<Kla1, Function1<Long, Kla4>, Long?>(Kla1(), {a: Long -> Kla4()}, 7132512638957183407)).equals("yudny").compareTo(true)
2021-03-11 11:16:05,455 [main:110] - replacement of 0 of type Int is (Triple<Kla1, Function1<Long, Kla4>, Long?>(Kla1(), {a: Long -> Kla4()}, 7132512638957183407)).equals("yudny").compareTo(true)
2021-03-11 11:16:05,637 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:16:05,638 [main:66] - Compilation checking started
2021-03-11 11:16:06,425 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = (Triple<Kla1, Function1<Long, Kla4>, Long?>(Kla1(), {a: Long -> Kla4()}, 7132512638957183407)).equals("yudny").compareTo(true)
    suspend fun fu15(v: Int): Int = (1).toShort().compareTo(-122)
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = (0.05748171365108323).compareTo(-60).or(657368842)

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        prope17 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:16:06,428 [main:103] - replacing (prope17, Function0<Unit>)
2021-03-11 11:16:06,428 [main:38] - replacing prope17 Function0<Unit>
2021-03-11 11:16:06,428 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:16:06,618 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:16:06,626 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:16:06,826 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:16:06,836 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:16:07,534 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:16:07,542 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:16:07,549 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:16:07,549 [main:95] - GENERATED = require(false, { "eyneo"})
2021-03-11 11:16:07,549 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "eyneo"})}
2021-03-11 11:16:07,549 [main:49] - GENERATED IS CALL =false
2021-03-11 11:16:08,551 [main:55] - randomType = MutableMap<UShort?, LinkedHashSet<Boolean>>?
2021-03-11 11:16:08,553 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:16:08,565 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:16:08,573 [main:94] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-11 11:16:08,580 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:16:08,581 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:16:08,597 [main:94] - GETTING Function0<Unit> from Any?
2021-03-11 11:16:08,601 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:16:08,619 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:16:08,621 [main:94] - GETTING Function0<Unit> from MyIterator<Double>
2021-03-11 11:16:08,633 [main:94] - GETTING Function0<Unit> from UByte
2021-03-11 11:16:08,662 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:16:08,663 [main:94] - GETTING Function0<Unit> from MyIterator<Double>
2021-03-11 11:16:08,663 [main:94] - GETTING Function0<Unit> from UByte
2021-03-11 11:16:08,664 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:16:08,665 [main:94] - GETTING Function0<Unit> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:16:08,677 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 11:16:08,685 [main:110] - replacement of prope17 of type Function0<Unit> is Kla5().prope6
2021-03-11 11:16:08,867 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:16:08,867 [main:66] - Compilation checking started
2021-03-11 11:16:09,729 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = (Triple<Kla1, Function1<Long, Kla4>, Long?>(Kla1(), {a: Long -> Kla4()}, 7132512638957183407)).equals("yudny").compareTo(true)
    suspend fun fu15(v: Int): Int = (1).toShort().compareTo(-122)
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = (0.05748171365108323).compareTo(-60).or(657368842)

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        Kla5().prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:16:09,732 [main:103] - replacing (it, Continuation<Unit>)
2021-03-11 11:16:09,732 [main:38] - replacing it Continuation<Unit>
2021-03-11 11:16:09,732 [main:42] - Getting value of type Continuation<Unit>
2021-03-11 11:16:09,928 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 11:16:10,126 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:16:10,136 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:16:10,838 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:16:11,041 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:16:11,051 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:16:11,507 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:16:11,711 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:16:11,720 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:16:12,426 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:16:12,426 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:16:12,426 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:16:12,426 [main:46] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 11:16:12,965 [main:55] - randomType = Function1<Double, Boolean?>
2021-03-11 11:16:12,966 [main:94] - GETTING Continuation<Unit> from EmptyCoroutineContext
2021-03-11 11:16:12,984 [main:94] - GETTING Continuation<Unit> from Continuation<Any?>
2021-03-11 11:16:12,996 [main:94] - GETTING Continuation<Unit> from Boolean
2021-03-11 11:16:13,005 [main:94] - GETTING Continuation<Unit> from UByte
2021-03-11 11:16:13,031 [main:94] - GETTING Continuation<Unit> from Int
2021-03-11 11:16:13,070 [main:94] - GETTING Continuation<Unit> from Boolean
2021-03-11 11:16:13,071 [main:94] - GETTING Continuation<Unit> from CoroutineContext
2021-03-11 11:16:13,079 [main:94] - GETTING Continuation<Unit> from MyIterator<Double>
2021-03-11 11:16:13,094 [main:94] - GETTING Continuation<Unit> from CoroutineContext
2021-03-11 11:16:13,095 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 11:16:13,115 [main:94] - GETTING Continuation<Unit> from Function0<Unit>
2021-03-11 11:16:13,126 [main:94] - GETTING Continuation<Unit> from Any?
2021-03-11 11:16:13,130 [main:94] - GETTING Continuation<Unit> from Double
2021-03-11 11:16:13,164 [main:94] - GETTING Continuation<Unit> from CoroutineContext
2021-03-11 11:16:13,165 [main:94] - GETTING Continuation<Unit> from Boolean
2021-03-11 11:16:13,166 [main:94] - GETTING Continuation<Unit> from Double
2021-03-11 11:16:13,167 [main:94] - GETTING Continuation<Unit> from MyIterator<Double>
2021-03-11 11:16:13,168 [main:94] - GETTING Continuation<Unit> from UByte
2021-03-11 11:16:13,169 [main:94] - GETTING Continuation<Unit> from MyIterator<String>
2021-03-11 11:16:13,184 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 11:16:13,185 [main:94] - GETTING Continuation<Unit> from MyIterator<String>
2021-03-11 11:16:13,186 [main:94] - GETTING Continuation<Unit> from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:16:13,197 [main:94] - GETTING Continuation<Unit> from Boolean
2021-03-11 11:16:13,197 [main:94] - GETTING Continuation<Unit> from MyIterator<Double>
2021-03-11 11:16:13,198 [main:107] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-11 11:16:13,198 [main:103] - replacing (prope17, Function0<Unit>)
2021-03-11 11:16:13,198 [main:38] - replacing prope17 Function0<Unit>
2021-03-11 11:16:13,198 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:16:13,383 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:16:13,391 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:16:13,584 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:16:13,594 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:16:14,025 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:16:14,033 [main:95] - GENERATED = check(true)
2021-03-11 11:16:14,033 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 11:16:14,033 [main:49] - GENERATED IS CALL =false
2021-03-11 11:16:14,763 [main:55] - randomType = ArrayList<Set<Char?>>
2021-03-11 11:16:14,949 [main:302] - generating value of type = ArrayList<Set<Char?>> false depth = 0
2021-03-11 11:16:15,146 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Set<Char?>> = TODO()
2021-03-11 11:16:15,156 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Set<Char?>> = TODO()
2021-03-11 11:16:15,361 [main:95] - GENERATED = arrayListOf<Set<Char?>>()
2021-03-11 11:16:15,531 [main:94] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-11 11:16:15,540 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:16:15,550 [main:94] - GETTING Function0<Unit> from MyIterator<String>
2021-03-11 11:16:15,567 [main:94] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-11 11:16:15,584 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 11:16:15,618 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:16:15,640 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:16:15,641 [main:94] - GETTING Function0<Unit> from MyIterator<Double>
2021-03-11 11:16:15,655 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:16:15,663 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:16:15,664 [main:94] - GETTING Function0<Unit> from MyIterator<Double>
2021-03-11 11:16:15,665 [main:94] - GETTING Function0<Unit> from MyIterator<Double>
2021-03-11 11:16:15,665 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 11:16:15,677 [main:110] - replacement of prope17 of type Function0<Unit> is { check(true)}
2021-03-11 11:16:15,869 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:16:15,870 [main:66] - Compilation checking started
2021-03-11 11:16:16,433 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = (Triple<Kla1, Function1<Long, Kla4>, Long?>(Kla1(), {a: Long -> Kla4()}, 7132512638957183407)).equals("yudny").compareTo(true)
    suspend fun fu15(v: Int): Int = (1).toShort().compareTo(-122)
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = (0.05748171365108323).compareTo(-60).or(657368842)

    if (prope12 != "-24") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        Kla5().prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().{ check(true)} = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:16:16,437 [main:103] - replacing (isSuccess, Boolean)
2021-03-11 11:16:16,437 [main:38] - replacing isSuccess Boolean
2021-03-11 11:16:16,437 [main:42] - Getting value of type Boolean
2021-03-11 11:16:16,642 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:16:16,649 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:16:16,649 [main:49] - GENERATED IS CALL =false
2021-03-11 11:16:16,664 [main:55] - randomType = Long
2021-03-11 11:16:16,860 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:16:16,909 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@774ccf0f]
2021-03-11 11:16:16,909 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d6ef59a]
2021-03-11 11:16:16,909 [main:66] - Generated call from random type = (7198034303763025097).toChar().isTitleCase()
2021-03-11 11:16:16,910 [main:94] - GETTING Boolean from String
2021-03-11 11:16:16,928 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7079152e]]
2021-03-11 11:16:16,928 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7079152e]
2021-03-11 11:16:16,928 [main:105] - GENERATED CALL = (prope2).isNotBlank()
2021-03-11 11:16:16,928 [main:101] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1632d899]]
2021-03-11 11:16:16,928 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1632d899]
2021-03-11 11:16:16,928 [main:105] - GENERATED CALL = (prope2).isBlank()
2021-03-11 11:16:16,928 [main:101] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7aa50747]]
2021-03-11 11:16:16,928 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7aa50747]
2021-03-11 11:16:16,928 [main:105] - GENERATED CALL = (prope2).toBoolean()
2021-03-11 11:16:16,928 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0fdc6c]]
2021-03-11 11:16:16,928 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c]
2021-03-11 11:16:17,120 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:17,127 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0fdc6c]
2021-03-11 11:16:17,128 [main:105] - GENERATED CALL = (prope2).get(-392532915).isLowSurrogate()
2021-03-11 11:16:17,128 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46d8c264]]
2021-03-11 11:16:17,128 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83]
2021-03-11 11:16:17,311 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:17,503 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:17,510 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46d8c264]
2021-03-11 11:16:17,511 [main:105] - GENERATED CALL = (prope2).subSequence(-70365422, 61378699).isEmpty()
2021-03-11 11:16:17,511 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1632d899]]
2021-03-11 11:16:17,511 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83]
2021-03-11 11:16:17,699 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:17,897 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:17,905 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1632d899]
2021-03-11 11:16:17,905 [main:105] - GENERATED CALL = (prope2).subSequence(-1264642478, 1467627829).isBlank()
2021-03-11 11:16:17,905 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7430d9b3]]
2021-03-11 11:16:17,905 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83]
2021-03-11 11:16:18,091 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:18,318 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:18,326 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7430d9b3]
2021-03-11 11:16:18,519 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:16:18,526 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:16:18,534 [main:105] - GENERATED CALL = (prope2).subSequence(-957263379, 1807995963).all({a: Char -> false})
2021-03-11 11:16:18,534 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adeb089]]
2021-03-11 11:16:18,534 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83]
2021-03-11 11:16:18,725 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:18,927 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:18,934 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adeb089]
2021-03-11 11:16:18,935 [main:105] - GENERATED CALL = (prope2).subSequence(-1383930471, -213861968).any()
2021-03-11 11:16:18,935 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340beee7]]
2021-03-11 11:16:18,935 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83]
2021-03-11 11:16:19,126 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:19,325 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:19,333 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340beee7]
2021-03-11 11:16:19,540 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:16:19,740 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 11:16:19,749 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 11:16:20,460 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:16:20,468 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 11:16:20,666 [main:43] - GENERATING CALL OF fun <E> buildSet(builderAction: kotlin.collections.MutableSet<RegexOption>.()->kotlin.Unit): Set<RegexOption> = TODO()
2021-03-11 11:16:20,676 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(builderAction: kotlin.collections.MutableSet<RegexOption>.()->kotlin.Unit): Set<RegexOption> = TODO()
2021-03-11 11:16:21,147 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<RegexOption>, Unit> false depth = 6
2021-03-11 11:16:21,155 [main:302] - generating value of type = Unit false depth = 7
2021-03-11 11:16:21,355 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:16:21,365 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:16:22,043 [main:302] - generating value of type = Boolean true depth = 10
2021-03-11 11:16:22,053 [main:302] - generating value of type = Function0<Any> false depth = 10
2021-03-11 11:16:22,061 [main:302] - generating value of type = Any false depth = 11
2021-03-11 11:16:22,061 [main:95] - GENERATED = require(false, { "nnfyp"})
2021-03-11 11:16:22,061 [main:95] - GENERATED = buildSet<RegexOption>({ require(false, { "nnfyp"})})
2021-03-11 11:16:22,061 [main:95] - GENERATED = Regex("wusem", buildSet<RegexOption>({ require(false, { "nnfyp"})}))
2021-03-11 11:16:22,062 [main:105] - GENERATED CALL = (prope2).subSequence(823737893, 1305645137).matches(Regex("wusem", buildSet<RegexOption>({ require(false, { "nnfyp"})})))
2021-03-11 11:16:22,062 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:16:22,062 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]
2021-03-11 11:16:22,248 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:22,249 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:16:22,440 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:16:22,448 [main:105] - GENERATED CALL = (prope2).equals("ooikf").and(false)
2021-03-11 11:16:22,448 [main:110] - replacement of isSuccess of type Boolean is (prope2).get(-392532915).isLowSurrogate()
2021-03-11 11:16:22,635 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:16:22,638 [main:103] - replacing ("-24", String)
2021-03-11 11:16:22,639 [main:38] - replacing "-24" String
2021-03-11 11:16:22,639 [main:42] - Getting value of type String
2021-03-11 11:16:22,828 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:16:22,835 [main:46] - GENERATED VALUE OF TYPE String = "dsbsf"
2021-03-11 11:16:22,835 [main:49] - GENERATED IS CALL =false
2021-03-11 11:16:22,852 [main:55] - randomType = Double
2021-03-11 11:16:23,044 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:16:23,099 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea40c10]
2021-03-11 11:16:23,100 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b18a531]
2021-03-11 11:16:23,100 [main:66] - Generated call from random type = (0.5090871580601414).toChar().titlecase()
2021-03-11 11:16:23,101 [main:94] - GETTING String from Boolean
2021-03-11 11:16:23,115 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:16:23,115 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e01a7d7]
2021-03-11 11:16:23,301 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:16:23,309 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:16:23,500 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:23,508 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).hasNext()).compareTo(false).toString(-848901820)
2021-03-11 11:16:23,508 [main:110] - replacement of "-24" of type String is "dsbsf"
2021-03-11 11:16:23,693 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:16:23,693 [main:66] - Compilation checking started
2021-03-11 11:16:24,561 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = (Triple<Kla1, Function1<Long, Kla4>, Long?>(Kla1(), {a: Long -> Kla4()}, 7132512638957183407)).equals("yudny").compareTo(true)
    suspend fun fu15(v: Int): Int = (1).toShort().compareTo(-122)
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = (0.05748171365108323).compareTo(-60).or(657368842)

    if (prope12 != "dsbsf") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        Kla5().prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:16:24,565 [main:103] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt(), String)
2021-03-11 11:16:24,565 [main:38] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() String
2021-03-11 11:16:24,565 [main:42] - Getting value of type String
2021-03-11 11:16:24,754 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:16:24,762 [main:46] - GENERATED VALUE OF TYPE String = "ipegh"
2021-03-11 11:16:24,762 [main:49] - GENERATED IS CALL =false
2021-03-11 11:16:24,996 [main:55] - randomType = Float
2021-03-11 11:16:25,184 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:16:25,227 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@55621e8]
2021-03-11 11:16:25,411 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:16:25,420 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:16:25,607 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:25,615 [main:66] - Generated call from random type = (0.95297116f).compareTo(-54).toString(1847800996)
2021-03-11 11:16:25,616 [main:94] - GETTING String from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:16:25,626 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:16:25,632 [main:94] - GETTING String from UByte
2021-03-11 11:16:25,658 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@749f0281], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]]
2021-03-11 11:16:25,658 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@749f0281]
2021-03-11 11:16:25,659 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa0d1cb]
2021-03-11 11:16:25,843 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:25,850 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).toLong().toString(593401194)
2021-03-11 11:16:25,851 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52a19ae5], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b3d76]]
2021-03-11 11:16:25,851 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52a19ae5]
2021-03-11 11:16:26,037 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:16:26,044 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b3d76]
2021-03-11 11:16:26,227 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:26,234 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).div(99.toUByte()).toString(-366638901)
2021-03-11 11:16:26,235 [main:101] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]]
2021-03-11 11:16:26,235 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@14d3308c]
2021-03-11 11:16:26,422 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:16:26,430 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca8bdfd]
2021-03-11 11:16:26,620 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:26,628 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).compareTo(72.toUByte()).toString(2108538396)
2021-03-11 11:16:26,628 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11fc1d80], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]]
2021-03-11 11:16:26,628 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11fc1d80]
2021-03-11 11:16:26,628 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3c1aef]
2021-03-11 11:16:26,816 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:26,824 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).toShort().toString(-1817810747)
2021-03-11 11:16:26,824 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14734fe2]]
2021-03-11 11:16:26,824 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14734fe2]
2021-03-11 11:16:27,029 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:27,037 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).toString(-509500715)
2021-03-11 11:16:27,037 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@22843cbe], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7efceb9b]]
2021-03-11 11:16:27,037 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@22843cbe]
2021-03-11 11:16:27,038 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7efceb9b]
2021-03-11 11:16:27,226 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:27,234 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).toUShort().toString(1098005849)
2021-03-11 11:16:27,234 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7dde3752], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]]
2021-03-11 11:16:27,234 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7dde3752]
2021-03-11 11:16:27,235 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dc66ed]
2021-03-11 11:16:27,418 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:27,426 [main:105] - GENERATED CALL = (MyIterator<UByte>(112.toUByte()).next()).toByte().toString(-936472270)
2021-03-11 11:16:27,426 [main:110] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (MyIterator<UByte>(112.toUByte()).v).div(55.toUByte()).toInt() of type String is (MyIterator<UByte>(112.toUByte()).next()).toLong().toString(593401194)
2021-03-11 11:16:27,625 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:16:27,625 [main:66] - Compilation checking started
2021-03-11 11:16:28,432 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = (Triple<Kla1, Function1<Long, Kla4>, Long?>(Kla1(), {a: Long -> Kla4()}, 7132512638957183407)).equals("yudny").compareTo(true)
    suspend fun fu15(v: Int): Int = (1).toShort().compareTo(-122)
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = (0.05748171365108323).compareTo(-60).or(657368842)

    if (prope12 != "dsbsf") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        Kla5().prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error((MyIterator<UByte>(112.toUByte()).next()).toLong().toString(593401194) + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:16:28,437 [main:103] - replacing (prope12 != "dsbsf", Boolean)
2021-03-11 11:16:28,437 [main:38] - replacing prope12 != "dsbsf" Boolean
2021-03-11 11:16:28,437 [main:42] - Getting value of type Boolean
2021-03-11 11:16:28,626 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:16:28,634 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:16:28,634 [main:49] - GENERATED IS CALL =false
2021-03-11 11:16:28,651 [main:55] - randomType = UShort
2021-03-11 11:16:28,844 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:16:28,894 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2b966167]
2021-03-11 11:16:28,894 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6fcf6333]
2021-03-11 11:16:29,092 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:29,092 [main:66] - Generated call from random type = (24727.toUShort()).toUByte().equals("xqbtv")
2021-03-11 11:16:29,093 [main:94] - GETTING Boolean from String
2021-03-11 11:16:29,122 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:16:29,123 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]
2021-03-11 11:16:29,308 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:29,308 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:16:29,499 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:29,500 [main:105] - GENERATED CALL = (Kla0().fu3()).equals("axibx").equals("rsnei")
2021-03-11 11:16:29,500 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cec9118]]
2021-03-11 11:16:29,500 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c]
2021-03-11 11:16:29,689 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:29,696 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cec9118]
2021-03-11 11:16:29,884 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:16:30,080 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:16:30,089 [main:105] - GENERATED CALL = (Kla0().fu3()).get(-1959593227).equals('', false)
2021-03-11 11:16:30,089 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:16:30,089 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32347dd4]
2021-03-11 11:16:30,315 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:30,315 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:16:30,505 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:16:30,513 [main:105] - GENERATED CALL = (Kla0().fu3()).equals("hmucl").xor(false)
2021-03-11 11:16:30,513 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d6ef59a]]
2021-03-11 11:16:30,513 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c]
2021-03-11 11:16:30,711 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:30,718 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d6ef59a]
2021-03-11 11:16:30,718 [main:105] - GENERATED CALL = (Kla0().fu3()).get(1944135143).isTitleCase()
2021-03-11 11:16:30,719 [main:101] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1632d899]]
2021-03-11 11:16:30,719 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1632d899]
2021-03-11 11:16:30,719 [main:105] - GENERATED CALL = (Kla0().fu3()).isBlank()
2021-03-11 11:16:30,719 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b6e5877]]
2021-03-11 11:16:30,719 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b6e5877]
2021-03-11 11:16:30,719 [main:105] - GENERATED CALL = (Kla0().fu3()).isNotEmpty()
2021-03-11 11:16:30,719 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596476e]]
2021-03-11 11:16:30,719 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e87846c]
2021-03-11 11:16:30,908 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:30,916 [main:137] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596476e]
2021-03-11 11:16:30,916 [main:105] - GENERATED CALL = (Kla0().fu3()).get(-351712187).isDefined()
2021-03-11 11:16:30,916 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340beee7]]
2021-03-11 11:16:30,916 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f5ffc83]
2021-03-11 11:16:31,108 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:31,302 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:16:31,310 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340beee7]
2021-03-11 11:16:31,497 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:16:31,699 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:16:31,709 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:16:32,149 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:16:32,158 [main:95] - GENERATED = Regex("ndmry")
2021-03-11 11:16:32,158 [main:105] - GENERATED CALL = (Kla0().fu3()).subSequence(-1756198853, -1996447248).matches(Regex("ndmry"))
2021-03-11 11:16:32,158 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7079152e]]
2021-03-11 11:16:32,158 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7079152e]
2021-03-11 11:16:32,158 [main:105] - GENERATED CALL = (Kla0().fu3()).isNotBlank()
2021-03-11 11:16:32,158 [main:101] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bfb4ebc]]
2021-03-11 11:16:32,158 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bfb4ebc]
2021-03-11 11:16:32,345 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:16:32,543 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:16:32,550 [main:105] - GENERATED CALL = (Kla0().fu3()).endsWith("ixqoo", true)
2021-03-11 11:16:32,551 [main:110] - replacement of prope12 != "dsbsf" of type Boolean is (Kla0().fu3()).endsWith("ixqoo", true)
2021-03-11 11:16:32,740 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:16:32,740 [main:66] - Compilation checking started
2021-03-11 11:16:33,312 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = (Triple<Kla1, Function1<Long, Kla4>, Long?>(Kla1(), {a: Long -> Kla4()}, 7132512638957183407)).equals("yudny").compareTo(true)
    suspend fun fu15(v: Int): Int = (1).toShort().compareTo(-122)
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = (0.05748171365108323).compareTo(-60).or(657368842)

    if ((Kla0().fu3()).endsWith("ixqoo", true)) return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        Kla5().prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error((MyIterator<UByte>(112.toUByte()).next()).toLong().toString(593401194) + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:16:33,315 [main:103] - replacing (checkFinished, Boolean)
2021-03-11 11:16:33,315 [main:38] - replacing checkFinished Boolean
2021-03-11 11:16:33,315 [main:42] - Getting value of type Boolean
2021-03-11 11:16:33,504 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:16:33,512 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:16:33,512 [main:49] - GENERATED IS CALL =false
2021-03-11 11:16:34,018 [main:55] - randomType = ArrayList<Long>
2021-03-11 11:16:34,235 [main:302] - generating value of type = ArrayList<Long> false depth = 0
2021-03-11 11:16:34,436 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Long> = TODO()
2021-03-11 11:16:34,446 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Long> = TODO()
2021-03-11 11:16:34,655 [main:95] - GENERATED = arrayListOf<Long>()
2021-03-11 11:16:34,814 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@414fcfd8]
2021-03-11 11:16:34,814 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7710f9bb]
2021-03-11 11:16:35,005 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 11:16:35,216 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 11:16:35,226 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 11:16:35,433 [main:302] - generating value of type = T false depth = 3
2021-03-11 11:16:35,656 [main:43] - GENERATING CALL OF fun <T> minOf(a: Int, b: Int, c: Int): T = TODO()
2021-03-11 11:16:35,665 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Int, b: Int, c: Int): T = TODO()
2021-03-11 11:16:35,866 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:16:35,874 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:16:35,881 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:16:35,888 [main:95] - GENERATED = minOf<Int>(1546657773, -1988380715, 1567934933)
2021-03-11 11:16:35,889 [main:95] - GENERATED = arrayOf<T>(minOf<Int>(1546657773, -1988380715, 1567934933))
2021-03-11 11:16:35,889 [main:66] - Generated call from random type = (arrayListOf<Long>()).toArray().contentDeepEquals(arrayOf<T>(minOf<Int>(1546657773, -1988380715, 1567934933)))
2021-03-11 11:16:35,890 [main:94] - GETTING Boolean from Continuation<Any?>
2021-03-11 11:16:35,898 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@67bb6b46], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]]
2021-03-11 11:16:35,898 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@67bb6b46]
2021-03-11 11:16:36,079 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:36,079 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71165e41]
2021-03-11 11:16:36,351 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:16:36,363 [main:105] - GENERATED CALL = (fu2({a: Throwable -> contract({ repeat(-1160412621, {a: Int -> check(false)})})})).equals("sejbz").and(true)
2021-03-11 11:16:36,364 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@67bb6b46], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]]
2021-03-11 11:16:36,364 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@67bb6b46]
2021-03-11 11:16:36,609 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:36,609 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@527cc0c1]
2021-03-11 11:16:36,833 [main:105] - GENERATED CALL = (fu2({a: Throwable -> contract({ repeat(-1160412621, {a: Int -> check(false)})})})).equals("dijzx").equals(null)
2021-03-11 11:16:36,833 [main:101] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@5bc8cd54], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@10e9dd46]]
2021-03-11 11:16:36,834 [main:137] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@5bc8cd54]
2021-03-11 11:16:37,075 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 11:16:37,274 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:16:37,283 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:16:37,716 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 11:16:37,724 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:16:37,724 [main:95] - GENERATED = runCatching<Any?>({ "oekqe"})
2021-03-11 11:16:37,725 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@10e9dd46]
2021-03-11 11:16:37,910 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:37,910 [main:105] - GENERATED CALL = (fu2({a: Throwable -> contract({ repeat(-1160412621, {a: Int -> check(false)})})})).resumeWith(runCatching<Any?>({ "oekqe"})).equals("vjjar")
2021-03-11 11:16:37,910 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@67bb6b46], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]]
2021-03-11 11:16:37,910 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@67bb6b46]
2021-03-11 11:16:38,089 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:38,089 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@504dffbc]
2021-03-11 11:16:38,090 [main:105] - GENERATED CALL = (fu2({a: Throwable -> contract({ repeat(-1160412621, {a: Int -> check(false)})})})).equals("snoce").not()
2021-03-11 11:16:38,090 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@67bb6b46], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]]
2021-03-11 11:16:38,090 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@67bb6b46]
2021-03-11 11:16:38,273 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:38,273 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6341d57d]
2021-03-11 11:16:38,458 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:16:38,466 [main:105] - GENERATED CALL = (fu2({a: Throwable -> contract({ repeat(-1160412621, {a: Int -> check(false)})})})).equals("ypezz").or(false)
2021-03-11 11:16:38,466 [main:101] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@55f5c903], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3422593a]]
2021-03-11 11:16:38,466 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3422593a]
2021-03-11 11:16:38,650 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:38,650 [main:105] - GENERATED CALL = (fu2({a: Throwable -> contract({ repeat(-1160412621, {a: Int -> check(false)})})})).context.equals("jtqmd")
2021-03-11 11:16:38,650 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@67bb6b46]]
2021-03-11 11:16:38,650 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@67bb6b46]
2021-03-11 11:16:38,828 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:38,829 [main:105] - GENERATED CALL = (fu2({a: Throwable -> contract({ repeat(-1160412621, {a: Int -> check(false)})})})).equals("ijxhk")
2021-03-11 11:16:38,829 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@67bb6b46], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]]
2021-03-11 11:16:38,829 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@67bb6b46]
2021-03-11 11:16:39,012 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:16:39,012 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@165a1ac4]
2021-03-11 11:16:39,201 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:16:39,211 [main:105] - GENERATED CALL = (fu2({a: Throwable -> contract({ repeat(-1160412621, {a: Int -> check(false)})})})).equals("civza").xor(true)
2021-03-11 11:16:39,212 [main:110] - replacement of checkFinished of type Boolean is (fu2({a: Throwable -> contract({ repeat(-1160412621, {a: Int -> check(false)})})})).context.equals("jtqmd")
2021-03-11 11:16:39,397 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:16:39,398 [main:66] - Compilation checking started
2021-03-11 11:16:39,944 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = (Triple<Kla1, Function1<Long, Kla4>, Long?>(Kla1(), {a: Long -> Kla4()}, 7132512638957183407)).equals("yudny").compareTo(true)
    suspend fun fu15(v: Int): Int = (1).toShort().compareTo(-122)
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = (0.05748171365108323).compareTo(-60).or(657368842)

    if (prope12 != "dsbsf") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        Kla5().prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error((MyIterator<UByte>(112.toUByte()).next()).toLong().toString(593401194) + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if ((fu2({a: Throwable -> contract({ repeat(-1160412621, {a: Int -> check(false)})})})).context.equals("jtqmd") && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:16:39,947 [main:103] - replacing (this, Kla10)
2021-03-11 11:16:39,947 [main:38] - replacing this Kla10
2021-03-11 11:16:39,947 [main:42] - Getting value of type Kla10
2021-03-11 11:16:40,128 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-11 11:16:40,135 [main:112] - generating klass Kla10 text = class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}
2021-03-11 11:16:40,135 [main:46] - GENERATED VALUE OF TYPE Kla10 = Kla10()
2021-03-11 11:16:40,135 [main:49] - GENERATED IS CALL =true
2021-03-11 11:16:40,151 [main:55] - randomType = Boolean
2021-03-11 11:16:40,331 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:16:40,351 [main:94] - GETTING Kla10 from Int
2021-03-11 11:16:40,400 [main:94] - GETTING Kla10 from Boolean
2021-03-11 11:16:40,409 [main:94] - GETTING Kla10 from Continuation<LinkedHashSet<UInt?>?>
2021-03-11 11:16:40,419 [main:94] - GETTING Kla10 from Double
2021-03-11 11:16:40,455 [main:94] - GETTING Kla10 from String
2021-03-11 11:16:40,476 [main:94] - GETTING Kla10 from Boolean
2021-03-11 11:16:40,476 [main:94] - GETTING Kla10 from MyIterator<Double>
2021-03-11 11:16:40,489 [main:94] - GETTING Kla10 from UByte
2021-03-11 11:16:40,515 [main:94] - GETTING Kla10 from MyIterator<String>
2021-03-11 11:16:40,528 [main:94] - GETTING Kla10 from CoroutineContext
2021-03-11 11:16:40,535 [main:94] - GETTING Kla10 from Boolean
2021-03-11 11:16:40,535 [main:94] - GETTING Kla10 from EmptyCoroutineContext
2021-03-11 11:16:40,551 [main:94] - GETTING Kla10 from Function0<Unit>
2021-03-11 11:16:40,561 [main:94] - GETTING Kla10 from CoroutineContext
2021-03-11 11:16:40,562 [main:94] - GETTING Kla10 from MyIterator<Double>
2021-03-11 11:16:40,563 [main:94] - GETTING Kla10 from String
2021-03-11 11:16:40,563 [main:94] - GETTING Kla10 from Any?
2021-03-11 11:16:40,567 [main:94] - GETTING Kla10 from Continuation<Any?>
2021-03-11 11:16:40,575 [main:94] - GETTING Kla10 from UByte
2021-03-11 11:16:40,576 [main:94] - GETTING Kla10 from MyIterator<Double>
2021-03-11 11:16:40,576 [main:94] - GETTING Kla10 from CoroutineContext
2021-03-11 11:16:40,577 [main:94] - GETTING Kla10 from MyIterator<String>
2021-03-11 11:16:40,578 [main:94] - GETTING Kla10 from Double
2021-03-11 11:16:40,578 [main:94] - GETTING Kla10 from Boolean
2021-03-11 11:16:40,578 [main:110] - replacement of this of type Kla10 is Kla10()
2021-03-11 11:16:40,758 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:16:40,758 [main:66] - Compilation checking started
2021-03-11 11:16:41,539 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyIterator<T>(val v: T): Iterator<T> {
    override fun next(): T = v
    override fun hasNext(): Boolean = true

    public fun remove() {}
}

fun box(): String {
    (MyIterator<String>("") as java.util.Iterator<String>).remove()
    return "OK"
}

class Kla0 {
    suspend fun fu3(): String = throw IllegalStateException("jjjbo", NumberFormatException())
}

fun fu0(c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

fun box710(): String {
    var prope2 = "urrcb"

    fu0 {
        prope2 = (MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false).toString(584342140)
    }

    return (MyIterator<String>("")).next()
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = (Kla2()).context
    override fun resumeWith(prope2: Result<Ty0>) {
        {a: Ty0 -> require(false)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (MyIterator<String>(""))?.remove()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "kdqhf"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "yyihh"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size, {a: Int -> print("mxzpn")})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((MyIterator<Double>(0.6816303970923716).next()).toChar().titlecase() + c + (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).toChar().uppercase())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { (MyIterator<Double>(0.6816303970923716).hasNext()).equals("qgzak").equals("yhzce") }?.let { error("ftwfa")}
    }

    fun fu8(method: String) {
        prope3.find { (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).next())).next()).equals("ywdcx").or(false) } ?: error((MyIterator<String>("")).next().toLowerCase())
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 1454476859
    var prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).isNaN()

    var prope6: () -> Unit = { require(true, { "xjcyx"})}

    fun fu9() {
        prope4 = (MyIterator<Double>(0.6816303970923716).next()).compareTo((MyIterator<Double>(0.6816303970923716).next()).compareTo(19)).takeHighestOneBit()
        prope5 = (MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble().isInfinite()
        prope6 = { check(true, { "zffxp"})}
    }

    suspend fun fu3() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("sqmnh")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (MyIterator<Double>((MyIterator<Double>(0.6816303970923716).v)).v).toChar().isDigit()) {
        for (i in (MyIterator<Double>(0.6816303970923716).next()).toShort().rangeTo((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size)) {
            if ((MyIterator<String>("")).equals(null).and(equals("ywdcx"))) error("kkpgl" + (Array<MyIterator<String>>(1726379468, {a: Int -> MyIterator<String>("obyaf")})).size.dec())
            prope6()
        }
        if (((false)?.equals("guihd"))?.equals("guihd").xor(equals("yhzce")))
            error(((Array<MyIterator<String>>(509617650, {a: Int -> MyIterator<String>("obyaf")})).size.dec())?.toShort().toString(1463009288))
        if ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).next()).hasNext()).xor(true)) error((1734654453.toUInt()).toByte().toString(509617650))
        prope6()
        if (false) error((MyIterator<Double>(0.6816303970923716).v).toChar().titlecase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = (Kla5()).prope6
    }

    override fun fu4(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}

class Kla8 {
    var prope10 = (Triple<Kla1, Function1<Long, Kla4>, Long?>(Kla1(), {a: Long -> Kla4()}, 7132512638957183407)).equals("yudny").compareTo(true)
    suspend fun fu15(v: Int): Int = (1).toShort().compareTo(-122)
}

fun fu11(c: suspend Kla8.() -> Int): Kla8 {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = Kla8()
    c.startCoroutine(prope11, fu13 {a: Int -> check(true, { "zleck"})})

    return prope11
}

inline fun fu12(x: (Int) -> Unit) {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in (Kla2().prope2).hashCode()..1929746390) {
        {a: Int -> repeat(-1690666293, {a: Int -> require(false)})}(i)
    }
}

fun box979(): String {
    var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = ""

    val prope13 = (0.05748171365108323).compareTo(-60).or(657368842)

    if (prope12 != "dsbsf") return "llvgf"
    if (((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toChar().isLetterOrDigit()) return "fail 2: $(Triple<Kla14?, HashMap<Kla6, UInt>, Byte>(Kla14, HashMap<Kla6, UInt>(414571085), 11)).third.toInt()"

    return "OK"
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla2().context
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
x(prope12.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
((MyIterator<String>("")))?.remove()
    }
}

open class Kla9(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope12.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla10().prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu16(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toByte().toString(1122484071))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { false}?.let { error("jdssk")}
    }

    fun fu20(method: String) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { true} ?: error((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toChar().plus("zylnt") +
                prope14.joinToString(separator = (linkedSetOf<Kla12?>(null)).toArray().contentDeepToString()))
    }
}

val prope8 = Kla12()

class Kla13 {
    private var prope15 = 0
    var prope16 = (Kla5().prope6).invoke().equals("wvcrs")

    var prope17: () -> Unit = {}

    fun fu21() {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = ((MyIterator<Double>((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next()).toDouble()).hasNext()).compareTo(false)).toChar().toInt()
        prope16 = ((MyIterator<Double>(MyIterator<Double>(0.6816303970923716).v).next())).toLong().equals("srdtw")
        Kla5().prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("izrtz")}

    fun fu22(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (("eelvo").subSequence(223153920, 368827209).isBlank()) error("zpoys" + ", got " + prope15)
            Kla5().prope6()
        }
        if (prope15 != (-7684937937511763634)?.toLong().countOneBits())
            error((MyIterator<UByte>(112.toUByte()).next()).toLong().toString(593401194) + ", got " + -1856019446)
        if (prope16) error((Kla5().prope5).compareTo(true).toString(-1591097764))
        Kla5().prope6()
        if (checkFinished && (1232.toUShort()).toDouble().isFinite()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        var prope2 = "urrcb"
val prope0 = Kla4()
val prope1 = Kla5()
Kla13().prope17 = {
            Kla13().prope16 = ((MyIterator<String>(""))).hasNext().equals("lcxbz")
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:16:41,543 [main:103] - replacing (prope12, Any?)
2021-03-11 11:16:41,543 [main:38] - replacing prope12 Any?
2021-03-11 11:16:41,543 [main:42] - Getting value of type Any?
