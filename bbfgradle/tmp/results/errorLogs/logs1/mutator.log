2021-03-11 10:55:01,959 [main:66] - Compilation checking started
2021-03-11 10:55:05,285 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:55:05,902 [main:302] - generating value of type = ShouldBeEnabled false depth = 1
2021-03-11 10:55:05,904 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}
2021-03-11 10:55:05,906 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}
2021-03-11 10:55:05,907 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}
2021-03-11 10:55:06,380 [main:43] - GENERATING CALL OF inline fun call(c: () -> Unit) {
    c()
}
2021-03-11 10:55:06,382 [main:61] - WITHOUT TYPE PARAMS = inline fun call(c: () -> Unit) {
    c()
}
2021-03-11 10:55:06,859 [main:43] - GENERATING CALL OF fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}
2021-03-11 10:55:06,861 [main:61] - WITHOUT TYPE PARAMS = fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}
2021-03-11 10:55:07,073 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:55:07,077 [main:95] - GENERATED = setDesiredAssertionStatus(false)
2021-03-11 10:55:07,332 [main:52] - Trying to change 846 nodes
2021-03-11 10:55:07,332 [main:56] - replacing (false, Boolean)
2021-03-11 10:55:07,335 [main:38] - replacing false Boolean
2021-03-11 10:55:07,335 [main:42] - Getting value of type Boolean
2021-03-11 10:55:07,505 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:07,507 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:55:07,508 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:08,354 [main:55] - randomType = Function1<List<ShouldBeDisabled>, ShouldBeEnabled>
2021-03-11 10:55:08,355 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:55:08,394 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:08,394 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:08,545 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:08,548 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:08,696 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:08,696 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("tebzr").equals("fqryc")
2021-03-11 10:55:08,696 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:08,697 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:08,882 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:09,016 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:09,017 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals(null).or(false)
2021-03-11 10:55:09,018 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:09,018 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:09,228 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:09,228 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("fuilr")
2021-03-11 10:55:09,229 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:09,229 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:09,428 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:09,430 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).and(true)
2021-03-11 10:55:09,430 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:09,430 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:09,431 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:55:09,431 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:09,431 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:09,576 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:09,576 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:09,577 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("jlqie").not()
2021-03-11 10:55:09,577 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:09,577 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:09,715 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:09,715 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:09,883 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:09,885 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("jwpkt").and(false)
2021-03-11 10:55:09,885 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:55:09,885 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:10,046 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:10,048 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:55:10,187 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:10,188 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).compareTo(true).equals("aphcl")
2021-03-11 10:55:10,188 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:10,189 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:10,373 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:10,374 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:10,511 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:10,512 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("paqra").xor(false)
2021-03-11 10:55:10,513 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:10,513 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:10,689 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:10,691 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).or(false)
2021-03-11 10:55:10,691 [main:63] - replacement of false of type Boolean is false
2021-03-11 10:55:10,858 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 10:55:10,869 [main:56] - replacing ("BOOYA", String)
2021-03-11 10:55:10,871 [main:38] - replacing "BOOYA" String
2021-03-11 10:55:10,871 [main:42] - Getting value of type String
2021-03-11 10:55:11,064 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:55:11,066 [main:46] - GENERATED VALUE OF TYPE String = "vjjes"
2021-03-11 10:55:11,066 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:11,389 [main:55] - randomType = Short?
2021-03-11 10:55:11,548 [main:302] - generating value of type = Short true depth = 0
2021-03-11 10:55:11,682 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@318b33d9]
2021-03-11 10:55:11,813 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:55:11,815 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:55:11,957 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:55:11,959 [main:66] - Generated call from random type = (12522)?.compareTo(-36).toString(-1199086069)
2021-03-11 10:55:11,969 [main:94] - GETTING String from Boolean
2021-03-11 10:55:11,989 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:55:11,989 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:12,137 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:12,138 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:55:12,333 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:55:12,335 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).toString(-1423686091)
2021-03-11 10:55:12,336 [main:63] - replacement of "BOOYA" of type String is (12522)?.compareTo(-36).toString(-1199086069)
2021-03-11 10:55:12,493 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:12,494 [main:66] - Compilation checking started
2021-03-11 10:55:13,824 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert(l()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus(false)
    if (c.checkTrue()) return "FAIL 0"
    if (c.checkTrueWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return "FAIL 5"
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        c.checkFalseWithMessage()
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:13,832 [main:56] - replacing (l, Function0<Boolean>)
2021-03-11 10:55:13,832 [main:38] - replacing l Function0<Boolean>
2021-03-11 10:55:13,833 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:55:14,019 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:55:14,021 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:55:14,022 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 10:55:14,022 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:14,457 [main:55] - randomType = MutableMap<Checker, Float>
2021-03-11 10:55:14,460 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:14,480 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:14,482 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:55:14,492 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:14,495 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:14,498 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:14,500 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:14,502 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:14,503 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:14,505 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:14,507 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:14,509 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:14,511 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:14,512 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:55:14,513 [main:63] - replacement of l of type Function0<Boolean> is { false}
2021-03-11 10:55:14,668 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:55:14,669 [main:66] - Compilation checking started
2021-03-11 10:55:15,612 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert(l()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus(false)
    if (c.checkTrue()) return "FAIL 0"
    if (c.checkTrueWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return "FAIL 5"
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        c.checkFalseWithMessage()
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:15,617 [main:56] - replacing (l(), Boolean)
2021-03-11 10:55:15,621 [main:38] - replacing l() Boolean
2021-03-11 10:55:15,622 [main:42] - Getting value of type Boolean
2021-03-11 10:55:15,827 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:15,829 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:55:15,830 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:16,098 [main:55] - randomType = Set<String>
2021-03-11 10:55:16,098 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:55:16,115 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:16,115 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:16,256 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:16,257 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:16,257 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("pjuna").not()
2021-03-11 10:55:16,257 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:16,257 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:16,421 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:16,422 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("kspkz")
2021-03-11 10:55:16,422 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:16,422 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:16,575 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:16,577 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).xor(true)
2021-03-11 10:55:16,577 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:16,577 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:16,756 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:16,758 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).or(true)
2021-03-11 10:55:16,759 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:16,759 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:16,965 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:16,966 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:17,119 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:17,120 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("iqicr").equals("gjlss")
2021-03-11 10:55:17,120 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:17,120 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:17,289 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:17,289 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:17,433 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:17,435 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("yuikb").or(false)
2021-03-11 10:55:17,436 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:55:17,436 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:17,609 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:17,611 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:55:17,827 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:17,828 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).compareTo(false).equals("sxcvd")
2021-03-11 10:55:17,829 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:17,829 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:18,021 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:18,022 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:18,176 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:18,179 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("kodid").xor(true)
2021-03-11 10:55:18,179 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:18,179 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:18,341 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:18,344 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).and(true)
2021-03-11 10:55:18,344 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:18,344 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:18,528 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:18,528 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:18,710 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:18,713 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("kmeoq").and(true)
2021-03-11 10:55:18,713 [main:63] - replacement of l() of type Boolean is ShouldBeEnabled().checkFalse()
2021-03-11 10:55:18,892 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:18,893 [main:66] - Compilation checking started
2021-03-11 10:55:19,771 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert(l()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus(false)
    if (c.checkTrue()) return "FAIL 0"
    if (c.checkTrueWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return "FAIL 5"
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        c.checkFalseWithMessage()
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:19,779 [main:56] - replacing ("FAIL 5", String)
2021-03-11 10:55:19,779 [main:38] - replacing "FAIL 5" String
2021-03-11 10:55:19,779 [main:42] - Getting value of type String
2021-03-11 10:55:19,923 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:55:19,925 [main:46] - GENERATED VALUE OF TYPE String = "lxbml"
2021-03-11 10:55:19,925 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:20,314 [main:55] - randomType = Char?
2021-03-11 10:55:20,495 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:55:20,552 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Char defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@547ced09]
2021-03-11 10:55:20,553 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e21702]
2021-03-11 10:55:20,554 [main:66] - Generated call from random type = ('')?.dec().titlecase()
2021-03-11 10:55:20,554 [main:63] - replacement of "FAIL 5" of type String is ('')?.dec().titlecase()
2021-03-11 10:55:20,719 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:20,720 [main:66] - Compilation checking started
2021-03-11 10:55:21,504 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert(l()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus(false)
    if (c.checkTrue()) return "FAIL 0"
    if (c.checkTrueWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        c.checkFalseWithMessage()
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:21,509 [main:56] - replacing (hit, Boolean)
2021-03-11 10:55:21,509 [main:38] - replacing hit Boolean
2021-03-11 10:55:21,509 [main:42] - Getting value of type Boolean
2021-03-11 10:55:21,643 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:21,645 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:55:21,645 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:22,206 [main:55] - randomType = Collection<ShouldBeEnabled?>
2021-03-11 10:55:22,206 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:55:22,223 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:22,224 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:22,360 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:22,361 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("nvzwt")
2021-03-11 10:55:22,361 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:22,361 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:22,361 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).not()
2021-03-11 10:55:22,361 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:22,361 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:22,500 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:22,502 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).or(false)
2021-03-11 10:55:22,502 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:22,502 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:22,632 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:22,633 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).xor(true)
2021-03-11 10:55:22,634 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:55:22,634 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:22,811 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:22,813 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:55:22,943 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:22,944 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).compareTo(false).equals("sijdt")
2021-03-11 10:55:22,944 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:22,944 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:23,057 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:23,057 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:23,174 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:23,176 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("ivokh").and(true)
2021-03-11 10:55:23,176 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:23,176 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:23,295 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:23,296 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:23,433 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:23,435 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("yrwxs").or(false)
2021-03-11 10:55:23,435 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:23,435 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:23,591 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:23,591 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:23,709 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:23,709 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("ssudu").equals("gttun")
2021-03-11 10:55:23,710 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:23,710 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:23,824 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:23,824 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:23,944 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:23,946 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("bhxll").xor(false)
2021-03-11 10:55:23,947 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:23,947 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:24,151 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:24,153 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).and(false)
2021-03-11 10:55:24,154 [main:63] - replacement of hit of type Boolean is false
2021-03-11 10:55:24,271 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 10:55:24,272 [main:66] - Compilation checking started
2021-03-11 10:55:25,031 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert(l()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus(false)
    if (c.checkTrue()) return "FAIL 0"
    if (c.checkTrueWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        c.checkFalseWithMessage()
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:25,036 [main:56] - replacing (c.checkTrueWithMessage(), Boolean)
2021-03-11 10:55:25,036 [main:38] - replacing c.checkTrueWithMessage() Boolean
2021-03-11 10:55:25,036 [main:42] - Getting value of type Boolean
2021-03-11 10:55:25,147 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:25,148 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:55:25,148 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:25,539 [main:55] - randomType = MutableMap<String, ShouldBeEnabled>
2021-03-11 10:55:25,541 [main:94] - GETTING Boolean from Checker
2021-03-11 10:55:25,548 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:25,548 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:55:25,549 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:25,670 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:25,671 [main:105] - GENERATED CALL = (c).checkTrue().equals("jeoli")
2021-03-11 10:55:25,671 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:25,671 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:55:25,671 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:25,777 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:25,778 [main:105] - GENERATED CALL = (c).checkTrue().xor(false)
2021-03-11 10:55:25,779 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:25,779 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:55:25,779 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:25,882 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:25,884 [main:105] - GENERATED CALL = (c).checkTrue().and(true)
2021-03-11 10:55:25,884 [main:101] - Case = [public abstract fun checkFalseWithMessage(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@5d8c86b]]
2021-03-11 10:55:25,884 [main:137] - GENERATING call of type public abstract fun checkFalseWithMessage(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@5d8c86b]
2021-03-11 10:55:25,884 [main:105] - GENERATED CALL = (c).checkFalseWithMessage()
2021-03-11 10:55:25,884 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:25,884 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:55:25,884 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:25,885 [main:105] - GENERATED CALL = (c).checkTrue().not()
2021-03-11 10:55:25,885 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Checker[DeserializedSimpleFunctionDescriptor@e1cc4e5]]
2021-03-11 10:55:25,885 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Checker[DeserializedSimpleFunctionDescriptor@e1cc4e5]
2021-03-11 10:55:26,058 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:26,059 [main:105] - GENERATED CALL = (c).equals("skfnh")
2021-03-11 10:55:26,059 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:26,059 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:55:26,060 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:26,174 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:26,175 [main:105] - GENERATED CALL = (c).checkTrue().or(false)
2021-03-11 10:55:26,175 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]]
2021-03-11 10:55:26,175 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:55:26,176 [main:105] - GENERATED CALL = (c).checkTrue()
2021-03-11 10:55:26,176 [main:101] - Case = [public abstract fun checkFalse(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@696a33ee]]
2021-03-11 10:55:26,176 [main:137] - GENERATING call of type public abstract fun checkFalse(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@696a33ee]
2021-03-11 10:55:26,176 [main:105] - GENERATED CALL = (c).checkFalse()
2021-03-11 10:55:26,176 [main:101] - Case = [public abstract fun checkTrueWithMessage(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@3192c24f]]
2021-03-11 10:55:26,176 [main:137] - GENERATING call of type public abstract fun checkTrueWithMessage(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@3192c24f]
2021-03-11 10:55:26,176 [main:105] - GENERATED CALL = (c).checkTrueWithMessage()
2021-03-11 10:55:26,176 [main:63] - replacement of c.checkTrueWithMessage() of type Boolean is (c).checkFalseWithMessage()
2021-03-11 10:55:26,279 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:26,280 [main:66] - Compilation checking started
2021-03-11 10:55:26,809 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert(l()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus(false)
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        c.checkFalseWithMessage()
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:26,817 [main:56] - replacing (l, Function0<Boolean>)
2021-03-11 10:55:26,817 [main:38] - replacing l Function0<Boolean>
2021-03-11 10:55:26,817 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:55:26,960 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:55:26,962 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:55:26,963 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 10:55:26,964 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:27,214 [main:55] - randomType = ULong?
2021-03-11 10:55:27,323 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:55:27,389 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:27,406 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:27,407 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:27,409 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:27,410 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:27,412 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:27,413 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:27,414 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:55:27,421 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:27,423 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:27,424 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:55:27,425 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:27,426 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:27,427 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:27,427 [main:63] - replacement of l of type Function0<Boolean> is { false}
2021-03-11 10:55:27,526 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:55:27,527 [main:66] - Compilation checking started
2021-03-11 10:55:28,143 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus(false)
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        c.checkFalseWithMessage()
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:28,150 [main:56] - replacing (l, Function0<Boolean>)
2021-03-11 10:55:28,152 [main:38] - replacing l Function0<Boolean>
2021-03-11 10:55:28,152 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:55:28,275 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:55:28,276 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:55:28,277 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 10:55:28,277 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:28,512 [main:55] - randomType = Collection<ShouldBeDisabled>
2021-03-11 10:55:28,514 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:28,531 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:28,532 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:28,533 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:28,535 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:28,536 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:55:28,543 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:28,544 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:28,545 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:28,547 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:28,549 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:28,551 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:28,553 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:55:28,555 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:28,555 [main:63] - replacement of l of type Function0<Boolean> is { false}
2021-03-11 10:55:28,667 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:55:28,667 [main:66] - Compilation checking started
2021-03-11 10:55:29,232 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus(false)
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        c.checkFalseWithMessage()
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:29,238 [main:56] - replacing (true, Boolean)
2021-03-11 10:55:29,238 [main:38] - replacing true Boolean
2021-03-11 10:55:29,238 [main:42] - Getting value of type Boolean
2021-03-11 10:55:29,352 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:29,353 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:55:29,354 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:29,580 [main:55] - randomType = ULong?
2021-03-11 10:55:29,682 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:55:29,731 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@360f365f]
2021-03-11 10:55:29,732 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2d2cae4a]
2021-03-11 10:55:29,842 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:29,843 [main:66] - Generated call from random type = (8733960891991013021.toULong())?.toUShort().equals("pppud")
2021-03-11 10:55:29,843 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:55:29,859 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:29,859 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:30,023 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:30,028 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:30,028 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("rwege").not()
2021-03-11 10:55:30,028 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:30,028 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:30,144 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:30,244 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:30,245 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals(null).equals("gmilb")
2021-03-11 10:55:30,245 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:30,245 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:30,366 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:30,368 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).or(false)
2021-03-11 10:55:30,369 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:55:30,369 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:30,483 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:30,484 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:55:30,604 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:30,605 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).compareTo(true).equals("qurwx")
2021-03-11 10:55:30,605 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:30,605 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:30,714 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:30,715 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("dxyth")
2021-03-11 10:55:30,715 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:30,715 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:30,715 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).not()
2021-03-11 10:55:30,716 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:30,716 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:30,832 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:30,835 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).xor(false)
2021-03-11 10:55:30,836 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:30,836 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:30,972 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:30,972 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:31,072 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:31,074 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("jsbbp").and(true)
2021-03-11 10:55:31,074 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:31,074 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:31,198 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:31,200 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).and(true)
2021-03-11 10:55:31,200 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:31,200 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:31,314 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:31,314 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:31,430 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:31,433 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("glbwi").or(false)
2021-03-11 10:55:31,433 [main:63] - replacement of true of type Boolean is (ShouldBeDisabled().checkFalse()).equals("rwege").not()
2021-03-11 10:55:31,532 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:31,533 [main:66] - Compilation checking started
2021-03-11 10:55:32,094 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus(false)
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        c.checkFalseWithMessage()
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:32,099 [main:56] - replacing ({ false}(), Boolean)
2021-03-11 10:55:32,100 [main:38] - replacing { false}() Boolean
2021-03-11 10:55:32,100 [main:42] - Getting value of type Boolean
2021-03-11 10:55:32,218 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:32,220 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:55:32,220 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:32,337 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:55:32,452 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:55:32,454 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}
2021-03-11 10:55:32,467 [main:137] - GENERATING call of type public open fun checkTrue(): kotlin.Boolean defined in ShouldBeEnabled[SimpleFunctionDescriptorImpl@19b6201f]
2021-03-11 10:55:32,467 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:32,585 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:32,586 [main:66] - Generated call from random type = (ShouldBeEnabled()).checkTrue().equals("jvvry")
2021-03-11 10:55:32,586 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:55:32,602 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:32,602 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:32,710 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:32,712 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).and(false)
2021-03-11 10:55:32,712 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:32,712 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:32,712 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).not()
2021-03-11 10:55:32,712 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:32,712 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:32,812 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:32,813 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:32,951 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:32,954 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("iszsz").xor(false)
2021-03-11 10:55:32,954 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:32,954 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:33,064 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:33,066 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).or(false)
2021-03-11 10:55:33,066 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:33,066 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:33,168 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:33,168 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:33,269 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:33,271 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("cuihs").or(true)
2021-03-11 10:55:33,271 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:33,271 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:33,375 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:33,375 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:33,505 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:33,507 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("reahm").and(true)
2021-03-11 10:55:33,507 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:55:33,507 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:33,618 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:33,620 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:55:33,721 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:33,722 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).compareTo(false).equals("wmced")
2021-03-11 10:55:33,722 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:33,722 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:33,823 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:33,823 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:33,823 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not()
2021-03-11 10:55:33,824 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:33,824 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:33,924 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:33,925 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).xor(true)
2021-03-11 10:55:33,925 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:33,925 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:34,065 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:34,066 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:34,194 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:34,194 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("yvmcq").equals("firao")
2021-03-11 10:55:34,194 [main:63] - replacement of { false}() of type Boolean is (ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not()
2021-03-11 10:55:34,290 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:34,290 [main:66] - Compilation checking started
2021-03-11 10:55:34,777 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus(false)
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        c.checkFalseWithMessage()
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:34,785 [main:56] - replacing (false, Boolean)
2021-03-11 10:55:34,787 [main:38] - replacing false Boolean
2021-03-11 10:55:34,787 [main:42] - Getting value of type Boolean
2021-03-11 10:55:34,898 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:34,899 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:55:34,900 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:35,018 [main:55] - randomType = Double
2021-03-11 10:55:35,119 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:55:35,176 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a538872]
2021-03-11 10:55:35,176 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5204de98]
2021-03-11 10:55:35,276 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:35,277 [main:66] - Generated call from random type = (0.610839283824019).toDouble().equals("prfyq")
2021-03-11 10:55:35,277 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:55:35,286 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:35,286 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:35,385 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:35,385 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:35,386 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("xijtz").not()
2021-03-11 10:55:35,386 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:35,386 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:35,486 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:35,486 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:35,586 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:35,587 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("imdih").or(true)
2021-03-11 10:55:35,588 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:35,588 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:35,706 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:35,708 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).and(true)
2021-03-11 10:55:35,709 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:35,709 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:35,843 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:35,844 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:35,977 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:35,980 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("cqtru").xor(false)
2021-03-11 10:55:35,980 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:35,980 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:36,143 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:36,145 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).xor(false)
2021-03-11 10:55:36,145 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:36,145 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:36,279 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:36,279 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:36,380 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:36,382 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("rudej").and(false)
2021-03-11 10:55:36,382 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:36,382 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:36,511 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:36,511 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:36,661 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:36,662 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("zxfrz").equals("cjgkk")
2021-03-11 10:55:36,662 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:36,662 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:36,790 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:36,790 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("zwuvj")
2021-03-11 10:55:36,790 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:55:36,790 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:36,917 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:36,918 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:55:37,033 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:37,033 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).compareTo(true).equals("ddhbo")
2021-03-11 10:55:37,034 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:37,034 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:37,034 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:55:37,034 [main:63] - replacement of false of type Boolean is ShouldBeEnabled().checkTrue()
2021-03-11 10:55:37,177 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:37,177 [main:66] - Compilation checking started
2021-03-11 10:55:37,695 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus(false)
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        c.checkFalseWithMessage()
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:37,700 [main:56] - replacing (false, Boolean)
2021-03-11 10:55:37,700 [main:38] - replacing false Boolean
2021-03-11 10:55:37,700 [main:42] - Getting value of type Boolean
2021-03-11 10:55:37,806 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:37,807 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:55:37,807 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:37,812 [main:55] - randomType = Checker
2021-03-11 10:55:37,812 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:55:37,829 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:37,829 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:37,977 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:37,978 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:38,090 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:38,091 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("lxrms").equals("vadln")
2021-03-11 10:55:38,091 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:38,091 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:38,091 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:55:38,091 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:38,091 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:38,218 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:38,220 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(false)
2021-03-11 10:55:38,220 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:38,221 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:38,327 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:38,467 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:38,470 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals(null).and(true)
2021-03-11 10:55:38,470 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:38,470 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:38,567 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:38,568 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:38,568 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("eryks").not()
2021-03-11 10:55:38,568 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:38,568 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:38,705 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:38,707 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
2021-03-11 10:55:38,708 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:38,708 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:38,820 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:38,821 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("zcqyx")
2021-03-11 10:55:38,821 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:38,821 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:38,932 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:38,932 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:39,048 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:39,050 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("cvzqc").or(false)
2021-03-11 10:55:39,050 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:39,050 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:39,155 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:39,155 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:39,289 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:39,292 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("ghrdu").xor(false)
2021-03-11 10:55:39,293 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:55:39,293 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:39,441 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:39,443 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:55:39,543 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:39,544 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi")
2021-03-11 10:55:39,544 [main:63] - replacement of false of type Boolean is (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi")
2021-03-11 10:55:39,660 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:39,661 [main:66] - Compilation checking started
2021-03-11 10:55:40,179 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        c.checkFalseWithMessage()
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:40,188 [main:56] - replacing (c.checkFalseWithMessage(), Boolean)
2021-03-11 10:55:40,188 [main:38] - replacing c.checkFalseWithMessage() Boolean
2021-03-11 10:55:40,188 [main:42] - Getting value of type Boolean
2021-03-11 10:55:40,317 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:40,319 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:55:40,319 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:40,555 [main:55] - randomType = ULong?
2021-03-11 10:55:40,658 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:55:40,730 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7c8edc68]
2021-03-11 10:55:40,731 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@56f53541]
2021-03-11 10:55:40,731 [main:66] - Generated call from random type = (4780193735885279260.toULong())?.toFloat().isInfinite()
2021-03-11 10:55:40,731 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:55:40,747 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:40,747 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:40,845 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:40,846 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).xor(false)
2021-03-11 10:55:40,846 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:40,846 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:40,955 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:40,956 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:40,956 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("uejah").not()
2021-03-11 10:55:40,956 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:40,956 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:41,056 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:41,057 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:41,158 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:41,160 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
2021-03-11 10:55:41,160 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:41,160 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:41,258 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals(null)
2021-03-11 10:55:41,259 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:41,259 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:41,359 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:41,360 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(false)
2021-03-11 10:55:41,360 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:41,360 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:41,502 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:41,503 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:41,604 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:41,604 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("effki").equals("oujxr")
2021-03-11 10:55:41,604 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:41,604 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:41,701 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:41,702 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:41,795 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:41,797 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("kpiad").and(true)
2021-03-11 10:55:41,797 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:41,797 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:41,891 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:41,892 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:41,992 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:41,993 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("zuvdh").xor(true)
2021-03-11 10:55:41,993 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:41,993 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:42,115 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:42,117 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(true)
2021-03-11 10:55:42,117 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:55:42,117 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:42,242 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:42,244 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:55:42,348 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:42,349 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(false).equals("qbwej")
2021-03-11 10:55:42,349 [main:63] - replacement of c.checkFalseWithMessage() of type Boolean is (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
2021-03-11 10:55:42,445 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:42,446 [main:66] - Compilation checking started
2021-03-11 10:55:42,911 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:42,917 [main:56] - replacing ({ false}(), Boolean)
2021-03-11 10:55:42,917 [main:38] - replacing { false}() Boolean
2021-03-11 10:55:42,917 [main:42] - Getting value of type Boolean
2021-03-11 10:55:43,016 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:43,018 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:55:43,018 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:43,261 [main:55] - randomType = ArrayDeque<Checker?>
2021-03-11 10:55:43,357 [main:302] - generating value of type = ArrayDeque<Checker?> false depth = 0
2021-03-11 10:55:43,469 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Checker?> = TODO()
2021-03-11 10:55:43,472 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Checker?> = TODO()
2021-03-11 10:55:43,696 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:55:43,698 [main:95] - GENERATED = ArrayDeque<Checker?>(2127292989)
2021-03-11 10:55:43,979 [main:137] - GENERATING call of type public open fun contains(element: Checker?): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@528bb13e]
2021-03-11 10:55:44,115 [main:302] - generating value of type = Checker false depth = 0
2021-03-11 10:55:44,117 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:55:44,360 [main:302] - generating value of type = ShouldBeDisabled false depth = 2
2021-03-11 10:55:44,361 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert({ false}()) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}
2021-03-11 10:55:44,361 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:44,463 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:44,464 [main:66] - Generated call from random type = (ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)
2021-03-11 10:55:44,464 [main:63] - replacement of { false}() of type Boolean is (ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)
2021-03-11 10:55:44,562 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:44,562 [main:66] - Compilation checking started
2021-03-11 10:55:45,121 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:45,130 [main:56] - replacing ({ hit = true; false }, Function0<Boolean>)
2021-03-11 10:55:45,131 [main:38] - replacing { hit = true; false } Function0<Boolean>
2021-03-11 10:55:45,131 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:55:45,291 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:55:45,293 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:55:45,294 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 10:55:45,295 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:45,300 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:55:45,442 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:55:45,444 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}
2021-03-11 10:55:45,461 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:45,479 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:45,482 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:55:45,489 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:45,491 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:45,492 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:45,494 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:45,495 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:45,496 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:45,498 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:45,499 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:45,500 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:55:45,501 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:45,502 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:45,503 [main:63] - replacement of { hit = true; false } of type Function0<Boolean> is { false}
2021-03-11 10:55:45,630 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:55:45,631 [main:66] - Compilation checking started
2021-03-11 10:55:46,174 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass(if (v) "ShouldBeEnabled" else "ShouldBeDisabled")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:46,182 [main:56] - replacing (if (v) "ShouldBeEnabled" else "ShouldBeDisabled", String)
2021-03-11 10:55:46,183 [main:38] - replacing if (v) "ShouldBeEnabled" else "ShouldBeDisabled" String
2021-03-11 10:55:46,183 [main:42] - Getting value of type String
2021-03-11 10:55:46,300 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:55:46,302 [main:46] - GENERATED VALUE OF TYPE String = "gxxyr"
2021-03-11 10:55:46,302 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:46,421 [main:55] - randomType = UShort
2021-03-11 10:55:46,532 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:55:46,583 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1fce5f6d]
2021-03-11 10:55:46,583 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@423ef582]
2021-03-11 10:55:46,688 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:55:46,690 [main:66] - Generated call from random type = (13653.toUShort()).toUByte().toString(-506245285)
2021-03-11 10:55:46,691 [main:94] - GETTING String from Checker
2021-03-11 10:55:46,711 [main:94] - GETTING String from Boolean
2021-03-11 10:55:46,728 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:55:46,728 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:46,848 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:46,850 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:55:46,957 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:55:46,958 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).compareTo(true).toString(-257871691)
2021-03-11 10:55:46,958 [main:63] - replacement of if (v) "ShouldBeEnabled" else "ShouldBeDisabled" of type String is "gxxyr"
2021-03-11 10:55:47,075 [main:33] - Trying to replace Element(IF) on Element(STRING_TEMPLATE)
2021-03-11 10:55:47,075 [main:66] - Compilation checking started
2021-03-11 10:55:47,563 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:47,570 [main:56] - replacing (hit, Boolean)
2021-03-11 10:55:47,570 [main:38] - replacing hit Boolean
2021-03-11 10:55:47,570 [main:42] - Getting value of type Boolean
2021-03-11 10:55:47,676 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:47,677 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:55:47,677 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:47,923 [main:55] - randomType = ArrayDeque<UByte>
2021-03-11 10:55:48,075 [main:302] - generating value of type = ArrayDeque<UByte> false depth = 0
2021-03-11 10:55:48,182 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<UByte> = TODO()
2021-03-11 10:55:48,186 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<UByte> = TODO()
2021-03-11 10:55:48,299 [main:95] - GENERATED = ArrayDeque<UByte>()
2021-03-11 10:55:48,488 [main:137] - GENERATING call of type public open fun addAll(index: kotlin.Int, elements: kotlin.collections.Collection<kotlin.UByte>): kotlin.Boolean defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@3e93c6]
2021-03-11 10:55:48,590 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:55:48,695 [main:302] - generating value of type = Collection<UByte> false depth = 0
2021-03-11 10:55:48,809 [main:43] - GENERATING CALL OF fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<UByte>.()->kotlin.Unit): Collection<UByte> = TODO()
2021-03-11 10:55:48,812 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<UByte>.()->kotlin.Unit): Collection<UByte> = TODO()
2021-03-11 10:55:49,272 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:55:49,273 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<UByte>, Unit> false depth = 3
2021-03-11 10:55:49,275 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 10:55:49,379 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:55:49,381 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:55:49,712 [main:302] - generating value of type = Boolean true depth = 7
2021-03-11 10:55:49,714 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-11 10:55:49,715 [main:302] - generating value of type = Any false depth = 8
2021-03-11 10:55:49,715 [main:95] - GENERATED = require(true, { "mxsec"})
2021-03-11 10:55:49,715 [main:95] - GENERATED = buildList<UByte>(442297315, { require(true, { "mxsec"})})
2021-03-11 10:55:49,716 [main:66] - Generated call from random type = (ArrayDeque<UByte>()).addAll(657147323, buildList<UByte>(442297315, { require(true, { "mxsec"})}))
2021-03-11 10:55:49,716 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:55:49,729 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:49,729 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:49,826 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals(null)
2021-03-11 10:55:49,826 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:49,826 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:49,948 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:49,950 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).or(true)
2021-03-11 10:55:49,950 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:49,950 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:50,073 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:50,074 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:50,179 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:50,180 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("fmxmm").and(false)
2021-03-11 10:55:50,181 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:50,181 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:50,283 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:50,283 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:50,283 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("ujnjg").not()
2021-03-11 10:55:50,283 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:50,283 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:50,382 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:50,382 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:50,480 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:50,481 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("omlxr").equals("mmiaa")
2021-03-11 10:55:50,481 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:50,481 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:50,582 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:50,583 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).xor(true)
2021-03-11 10:55:50,583 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:55:50,583 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:50,701 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:50,702 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:55:50,823 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:50,823 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).compareTo(false).equals("ehxup")
2021-03-11 10:55:50,823 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:50,823 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:50,930 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:50,930 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:51,034 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:51,036 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("lfnsu").xor(true)
2021-03-11 10:55:51,036 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:51,036 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:51,139 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:51,139 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:51,242 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:51,244 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("yxuxp").or(true)
2021-03-11 10:55:51,244 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:51,244 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:51,244 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:55:51,244 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkTrue()).equals("lfnsu").xor(true)
2021-03-11 10:55:51,390 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:51,391 [main:66] - Compilation checking started
2021-03-11 10:55:51,730 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { (ShouldBeEnabled().checkTrue()).equals("lfnsu").xor(true) = true; ShouldBeEnabled().checkTrue() }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:51,736 [main:56] - replacing (hit, Boolean)
2021-03-11 10:55:51,736 [main:38] - replacing hit Boolean
2021-03-11 10:55:51,736 [main:42] - Getting value of type Boolean
2021-03-11 10:55:51,843 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:51,845 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:55:51,845 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:51,957 [main:55] - randomType = ShouldBeDisabled?
2021-03-11 10:55:52,055 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 10:55:52,057 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}
2021-03-11 10:55:52,065 [main:137] - GENERATING call of type public open fun checkTrue(): kotlin.Boolean defined in ShouldBeDisabled[SimpleFunctionDescriptorImpl@2bff3495]
2021-03-11 10:55:52,065 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:52,065 [main:66] - Generated call from random type = (ShouldBeDisabled())?.checkTrue().not()
2021-03-11 10:55:52,065 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:55:52,076 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:52,076 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:52,177 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:52,178 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:52,276 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:52,277 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("ngdgo").equals("mhaty")
2021-03-11 10:55:52,277 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:52,277 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:52,402 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:52,403 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:52,503 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:52,505 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("jajsu").and(false)
2021-03-11 10:55:52,505 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:52,505 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:52,603 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:52,604 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:52,707 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:52,709 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("kgxob").xor(true)
2021-03-11 10:55:52,709 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:52,709 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:52,709 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:55:52,709 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:55:52,709 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:52,808 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:52,810 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:55:52,922 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:52,922 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).compareTo(true).equals("crddl")
2021-03-11 10:55:52,922 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:52,922 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:53,018 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:53,018 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("afkoi")
2021-03-11 10:55:53,019 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:53,019 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:53,119 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:53,120 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:53,120 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("dxjwj").not()
2021-03-11 10:55:53,120 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:53,120 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:53,263 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:53,264 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).xor(true)
2021-03-11 10:55:53,264 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:53,264 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:53,375 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:53,376 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).or(false)
2021-03-11 10:55:53,377 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:53,377 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:53,476 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:53,478 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).and(false)
2021-03-11 10:55:53,478 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:55:53,575 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:53,575 [main:66] - Compilation checking started
2021-03-11 10:55:53,861 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { (ShouldBeEnabled().checkTrue()).not() = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "BOOYA" }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:53,867 [main:56] - replacing ("BOOYA", String)
2021-03-11 10:55:53,867 [main:38] - replacing "BOOYA" String
2021-03-11 10:55:53,867 [main:42] - Getting value of type String
2021-03-11 10:55:53,964 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:55:53,966 [main:46] - GENERATED VALUE OF TYPE String = "ncbdu"
2021-03-11 10:55:53,966 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:54,083 [main:55] - randomType = UShort
2021-03-11 10:55:54,206 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:55:54,249 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@149aa003]
2021-03-11 10:55:54,249 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@710f4006]
2021-03-11 10:55:54,348 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:55:54,350 [main:66] - Generated call from random type = (9547.toUShort()).toShort().toString(-61823542)
2021-03-11 10:55:54,351 [main:94] - GETTING String from Boolean
2021-03-11 10:55:54,360 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:55:54,360 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:54,456 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:54,458 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:55:54,554 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:55:54,556 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).compareTo(true).toString(224194348)
2021-03-11 10:55:54,556 [main:63] - replacement of "BOOYA" of type String is (9547.toUShort()).toShort().toString(-61823542)
2021-03-11 10:55:54,656 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:54,656 [main:66] - Compilation checking started
2021-03-11 10:55:55,149 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:55,159 [main:56] - replacing (hit, Boolean)
2021-03-11 10:55:55,159 [main:38] - replacing hit Boolean
2021-03-11 10:55:55,159 [main:42] - Getting value of type Boolean
2021-03-11 10:55:55,283 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:55,285 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:55:55,286 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:55,296 [main:55] - randomType = Checker?
2021-03-11 10:55:55,296 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:55:55,308 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:55,309 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:55,436 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:55,438 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).and(true)
2021-03-11 10:55:55,438 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:55,438 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:55,536 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:55,536 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:55,637 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:55,639 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("pcikm").and(false)
2021-03-11 10:55:55,639 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:55,639 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:55,752 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:55,754 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).xor(true)
2021-03-11 10:55:55,754 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:55,755 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:55,864 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:55,864 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:55,973 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:55,975 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("ehdvq").or(true)
2021-03-11 10:55:55,975 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:55,975 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:56,075 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:56,075 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:55:56,185 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:56,187 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("mqhho").xor(false)
2021-03-11 10:55:56,187 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:56,187 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:56,285 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:56,286 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).or(true)
2021-03-11 10:55:56,286 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:56,286 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:56,287 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:55:56,287 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:56,287 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:56,403 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:56,516 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:56,517 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals(null).equals("epsss")
2021-03-11 10:55:56,517 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:55:56,517 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:56,619 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:56,620 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:55:56,718 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:56,719 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).compareTo(false).equals("zeskj")
2021-03-11 10:55:56,719 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:56,719 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:56,816 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:56,816 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("goaxw")
2021-03-11 10:55:56,817 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkTrue()).equals(null).equals("epsss")
2021-03-11 10:55:56,913 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:55:56,914 [main:66] - Compilation checking started
2021-03-11 10:55:57,205 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { (ShouldBeEnabled().checkTrue()).equals(null).equals("epsss") = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:57,211 [main:56] - replacing (l, Function0<Boolean>)
2021-03-11 10:55:57,211 [main:38] - replacing l Function0<Boolean>
2021-03-11 10:55:57,211 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:55:57,310 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:55:57,312 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:55:57,313 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 10:55:57,313 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:57,319 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:55:57,434 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:55:57,435 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}
2021-03-11 10:55:57,444 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:57,458 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:57,459 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:57,460 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:57,461 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:57,462 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:57,463 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:57,464 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:57,466 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:55:57,473 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:57,475 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:57,476 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:57,477 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:55:57,478 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:55:57,478 [main:63] - replacement of l of type Function0<Boolean> is { true}
2021-03-11 10:55:57,578 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:55:57,579 [main:66] - Compilation checking started
2021-03-11 10:55:58,056 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert({ true}()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:55:58,066 [main:56] - replacing (true, Boolean)
2021-03-11 10:55:58,067 [main:38] - replacing true Boolean
2021-03-11 10:55:58,067 [main:42] - Getting value of type Boolean
2021-03-11 10:55:58,188 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:58,189 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:55:58,190 [main:49] - GENERATED IS CALL =false
2021-03-11 10:55:58,554 [main:55] - randomType = Pair<Long?, Boolean>
2021-03-11 10:55:58,662 [main:302] - generating value of type = Pair<Long?, Boolean> false depth = 0
2021-03-11 10:55:58,784 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long?, second: Boolean): Pair<Long?, Boolean> = TODO()
2021-03-11 10:55:58,786 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long?, second: Boolean): Pair<Long?, Boolean> = TODO()
2021-03-11 10:55:58,893 [main:302] - generating value of type = Long true depth = 3
2021-03-11 10:55:58,894 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 10:55:58,895 [main:95] - GENERATED = Pair<Long?, Boolean>(843618596803202184, true)
2021-03-11 10:55:58,906 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.io.Serializable[DeserializedSimpleFunctionDescriptor@2cdb38db]
2021-03-11 10:55:59,008 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:59,008 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:59,123 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:59,125 [main:66] - Generated call from random type = (Pair<Long?, Boolean>(843618596803202184, true)).equals("munbr").or(false)
2021-03-11 10:55:59,125 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:55:59,139 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:59,139 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:59,139 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:55:59,139 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:55:59,139 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:59,241 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:55:59,241 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals(null).not()
2021-03-11 10:55:59,241 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:55:59,241 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:55:59,344 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:59,345 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:55:59,457 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:59,457 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("fguxw").equals("killx")
2021-03-11 10:55:59,458 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:55:59,458 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:55:59,564 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:59,566 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(false)
2021-03-11 10:55:59,566 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:55:59,566 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:55:59,670 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:59,672 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:55:59,818 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:55:59,818 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("tnbkg")
2021-03-11 10:55:59,819 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:55:59,819 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:55:59,947 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:55:59,948 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(false)
2021-03-11 10:55:59,948 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:55:59,948 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:00,054 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:00,055 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:00,160 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:00,161 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("jauwr").xor(true)
2021-03-11 10:56:00,162 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:00,162 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:00,263 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:00,263 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("ueply")
2021-03-11 10:56:00,263 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:00,263 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:00,366 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:00,366 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:00,464 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:00,465 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("femtp").and(false)
2021-03-11 10:56:00,466 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:00,466 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:00,565 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:00,565 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:00,668 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:00,669 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false)
2021-03-11 10:56:00,670 [main:63] - replacement of true of type Boolean is (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false)
2021-03-11 10:56:00,793 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:00,794 [main:66] - Compilation checking started
2021-03-11 10:56:01,271 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; false }
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert({ true}()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:01,278 [main:56] - replacing ({ hit = true; false }, Function0<Boolean>)
2021-03-11 10:56:01,279 [main:38] - replacing { hit = true; false } Function0<Boolean>
2021-03-11 10:56:01,279 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:56:01,399 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:56:01,401 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:56:01,403 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 10:56:01,404 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:01,654 [main:55] - randomType = HashSet<Checker>
2021-03-11 10:56:01,763 [main:302] - generating value of type = HashSet<Checker> false depth = 0
2021-03-11 10:56:01,872 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): HashSet<Checker> = TODO()
2021-03-11 10:56:01,875 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): HashSet<Checker> = TODO()
2021-03-11 10:56:02,111 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:56:02,112 [main:95] - GENERATED = LinkedHashSet<Checker>(-1634402335)
2021-03-11 10:56:02,279 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:02,295 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:02,297 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:02,298 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:02,299 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:02,300 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:02,302 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:56:02,307 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:02,308 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:02,310 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:56:02,311 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:02,312 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:02,313 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:02,315 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:02,315 [main:63] - replacement of { hit = true; false } of type Function0<Boolean> is { true}
2021-03-11 10:56:02,417 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:56:02,418 [main:66] - Compilation checking started
2021-03-11 10:56:02,873 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert({ true}()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:02,883 [main:56] - replacing ("BOOYA", String)
2021-03-11 10:56:02,885 [main:38] - replacing "BOOYA" String
2021-03-11 10:56:02,885 [main:42] - Getting value of type String
2021-03-11 10:56:03,006 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:56:03,007 [main:46] - GENERATED VALUE OF TYPE String = "yhftd"
2021-03-11 10:56:03,008 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:03,013 [main:55] - randomType = Checker
2021-03-11 10:56:03,014 [main:94] - GETTING String from Checker
2021-03-11 10:56:03,020 [main:94] - GETTING String from Boolean
2021-03-11 10:56:03,034 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:56:03,034 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:03,134 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:03,136 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:56:03,236 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:56:03,237 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).compareTo(false).toString(1618298610)
2021-03-11 10:56:03,238 [main:63] - replacement of "BOOYA" of type String is "yhftd"
2021-03-11 10:56:03,347 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 10:56:03,348 [main:66] - Compilation checking started
2021-03-11 10:56:03,787 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "yhftd" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert({ true}()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return "FAIL 1"
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:03,798 [main:56] - replacing ("FAIL 1", String)
2021-03-11 10:56:03,798 [main:38] - replacing "FAIL 1" String
2021-03-11 10:56:03,798 [main:42] - Getting value of type String
2021-03-11 10:56:03,904 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:56:03,905 [main:46] - GENERATED VALUE OF TYPE String = "xeqff"
2021-03-11 10:56:03,905 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:04,014 [main:55] - randomType = UByte
2021-03-11 10:56:04,113 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:56:04,157 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4d20108]
2021-03-11 10:56:04,158 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ab2725]
2021-03-11 10:56:04,262 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:56:04,263 [main:66] - Generated call from random type = (81.toUByte()).toLong().toString(-191125192)
2021-03-11 10:56:04,263 [main:63] - replacement of "FAIL 1" of type String is (81.toUByte()).toLong().toString(-191125192)
2021-03-11 10:56:04,362 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:04,362 [main:66] - Compilation checking started
2021-03-11 10:56:04,862 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "yhftd" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert({ true}()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:04,870 [main:56] - replacing (c.newInstance() as Checker, Checker)
2021-03-11 10:56:04,870 [main:38] - replacing c.newInstance() as Checker Checker
2021-03-11 10:56:04,870 [main:42] - Getting value of type Checker
2021-03-11 10:56:04,984 [main:302] - generating value of type = Checker false depth = 0
2021-03-11 10:56:04,985 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:56:05,200 [main:302] - generating value of type = ShouldBeEnabled false depth = 2
2021-03-11 10:56:05,202 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert({ true}()) { "BOOYA" }
        }
        return hit
    }
}
2021-03-11 10:56:05,202 [main:46] - GENERATED VALUE OF TYPE Checker = ShouldBeEnabled()
2021-03-11 10:56:05,203 [main:49] - GENERATED IS CALL =true
2021-03-11 10:56:05,316 [main:55] - randomType = ShouldBeEnabled?
2021-03-11 10:56:05,416 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:56:05,418 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert({ true}()) { "BOOYA" }
        }
        return hit
    }
}
2021-03-11 10:56:05,428 [main:94] - GETTING Checker from Boolean
2021-03-11 10:56:05,440 [main:94] - GETTING Checker from Boolean
2021-03-11 10:56:05,441 [main:94] - GETTING Checker from Boolean
2021-03-11 10:56:05,441 [main:94] - GETTING Checker from Boolean
2021-03-11 10:56:05,442 [main:94] - GETTING Checker from Boolean
2021-03-11 10:56:05,443 [main:94] - GETTING Checker from Boolean
2021-03-11 10:56:05,443 [main:94] - GETTING Checker from Boolean
2021-03-11 10:56:05,444 [main:94] - GETTING Checker from Boolean
2021-03-11 10:56:05,444 [main:94] - GETTING Checker from Boolean
2021-03-11 10:56:05,444 [main:94] - GETTING Checker from Checker
2021-03-11 10:56:05,449 [main:63] - replacement of c.newInstance() as Checker of type Checker is c
2021-03-11 10:56:05,549 [main:33] - Trying to replace Element(BINARY_WITH_TYPE) on Element(REFERENCE_EXPRESSION)
2021-03-11 10:56:05,550 [main:66] - Compilation checking started
2021-03-11 10:56:05,858 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "yhftd" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert({ true}()) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:05,865 [main:56] - replacing ({ true}(), Boolean)
2021-03-11 10:56:05,866 [main:38] - replacing { true}() Boolean
2021-03-11 10:56:05,866 [main:42] - Getting value of type Boolean
2021-03-11 10:56:05,989 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:05,990 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:56:05,990 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:06,105 [main:55] - randomType = ShouldBeEnabled?
2021-03-11 10:56:06,205 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:56:06,207 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert({ true}()) { "BOOYA" }
        }
        return hit
    }
}
2021-03-11 10:56:06,215 [main:137] - GENERATING call of type public open fun checkTrueWithMessage(): kotlin.Boolean defined in ShouldBeEnabled[SimpleFunctionDescriptorImpl@16868413]
2021-03-11 10:56:06,215 [main:66] - Generated call from random type = (ShouldBeEnabled())?.checkTrueWithMessage()
2021-03-11 10:56:06,216 [main:94] - GETTING Boolean from Checker
2021-03-11 10:56:06,221 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]]
2021-03-11 10:56:06,222 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:56:06,222 [main:105] - GENERATED CALL = (c).checkTrue()
2021-03-11 10:56:06,222 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Checker[DeserializedSimpleFunctionDescriptor@e1cc4e5]]
2021-03-11 10:56:06,222 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Checker[DeserializedSimpleFunctionDescriptor@e1cc4e5]
2021-03-11 10:56:06,344 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:06,345 [main:105] - GENERATED CALL = (c).equals("jnyjc")
2021-03-11 10:56:06,345 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:06,345 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:56:06,345 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:06,346 [main:105] - GENERATED CALL = (c).checkTrue().not()
2021-03-11 10:56:06,346 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:06,346 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:56:06,346 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:06,451 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:06,452 [main:105] - GENERATED CALL = (c).checkTrue().xor(false)
2021-03-11 10:56:06,452 [main:101] - Case = [public abstract fun checkFalse(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@696a33ee]]
2021-03-11 10:56:06,452 [main:137] - GENERATING call of type public abstract fun checkFalse(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@696a33ee]
2021-03-11 10:56:06,453 [main:105] - GENERATED CALL = (c).checkFalse()
2021-03-11 10:56:06,453 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:06,453 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:56:06,453 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:06,555 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:06,557 [main:105] - GENERATED CALL = (c).checkTrue().and(true)
2021-03-11 10:56:06,557 [main:101] - Case = [public abstract fun checkFalseWithMessage(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@5d8c86b]]
2021-03-11 10:56:06,557 [main:137] - GENERATING call of type public abstract fun checkFalseWithMessage(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@5d8c86b]
2021-03-11 10:56:06,557 [main:105] - GENERATED CALL = (c).checkFalseWithMessage()
2021-03-11 10:56:06,557 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:06,557 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:56:06,557 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:06,655 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:06,655 [main:105] - GENERATED CALL = (c).checkTrue().equals("usaab")
2021-03-11 10:56:06,655 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:06,655 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:56:06,656 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:06,756 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:06,758 [main:105] - GENERATED CALL = (c).checkTrue().or(false)
2021-03-11 10:56:06,758 [main:101] - Case = [public abstract fun checkTrueWithMessage(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@3192c24f]]
2021-03-11 10:56:06,758 [main:137] - GENERATING call of type public abstract fun checkTrueWithMessage(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@3192c24f]
2021-03-11 10:56:06,758 [main:105] - GENERATED CALL = (c).checkTrueWithMessage()
2021-03-11 10:56:06,759 [main:63] - replacement of { true}() of type Boolean is (c).checkTrue().or(false)
2021-03-11 10:56:06,861 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:06,862 [main:66] - Compilation checking started
2021-03-11 10:56:07,321 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "yhftd" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:07,328 [main:56] - replacing (false, Boolean)
2021-03-11 10:56:07,328 [main:38] - replacing false Boolean
2021-03-11 10:56:07,328 [main:42] - Getting value of type Boolean
2021-03-11 10:56:07,439 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:07,441 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:56:07,441 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:07,558 [main:55] - randomType = Double
2021-03-11 10:56:07,661 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:56:07,702 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea6760]
2021-03-11 10:56:07,702 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7faa8b16]
2021-03-11 10:56:07,702 [main:66] - Generated call from random type = (0.41910945906876174).toChar().isISOControl()
2021-03-11 10:56:07,703 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:07,712 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:07,712 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:07,813 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:07,813 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:07,912 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:07,912 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("vfmbb").equals("hsbmt")
2021-03-11 10:56:07,912 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:07,912 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:08,010 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:08,011 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).xor(true)
2021-03-11 10:56:08,011 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:08,011 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:08,111 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:08,112 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:08,209 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:08,211 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("qqghf").xor(true)
2021-03-11 10:56:08,211 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:08,211 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:08,323 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:08,325 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).or(true)
2021-03-11 10:56:08,325 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:08,325 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:08,426 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:08,426 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:08,526 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:08,527 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("cflkw").and(true)
2021-03-11 10:56:08,528 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:08,528 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:08,629 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:08,631 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:08,734 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:08,734 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("ufbzb")
2021-03-11 10:56:08,734 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:08,735 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:08,735 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).not()
2021-03-11 10:56:08,735 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:08,735 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:08,842 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:08,842 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:08,842 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("wocms").not()
2021-03-11 10:56:08,842 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:08,842 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:08,950 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:08,951 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).and(false)
2021-03-11 10:56:08,952 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:08,952 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:09,049 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:09,049 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("itugc")
2021-03-11 10:56:09,049 [main:63] - replacement of false of type Boolean is (0.41910945906876174).toChar().isISOControl()
2021-03-11 10:56:09,147 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:09,147 [main:66] - Compilation checking started
2021-03-11 10:56:09,603 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert(l()) { "yhftd" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:09,610 [main:56] - replacing (hit, Boolean)
2021-03-11 10:56:09,610 [main:38] - replacing hit Boolean
2021-03-11 10:56:09,610 [main:42] - Getting value of type Boolean
2021-03-11 10:56:09,747 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:09,748 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:56:09,749 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:10,120 [main:55] - randomType = List<LinkedHashMap<Char?, Checker>>
2021-03-11 10:56:10,121 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:10,132 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:10,132 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:10,132 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).not()
2021-03-11 10:56:10,132 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:10,132 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:10,234 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:10,236 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).xor(false)
2021-03-11 10:56:10,236 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:10,237 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:10,338 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:10,339 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("fdshb")
2021-03-11 10:56:10,339 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:10,339 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:10,443 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:10,443 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:10,551 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:10,553 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("nyyxy").xor(false)
2021-03-11 10:56:10,553 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:10,553 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:10,651 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:10,653 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).and(true)
2021-03-11 10:56:10,653 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:10,653 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:10,753 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:10,753 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:10,879 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:10,880 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("awjzn").or(true)
2021-03-11 10:56:10,880 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:10,880 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:11,012 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:11,013 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:11,113 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:11,114 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("ceixj").equals("ajkfm")
2021-03-11 10:56:11,114 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:11,114 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:11,211 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:11,213 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).or(false)
2021-03-11 10:56:11,213 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:11,213 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:11,311 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:11,313 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:11,411 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:11,411 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).compareTo(false).equals("qggvq")
2021-03-11 10:56:11,411 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:11,411 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:11,509 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:11,509 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:11,607 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:11,609 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("oxciy").and(false)
2021-03-11 10:56:11,609 [main:63] - replacement of hit of type Boolean is (ShouldBeDisabled().checkTrue()).not()
2021-03-11 10:56:11,708 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:11,709 [main:66] - Compilation checking started
2021-03-11 10:56:12,038 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert(l()) { "yhftd" }
        }
        return hit
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { (ShouldBeDisabled().checkTrue()).not() = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:12,045 [main:56] - replacing (hit, Boolean)
2021-03-11 10:56:12,045 [main:38] - replacing hit Boolean
2021-03-11 10:56:12,045 [main:42] - Getting value of type Boolean
2021-03-11 10:56:12,147 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:12,149 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:56:12,149 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:12,490 [main:55] - randomType = Function1<ArrayList<ShouldBeEnabled>, Long>
2021-03-11 10:56:12,491 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:12,500 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:12,501 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:12,596 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:12,597 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).xor(false)
2021-03-11 10:56:12,597 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:12,597 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:12,698 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:12,698 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:12,797 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:12,798 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("pozwj").and(true)
2021-03-11 10:56:12,798 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:12,798 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:12,799 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).not()
2021-03-11 10:56:12,799 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:12,799 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:12,899 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:12,900 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:12,996 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:12,998 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("dobpl").or(true)
2021-03-11 10:56:12,998 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:12,998 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:13,099 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:13,100 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:13,232 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:13,232 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).compareTo(false).equals("exbpk")
2021-03-11 10:56:13,233 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:13,233 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:13,345 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:13,346 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:13,445 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:13,445 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("yxmno").equals("jfxco")
2021-03-11 10:56:13,445 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:13,445 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:13,541 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:13,543 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).or(true)
2021-03-11 10:56:13,543 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:13,543 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:13,639 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:13,639 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:13,639 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("vmprt").not()
2021-03-11 10:56:13,639 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:13,639 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:13,736 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:13,736 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("epmvs")
2021-03-11 10:56:13,736 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:13,737 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:13,835 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:13,835 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:13,934 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:13,935 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("lhiwj").xor(false)
2021-03-11 10:56:13,935 [main:63] - replacement of hit of type Boolean is (ShouldBeDisabled().checkFalseWithMessage()).not()
2021-03-11 10:56:14,034 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:14,035 [main:66] - Compilation checking started
2021-03-11 10:56:14,479 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert(l()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:14,489 [main:56] - replacing (hit, Boolean)
2021-03-11 10:56:14,490 [main:38] - replacing hit Boolean
2021-03-11 10:56:14,490 [main:42] - Getting value of type Boolean
2021-03-11 10:56:14,619 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:14,621 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:56:14,621 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:14,627 [main:55] - randomType = ShouldBeDisabled
2021-03-11 10:56:14,735 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 10:56:14,737 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert(l()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:56:14,747 [main:137] - GENERATING call of type public open fun checkTrueWithMessage(): kotlin.Boolean defined in ShouldBeDisabled[SimpleFunctionDescriptorImpl@4571535e]
2021-03-11 10:56:14,747 [main:66] - Generated call from random type = (ShouldBeDisabled()).checkTrueWithMessage()
2021-03-11 10:56:14,747 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:14,760 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:14,760 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:14,858 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:14,858 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:14,955 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:14,956 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("eibvk").or(false)
2021-03-11 10:56:14,956 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:14,956 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:15,057 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:15,057 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:15,156 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:15,158 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("bgnaw").and(true)
2021-03-11 10:56:15,158 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:15,158 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:15,258 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:15,260 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).or(false)
2021-03-11 10:56:15,260 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:15,260 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:15,361 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:15,361 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:15,466 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:15,467 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("awkql").equals("hycpc")
2021-03-11 10:56:15,467 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:15,467 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:15,563 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:15,565 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).and(true)
2021-03-11 10:56:15,565 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:15,565 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:15,688 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:15,688 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("jacwo")
2021-03-11 10:56:15,688 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:15,688 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:15,836 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:15,836 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:15,959 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:15,960 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("xbcxm").xor(false)
2021-03-11 10:56:15,960 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:15,960 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:16,065 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:16,067 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).xor(false)
2021-03-11 10:56:16,067 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:16,067 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:16,175 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:16,176 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:16,277 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:16,277 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("rcpdd")
2021-03-11 10:56:16,277 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:16,277 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:16,278 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).not()
2021-03-11 10:56:16,278 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("rcpdd")
2021-03-11 10:56:16,379 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:16,385 [main:56] - replacing (true, Boolean)
2021-03-11 10:56:16,386 [main:38] - replacing true Boolean
2021-03-11 10:56:16,386 [main:42] - Getting value of type Boolean
2021-03-11 10:56:16,490 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:16,492 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:56:16,492 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:16,495 [main:55] - randomType = Boolean
2021-03-11 10:56:16,595 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:16,610 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:16,765 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:16,766 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:16,905 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:16,906 [main:66] - Generated call from random type = (true).equals("kslwj").and(false)
2021-03-11 10:56:16,906 [main:63] - replacement of true of type Boolean is (true).equals("kslwj").and(false)
2021-03-11 10:56:17,002 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:17,003 [main:66] - Compilation checking started
2021-03-11 10:56:17,442 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert(l()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:17,449 [main:56] - replacing (hit, Boolean)
2021-03-11 10:56:17,449 [main:38] - replacing hit Boolean
2021-03-11 10:56:17,449 [main:42] - Getting value of type Boolean
2021-03-11 10:56:17,554 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:17,556 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:56:17,556 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:17,561 [main:55] - randomType = Checker
2021-03-11 10:56:17,561 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:17,575 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:17,575 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:17,676 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:17,677 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:17,776 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:17,776 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("lgfqj")
2021-03-11 10:56:17,776 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:17,776 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:17,877 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:17,879 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(true)
2021-03-11 10:56:17,879 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:17,879 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:17,994 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:17,995 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:18,097 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:18,099 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("tvxnn").xor(false)
2021-03-11 10:56:18,099 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:18,099 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:18,201 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:18,201 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("vgcxi")
2021-03-11 10:56:18,201 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:18,201 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:18,304 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:18,304 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:18,305 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("zkmwk").not()
2021-03-11 10:56:18,305 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:18,305 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:18,406 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:18,408 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).xor(false)
2021-03-11 10:56:18,408 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:18,408 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:18,527 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:18,528 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:18,632 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:18,632 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("tkuin").equals("iiyvo")
2021-03-11 10:56:18,632 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:18,632 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:18,633 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:56:18,633 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:18,633 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:18,739 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:18,741 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(false)
2021-03-11 10:56:18,741 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:18,741 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:18,865 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:18,865 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:18,991 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:18,994 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("fozpz").or(true)
2021-03-11 10:56:18,994 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkFalseWithMessage()).or(true)
2021-03-11 10:56:19,100 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:19,100 [main:66] - Compilation checking started
2021-03-11 10:56:19,409 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { (ShouldBeEnabled().checkFalseWithMessage()).or(true) = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert(l()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:19,416 [main:56] - replacing (false, Boolean)
2021-03-11 10:56:19,416 [main:38] - replacing false Boolean
2021-03-11 10:56:19,416 [main:42] - Getting value of type Boolean
2021-03-11 10:56:19,519 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:19,521 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:56:19,521 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:19,524 [main:55] - randomType = Int
2021-03-11 10:56:19,626 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:56:19,670 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@654a3b9b]
2021-03-11 10:56:19,670 [main:137] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15744c36]
2021-03-11 10:56:19,670 [main:66] - Generated call from random type = (-811067593).toChar().isDefined()
2021-03-11 10:56:19,670 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:19,678 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:19,678 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:19,779 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals(null)
2021-03-11 10:56:19,779 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:19,780 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:19,878 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:19,878 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:19,993 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:19,995 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("zflfr").and(true)
2021-03-11 10:56:19,995 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:19,995 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:20,095 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:20,096 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).or(true)
2021-03-11 10:56:20,097 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:20,097 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:20,097 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).not()
2021-03-11 10:56:20,097 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:20,097 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:20,196 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:20,196 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:20,292 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:20,293 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("cwmnq").xor(false)
2021-03-11 10:56:20,293 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:20,293 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:20,392 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:20,393 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).and(true)
2021-03-11 10:56:20,393 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:20,394 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:20,502 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:20,503 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:20,610 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:20,612 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("easpk").or(true)
2021-03-11 10:56:20,612 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:20,612 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:20,721 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:20,721 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:20,829 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:20,830 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("kyjgv").equals("qgbqv")
2021-03-11 10:56:20,830 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:20,830 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:20,974 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:20,976 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:21,095 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:21,095 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).compareTo(false).equals("ouhvb")
2021-03-11 10:56:21,095 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:21,095 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:21,209 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:21,209 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:21,209 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("gsjzd").not()
2021-03-11 10:56:21,209 [main:63] - replacement of false of type Boolean is false
2021-03-11 10:56:21,315 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 10:56:21,322 [main:56] - replacing (l, Function0<Boolean>)
2021-03-11 10:56:21,323 [main:38] - replacing l Function0<Boolean>
2021-03-11 10:56:21,323 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:56:21,427 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:56:21,428 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:56:21,430 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 10:56:21,430 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:21,660 [main:55] - randomType = Long?
2021-03-11 10:56:21,770 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:56:21,835 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:56:21,841 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:56:21,843 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:21,859 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:21,861 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:21,862 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:21,863 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:21,864 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:21,865 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:21,867 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:21,868 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:21,869 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:21,870 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:21,872 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:56:21,872 [main:63] - replacement of l of type Function0<Boolean> is { false}
2021-03-11 10:56:21,992 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:56:21,992 [main:66] - Compilation checking started
2021-03-11 10:56:22,443 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:22,455 [main:56] - replacing ({
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }, Function0<Unit>)
2021-03-11 10:56:22,456 [main:38] - replacing {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        } Function0<Unit>
2021-03-11 10:56:22,456 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:56:22,599 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:56:22,601 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:56:22,742 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 10:56:22,745 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 10:56:23,052 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 10:56:23,055 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 10:56:23,252 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:56:23,256 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:56:23,595 [main:302] - generating value of type = Any false depth = 8
2021-03-11 10:56:23,595 [main:95] - GENERATED = println("ocgdk")
2021-03-11 10:56:23,595 [main:95] - GENERATED = contract({ println("ocgdk")})
2021-03-11 10:56:23,595 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println("ocgdk")})}
2021-03-11 10:56:23,596 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:23,735 [main:55] - randomType = LinkedHashSet<String>
2021-03-11 10:56:23,842 [main:302] - generating value of type = LinkedHashSet<String> false depth = 0
2021-03-11 10:56:23,950 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<String> = TODO()
2021-03-11 10:56:23,953 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<String> = TODO()
2021-03-11 10:56:24,059 [main:95] - GENERATED = LinkedHashSet<String>()
2021-03-11 10:56:24,230 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:24,242 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:56:24,246 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:24,247 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:56:24,248 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:24,250 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:24,252 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:24,253 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:24,255 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:24,256 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:24,257 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:24,258 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:24,259 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:24,260 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:24,260 [main:63] - replacement of {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        } of type Function0<Unit> is { contract({ println("ocgdk")})}
2021-03-11 10:56:24,366 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:56:24,366 [main:66] - Compilation checking started
2021-03-11 10:56:24,670 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { contract({ println("ocgdk")})}
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return "FAIL 3"
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:24,682 [main:56] - replacing ("FAIL 3", String)
2021-03-11 10:56:24,682 [main:38] - replacing "FAIL 3" String
2021-03-11 10:56:24,682 [main:42] - Getting value of type String
2021-03-11 10:56:24,809 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:56:24,811 [main:46] - GENERATED VALUE OF TYPE String = "rcomm"
2021-03-11 10:56:24,811 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:25,660 [main:55] - randomType = Function2<Byte?, Function2<ULong, String, Boolean>, Byte>
2021-03-11 10:56:25,662 [main:94] - GETTING String from Boolean
2021-03-11 10:56:25,678 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:56:25,678 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:25,800 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:25,801 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:56:25,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:56:25,918 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
2021-03-11 10:56:25,918 [main:63] - replacement of "FAIL 3" of type String is (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
2021-03-11 10:56:26,026 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:26,026 [main:66] - Compilation checking started
2021-03-11 10:56:26,521 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:26,529 [main:56] - replacing (l(), Boolean)
2021-03-11 10:56:26,529 [main:38] - replacing l() Boolean
2021-03-11 10:56:26,529 [main:42] - Getting value of type Boolean
2021-03-11 10:56:26,636 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:26,637 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:56:26,638 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:26,640 [main:55] - randomType = Int
2021-03-11 10:56:26,741 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:56:26,783 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@63f407b7]
2021-03-11 10:56:26,887 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:56:26,888 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:26,993 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:26,993 [main:66] - Generated call from random type = (-1210465953).compareTo(1277735195).equals("ihszf")
2021-03-11 10:56:26,994 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:27,008 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:27,008 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:27,110 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:27,111 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:27,219 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:27,220 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("ldqre").or(true)
2021-03-11 10:56:27,220 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:27,220 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:27,321 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:27,321 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:27,431 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:27,434 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("qzbxg").xor(false)
2021-03-11 10:56:27,434 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:27,434 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:27,538 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:27,538 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("fbezi")
2021-03-11 10:56:27,538 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:27,538 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:27,674 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:27,676 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:27,804 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:27,804 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt")
2021-03-11 10:56:27,804 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:27,805 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:27,918 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:27,920 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).xor(false)
2021-03-11 10:56:27,920 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:27,920 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:28,040 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:28,040 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:28,040 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("tdlib").not()
2021-03-11 10:56:28,040 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:28,041 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:28,150 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:28,151 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:28,261 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:28,261 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("aqltn").equals("czcuc")
2021-03-11 10:56:28,261 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:28,261 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:28,388 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:28,390 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).and(false)
2021-03-11 10:56:28,390 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:28,390 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:28,504 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:28,505 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).or(false)
2021-03-11 10:56:28,506 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:28,506 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:28,506 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).not()
2021-03-11 10:56:28,506 [main:63] - replacement of l() of type Boolean is (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt")
2021-03-11 10:56:28,616 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:28,617 [main:66] - Compilation checking started
2021-03-11 10:56:29,064 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:29,072 [main:56] - replacing (l(), Boolean)
2021-03-11 10:56:29,073 [main:38] - replacing l() Boolean
2021-03-11 10:56:29,073 [main:42] - Getting value of type Boolean
2021-03-11 10:56:29,191 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:29,192 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:56:29,192 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:29,314 [main:55] - randomType = UByte?
2021-03-11 10:56:29,419 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:56:29,463 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3f21a83b]
2021-03-11 10:56:29,463 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34b58084]
2021-03-11 10:56:29,464 [main:66] - Generated call from random type = (40.toUByte())?.toFloat().isNaN()
2021-03-11 10:56:29,464 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:29,475 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:29,475 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:29,577 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:29,579 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).xor(true)
2021-03-11 10:56:29,579 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:29,579 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:29,681 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:29,683 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).and(false)
2021-03-11 10:56:29,684 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:29,684 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:29,786 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:29,786 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:29,893 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:29,896 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true)
2021-03-11 10:56:29,896 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:29,896 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:30,003 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:30,005 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).or(false)
2021-03-11 10:56:30,005 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:30,005 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:30,117 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:30,117 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:30,242 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:30,242 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("tbaug").equals("rlzdm")
2021-03-11 10:56:30,242 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:30,242 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:30,359 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:30,361 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:30,465 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:30,465 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).compareTo(true).equals("qjrhf")
2021-03-11 10:56:30,465 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:30,465 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:30,568 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals(null)
2021-03-11 10:56:30,568 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:30,568 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:30,674 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:30,674 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:30,783 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:30,785 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("nvpof").and(true)
2021-03-11 10:56:30,785 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:30,785 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:30,887 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:30,888 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:30,888 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("ohizh").not()
2021-03-11 10:56:30,888 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:30,888 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:30,888 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).not()
2021-03-11 10:56:30,888 [main:63] - replacement of l() of type Boolean is (ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true)
2021-03-11 10:56:30,998 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:30,998 [main:66] - Compilation checking started
2021-03-11 10:56:31,425 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:31,436 [main:56] - replacing (hit, Boolean)
2021-03-11 10:56:31,437 [main:38] - replacing hit Boolean
2021-03-11 10:56:31,437 [main:42] - Getting value of type Boolean
2021-03-11 10:56:31,552 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:31,553 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:56:31,553 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:31,687 [main:55] - randomType = UByte?
2021-03-11 10:56:31,790 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:56:31,826 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@f8f506e]
2021-03-11 10:56:31,932 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:31,932 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:32,034 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:32,036 [main:66] - Generated call from random type = (77.toUByte())?.equals("gmkef").xor(false)
2021-03-11 10:56:32,036 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:32,046 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:32,046 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:32,153 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:32,155 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
2021-03-11 10:56:32,155 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:32,155 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:32,255 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:32,255 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:32,356 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:32,358 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("hhjkm").or(true)
2021-03-11 10:56:32,358 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:32,358 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:32,358 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).not()
2021-03-11 10:56:32,358 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:32,358 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:32,461 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:32,462 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:32,564 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:32,565 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).compareTo(false).equals("cuylo")
2021-03-11 10:56:32,565 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:32,565 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:32,668 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:32,669 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).or(true)
2021-03-11 10:56:32,669 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:32,669 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:32,779 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:32,779 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:32,904 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:32,905 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("uflls").and(false)
2021-03-11 10:56:32,905 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:32,906 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:33,020 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:33,021 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:33,125 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:33,126 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("yfpit").equals("kdtvr")
2021-03-11 10:56:33,126 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:33,126 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:33,226 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:33,227 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("qbmvj")
2021-03-11 10:56:33,227 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:33,227 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:33,335 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:33,337 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).and(false)
2021-03-11 10:56:33,337 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:33,337 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:33,438 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:33,439 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:33,541 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:33,543 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("yefvf").xor(true)
2021-03-11 10:56:33,543 [main:63] - replacement of hit of type Boolean is (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
2021-03-11 10:56:33,644 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:33,645 [main:66] - Compilation checking started
2021-03-11 10:56:34,116 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (c.checkFalseWithMessage()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:34,130 [main:56] - replacing (c.checkFalseWithMessage(), Boolean)
2021-03-11 10:56:34,130 [main:38] - replacing c.checkFalseWithMessage() Boolean
2021-03-11 10:56:34,130 [main:42] - Getting value of type Boolean
2021-03-11 10:56:34,243 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:34,244 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:56:34,245 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:34,379 [main:55] - randomType = ArrayDeque<ShouldBeDisabled>
2021-03-11 10:56:34,484 [main:302] - generating value of type = ArrayDeque<ShouldBeDisabled> false depth = 0
2021-03-11 10:56:34,591 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<ShouldBeDisabled> = TODO()
2021-03-11 10:56:34,594 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<ShouldBeDisabled> = TODO()
2021-03-11 10:56:34,706 [main:95] - GENERATED = ArrayDeque<ShouldBeDisabled>()
2021-03-11 10:56:34,866 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:34,967 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:34,967 [main:66] - Generated call from random type = (ArrayDeque<ShouldBeDisabled>()).size.equals("fdsam")
2021-03-11 10:56:34,967 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:34,978 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:34,979 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:35,084 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals(null)
2021-03-11 10:56:35,084 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:35,084 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:35,188 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:35,188 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:35,189 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("aivcz").not()
2021-03-11 10:56:35,189 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:35,189 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:35,295 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:35,297 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).or(true)
2021-03-11 10:56:35,297 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:35,297 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:35,403 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:35,403 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:35,507 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:35,508 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("dmelv").xor(false)
2021-03-11 10:56:35,508 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:35,508 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:35,614 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:35,614 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:35,750 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:35,751 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("ccmsp").or(true)
2021-03-11 10:56:35,752 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:35,752 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:35,859 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:35,860 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:35,973 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:35,975 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("zbxak").and(false)
2021-03-11 10:56:35,975 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:35,975 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:36,086 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:36,088 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:36,198 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:36,198 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).compareTo(true).equals("jprjt")
2021-03-11 10:56:36,198 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:36,198 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:36,308 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:36,310 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).and(false)
2021-03-11 10:56:36,310 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:36,310 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:36,310 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).not()
2021-03-11 10:56:36,310 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:36,310 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:36,412 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:36,413 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).xor(false)
2021-03-11 10:56:36,414 [main:63] - replacement of c.checkFalseWithMessage() of type Boolean is ShouldBeEnabled().checkFalse()
2021-03-11 10:56:36,522 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:36,522 [main:66] - Compilation checking started
2021-03-11 10:56:36,930 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:36,938 [main:56] - replacing (setDesiredAssertionStatus(true), Checker)
2021-03-11 10:56:36,938 [main:38] - replacing setDesiredAssertionStatus(true) Checker
2021-03-11 10:56:36,938 [main:42] - Getting value of type Checker
2021-03-11 10:56:37,043 [main:302] - generating value of type = Checker false depth = 0
2021-03-11 10:56:37,045 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:56:37,289 [main:302] - generating value of type = ShouldBeEnabled false depth = 2
2021-03-11 10:56:37,291 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}
2021-03-11 10:56:37,291 [main:46] - GENERATED VALUE OF TYPE Checker = ShouldBeEnabled()
2021-03-11 10:56:37,291 [main:49] - GENERATED IS CALL =true
2021-03-11 10:56:37,415 [main:55] - randomType = LinkedHashSet<ShouldBeEnabled>
2021-03-11 10:56:37,538 [main:302] - generating value of type = LinkedHashSet<ShouldBeEnabled> false depth = 0
2021-03-11 10:56:37,659 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<ShouldBeEnabled> = TODO()
2021-03-11 10:56:37,662 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<ShouldBeEnabled> = TODO()
2021-03-11 10:56:37,797 [main:95] - GENERATED = linkedSetOf<ShouldBeEnabled>()
2021-03-11 10:56:37,998 [main:94] - GETTING Checker from Boolean
2021-03-11 10:56:38,013 [main:94] - GETTING Checker from Checker
2021-03-11 10:56:38,017 [main:63] - replacement of setDesiredAssertionStatus(true) of type Checker is ShouldBeEnabled()
2021-03-11 10:56:38,127 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:56:38,127 [main:66] - Compilation checking started
2021-03-11 10:56:38,555 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:38,562 [main:56] - replacing (false, Boolean)
2021-03-11 10:56:38,563 [main:38] - replacing false Boolean
2021-03-11 10:56:38,563 [main:42] - Getting value of type Boolean
2021-03-11 10:56:38,672 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:38,674 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:56:38,674 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:38,677 [main:55] - randomType = UByte
2021-03-11 10:56:38,781 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:56:38,820 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@377260b8]
2021-03-11 10:56:38,820 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7aae75d5]
2021-03-11 10:56:38,923 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:38,924 [main:66] - Generated call from random type = (93.toUByte()).toFloat().equals("enedh")
2021-03-11 10:56:38,924 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:38,932 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:38,932 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:39,055 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:39,056 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:39,158 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:39,160 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("xhypt").xor(true)
2021-03-11 10:56:39,160 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:39,160 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:39,261 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:39,261 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:39,363 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:39,364 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("srskq").equals("bwzyf")
2021-03-11 10:56:39,364 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:39,364 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:39,464 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:39,464 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:39,464 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("wutkm").not()
2021-03-11 10:56:39,465 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:39,465 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:39,465 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).not()
2021-03-11 10:56:39,465 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:39,465 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:39,566 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:39,568 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).xor(true)
2021-03-11 10:56:39,568 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:39,568 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:39,673 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:39,675 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).and(true)
2021-03-11 10:56:39,675 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:39,675 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:39,775 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:39,776 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:39,878 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:39,878 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).compareTo(true).equals("eykbv")
2021-03-11 10:56:39,878 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:39,878 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:39,985 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:39,985 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:40,092 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:40,094 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("qbnnn").or(true)
2021-03-11 10:56:40,094 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:40,094 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:40,201 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:40,203 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).or(false)
2021-03-11 10:56:40,203 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:40,203 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:40,338 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:40,338 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:40,461 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:40,462 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("otsew").and(false)
2021-03-11 10:56:40,462 [main:63] - replacement of false of type Boolean is (ShouldBeEnabled().checkFalse()).xor(true)
2021-03-11 10:56:40,571 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:40,571 [main:66] - Compilation checking started
2021-03-11 10:56:40,984 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { (9547.toUShort()).toShort().toString(-61823542) }
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:40,992 [main:56] - replacing ({ (9547.toUShort()).toShort().toString(-61823542) }, Function0<String>)
2021-03-11 10:56:40,992 [main:38] - replacing { (9547.toUShort()).toShort().toString(-61823542) } Function0<String>
2021-03-11 10:56:40,992 [main:42] - Getting value of type Function0<String>
2021-03-11 10:56:41,101 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 10:56:41,102 [main:302] - generating value of type = String true depth = 1
2021-03-11 10:56:41,104 [main:46] - GENERATED VALUE OF TYPE Function0<String> = { "xrlfd"}
2021-03-11 10:56:41,104 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:41,110 [main:55] - randomType = ShouldBeDisabled
2021-03-11 10:56:41,211 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 10:56:41,213 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:56:41,221 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:41,233 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:41,234 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:41,235 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:41,236 [main:94] - GETTING Function0<String> from Checker
2021-03-11 10:56:41,240 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:41,241 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:41,242 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:41,243 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:41,244 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:41,245 [main:94] - GETTING Function0<String> from Checker
2021-03-11 10:56:41,246 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:41,248 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:41,250 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:41,250 [main:63] - replacement of { (9547.toUShort()).toShort().toString(-61823542) } of type Function0<String> is { "xrlfd"}
2021-03-11 10:56:41,354 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:56:41,354 [main:66] - Compilation checking started
2021-03-11 10:56:41,765 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:41,777 [main:56] - replacing (true, Boolean)
2021-03-11 10:56:41,777 [main:38] - replacing true Boolean
2021-03-11 10:56:41,777 [main:42] - Getting value of type Boolean
2021-03-11 10:56:41,893 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:41,895 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:56:41,895 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:41,902 [main:55] - randomType = Checker
2021-03-11 10:56:41,902 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:41,916 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:41,916 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:42,030 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:42,031 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:42,133 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:42,135 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("hepnz").xor(true)
2021-03-11 10:56:42,135 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:42,135 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:42,135 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).not()
2021-03-11 10:56:42,135 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:42,135 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:42,235 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:42,236 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:42,236 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("bffqv").not()
2021-03-11 10:56:42,236 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:42,236 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:42,344 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:42,344 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:42,444 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:42,444 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("bmdsf").equals("qpqod")
2021-03-11 10:56:42,444 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:42,444 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:42,544 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:42,544 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("rnlzr")
2021-03-11 10:56:42,544 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:42,544 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:42,642 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:42,643 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).or(false)
2021-03-11 10:56:42,644 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:42,644 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:42,752 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:42,752 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:42,851 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:42,854 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("mgass").or(true)
2021-03-11 10:56:42,854 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:42,854 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:42,955 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:42,956 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:43,060 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:43,062 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("tgsav").and(false)
2021-03-11 10:56:43,062 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:43,062 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:43,163 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:43,165 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:43,294 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:43,294 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("syxdg")
2021-03-11 10:56:43,294 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:43,294 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:43,412 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:43,415 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).xor(true)
2021-03-11 10:56:43,415 [main:63] - replacement of true of type Boolean is (ShouldBeEnabled().checkTrueWithMessage()).xor(true)
2021-03-11 10:56:43,526 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:43,527 [main:66] - Compilation checking started
2021-03-11 10:56:43,937 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "BOOYA" }
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:43,944 [main:56] - replacing ({ "BOOYA" }, Function0<String>)
2021-03-11 10:56:43,944 [main:38] - replacing { "BOOYA" } Function0<String>
2021-03-11 10:56:43,945 [main:42] - Getting value of type Function0<String>
2021-03-11 10:56:44,053 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 10:56:44,055 [main:302] - generating value of type = String true depth = 1
2021-03-11 10:56:44,056 [main:46] - GENERATED VALUE OF TYPE Function0<String> = { "ilncb"}
2021-03-11 10:56:44,057 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:44,415 [main:55] - randomType = ArrayDeque<MutableMap<String, UShort>>
2021-03-11 10:56:44,518 [main:302] - generating value of type = ArrayDeque<MutableMap<String, UShort>> false depth = 0
2021-03-11 10:56:44,637 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<MutableMap<String, UShort>>): ArrayDeque<MutableMap<String, UShort>> = TODO()
2021-03-11 10:56:44,640 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<MutableMap<String, UShort>>): ArrayDeque<MutableMap<String, UShort>> = TODO()
2021-03-11 10:56:44,897 [main:302] - generating value of type = Collection<MutableMap<String, UShort>> false depth = 3
2021-03-11 10:56:45,007 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<MutableMap<String, UShort>>): Collection<MutableMap<String, UShort>> = TODO()
2021-03-11 10:56:45,010 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<MutableMap<String, UShort>>): Collection<MutableMap<String, UShort>> = TODO()
2021-03-11 10:56:45,249 [main:302] - generating value of type = Collection<MutableMap<String, UShort>> false depth = 6
2021-03-11 10:56:45,354 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: MutableMap<String, UShort>): Collection<MutableMap<Strg, UShort>> = TODO()
2021-03-11 10:56:45,357 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: MutableMap<String, UShort>): Collection<MutableMap<Strg, UShort>> = TODO()
2021-03-11 10:56:45,461 [main:302] - generating value of type = MutableMap<String, UShort> false depth = 9
2021-03-11 10:56:45,567 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(pairs: Pair<String, UShort>): MutableMap<Strg, UShort> = TODO()
2021-03-11 10:56:45,570 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(pairs: Pair<String, UShort>): MutableMap<Strg, UShort> = TODO()
2021-03-11 10:56:45,673 [main:302] - generating value of type = Pair<String, UShort> false depth = 12
2021-03-11 10:56:45,782 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: UShort): Pair<String, UShort> = TODO()
2021-03-11 10:56:45,785 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: UShort): Pair<String, UShort> = TODO()
2021-03-11 10:56:45,897 [main:302] - generating value of type = String true depth = 15
2021-03-11 10:56:45,899 [main:302] - generating value of type = UShort true depth = 15
2021-03-11 10:56:45,900 [main:95] - GENERATED = Pair<String, UShort>("amwxs", 2879.toUShort())
2021-03-11 10:56:45,901 [main:95] - GENERATED = mutableMapOf<String, UShort>(Pair<String, UShort>("amwxs", 2879.toUShort()))
2021-03-11 10:56:45,901 [main:95] - GENERATED = mutableListOf<MutableMap<String, UShort>>(mutableMapOf<String, UShort>(Pair<String, UShort>("amwxs", 2879.toUShort())))
2021-03-11 10:56:45,901 [main:95] - GENERATED = LinkedHashSet<MutableMap<String, UShort>>(mutableListOf<MutableMap<String, UShort>>(mutableMapOf<String, UShort>(Pair<String, UShort>("amwxs", 2879.toUShort()))))
2021-03-11 10:56:45,901 [main:95] - GENERATED = ArrayDeque<MutableMap<String, UShort>>(LinkedHashSet<MutableMap<String, UShort>>(mutableListOf<MutableMap<String, UShort>>(mutableMapOf<String, UShort>(Pair<String, UShort>("amwxs", 2879.toUShort())))))
2021-03-11 10:56:46,146 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:46,160 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:46,161 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:46,162 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:46,163 [main:94] - GETTING Function0<String> from Checker
2021-03-11 10:56:46,169 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:46,171 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:46,172 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:46,173 [main:94] - GETTING Function0<String> from Checker
2021-03-11 10:56:46,174 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:46,175 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:46,176 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:46,177 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:46,179 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:56:46,179 [main:63] - replacement of { "BOOYA" } of type Function0<String> is { "ilncb"}
2021-03-11 10:56:46,314 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:56:46,315 [main:66] - Compilation checking started
2021-03-11 10:56:46,743 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:46,755 [main:56] - replacing (hit, Boolean)
2021-03-11 10:56:46,755 [main:38] - replacing hit Boolean
2021-03-11 10:56:46,755 [main:42] - Getting value of type Boolean
2021-03-11 10:56:46,862 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:46,864 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:56:46,864 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:46,870 [main:55] - randomType = ShouldBeDisabled
2021-03-11 10:56:46,969 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 10:56:46,970 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:56:46,977 [main:137] - GENERATING call of type public open fun checkTrue(): kotlin.Boolean defined in ShouldBeDisabled[SimpleFunctionDescriptorImpl@5642df93]
2021-03-11 10:56:46,977 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:47,076 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:47,078 [main:66] - Generated call from random type = (ShouldBeDisabled()).checkTrue().xor(false)
2021-03-11 10:56:47,078 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:47,093 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:47,093 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:47,194 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:47,196 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(false)
2021-03-11 10:56:47,196 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:47,196 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:47,300 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:47,300 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("hshll")
2021-03-11 10:56:47,300 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:47,300 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:47,404 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:47,406 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:47,507 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:47,507 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("oitvm")
2021-03-11 10:56:47,507 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:47,507 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:47,608 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:47,608 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:47,707 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:47,709 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("ogtyz").xor(false)
2021-03-11 10:56:47,709 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:47,709 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:47,809 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:47,810 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(true)
2021-03-11 10:56:47,810 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:47,810 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:47,914 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:47,914 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:47,914 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("lvdsm").not()
2021-03-11 10:56:47,915 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:47,915 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:47,915 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:56:47,915 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:47,915 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:48,049 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:48,049 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:48,147 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:48,150 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("xvmeq").and(false)
2021-03-11 10:56:48,150 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:48,150 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:48,250 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:48,251 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:48,352 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:48,353 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("typco").equals("xzlyb")
2021-03-11 10:56:48,353 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:48,353 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:48,455 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:48,457 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).xor(true)
2021-03-11 10:56:48,457 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkFalseWithMessage()).xor(true)
2021-03-11 10:56:48,555 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:48,556 [main:66] - Compilation checking started
2021-03-11 10:56:48,831 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { (ShouldBeEnabled().checkFalseWithMessage()).xor(true) = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert({ false}()) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:48,839 [main:56] - replacing ({ false}(), Boolean)
2021-03-11 10:56:48,839 [main:38] - replacing { false}() Boolean
2021-03-11 10:56:48,839 [main:42] - Getting value of type Boolean
2021-03-11 10:56:48,941 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:48,943 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:56:48,943 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:49,060 [main:55] - randomType = Int?
2021-03-11 10:56:49,161 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:56:49,207 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@474de52a]
2021-03-11 10:56:49,310 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:56:49,311 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5204de98]
2021-03-11 10:56:49,415 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:49,416 [main:66] - Generated call from random type = (-1722701006)?.div(0.9527305030462029).equals("gtdny")
2021-03-11 10:56:49,416 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:49,424 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:49,424 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:49,535 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:49,535 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("kpuvw")
2021-03-11 10:56:49,535 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:49,535 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:49,535 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:56:49,535 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:49,535 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:49,660 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:49,660 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals(null).not()
2021-03-11 10:56:49,661 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:49,661 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:49,761 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:49,763 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:49,861 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:49,861 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("qefkj")
2021-03-11 10:56:49,862 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:49,862 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:49,960 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:49,962 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
2021-03-11 10:56:49,962 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:49,962 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:50,074 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:50,074 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:50,173 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:50,174 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("blxzb").or(false)
2021-03-11 10:56:50,174 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:50,174 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:50,281 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:50,285 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(true)
2021-03-11 10:56:50,285 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:50,285 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:50,393 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:50,393 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:50,504 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:50,505 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("dlfba").xor(true)
2021-03-11 10:56:50,505 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:50,505 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:50,615 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:50,616 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).xor(false)
2021-03-11 10:56:50,617 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:50,617 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:50,723 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:50,723 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:50,822 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:50,824 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("abeky").and(true)
2021-03-11 10:56:50,824 [main:63] - replacement of { false}() of type Boolean is (-1722701006)?.div(0.9527305030462029).equals("gtdny")
2021-03-11 10:56:50,924 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:50,924 [main:66] - Compilation checking started
2021-03-11 10:56:51,514 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if (c.checkFalse()) return "FAIL 2"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:51,525 [main:56] - replacing (c.checkFalse(), Boolean)
2021-03-11 10:56:51,525 [main:38] - replacing c.checkFalse() Boolean
2021-03-11 10:56:51,525 [main:42] - Getting value of type Boolean
2021-03-11 10:56:51,661 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:51,662 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:56:51,662 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:51,774 [main:55] - randomType = UInt
2021-03-11 10:56:51,884 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 10:56:51,921 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3c3ef625]
2021-03-11 10:56:51,921 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@23f14a05]
2021-03-11 10:56:52,023 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:52,024 [main:66] - Generated call from random type = (1985274062.toUInt()).toShort().equals("uvaih")
2021-03-11 10:56:52,024 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:52,033 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:52,033 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:52,134 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:52,135 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).and(true)
2021-03-11 10:56:52,135 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:52,136 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:52,237 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:52,237 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:52,343 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:52,345 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("eobgm").and(true)
2021-03-11 10:56:52,345 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:52,345 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:52,452 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:52,453 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).xor(false)
2021-03-11 10:56:52,453 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:52,454 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:52,559 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:52,560 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).or(false)
2021-03-11 10:56:52,560 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:52,561 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:52,663 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:52,664 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:52,767 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:52,768 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")
2021-03-11 10:56:52,768 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:52,768 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:52,873 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:52,875 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:52,978 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:52,978 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).compareTo(true).equals("ldmxy")
2021-03-11 10:56:52,978 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:52,978 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:53,081 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:53,082 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:53,218 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:53,220 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("luofx").or(false)
2021-03-11 10:56:53,220 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:53,220 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:53,355 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:53,356 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:53,356 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("thhfy").not()
2021-03-11 10:56:53,356 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:53,356 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:53,459 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:53,459 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:53,559 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:53,561 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("uwycd").xor(false)
2021-03-11 10:56:53,561 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:53,561 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:53,561 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).not()
2021-03-11 10:56:53,561 [main:63] - replacement of c.checkFalse() of type Boolean is (ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")
2021-03-11 10:56:53,661 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:53,662 [main:66] - Compilation checking started
2021-03-11 10:56:54,072 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "FAIL 2"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:54,084 [main:56] - replacing (hit, Boolean)
2021-03-11 10:56:54,085 [main:38] - replacing hit Boolean
2021-03-11 10:56:54,085 [main:42] - Getting value of type Boolean
2021-03-11 10:56:54,198 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:54,199 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:56:54,200 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:54,206 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:56:54,310 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:56:54,311 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}
2021-03-11 10:56:54,321 [main:137] - GENERATING call of type public open fun checkTrue(): kotlin.Boolean defined in ShouldBeEnabled[SimpleFunctionDescriptorImpl@1431f5f7]
2021-03-11 10:56:54,321 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:54,425 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:54,425 [main:66] - Generated call from random type = (ShouldBeEnabled()).checkTrue().equals("vhcdq")
2021-03-11 10:56:54,425 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:54,437 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:56:54,438 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:56:54,539 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:54,540 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:56:54,643 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:54,643 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).compareTo(true).equals("qwmxy")
2021-03-11 10:56:54,643 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:54,643 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:54,745 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:54,746 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).and(true)
2021-03-11 10:56:54,747 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:54,747 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:54,877 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:54,878 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:54,985 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:54,987 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("rymii").and(false)
2021-03-11 10:56:54,987 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:54,987 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:55,092 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:55,093 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).or(true)
2021-03-11 10:56:55,093 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:55,093 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:55,197 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:55,199 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).xor(true)
2021-03-11 10:56:55,200 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:55,200 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:55,306 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:55,306 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:55,306 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("ihuey").not()
2021-03-11 10:56:55,306 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:55,306 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:55,306 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).not()
2021-03-11 10:56:55,306 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:55,306 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:55,407 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:55,407 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:55,506 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:55,508 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("nznqu").xor(true)
2021-03-11 10:56:55,508 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:55,508 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:55,615 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:55,615 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:55,718 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:55,719 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("ybcdh").equals("jaskp")
2021-03-11 10:56:55,719 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:55,719 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:55,820 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:55,821 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:55,928 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:55,930 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("qxggw").or(false)
2021-03-11 10:56:55,930 [main:63] - replacement of hit of type Boolean is (ShouldBeDisabled().checkTrueWithMessage()).not()
2021-03-11 10:56:56,030 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:56,030 [main:66] - Compilation checking started
2021-03-11 10:56:56,338 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { (ShouldBeDisabled().checkTrueWithMessage()).not() = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "FAIL 2"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:56,345 [main:56] - replacing ({
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }, Function0<Unit>)
2021-03-11 10:56:56,346 [main:38] - replacing {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        } Function0<Unit>
2021-03-11 10:56:56,346 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:56:56,478 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:56:56,479 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:56:56,588 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 10:56:56,590 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 10:56:56,815 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 10:56:56,817 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 10:56:56,924 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 10:56:56,926 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 10:56:57,269 [main:302] - generating value of type = Int true depth = 8
2021-03-11 10:56:57,271 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 10:56:57,273 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 10:56:57,278 [main:95] - GENERATED = repeat(-918867009, {a: Int -> println()})
2021-03-11 10:56:57,279 [main:95] - GENERATED = contract({ repeat(-918867009, {a: Int -> println()})})
2021-03-11 10:56:57,279 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ repeat(-918867009, {a: Int -> println()})})}
2021-03-11 10:56:57,279 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:57,282 [main:55] - randomType = Char
2021-03-11 10:56:57,383 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:56:57,408 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:57,419 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:57,420 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:57,421 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:56:57,426 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:57,427 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:57,428 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:57,429 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:57,430 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:56:57,431 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:57,432 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:57,433 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:57,434 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:57,435 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:56:57,435 [main:63] - replacement of {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        } of type Function0<Unit> is { contract({ repeat(-918867009, {a: Int -> println()})})}
2021-03-11 10:56:57,537 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:56:57,537 [main:66] - Compilation checking started
2021-03-11 10:56:57,905 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { contract({ repeat(-918867009, {a: Int -> println()})})}
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "FAIL 2"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:56:57,913 [main:56] - replacing (hit, Boolean)
2021-03-11 10:56:57,913 [main:38] - replacing hit Boolean
2021-03-11 10:56:57,913 [main:42] - Getting value of type Boolean
2021-03-11 10:56:58,029 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:58,030 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:56:58,031 [main:49] - GENERATED IS CALL =false
2021-03-11 10:56:58,159 [main:55] - randomType = Short
2021-03-11 10:56:58,329 [main:302] - generating value of type = Short true depth = 0
2021-03-11 10:56:58,388 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5eacddff]
2021-03-11 10:56:58,388 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d9cead]
2021-03-11 10:56:58,388 [main:66] - Generated call from random type = (-27246).toChar().isLowSurrogate()
2021-03-11 10:56:58,388 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:56:58,397 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:58,397 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:58,504 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:58,504 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:58,625 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:58,627 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("wyfoi").xor(false)
2021-03-11 10:56:58,627 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:58,627 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:58,744 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:58,747 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(false)
2021-03-11 10:56:58,747 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:58,747 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:58,885 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:58,888 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(false)
2021-03-11 10:56:58,888 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:56:58,888 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:59,013 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:59,013 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:56:59,121 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:59,123 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("qcmqt").and(false)
2021-03-11 10:56:59,123 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:59,123 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:59,228 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:59,229 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("ghskd")
2021-03-11 10:56:59,229 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:59,229 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:59,332 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:59,333 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:59,333 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
2021-03-11 10:56:59,333 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:56:59,333 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:59,448 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:59,449 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:56:59,559 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:59,561 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("sucmv").or(false)
2021-03-11 10:56:59,561 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:56:59,561 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:56:59,561 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:56:59,561 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:56:59,561 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:56:59,663 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:56:59,665 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).xor(true)
2021-03-11 10:56:59,665 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:56:59,665 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:56:59,768 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:59,768 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:56:59,871 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:56:59,872 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("smagh").equals("tegpk")
2021-03-11 10:56:59,872 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
2021-03-11 10:56:59,975 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:56:59,976 [main:66] - Compilation checking started
2021-03-11 10:57:00,426 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "FAIL 2"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:00,435 [main:56] - replacing (true, Boolean)
2021-03-11 10:57:00,435 [main:38] - replacing true Boolean
2021-03-11 10:57:00,435 [main:42] - Getting value of type Boolean
2021-03-11 10:57:00,543 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:00,545 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:57:00,545 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:00,663 [main:55] - randomType = Byte
2021-03-11 10:57:00,767 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:57:00,812 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@43839d7c]
2021-03-11 10:57:00,812 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c5ced4c]
2021-03-11 10:57:00,812 [main:66] - Generated call from random type = (108).toChar().isUpperCase()
2021-03-11 10:57:00,812 [main:63] - replacement of true of type Boolean is (108).toChar().isUpperCase()
2021-03-11 10:57:00,922 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:00,930 [main:56] - replacing ("FAIL 2", String)
2021-03-11 10:57:00,930 [main:38] - replacing "FAIL 2" String
2021-03-11 10:57:00,930 [main:42] - Getting value of type String
2021-03-11 10:57:01,037 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:57:01,038 [main:46] - GENERATED VALUE OF TYPE String = "ksulm"
2021-03-11 10:57:01,039 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:01,045 [main:55] - randomType = ShouldBeDisabled
2021-03-11 10:57:01,147 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 10:57:01,149 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:57:01,156 [main:94] - GETTING String from Boolean
2021-03-11 10:57:01,167 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:57:01,167 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:01,268 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:01,270 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:57:01,370 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:57:01,372 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).compareTo(true).toString(-1400981062)
2021-03-11 10:57:01,372 [main:63] - replacement of "FAIL 2" of type String is "ksulm"
2021-03-11 10:57:01,474 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 10:57:01,474 [main:66] - Compilation checking started
2021-03-11 10:57:01,887 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call {
            assert({ false}()) { "yhftd" }
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:01,900 [main:56] - replacing ({
            assert({ false}()) { "yhftd" }
        }, Function0<Unit>)
2021-03-11 10:57:01,900 [main:38] - replacing {
            assert({ false}()) { "yhftd" }
        } Function0<Unit>
2021-03-11 10:57:01,901 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:57:02,006 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:57:02,008 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:57:02,115 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:57:02,117 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:57:02,377 [main:302] - generating value of type = Any false depth = 4
2021-03-11 10:57:02,378 [main:95] - GENERATED = println("mgbhm")
2021-03-11 10:57:02,379 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("mgbhm")}
2021-03-11 10:57:02,379 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:02,612 [main:55] - randomType = Short?
2021-03-11 10:57:02,716 [main:302] - generating value of type = Short true depth = 0
2021-03-11 10:57:02,758 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:57:02,761 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:02,774 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:02,776 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:57:02,777 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:02,778 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:02,779 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:02,780 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:02,782 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:02,783 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:02,784 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:02,785 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:02,786 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:02,787 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:02,787 [main:63] - replacement of {
            assert({ false}()) { "yhftd" }
        } of type Function0<Unit> is { println("mgbhm")}
2021-03-11 10:57:02,889 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:57:02,889 [main:66] - Compilation checking started
2021-03-11 10:57:03,328 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!c.checkTrue()) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:03,341 [main:56] - replacing (c.checkTrue(), Boolean)
2021-03-11 10:57:03,341 [main:38] - replacing c.checkTrue() Boolean
2021-03-11 10:57:03,341 [main:42] - Getting value of type Boolean
2021-03-11 10:57:03,458 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:03,460 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:57:03,460 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:03,834 [main:55] - randomType = Triple<Checker, UInt, MutableMap<ShouldBeDisabled, Checker>>
2021-03-11 10:57:03,939 [main:302] - generating value of type = Triple<Checker, UInt, MutableMap<ShouldBeDisabled, Checker>> false depth = 0
2021-03-11 10:57:04,050 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Checker, second: UInt, third: MutableMap<ShouldBeDisabled, Checker>): Triple<Checker, UInt, MutableMap<ShouldBeDisabled, Checker>> = TODO()
2021-03-11 10:57:04,053 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Checker, second: UInt, third: MutableMap<ShouldBeDisabled, Checker>): Triple<Checker, UInt, MutableMap<ShouldBeDisabled, Checker>> = TODO()
2021-03-11 10:57:04,161 [main:302] - generating value of type = Checker false depth = 3
2021-03-11 10:57:04,162 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:57:04,413 [main:302] - generating value of type = ShouldBeDisabled false depth = 5
2021-03-11 10:57:04,415 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:57:04,415 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 10:57:04,416 [main:302] - generating value of type = MutableMap<ShouldBeDisabled, Checker> false depth = 3
2021-03-11 10:57:04,527 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): MutableMap<ShouldBeDisabled, Checker> = TODO()
2021-03-11 10:57:04,530 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): MutableMap<ShouldBeDisabled, Checker> = TODO()
2021-03-11 10:57:04,871 [main:302] - generating value of type = Int true depth = 6
2021-03-11 10:57:04,872 [main:302] - generating value of type = Float true depth = 6
2021-03-11 10:57:04,874 [main:95] - GENERATED = HashMap<ShouldBeDisabled, Checker>(-666997690, 0.09147596f)
2021-03-11 10:57:04,874 [main:95] - GENERATED = Triple<Checker, UInt, MutableMap<ShouldBeDisabled, Checker>>(ShouldBeDisabled(), 424450516.toUInt(), HashMap<ShouldBeDisabled, Checker>(-666997690, 0.09147596f))
2021-03-11 10:57:04,900 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor@24723332]
2021-03-11 10:57:05,008 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:05,008 [main:66] - Generated call from random type = (Triple<Checker, UInt, MutableMap<ShouldBeDisabled, Checker>>(ShouldBeDisabled(), 424450516.toUInt(), HashMap<ShouldBeDisabled, Checker>(-666997690, 0.09147596f))).equals("tweie")
2021-03-11 10:57:05,008 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:05,020 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:05,020 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:05,124 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:05,125 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:05,225 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:05,226 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("pdrrx").equals("tlwxu")
2021-03-11 10:57:05,226 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:05,226 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:05,332 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:05,334 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).xor(false)
2021-03-11 10:57:05,334 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:05,334 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:05,438 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:05,440 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).and(false)
2021-03-11 10:57:05,440 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:05,440 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:05,547 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:05,548 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:05,651 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:05,653 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("cxcpr").and(true)
2021-03-11 10:57:05,654 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:05,654 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:05,757 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:05,757 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:05,861 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:05,863 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("qpbwp").or(false)
2021-03-11 10:57:05,863 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:05,863 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:05,863 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).not()
2021-03-11 10:57:05,863 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:05,863 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:05,967 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:05,967 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:05,967 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("ydxpw").not()
2021-03-11 10:57:05,968 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:05,968 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:06,109 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:06,112 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).or(false)
2021-03-11 10:57:06,112 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:06,112 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:06,251 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:06,251 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("npivz")
2021-03-11 10:57:06,251 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:06,251 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:06,368 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:06,370 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:06,473 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:06,473 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).compareTo(false).equals("gmvdr")
2021-03-11 10:57:06,473 [main:63] - replacement of c.checkTrue() of type Boolean is true
2021-03-11 10:57:06,573 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 10:57:06,574 [main:66] - Compilation checking started
2021-03-11 10:57:06,988 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:07,000 [main:56] - replacing (false, Boolean)
2021-03-11 10:57:07,000 [main:38] - replacing false Boolean
2021-03-11 10:57:07,000 [main:42] - Getting value of type Boolean
2021-03-11 10:57:07,118 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:07,120 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:57:07,120 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:07,231 [main:55] - randomType = Float
2021-03-11 10:57:07,336 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:57:07,373 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a538872]
2021-03-11 10:57:07,373 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2913b17a]
2021-03-11 10:57:07,373 [main:66] - Generated call from random type = (0.76083726f).toDouble().isFinite()
2021-03-11 10:57:07,373 [main:63] - replacement of false of type Boolean is (0.76083726f).toDouble().isFinite()
2021-03-11 10:57:07,474 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:07,475 [main:66] - Compilation checking started
2021-03-11 10:57:07,946 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:07,957 [main:56] - replacing (hit, Boolean)
2021-03-11 10:57:07,957 [main:38] - replacing hit Boolean
2021-03-11 10:57:07,957 [main:42] - Getting value of type Boolean
2021-03-11 10:57:08,067 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:08,069 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:57:08,069 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:08,199 [main:55] - randomType = ArrayDeque<ShouldBeDisabled>
2021-03-11 10:57:08,306 [main:302] - generating value of type = ArrayDeque<ShouldBeDisabled> false depth = 0
2021-03-11 10:57:08,417 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<ShouldBeDisabled>): ArrayDeque<ShouldBeDisabled> = TODO()
2021-03-11 10:57:08,420 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<ShouldBeDisabled>): ArrayDeque<ShouldBeDisabled> = TODO()
2021-03-11 10:57:08,646 [main:302] - generating value of type = Collection<ShouldBeDisabled> false depth = 3
2021-03-11 10:57:08,754 [main:43] - GENERATING CALL OF fun <E> ArrayList(): Collection<ShouldBeDisabled> = TODO()
2021-03-11 10:57:08,756 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): Collection<ShouldBeDisabled> = TODO()
2021-03-11 10:57:08,866 [main:95] - GENERATED = ArrayList<ShouldBeDisabled>()
2021-03-11 10:57:08,866 [main:95] - GENERATED = ArrayDeque<ShouldBeDisabled>(ArrayList<ShouldBeDisabled>())
2021-03-11 10:57:09,019 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@30525147]
2021-03-11 10:57:09,020 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Array<*>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@19bc42ea]
2021-03-11 10:57:09,020 [main:66] - Generated call from random type = (ArrayDeque<ShouldBeDisabled>(ArrayList<ShouldBeDisabled>())).toArray().isNullOrEmpty()
2021-03-11 10:57:09,020 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:09,027 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:09,027 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:09,131 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:09,131 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("pwonl")
2021-03-11 10:57:09,131 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:09,131 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:09,233 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:09,234 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).xor(false)
2021-03-11 10:57:09,235 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:09,235 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:09,339 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:09,340 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:09,476 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:09,476 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).compareTo(true).equals("efnnz")
2021-03-11 10:57:09,476 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:09,476 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:09,579 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:09,579 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:09,685 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:09,687 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("zfsan").xor(true)
2021-03-11 10:57:09,687 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:09,687 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:09,789 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:09,789 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:09,790 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("wtuac").not()
2021-03-11 10:57:09,790 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:09,790 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:09,894 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:09,894 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:09,995 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:09,995 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("edjxe").equals("qsggk")
2021-03-11 10:57:09,995 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:09,995 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:10,096 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:10,098 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).or(false)
2021-03-11 10:57:10,098 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:10,098 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:10,098 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).not()
2021-03-11 10:57:10,099 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:10,099 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:10,199 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:10,199 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:10,304 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:10,305 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("ovpin").and(true)
2021-03-11 10:57:10,305 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:10,305 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:10,411 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:10,513 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:10,515 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals(null).or(false)
2021-03-11 10:57:10,515 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkFalse()).equals("ovpin").and(true)
2021-03-11 10:57:10,617 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:10,617 [main:66] - Compilation checking started
2021-03-11 10:57:10,922 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { (ShouldBeEnabled().checkFalse()).equals("ovpin").and(true) = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return "FAIL 7"
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:10,929 [main:56] - replacing ({ "yhftd" }, Function0<String>)
2021-03-11 10:57:10,930 [main:38] - replacing { "yhftd" } Function0<String>
2021-03-11 10:57:10,930 [main:42] - Getting value of type Function0<String>
2021-03-11 10:57:11,031 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 10:57:11,033 [main:302] - generating value of type = String true depth = 1
2021-03-11 10:57:11,035 [main:46] - GENERATED VALUE OF TYPE Function0<String> = { "ugtgi"}
2021-03-11 10:57:11,035 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:11,041 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:57:11,171 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:57:11,173 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}
2021-03-11 10:57:11,180 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:11,192 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:11,194 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:11,195 [main:94] - GETTING Function0<String> from Checker
2021-03-11 10:57:11,200 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:11,202 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:11,203 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:11,204 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:11,205 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:11,206 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:11,207 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:11,208 [main:94] - GETTING Function0<String> from Checker
2021-03-11 10:57:11,209 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:11,210 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:11,210 [main:63] - replacement of { "yhftd" } of type Function0<String> is { "ugtgi"}
2021-03-11 10:57:11,313 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:57:11,322 [main:56] - replacing ("FAIL 7", String)
2021-03-11 10:57:11,323 [main:38] - replacing "FAIL 7" String
2021-03-11 10:57:11,323 [main:42] - Getting value of type String
2021-03-11 10:57:11,427 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:57:11,429 [main:46] - GENERATED VALUE OF TYPE String = "hxsiv"
2021-03-11 10:57:11,429 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:11,558 [main:55] - randomType = HashMap<Int, Checker>
2021-03-11 10:57:11,660 [main:302] - generating value of type = HashMap<Int, Checker> false depth = 0
2021-03-11 10:57:11,767 [main:43] - GENERATING CALL OF fun <K, V> HashMap(original: kotlin.collections.Map<Int, Checker>): HashMap<Int, Checker> = TODO()
2021-03-11 10:57:11,770 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(original: kotlin.collections.Map<Int, Checker>): HashMap<Int, Checker> = TODO()
2021-03-11 10:57:12,003 [main:302] - generating value of type = Map<Int, Checker> false depth = 3
2021-03-11 10:57:12,112 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(): Map<Int, Checker> = TODO()
2021-03-11 10:57:12,115 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(): Map<Int, Checker> = TODO()
2021-03-11 10:57:12,222 [main:95] - GENERATED = mutableMapOf<Int, Checker>()
2021-03-11 10:57:12,222 [main:95] - GENERATED = HashMap<Int, Checker>(mutableMapOf<Int, Checker>())
2021-03-11 10:57:12,347 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:57:12,457 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:57:12,459 [main:66] - Generated call from random type = (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
2021-03-11 10:57:12,460 [main:94] - GETTING String from Checker
2021-03-11 10:57:12,465 [main:94] - GETTING String from Boolean
2021-03-11 10:57:12,479 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:57:12,479 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:12,591 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:12,592 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:57:12,698 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:57:12,700 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).compareTo(true).toString(248531877)
2021-03-11 10:57:12,700 [main:63] - replacement of "FAIL 7" of type String is (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
2021-03-11 10:57:12,834 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:12,835 [main:66] - Compilation checking started
2021-03-11 10:57:13,422 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:13,435 [main:56] - replacing (false, Boolean)
2021-03-11 10:57:13,435 [main:38] - replacing false Boolean
2021-03-11 10:57:13,436 [main:42] - Getting value of type Boolean
2021-03-11 10:57:13,555 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:13,557 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:57:13,557 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:13,560 [main:55] - randomType = Float
2021-03-11 10:57:13,677 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:57:13,726 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@bfbb83b]
2021-03-11 10:57:13,727 [main:66] - Generated call from random type = (0.8103f).isFinite()
2021-03-11 10:57:13,727 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:13,735 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:13,735 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:13,846 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:13,848 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).xor(false)
2021-03-11 10:57:13,848 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:13,848 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:13,960 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:13,961 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(false)
2021-03-11 10:57:13,961 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:13,962 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:14,079 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:14,079 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:14,203 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:14,206 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("aiaao").and(true)
2021-03-11 10:57:14,206 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:14,206 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:14,320 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:14,321 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:14,429 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:14,429 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("bmqiz").equals("ctldd")
2021-03-11 10:57:14,429 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:14,429 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:14,538 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:14,540 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:14,675 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:14,675 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
2021-03-11 10:57:14,675 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:14,675 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:14,785 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:14,785 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:14,896 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:14,898 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("ditqa").or(true)
2021-03-11 10:57:14,898 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:14,898 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:14,898 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:57:14,898 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:14,898 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:15,005 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:15,005 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:15,115 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:15,117 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("enkdb").xor(false)
2021-03-11 10:57:15,117 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:15,117 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:15,226 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:15,226 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:15,226 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("cnoii").not()
2021-03-11 10:57:15,227 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:15,227 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:15,335 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:15,335 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("qbsoq")
2021-03-11 10:57:15,335 [main:63] - replacement of false of type Boolean is (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
2021-03-11 10:57:15,445 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:15,446 [main:66] - Compilation checking started
2021-03-11 10:57:15,985 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:15,999 [main:56] - replacing (hit, Boolean)
2021-03-11 10:57:15,999 [main:38] - replacing hit Boolean
2021-03-11 10:57:15,999 [main:42] - Getting value of type Boolean
2021-03-11 10:57:16,140 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:16,142 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:57:16,142 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:16,149 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:57:16,267 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:57:16,269 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}
2021-03-11 10:57:16,279 [main:137] - GENERATING call of type public open fun checkTrue(): kotlin.Boolean defined in ShouldBeEnabled[SimpleFunctionDescriptorImpl@71e63a86]
2021-03-11 10:57:16,280 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:16,399 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:16,401 [main:66] - Generated call from random type = (ShouldBeEnabled()).checkTrue().and(true)
2021-03-11 10:57:16,401 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:16,417 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:16,417 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:16,417 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).not()
2021-03-11 10:57:16,417 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:16,417 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:16,526 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:16,528 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).or(true)
2021-03-11 10:57:16,528 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:16,528 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:16,662 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:16,662 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("xisvg")
2021-03-11 10:57:16,662 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:16,662 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:16,776 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:16,776 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:16,776 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
2021-03-11 10:57:16,776 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:16,776 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:16,886 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:16,889 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:17,025 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:17,025 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).compareTo(true).equals("lxoiz")
2021-03-11 10:57:17,026 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:17,026 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:17,157 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:17,159 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).xor(false)
2021-03-11 10:57:17,159 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:17,159 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:17,269 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:17,269 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:17,391 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:17,394 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("gozzq").and(false)
2021-03-11 10:57:17,394 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:17,394 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:17,532 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:17,532 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:17,661 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:17,663 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("mlrhc").xor(false)
2021-03-11 10:57:17,663 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:17,663 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:17,777 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:17,777 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:17,883 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:17,884 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("wsrmo").equals("cjqkg")
2021-03-11 10:57:17,884 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:17,884 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:17,991 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:17,992 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:18,132 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:18,134 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("nwttg").or(true)
2021-03-11 10:57:18,134 [main:63] - replacement of hit of type Boolean is (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
2021-03-11 10:57:18,267 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:18,268 [main:66] - Compilation checking started
2021-03-11 10:57:18,869 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", false)
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:18,878 [main:56] - replacing (false, Boolean)
2021-03-11 10:57:18,878 [main:38] - replacing false Boolean
2021-03-11 10:57:18,878 [main:42] - Getting value of type Boolean
2021-03-11 10:57:18,992 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:18,994 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:57:18,994 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:19,112 [main:55] - randomType = Short
2021-03-11 10:57:19,217 [main:302] - generating value of type = Short true depth = 0
2021-03-11 10:57:19,269 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5eacddff]
2021-03-11 10:57:19,269 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41769767]
2021-03-11 10:57:19,269 [main:66] - Generated call from random type = (15737).toChar().isHighSurrogate()
2021-03-11 10:57:19,269 [main:63] - replacement of false of type Boolean is (15737).toChar().isHighSurrogate()
2021-03-11 10:57:19,377 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:19,377 [main:66] - Compilation checking started
2021-03-11 10:57:19,804 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { (12522)?.compareTo(-36).toString(-1199086069) }
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:19,813 [main:56] - replacing ({ (12522)?.compareTo(-36).toString(-1199086069) }, Function0<String>)
2021-03-11 10:57:19,813 [main:38] - replacing { (12522)?.compareTo(-36).toString(-1199086069) } Function0<String>
2021-03-11 10:57:19,813 [main:42] - Getting value of type Function0<String>
2021-03-11 10:57:19,922 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 10:57:19,924 [main:302] - generating value of type = String true depth = 1
2021-03-11 10:57:19,926 [main:46] - GENERATED VALUE OF TYPE Function0<String> = { "arbfp"}
2021-03-11 10:57:19,926 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:20,089 [main:55] - randomType = ArrayList<ShouldBeEnabled>
2021-03-11 10:57:20,196 [main:302] - generating value of type = ArrayList<ShouldBeEnabled> false depth = 0
2021-03-11 10:57:20,376 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<ShouldBeEnabled> = TODO()
2021-03-11 10:57:20,380 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<ShouldBeEnabled> = TODO()
2021-03-11 10:57:20,527 [main:95] - GENERATED = arrayListOf<ShouldBeEnabled>()
2021-03-11 10:57:20,757 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:20,777 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:20,779 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:20,781 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:20,783 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:20,784 [main:94] - GETTING Function0<String> from Checker
2021-03-11 10:57:20,792 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:20,794 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:20,796 [main:94] - GETTING Function0<String> from Checker
2021-03-11 10:57:20,798 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:20,799 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:20,801 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:20,803 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:20,804 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 10:57:20,804 [main:63] - replacement of { (12522)?.compareTo(-36).toString(-1199086069) } of type Function0<String> is { "arbfp"}
2021-03-11 10:57:20,920 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:57:20,920 [main:66] - Compilation checking started
2021-03-11 10:57:21,476 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { "arbfp"}
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { hit = true; (0.41910945906876174).toChar().isISOControl() }
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:21,484 [main:56] - replacing ({ hit = true; (0.41910945906876174).toChar().isISOControl() }, Function0<Boolean>)
2021-03-11 10:57:21,485 [main:38] - replacing { hit = true; (0.41910945906876174).toChar().isISOControl() } Function0<Boolean>
2021-03-11 10:57:21,485 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:57:21,598 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:57:21,601 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:57:21,604 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 10:57:21,604 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:21,740 [main:55] - randomType = ArrayList<String>
2021-03-11 10:57:21,849 [main:302] - generating value of type = ArrayList<String> false depth = 0
2021-03-11 10:57:21,977 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: String): ArrayList<Strg> = TODO()
2021-03-11 10:57:21,982 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: String): ArrayList<Strg> = TODO()
2021-03-11 10:57:22,114 [main:302] - generating value of type = String true depth = 3
2021-03-11 10:57:22,116 [main:95] - GENERATED = arrayListOf<String>("ukaef")
2021-03-11 10:57:22,282 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:22,299 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:22,300 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:22,302 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:22,303 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:57:22,309 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:22,310 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:22,311 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:22,313 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:22,314 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:57:22,316 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:22,317 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:22,319 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:22,320 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:22,320 [main:63] - replacement of { hit = true; (0.41910945906876174).toChar().isISOControl() } of type Function0<Boolean> is { false}
2021-03-11 10:57:22,432 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:57:22,433 [main:66] - Compilation checking started
2021-03-11 10:57:22,905 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { "arbfp"}
        }
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:22,914 [main:56] - replacing ({
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { "arbfp"}
        }, Function0<Unit>)
2021-03-11 10:57:22,914 [main:38] - replacing {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { "arbfp"}
        } Function0<Unit>
2021-03-11 10:57:22,915 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:57:23,063 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:57:23,066 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:57:23,213 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:57:23,217 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:57:23,590 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:57:23,591 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 10:57:23,593 [main:302] - generating value of type = Any false depth = 5
2021-03-11 10:57:23,593 [main:95] - GENERATED = require(false, { "fkmhw"})
2021-03-11 10:57:23,593 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "fkmhw"})}
2021-03-11 10:57:23,593 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:24,347 [main:55] - randomType = Function2<ShouldBeDisabled?, Triple<Checker?, Int, Float>, HashMap<Byte?, ShouldBeEnabled>>
2021-03-11 10:57:24,348 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:24,361 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:57:24,367 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:57:24,368 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:24,369 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:24,370 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:24,371 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:24,372 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:24,373 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:24,374 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:24,375 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:24,376 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:24,376 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:24,377 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:24,378 [main:63] - replacement of {
            assert((ArrayDeque<Checker?>(2127292989)).contains(ShouldBeDisabled()).xor(false)) { "arbfp"}
        } of type Function0<Unit> is { require(false, { "fkmhw"})}
2021-03-11 10:57:24,509 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:57:24,509 [main:66] - Compilation checking started
2021-03-11 10:57:24,935 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:24,946 [main:56] - replacing (hit, Boolean)
2021-03-11 10:57:24,947 [main:38] - replacing hit Boolean
2021-03-11 10:57:24,947 [main:42] - Getting value of type Boolean
2021-03-11 10:57:25,060 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:25,062 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:57:25,062 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:25,066 [main:55] - randomType = Double
2021-03-11 10:57:25,170 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:57:25,210 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ea6760]
2021-03-11 10:57:25,210 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56aab76c]
2021-03-11 10:57:25,313 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:57:25,417 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:25,419 [main:66] - Generated call from random type = (0.9945266628271261).toChar().equals('䇞', false)
2021-03-11 10:57:25,419 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:25,430 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:25,430 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:25,533 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:25,534 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:25,637 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:25,639 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("aiwbq").or(false)
2021-03-11 10:57:25,639 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:25,639 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:25,741 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:25,742 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).and(true)
2021-03-11 10:57:25,743 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:25,743 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:25,846 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:25,847 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:25,952 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:25,953 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("rwsly").xor(false)
2021-03-11 10:57:25,953 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:25,953 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:26,063 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:26,065 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:26,169 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:26,170 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).compareTo(false).equals("xpkxh")
2021-03-11 10:57:26,170 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:26,170 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:26,299 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:26,401 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:26,402 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals(null).equals("djlky")
2021-03-11 10:57:26,402 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:26,402 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:26,504 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:26,506 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).or(true)
2021-03-11 10:57:26,506 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:26,506 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:26,609 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:26,609 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:26,709 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:26,711 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("azgtm").and(true)
2021-03-11 10:57:26,711 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:26,711 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:26,811 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:26,813 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).xor(true)
2021-03-11 10:57:26,813 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:26,813 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:26,813 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).not()
2021-03-11 10:57:26,813 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:26,813 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:26,915 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:26,915 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("inchi")
2021-03-11 10:57:26,915 [main:63] - replacement of hit of type Boolean is (ShouldBeDisabled().checkTrueWithMessage()).compareTo(false).equals("xpkxh")
2021-03-11 10:57:27,017 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:27,025 [main:56] - replacing (hit, Boolean)
2021-03-11 10:57:27,025 [main:38] - replacing hit Boolean
2021-03-11 10:57:27,025 [main:42] - Getting value of type Boolean
2021-03-11 10:57:27,124 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:27,125 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:57:27,125 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:27,479 [main:55] - randomType = HashMap<Char, LinkedHashMap<ShouldBeEnabled, ULong>>
2021-03-11 10:57:27,578 [main:302] - generating value of type = HashMap<Char, LinkedHashMap<ShouldBeEnabled, ULong>> false depth = 0
2021-03-11 10:57:27,688 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Char, LinkedHashMap<ShouldBeEnabled, ULong>>): HashMap<Char, LkedHashMap<ShouldBeEnabled, ULong>> = TODO()
2021-03-11 10:57:27,690 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Char, LinkedHashMap<ShouldBeEnabled, ULong>>): HashMap<Char, LkedHashMap<ShouldBeEnabled, ULong>> = TODO()
2021-03-11 10:57:27,832 [main:302] - generating value of type = Pair<Char, LinkedHashMap<ShouldBeEnabled, ULong>> false depth = 3
2021-03-11 10:57:27,946 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Char, second: LinkedHashMap<ShouldBeEnabled, ULong>): Pair<Char, LinkedHashMap<ShouldBeEnabled, ULong>> = TODO()
2021-03-11 10:57:27,950 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Char, second: LinkedHashMap<ShouldBeEnabled, ULong>): Pair<Char, LinkedHashMap<ShouldBeEnabled, ULong>> = TODO()
2021-03-11 10:57:28,073 [main:302] - generating value of type = Char true depth = 6
2021-03-11 10:57:28,075 [main:302] - generating value of type = LinkedHashMap<ShouldBeEnabled, ULong> false depth = 6
2021-03-11 10:57:28,181 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<ShouldBeEnabled, ULong>): LkedHashMap<ShouldBeEnabled, ULong> = TODO()
2021-03-11 10:57:28,185 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<ShouldBeEnabled, ULong>): LkedHashMap<ShouldBeEnabled, ULong> = TODO()
2021-03-11 10:57:28,291 [main:302] - generating value of type = Pair<ShouldBeEnabled, ULong> false depth = 9
2021-03-11 10:57:28,399 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ShouldBeEnabled, second: ULong): Pair<ShouldBeEnabled, ULong> = TODO()
2021-03-11 10:57:28,401 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ShouldBeEnabled, second: ULong): Pair<ShouldBeEnabled, ULong> = TODO()
2021-03-11 10:57:28,505 [main:302] - generating value of type = ShouldBeEnabled false depth = 12
2021-03-11 10:57:28,506 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}
2021-03-11 10:57:28,507 [main:302] - generating value of type = ULong true depth = 12
2021-03-11 10:57:28,508 [main:95] - GENERATED = Pair<ShouldBeEnabled, ULong>(ShouldBeEnabled(), 7372301498674596761.toULong())
2021-03-11 10:57:28,508 [main:95] - GENERATED = linkedMapOf<ShouldBeEnabled, ULong>(Pair<ShouldBeEnabled, ULong>(ShouldBeEnabled(), 7372301498674596761.toULong()))
2021-03-11 10:57:28,508 [main:95] - GENERATED = Pair<Char, LinkedHashMap<ShouldBeEnabled, ULong>>('穲', linkedMapOf<ShouldBeEnabled, ULong>(Pair<ShouldBeEnabled, ULong>(ShouldBeEnabled(), 7372301498674596761.toULong())))
2021-03-11 10:57:28,509 [main:95] - GENERATED = linkedMapOf<Char, LinkedHashMap<ShouldBeEnabled, ULong>>(Pair<Char, LinkedHashMap<ShouldBeEnabled, ULong>>('穲', linkedMapOf<ShouldBeEnabled, ULong>(Pair<ShouldBeEnabled, ULong>(ShouldBeEnabled(), 7372301498674596761.toULong()))))
2021-03-11 10:57:28,670 [main:137] - GENERATING call of type public abstract fun add(element: kotlin.Char): kotlin.Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@39605c29]
2021-03-11 10:57:28,772 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:57:28,774 [main:66] - Generated call from random type = (linkedMapOf<Char, LinkedHashMap<ShouldBeEnabled, ULong>>(Pair<Char, LinkedHashMap<ShouldBeEnabled, ULong>>('穲', linkedMapOf<ShouldBeEnabled, ULong>(Pair<ShouldBeEnabled, ULong>(ShouldBeEnabled(), 7372301498674596761.toULong()))))).keys.add('䄭')
2021-03-11 10:57:28,774 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:28,786 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:28,786 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:28,886 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:28,887 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:28,988 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:28,990 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("mndrp").xor(false)
2021-03-11 10:57:28,990 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:28,990 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:29,090 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:29,091 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).or(true)
2021-03-11 10:57:29,091 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:29,091 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:29,194 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:29,195 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:29,298 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:29,299 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("qglbj").equals("atjhx")
2021-03-11 10:57:29,299 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:29,299 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:29,440 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:29,443 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).xor(false)
2021-03-11 10:57:29,443 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:29,443 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:29,567 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:29,568 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:29,568 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("svede").not()
2021-03-11 10:57:29,568 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:29,568 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:29,690 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:29,690 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:29,796 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:29,798 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("tulod").and(false)
2021-03-11 10:57:29,798 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:29,798 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:29,897 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:29,898 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("ntamn")
2021-03-11 10:57:29,898 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:29,898 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:30,001 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:30,002 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:30,104 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:30,105 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).compareTo(false).equals("uzzur")
2021-03-11 10:57:30,105 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:30,105 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:30,204 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:30,204 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:30,305 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:30,306 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("pgyte").or(true)
2021-03-11 10:57:30,306 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:30,306 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:30,405 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:30,406 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).and(true)
2021-03-11 10:57:30,406 [main:63] - replacement of hit of type Boolean is (ShouldBeDisabled().checkFalse()).compareTo(false).equals("uzzur")
2021-03-11 10:57:30,510 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:30,510 [main:66] - Compilation checking started
2021-03-11 10:57:30,793 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { (ShouldBeDisabled().checkFalse()).compareTo(false).equals("uzzur") = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:30,801 [main:56] - replacing (hit, Boolean)
2021-03-11 10:57:30,801 [main:38] - replacing hit Boolean
2021-03-11 10:57:30,801 [main:42] - Getting value of type Boolean
2021-03-11 10:57:30,902 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:30,904 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:57:30,904 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:31,406 [main:55] - randomType = HashMap<Pair<ShouldBeEnabled?, Checker>, ShouldBeDisabled>?
2021-03-11 10:57:31,505 [main:302] - generating value of type = HashMap<Pair<ShouldBeEnabled?, Checker>, ShouldBeDisabled> false depth = 0
2021-03-11 10:57:31,610 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Pair<ShouldBeEnabled?, Checker>, ShouldBeDisabled> = TODO()
2021-03-11 10:57:31,612 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Pair<ShouldBeEnabled?, Checker>, ShouldBeDisabled> = TODO()
2021-03-11 10:57:31,716 [main:95] - GENERATED = hashMapOf<Pair<ShouldBeEnabled?, Checker>, ShouldBeDisabled>()
2021-03-11 10:57:31,854 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@3fb6026]
2021-03-11 10:57:31,954 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:31,954 [main:66] - Generated call from random type = (hashMapOf<Pair<ShouldBeEnabled?, Checker>, ShouldBeDisabled>())?.keys.equals("prhap")
2021-03-11 10:57:31,954 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:31,963 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:31,963 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:32,063 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:32,065 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(true)
2021-03-11 10:57:32,065 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:32,065 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:32,164 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:32,166 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
2021-03-11 10:57:32,166 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:32,166 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:32,265 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:32,265 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:32,366 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:32,368 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("wsdby").xor(false)
2021-03-11 10:57:32,368 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:32,368 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:32,466 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:32,466 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("rqwaw")
2021-03-11 10:57:32,466 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:32,466 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:32,567 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:32,567 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:32,674 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:32,676 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("bhtoj").or(false)
2021-03-11 10:57:32,676 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:32,676 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:32,790 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:32,790 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:32,791 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("gkiqx").not()
2021-03-11 10:57:32,791 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:32,791 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:32,958 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:32,960 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:33,094 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:33,095 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(false).equals("aifeu")
2021-03-11 10:57:33,095 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:33,095 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:33,221 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:33,222 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:33,336 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:33,337 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("jyetb").and(true)
2021-03-11 10:57:33,337 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:33,337 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:33,439 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:33,439 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:33,536 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:33,537 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("uatld").equals("nzvgj")
2021-03-11 10:57:33,537 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:33,537 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:33,537 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:57:33,537 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkFalseWithMessage()).compareTo(false).equals("aifeu")
2021-03-11 10:57:33,634 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:33,635 [main:66] - Compilation checking started
2021-03-11 10:57:33,904 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { (ShouldBeEnabled().checkFalseWithMessage()).compareTo(false).equals("aifeu") = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:33,912 [main:56] - replacing (hit, Boolean)
2021-03-11 10:57:33,912 [main:38] - replacing hit Boolean
2021-03-11 10:57:33,912 [main:42] - Getting value of type Boolean
2021-03-11 10:57:34,019 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:34,020 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:57:34,021 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:34,026 [main:55] - randomType = Checker
2021-03-11 10:57:34,026 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:34,038 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:34,039 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:34,142 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:34,145 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).and(true)
2021-03-11 10:57:34,145 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:34,145 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:34,260 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:34,260 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:34,260 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("mlywm").not()
2021-03-11 10:57:34,261 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:34,261 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:34,364 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:34,367 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).xor(false)
2021-03-11 10:57:34,367 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:34,367 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:34,477 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:34,477 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:34,583 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:34,583 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("ancoz").equals("uqlbk")
2021-03-11 10:57:34,583 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:34,583 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:34,687 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:34,687 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("pzfqi")
2021-03-11 10:57:34,687 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:34,687 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:34,833 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:34,833 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:34,951 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:34,953 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("csnfi").or(false)
2021-03-11 10:57:34,953 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:34,953 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:35,092 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:35,092 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:35,222 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:35,223 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("vcwva").xor(false)
2021-03-11 10:57:35,223 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:35,224 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:35,326 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:35,327 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:35,432 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:35,432 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).compareTo(false).equals("cmqok")
2021-03-11 10:57:35,432 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:35,432 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:35,532 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:35,532 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:35,632 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:35,633 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("nvupu").and(false)
2021-03-11 10:57:35,633 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:35,633 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:35,734 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:35,736 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).or(true)
2021-03-11 10:57:35,736 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkTrue()).equals("pzfqi")
2021-03-11 10:57:35,837 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:35,837 [main:66] - Compilation checking started
2021-03-11 10:57:36,239 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:36,252 [main:56] - replacing ({
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        }, Function0<Unit>)
2021-03-11 10:57:36,252 [main:38] - replacing {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        } Function0<Unit>
2021-03-11 10:57:36,252 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:57:36,359 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:57:36,361 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:57:36,466 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:57:36,468 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:57:36,837 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:57:36,839 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 10:57:36,840 [main:302] - generating value of type = Any false depth = 5
2021-03-11 10:57:36,840 [main:95] - GENERATED = check(false, { "ebeou"})
2021-03-11 10:57:36,840 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "ebeou"})}
2021-03-11 10:57:36,841 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:36,846 [main:55] - randomType = Checker
2021-03-11 10:57:36,847 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:57:36,854 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:36,869 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:36,870 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:36,871 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:36,872 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:36,873 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:36,874 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:36,875 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:36,877 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:36,878 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:36,879 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:57:36,880 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:36,881 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:36,881 [main:63] - replacement of {
            assert((ShouldBeEnabled().checkTrueWithMessage()).equals("ozxdj").not())
        } of type Function0<Unit> is { check(false, { "ebeou"})}
2021-03-11 10:57:36,984 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:57:36,984 [main:66] - Compilation checking started
2021-03-11 10:57:37,374 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; ShouldBeEnabled().checkTrue() }
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:37,382 [main:56] - replacing ({ hit = true; ShouldBeEnabled().checkTrue() }, Function0<Boolean>)
2021-03-11 10:57:37,383 [main:38] - replacing { hit = true; ShouldBeEnabled().checkTrue() } Function0<Boolean>
2021-03-11 10:57:37,383 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:57:37,493 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:57:37,494 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:57:37,496 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 10:57:37,496 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:37,727 [main:55] - randomType = Set<UShort>
2021-03-11 10:57:37,728 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:37,740 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:37,741 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:37,742 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:37,743 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:37,744 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:37,745 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:37,746 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:57:37,752 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:37,753 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:37,754 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:37,756 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:37,757 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:57:37,758 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:57:37,758 [main:63] - replacement of { hit = true; ShouldBeEnabled().checkTrue() } of type Function0<Boolean> is { true}
2021-03-11 10:57:37,861 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:57:37,861 [main:66] - Compilation checking started
2021-03-11 10:57:38,251 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:38,263 [main:56] - replacing ({
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        }, Function0<Unit>)
2021-03-11 10:57:38,264 [main:38] - replacing {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        } Function0<Unit>
2021-03-11 10:57:38,264 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:57:38,383 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:57:38,385 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:57:38,495 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:57:38,498 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:57:38,825 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:57:38,826 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 10:57:38,828 [main:302] - generating value of type = Any false depth = 5
2021-03-11 10:57:38,828 [main:95] - GENERATED = require(true, { "aflcn"})
2021-03-11 10:57:38,828 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "aflcn"})}
2021-03-11 10:57:38,828 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:38,938 [main:55] - randomType = UShort
2021-03-11 10:57:39,065 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:57:39,109 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:39,120 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:39,121 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:39,122 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:39,123 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:39,125 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:39,126 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:57:39,133 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:39,134 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:39,135 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:39,136 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:39,137 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:39,138 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:39,139 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:57:39,139 [main:63] - replacement of {
            assert((-1722701006)?.div(0.9527305030462029).equals("gtdny")) { "xrlfd"}
        } of type Function0<Unit> is { require(true, { "aflcn"})}
2021-03-11 10:57:39,244 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:57:39,244 [main:66] - Compilation checking started
2021-03-11 10:57:39,629 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if (c.checkTrue()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:39,636 [main:56] - replacing (c.checkTrue(), Boolean)
2021-03-11 10:57:39,637 [main:38] - replacing c.checkTrue() Boolean
2021-03-11 10:57:39,637 [main:42] - Getting value of type Boolean
2021-03-11 10:57:39,737 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:39,738 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:57:39,738 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:39,854 [main:55] - randomType = LinkedHashSet<Double>
2021-03-11 10:57:39,952 [main:302] - generating value of type = LinkedHashSet<Double> false depth = 0
2021-03-11 10:57:40,056 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Double> = TODO()
2021-03-11 10:57:40,058 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Double> = TODO()
2021-03-11 10:57:40,161 [main:95] - GENERATED = linkedSetOf<Double>()
2021-03-11 10:57:40,293 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@d12b805]
2021-03-11 10:57:40,293 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@dbc9d8d]
2021-03-11 10:57:40,391 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 10:57:40,495 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<T> = TODO()
2021-03-11 10:57:40,498 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<T> = TODO()
2021-03-11 10:57:40,603 [main:95] - GENERATED = enumValues<T>()
2021-03-11 10:57:40,603 [main:66] - Generated call from random type = (linkedSetOf<Double>()).toArray().contentEquals(enumValues<T>())
2021-03-11 10:57:40,603 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:40,612 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:40,612 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:40,711 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:40,712 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).and(true)
2021-03-11 10:57:40,712 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:40,712 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:40,813 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:40,813 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:40,814 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("yncyg").not()
2021-03-11 10:57:40,814 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:40,814 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:40,917 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:40,918 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:41,020 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:41,021 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).compareTo(false).equals("jnkhz")
2021-03-11 10:57:41,021 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:41,021 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:41,021 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).not()
2021-03-11 10:57:41,021 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:41,021 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:41,156 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:41,156 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:41,257 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:41,258 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("ogwcj").and(false)
2021-03-11 10:57:41,258 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:41,259 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:41,360 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:41,360 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:41,458 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:41,459 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("dkoyq").xor(true)
2021-03-11 10:57:41,459 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:41,459 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:41,565 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:41,565 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:41,668 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:41,668 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("uvcwi").equals("vpnty")
2021-03-11 10:57:41,668 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:41,668 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:41,769 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:41,771 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).xor(true)
2021-03-11 10:57:41,771 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:41,771 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:41,886 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:41,886 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:41,984 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:41,986 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("gszif").or(true)
2021-03-11 10:57:41,986 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:41,986 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:42,085 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:42,087 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).or(true)
2021-03-11 10:57:42,087 [main:63] - replacement of c.checkTrue() of type Boolean is (ShouldBeDisabled().checkTrue()).not()
2021-03-11 10:57:42,186 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:42,186 [main:66] - Compilation checking started
2021-03-11 10:57:42,563 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:42,571 [main:56] - replacing (false, Boolean)
2021-03-11 10:57:42,571 [main:38] - replacing false Boolean
2021-03-11 10:57:42,571 [main:42] - Getting value of type Boolean
2021-03-11 10:57:42,673 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:42,675 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:57:42,675 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:42,678 [main:55] - randomType = Boolean
2021-03-11 10:57:42,776 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:42,790 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:42,890 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:42,892 [main:66] - Generated call from random type = (false).and(false)
2021-03-11 10:57:42,892 [main:63] - replacement of false of type Boolean is (false).and(false)
2021-03-11 10:57:42,990 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:42,990 [main:66] - Compilation checking started
2021-03-11 10:57:43,415 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:43,423 [main:56] - replacing ({
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        }, Function0<Unit>)
2021-03-11 10:57:43,423 [main:38] - replacing {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        } Function0<Unit>
2021-03-11 10:57:43,423 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:57:43,526 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:57:43,527 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:57:43,637 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:57:43,639 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:57:43,860 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:57:43,861 [main:95] - GENERATED = check(false)
2021-03-11 10:57:43,861 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 10:57:43,861 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:43,868 [main:55] - randomType = Checker
2021-03-11 10:57:43,869 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:43,883 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:43,884 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:43,885 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:43,886 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:43,887 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:43,888 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:43,889 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:57:43,893 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:43,894 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:57:43,896 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:43,897 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:43,898 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:43,899 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:57:43,899 [main:63] - replacement of {
            assert((ShouldBeDisabled().checkFalseWithMessage()).equals("qlyzh").xor(true))
        } of type Function0<Unit> is { check(false)}
2021-03-11 10:57:43,997 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:57:43,998 [main:66] - Compilation checking started
2021-03-11 10:57:44,395 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:44,403 [main:56] - replacing (c, Checker)
2021-03-11 10:57:44,404 [main:38] - replacing c Checker
2021-03-11 10:57:44,404 [main:42] - Getting value of type Checker
2021-03-11 10:57:44,503 [main:302] - generating value of type = Checker false depth = 0
2021-03-11 10:57:44,505 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:57:44,708 [main:302] - generating value of type = ShouldBeEnabled false depth = 2
2021-03-11 10:57:44,710 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}
2021-03-11 10:57:44,710 [main:46] - GENERATED VALUE OF TYPE Checker = ShouldBeEnabled()
2021-03-11 10:57:44,710 [main:49] - GENERATED IS CALL =true
2021-03-11 10:57:44,819 [main:55] - randomType = Char?
2021-03-11 10:57:44,918 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:57:44,940 [main:94] - GETTING Checker from Checker
2021-03-11 10:57:44,944 [main:63] - replacement of c of type Checker is setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
2021-03-11 10:57:45,042 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:57:45,043 [main:66] - Compilation checking started
2021-03-11 10:57:45,310 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    setDesiredAssertionStatus(ShouldBeEnabled().checkTrue()) = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:45,317 [main:56] - replacing (hit, Boolean)
2021-03-11 10:57:45,318 [main:38] - replacing hit Boolean
2021-03-11 10:57:45,318 [main:42] - Getting value of type Boolean
2021-03-11 10:57:45,423 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:45,424 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:57:45,424 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:45,538 [main:55] - randomType = HashSet<Long>
2021-03-11 10:57:45,669 [main:302] - generating value of type = HashSet<Long> false depth = 0
2021-03-11 10:57:45,775 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Long): HashSet<Long> = TODO()
2021-03-11 10:57:45,778 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Long): HashSet<Long> = TODO()
2021-03-11 10:57:45,883 [main:302] - generating value of type = Long true depth = 3
2021-03-11 10:57:45,885 [main:95] - GENERATED = linkedSetOf<Long>(3153798251726510466)
2021-03-11 10:57:46,009 [main:137] - GENERATING call of type public open fun add(element: kotlin.Long): kotlin.Boolean defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@1e33f30b]
2021-03-11 10:57:46,112 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:57:46,114 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:46,216 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:46,218 [main:66] - Generated call from random type = (linkedSetOf<Long>(3153798251726510466)).add(1279902752620308625).or(false)
2021-03-11 10:57:46,219 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:46,227 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:46,227 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:46,227 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).not()
2021-03-11 10:57:46,227 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:46,228 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:46,327 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:46,328 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).or(true)
2021-03-11 10:57:46,328 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:46,328 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:46,432 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:46,432 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:46,534 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:46,534 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("kzcrx").equals("arjih")
2021-03-11 10:57:46,534 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:46,534 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:46,637 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:46,637 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:46,637 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("mequt").not()
2021-03-11 10:57:46,637 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:46,637 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:46,736 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:46,738 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).and(false)
2021-03-11 10:57:46,738 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:46,738 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:46,838 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:46,838 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:46,937 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:46,939 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("makkb").or(false)
2021-03-11 10:57:46,939 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:46,939 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:47,039 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:47,039 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("qcynm")
2021-03-11 10:57:47,039 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:47,039 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:47,138 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:47,139 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:47,236 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:47,237 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("teefj").xor(false)
2021-03-11 10:57:47,237 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:47,237 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:47,335 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:47,337 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:47,437 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:47,437 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).compareTo(false).equals("nwpza")
2021-03-11 10:57:47,437 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:47,437 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:47,537 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:47,539 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).xor(false)
2021-03-11 10:57:47,539 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkTrueWithMessage()).equals("makkb").or(false)
2021-03-11 10:57:47,672 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:47,672 [main:66] - Compilation checking started
2021-03-11 10:57:48,012 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { (ShouldBeEnabled().checkTrueWithMessage()).equals("makkb").or(false) = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "FAIL 4"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:48,021 [main:56] - replacing (hit, Boolean)
2021-03-11 10:57:48,021 [main:38] - replacing hit Boolean
2021-03-11 10:57:48,021 [main:42] - Getting value of type Boolean
2021-03-11 10:57:48,125 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:48,126 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:57:48,126 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:48,132 [main:55] - randomType = Checker
2021-03-11 10:57:48,132 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:48,142 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:48,142 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:48,241 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:48,241 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:48,241 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("ajylv").not()
2021-03-11 10:57:48,242 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:48,242 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:48,340 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:48,341 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:48,440 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:48,440 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("bwwvo").equals("yhgie")
2021-03-11 10:57:48,440 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:48,440 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:48,540 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:48,541 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).xor(true)
2021-03-11 10:57:48,541 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:48,541 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:48,638 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:48,639 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("akvam")
2021-03-11 10:57:48,639 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:48,639 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:48,738 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:48,738 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:48,835 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:48,837 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("tkxro").xor(true)
2021-03-11 10:57:48,837 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:48,837 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:48,936 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:48,937 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(false)
2021-03-11 10:57:48,937 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:48,937 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:49,039 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:49,041 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(false)
2021-03-11 10:57:49,041 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:49,041 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:49,141 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:49,142 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:49,304 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:49,305 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("zmhfc").or(false)
2021-03-11 10:57:49,306 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:49,306 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:49,306 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:57:49,306 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:49,306 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:49,414 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:49,414 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:49,527 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:49,529 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("iuwky").and(true)
2021-03-11 10:57:49,529 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkFalseWithMessage()).xor(true)
2021-03-11 10:57:49,632 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:49,639 [main:56] - replacing ("FAIL 4", String)
2021-03-11 10:57:49,640 [main:38] - replacing "FAIL 4" String
2021-03-11 10:57:49,640 [main:42] - Getting value of type String
2021-03-11 10:57:49,738 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:57:49,739 [main:46] - GENERATED VALUE OF TYPE String = "iodej"
2021-03-11 10:57:49,740 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:49,742 [main:55] - randomType = String
2021-03-11 10:57:49,840 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:57:49,862 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fc73904]
2021-03-11 10:57:49,961 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:57:50,063 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:57:50,066 [main:66] - Generated call from random type = ("zizlj").removeRange(1778718972, 710755721)
2021-03-11 10:57:50,067 [main:94] - GETTING String from Boolean
2021-03-11 10:57:50,077 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:57:50,078 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:50,177 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:50,179 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:57:50,283 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:57:50,285 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).toString(1878628927)
2021-03-11 10:57:50,285 [main:63] - replacement of "FAIL 4" of type String is "iodej"
2021-03-11 10:57:50,389 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 10:57:50,389 [main:66] - Compilation checking started
2021-03-11 10:57:50,762 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:50,774 [main:56] - replacing (false, Boolean)
2021-03-11 10:57:50,774 [main:38] - replacing false Boolean
2021-03-11 10:57:50,774 [main:42] - Getting value of type Boolean
2021-03-11 10:57:50,894 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:50,895 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:57:50,895 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:50,901 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:57:51,059 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:57:51,061 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = false
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}
2021-03-11 10:57:51,072 [main:137] - GENERATING call of type public open fun checkFalse(): kotlin.Boolean defined in ShouldBeEnabled[SimpleFunctionDescriptorImpl@3d594615]
2021-03-11 10:57:51,073 [main:66] - Generated call from random type = (ShouldBeEnabled()).checkFalse()
2021-03-11 10:57:51,073 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:51,085 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:51,085 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:51,192 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:51,192 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:51,193 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("ascdb").not()
2021-03-11 10:57:51,193 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:51,193 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:51,309 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:51,311 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).or(true)
2021-03-11 10:57:51,311 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:51,311 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:51,415 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:51,415 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:51,517 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:51,518 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("rpeyc").xor(false)
2021-03-11 10:57:51,518 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:51,518 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:51,625 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:51,625 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:51,724 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:51,726 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("zxsqc").and(true)
2021-03-11 10:57:51,726 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:51,726 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:51,823 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:51,824 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("smdme")
2021-03-11 10:57:51,824 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:51,824 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:51,924 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:51,926 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:52,038 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:52,038 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).compareTo(false).equals("dnskn")
2021-03-11 10:57:52,038 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:52,038 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:52,151 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:52,153 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).xor(false)
2021-03-11 10:57:52,153 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:52,153 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:52,153 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).not()
2021-03-11 10:57:52,153 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:52,153 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:52,255 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:52,255 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:52,412 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:52,412 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("srvkr").equals("eiqqo")
2021-03-11 10:57:52,413 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:52,413 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:52,552 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:52,554 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).and(false)
2021-03-11 10:57:52,554 [main:63] - replacement of false of type Boolean is (ShouldBeEnabled().checkFalse()).and(false)
2021-03-11 10:57:52,669 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:52,670 [main:66] - Compilation checking started
2021-03-11 10:57:53,037 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = true; (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:53,045 [main:56] - replacing (true, Boolean)
2021-03-11 10:57:53,045 [main:38] - replacing true Boolean
2021-03-11 10:57:53,045 [main:42] - Getting value of type Boolean
2021-03-11 10:57:53,143 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:53,144 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:57:53,145 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:53,251 [main:55] - randomType = Long?
2021-03-11 10:57:53,350 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:57:53,382 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49d9ef30]
2021-03-11 10:57:53,382 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34b58084]
2021-03-11 10:57:53,383 [main:66] - Generated call from random type = (3283225029933208707)?.toFloat().isNaN()
2021-03-11 10:57:53,383 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:53,391 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:53,391 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:53,485 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:53,485 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:53,586 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:53,586 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("jnqqp").equals("lsqam")
2021-03-11 10:57:53,586 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:53,586 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:53,680 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:53,680 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:53,775 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:53,777 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("cndjh").and(false)
2021-03-11 10:57:53,777 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:53,777 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:53,875 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:53,876 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:53,970 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:53,972 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("maixc").or(false)
2021-03-11 10:57:53,972 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:53,972 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:54,097 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:54,098 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).or(true)
2021-03-11 10:57:54,099 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:54,099 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:54,192 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:54,193 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("hcwdt")
2021-03-11 10:57:54,193 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:54,193 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:54,288 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:54,288 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:54,387 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:54,388 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("snpmx").xor(false)
2021-03-11 10:57:54,388 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:54,388 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:54,482 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:54,483 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).and(true)
2021-03-11 10:57:54,484 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:54,484 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:54,484 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:57:54,484 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:54,484 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:54,581 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:54,583 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:54,677 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:54,677 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).compareTo(false).equals("bzryd")
2021-03-11 10:57:54,678 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:54,678 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:54,773 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:54,774 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).xor(true)
2021-03-11 10:57:54,774 [main:63] - replacement of true of type Boolean is (3283225029933208707)?.toFloat().isNaN()
2021-03-11 10:57:54,871 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:54,872 [main:66] - Compilation checking started
2021-03-11 10:57:55,235 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:55,247 [main:56] - replacing (true, Boolean)
2021-03-11 10:57:55,247 [main:38] - replacing true Boolean
2021-03-11 10:57:55,247 [main:42] - Getting value of type Boolean
2021-03-11 10:57:55,365 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:55,367 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:57:55,367 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:55,372 [main:55] - randomType = Checker
2021-03-11 10:57:55,372 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:55,381 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:55,381 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:55,478 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:55,478 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:55,585 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:55,586 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("qgbwk").equals("zrmvr")
2021-03-11 10:57:55,586 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:55,586 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:55,682 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:55,683 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).xor(true)
2021-03-11 10:57:55,683 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:55,683 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:55,778 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:55,778 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals(null).not()
2021-03-11 10:57:55,779 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:55,779 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:55,898 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:55,900 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:55,995 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:55,996 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(false).equals("lzzig")
2021-03-11 10:57:55,996 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:55,996 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:55,996 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:57:55,996 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:55,996 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:56,100 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:56,102 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(false)
2021-03-11 10:57:56,102 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:56,102 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:56,238 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:56,238 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:56,352 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:56,354 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("iyyif").or(true)
2021-03-11 10:57:56,354 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:56,354 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:56,451 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:56,452 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:56,561 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:56,563 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("oicqz").and(false)
2021-03-11 10:57:56,563 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:56,563 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:56,667 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:56,668 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(true)
2021-03-11 10:57:56,669 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:56,669 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:56,766 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:56,767 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:56,869 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:56,871 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("knsmq").xor(false)
2021-03-11 10:57:56,871 [main:63] - replacement of true of type Boolean is (ShouldBeEnabled().checkFalseWithMessage()).and(false)
2021-03-11 10:57:56,966 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:56,974 [main:56] - replacing (false, Boolean)
2021-03-11 10:57:56,974 [main:38] - replacing false Boolean
2021-03-11 10:57:56,974 [main:42] - Getting value of type Boolean
2021-03-11 10:57:57,073 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:57,075 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:57:57,075 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:57,197 [main:55] - randomType = UShort
2021-03-11 10:57:57,354 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:57:57,398 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@43357b]
2021-03-11 10:57:57,503 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:57,504 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:57,620 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:57,622 [main:66] - Generated call from random type = (4506.toUShort()).equals("kdxsa").or(false)
2021-03-11 10:57:57,622 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:57,635 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:57,635 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:57,732 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:57,732 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:57,835 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:57,836 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("haorx").or(true)
2021-03-11 10:57:57,837 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:57,837 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:57,933 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:57,934 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).xor(false)
2021-03-11 10:57:57,934 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:57:57,934 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:57:58,030 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:58,031 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:57:58,134 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:58,135 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("elxmp")
2021-03-11 10:57:58,135 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:57:58,135 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:57:58,231 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:58,232 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(false)
2021-03-11 10:57:58,232 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:58,232 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:58,334 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:58,334 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:58,432 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("cvfhe").equals(null)
2021-03-11 10:57:58,432 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:58,433 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:58,528 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:58,528 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:58,631 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:58,633 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("iqnzn").and(true)
2021-03-11 10:57:58,633 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:58,633 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:57:58,729 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:57:58,729 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:58,863 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:58,864 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("evevo").xor(false)
2021-03-11 10:57:58,864 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:58,864 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:58,865 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:57:58,865 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:57:58,865 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:57:58,970 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals(null)
2021-03-11 10:57:58,970 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:58,970 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:59,084 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:59,086 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
2021-03-11 10:57:59,086 [main:63] - replacement of false of type Boolean is (ShouldBeEnabled().checkFalseWithMessage()).and(true)
2021-03-11 10:57:59,192 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:57:59,192 [main:66] - Compilation checking started
2021-03-11 10:57:59,587 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:57:59,600 [main:56] - replacing (hit, Boolean)
2021-03-11 10:57:59,600 [main:38] - replacing hit Boolean
2021-03-11 10:57:59,600 [main:42] - Getting value of type Boolean
2021-03-11 10:57:59,700 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:59,701 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:57:59,701 [main:49] - GENERATED IS CALL =false
2021-03-11 10:57:59,706 [main:55] - randomType = Checker
2021-03-11 10:57:59,706 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:57:59,719 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:57:59,719 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:57:59,719 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:57:59,719 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:59,719 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:57:59,817 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:59,818 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).and(true)
2021-03-11 10:57:59,818 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:57:59,818 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:57:59,919 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:57:59,920 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).xor(false)
2021-03-11 10:57:59,921 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:57:59,921 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:00,016 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:00,016 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:00,127 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:00,128 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("nixpq").and(false)
2021-03-11 10:58:00,128 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:00,128 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:00,225 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:00,227 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:00,324 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:00,324 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).compareTo(true).equals("afrsk")
2021-03-11 10:58:00,324 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:00,324 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:00,428 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:00,428 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:00,526 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("dfzrd").equals(null)
2021-03-11 10:58:00,526 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:00,526 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:00,660 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:00,662 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).or(false)
2021-03-11 10:58:00,662 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:00,663 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:00,769 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:00,769 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("dpubp")
2021-03-11 10:58:00,770 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:00,770 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:00,897 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:00,898 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:00,998 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:01,000 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("xnkpq").xor(false)
2021-03-11 10:58:01,000 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:01,000 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:01,102 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:01,102 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:01,198 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:01,199 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("mrmku").or(true)
2021-03-11 10:58:01,199 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:58:01,296 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:01,305 [main:56] - replacing (true, Boolean)
2021-03-11 10:58:01,305 [main:38] - replacing true Boolean
2021-03-11 10:58:01,305 [main:42] - Getting value of type Boolean
2021-03-11 10:58:01,407 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:01,408 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:58:01,408 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:01,518 [main:55] - randomType = ShouldBeEnabled?
2021-03-11 10:58:01,614 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:58:01,615 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; true }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}
2021-03-11 10:58:01,623 [main:137] - GENERATING call of type public open fun checkTrue(): kotlin.Boolean defined in ShouldBeEnabled[SimpleFunctionDescriptorImpl@2eaa4bdb]
2021-03-11 10:58:01,623 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:01,720 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:01,722 [main:66] - Generated call from random type = (ShouldBeEnabled())?.checkTrue().or(true)
2021-03-11 10:58:01,722 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:01,733 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:01,733 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:01,829 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:01,830 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).or(true)
2021-03-11 10:58:01,830 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:01,830 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:01,928 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:01,928 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("chzmr")
2021-03-11 10:58:01,928 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:01,928 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:02,025 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:02,025 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:02,178 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:02,180 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("tofxw").or(true)
2021-03-11 10:58:02,180 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:02,180 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:02,285 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:02,286 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).xor(true)
2021-03-11 10:58:02,287 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:02,287 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:02,400 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:02,402 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).and(false)
2021-03-11 10:58:02,402 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:02,402 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:02,505 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:02,506 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:02,620 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:02,620 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("lvexb")
2021-03-11 10:58:02,621 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:02,621 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:02,734 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:02,735 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:02,735 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("shlsv").not()
2021-03-11 10:58:02,735 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:02,735 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:02,840 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:02,840 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:02,937 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:02,938 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("fcpva").and(false)
2021-03-11 10:58:02,938 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:02,938 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:03,038 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:03,038 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:03,135 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:03,136 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("tmoau").equals("egdcx")
2021-03-11 10:58:03,136 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:03,136 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:03,235 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:03,235 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:03,346 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:03,348 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("gdmdk").xor(false)
2021-03-11 10:58:03,348 [main:63] - replacement of true of type Boolean is false
2021-03-11 10:58:03,456 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 10:58:03,456 [main:66] - Compilation checking started
2021-03-11 10:58:03,843 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        c.checkFalse()
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:58:03,852 [main:56] - replacing ({ false}(), Boolean)
2021-03-11 10:58:03,852 [main:38] - replacing { false}() Boolean
2021-03-11 10:58:03,852 [main:42] - Getting value of type Boolean
2021-03-11 10:58:03,996 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:03,998 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:58:03,998 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:04,004 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:58:04,133 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:58:04,135 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}
2021-03-11 10:58:04,146 [main:137] - GENERATING call of type public open fun checkTrue(): kotlin.Boolean defined in ShouldBeEnabled[SimpleFunctionDescriptorImpl@7bb8793c]
2021-03-11 10:58:04,146 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:04,147 [main:66] - Generated call from random type = (ShouldBeEnabled()).checkTrue().not()
2021-03-11 10:58:04,147 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:04,161 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:04,161 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:04,293 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:04,294 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("rdhrt")
2021-03-11 10:58:04,294 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:04,294 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:04,418 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:04,420 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).xor(true)
2021-03-11 10:58:04,420 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:04,420 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:04,538 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:04,540 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).or(false)
2021-03-11 10:58:04,540 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:04,540 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:04,639 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:04,640 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:04,640 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("smaax").not()
2021-03-11 10:58:04,640 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:04,640 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:04,640 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:58:04,640 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:04,640 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:04,740 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:04,742 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).and(false)
2021-03-11 10:58:04,742 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:04,742 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:04,852 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:04,852 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:04,974 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:04,976 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("hwapw").or(true)
2021-03-11 10:58:04,976 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:04,976 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:05,089 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:05,090 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:05,188 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:05,189 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("vvwll").equals("ykelw")
2021-03-11 10:58:05,189 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:05,189 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:05,301 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:05,303 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:05,414 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:05,415 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).compareTo(true).equals("faaam")
2021-03-11 10:58:05,415 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:05,415 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:05,567 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:05,567 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:05,678 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:05,681 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("tczmh").xor(true)
2021-03-11 10:58:05,681 [main:63] - replacement of { false}() of type Boolean is (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:58:05,824 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:05,832 [main:56] - replacing (true, Boolean)
2021-03-11 10:58:05,832 [main:38] - replacing true Boolean
2021-03-11 10:58:05,832 [main:42] - Getting value of type Boolean
2021-03-11 10:58:05,943 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:05,944 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:58:05,945 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:05,947 [main:55] - randomType = Boolean
2021-03-11 10:58:06,050 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:06,066 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:06,181 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:06,182 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:06,291 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:06,293 [main:66] - Generated call from random type = (true).equals("vjmbs").or(false)
2021-03-11 10:58:06,293 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:06,303 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:06,303 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:06,400 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:06,400 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("fzzsw")
2021-03-11 10:58:06,400 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:06,400 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:06,497 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:06,498 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).and(false)
2021-03-11 10:58:06,498 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:06,499 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:06,499 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).not()
2021-03-11 10:58:06,499 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:06,499 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:06,595 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:06,595 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:06,704 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:06,705 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("esnui").xor(false)
2021-03-11 10:58:06,706 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:06,706 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:06,813 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:06,814 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:06,922 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:06,922 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("aiyow").equals("faesg")
2021-03-11 10:58:06,923 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:06,923 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:07,060 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:07,061 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:07,187 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:07,188 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("ktzjk").and(false)
2021-03-11 10:58:07,189 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:07,189 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:07,312 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:07,314 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).or(true)
2021-03-11 10:58:07,314 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:07,314 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:07,415 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:07,415 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:07,415 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("fxctj").not()
2021-03-11 10:58:07,415 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:07,415 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:07,513 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:07,514 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:07,610 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:07,610 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).compareTo(false).equals("ciuqe")
2021-03-11 10:58:07,611 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:07,611 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:07,708 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:07,708 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:07,805 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:07,806 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("eikaw").or(true)
2021-03-11 10:58:07,806 [main:63] - replacement of true of type Boolean is (ShouldBeDisabled().checkTrue()).equals("esnui").xor(false)
2021-03-11 10:58:07,903 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:07,911 [main:56] - replacing (c.checkFalse(), Boolean)
2021-03-11 10:58:07,912 [main:38] - replacing c.checkFalse() Boolean
2021-03-11 10:58:07,912 [main:42] - Getting value of type Boolean
2021-03-11 10:58:08,009 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:08,010 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:58:08,010 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:08,013 [main:55] - randomType = Long
2021-03-11 10:58:08,109 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:58:08,142 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2cd3f351]
2021-03-11 10:58:08,246 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:08,247 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:08,360 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:08,362 [main:66] - Generated call from random type = (2483672013832373045).equals("mlbrl").xor(true)
2021-03-11 10:58:08,362 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:08,375 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:08,375 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:08,504 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:08,505 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:08,505 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("dshqz").not()
2021-03-11 10:58:08,505 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:08,505 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:08,629 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:08,631 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).xor(true)
2021-03-11 10:58:08,631 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:08,631 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:08,759 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:08,761 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).or(true)
2021-03-11 10:58:08,761 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:08,761 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:08,866 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:08,868 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:08,970 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:08,970 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).compareTo(false).equals("ajdui")
2021-03-11 10:58:08,970 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:08,970 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:09,070 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:09,071 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("wcxhj")
2021-03-11 10:58:09,071 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:09,071 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:09,169 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:09,170 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:09,272 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:09,272 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("dafvg").equals("kamwd")
2021-03-11 10:58:09,272 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:09,272 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:09,273 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).not()
2021-03-11 10:58:09,273 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:09,273 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:09,373 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:09,373 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:09,476 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:09,478 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("guaps").or(true)
2021-03-11 10:58:09,478 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:09,478 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:09,590 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:09,592 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).and(true)
2021-03-11 10:58:09,593 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:09,593 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:09,691 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:09,789 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:09,790 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals(null).and(false)
2021-03-11 10:58:09,790 [main:63] - replacement of c.checkFalse() of type Boolean is (2483672013832373045).equals("mlbrl").xor(true)
2021-03-11 10:58:09,923 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:09,924 [main:66] - Compilation checking started
2021-03-11 10:58:10,351 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:58:10,359 [main:56] - replacing (false, Boolean)
2021-03-11 10:58:10,359 [main:38] - replacing false Boolean
2021-03-11 10:58:10,359 [main:42] - Getting value of type Boolean
2021-03-11 10:58:10,465 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:10,467 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:58:10,467 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:10,687 [main:55] - randomType = List<Double>
2021-03-11 10:58:10,687 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:10,698 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:10,698 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:10,698 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).not()
2021-03-11 10:58:10,698 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:10,698 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:10,798 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:10,798 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:10,903 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:10,904 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("exqgg").and(true)
2021-03-11 10:58:10,905 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:10,905 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:11,003 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:11,004 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:11,104 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:11,106 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
2021-03-11 10:58:11,106 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:11,106 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:11,204 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:11,206 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:11,304 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:11,304 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).compareTo(false).equals("ajhic")
2021-03-11 10:58:11,304 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:11,304 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:11,407 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:11,407 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:11,525 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:11,525 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("gceug").equals("fvgok")
2021-03-11 10:58:11,526 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:11,526 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:11,680 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:11,683 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).and(true)
2021-03-11 10:58:11,683 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:11,683 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:11,852 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:11,854 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).xor(false)
2021-03-11 10:58:11,854 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:11,854 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:11,965 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:11,965 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:11,966 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("mozcu").not()
2021-03-11 10:58:11,966 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:11,966 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:12,082 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:12,083 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("vgmlu")
2021-03-11 10:58:12,083 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:12,083 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:12,191 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:12,192 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).or(false)
2021-03-11 10:58:12,192 [main:63] - replacement of false of type Boolean is (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
2021-03-11 10:58:12,299 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:12,299 [main:66] - Compilation checking started
2021-03-11 10:58:12,669 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:58:12,677 [main:56] - replacing (true, Boolean)
2021-03-11 10:58:12,678 [main:38] - replacing true Boolean
2021-03-11 10:58:12,678 [main:42] - Getting value of type Boolean
2021-03-11 10:58:12,791 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:12,792 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:58:12,792 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:12,909 [main:55] - randomType = ShouldBeEnabled?
2021-03-11 10:58:13,009 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:58:13,011 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = true; false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}
2021-03-11 10:58:13,017 [main:137] - GENERATING call of type public open fun checkTrueWithMessage(): kotlin.Boolean defined in ShouldBeEnabled[SimpleFunctionDescriptorImpl@65305d2f]
2021-03-11 10:58:13,017 [main:66] - Generated call from random type = (ShouldBeEnabled())?.checkTrueWithMessage()
2021-03-11 10:58:13,018 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:13,026 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:13,026 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:13,128 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:13,130 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:13,231 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:13,231 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).compareTo(false).equals("pabvy")
2021-03-11 10:58:13,231 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:13,231 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:13,334 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:13,334 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("xpmpd")
2021-03-11 10:58:13,334 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:13,334 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:13,443 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:13,443 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:13,574 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:13,574 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("uzqba").equals("ejrly")
2021-03-11 10:58:13,574 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:13,574 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:13,686 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:13,686 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:13,806 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:13,808 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false)
2021-03-11 10:58:13,808 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:13,808 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:13,808 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).not()
2021-03-11 10:58:13,808 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:13,808 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:13,914 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:13,915 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).and(true)
2021-03-11 10:58:13,915 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:13,915 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:14,018 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:14,018 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:14,018 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("wiwjj").not()
2021-03-11 10:58:14,019 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:14,019 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:14,120 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:14,122 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).xor(true)
2021-03-11 10:58:14,122 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:14,122 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:14,223 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:14,223 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:14,326 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:14,328 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("pqegh").and(false)
2021-03-11 10:58:14,328 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:14,328 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:14,433 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:14,434 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:14,537 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:14,538 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("gfkxc").xor(true)
2021-03-11 10:58:14,538 [main:63] - replacement of true of type Boolean is (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false)
2021-03-11 10:58:14,643 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:14,643 [main:66] - Compilation checking started
2021-03-11 10:58:15,058 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:58:15,067 [main:56] - replacing (hit, Boolean)
2021-03-11 10:58:15,067 [main:38] - replacing hit Boolean
2021-03-11 10:58:15,067 [main:42] - Getting value of type Boolean
2021-03-11 10:58:15,176 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:15,177 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:58:15,177 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:15,675 [main:55] - randomType = Array<ArrayDeque<Byte>>
2021-03-11 10:58:15,777 [main:302] - generating value of type = Array<ArrayDeque<Byte>> false depth = 0
2021-03-11 10:58:15,889 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<ArrayDeque<Byte>> = TODO()
2021-03-11 10:58:15,892 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<ArrayDeque<Byte>> = TODO()
2021-03-11 10:58:15,994 [main:95] - GENERATED = enumValues<ArrayDeque<Byte>>()
2021-03-11 10:58:16,015 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.collections.ArrayDeque<kotlin.Byte> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@341d392b]
2021-03-11 10:58:16,116 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:58:16,117 [main:137] - GENERATING call of type public open fun containsAll(elements: kotlin.collections.Collection<kotlin.Byte>): kotlin.Boolean defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@230c268e]
2021-03-11 10:58:16,217 [main:302] - generating value of type = Collection<Byte> false depth = 0
2021-03-11 10:58:16,317 [main:43] - GENERATING CALL OF fun ULongArray(size: kotlin.Int): Collection<Byte> = TODO()
2021-03-11 10:58:16,320 [main:61] - WITHOUT TYPE PARAMS = fun ULongArray(size: kotlin.Int): Collection<Byte> = TODO()
2021-03-11 10:58:16,542 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:58:16,543 [main:95] - GENERATED = ULongArray(1128577783)
2021-03-11 10:58:16,544 [main:66] - Generated call from random type = (enumValues<ArrayDeque<Byte>>()).get(-2096726773).containsAll(ULongArray(1128577783))
2021-03-11 10:58:16,544 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:16,553 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:16,553 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:16,656 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:16,657 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
2021-03-11 10:58:16,657 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:16,657 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:16,787 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:16,789 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).or(true)
2021-03-11 10:58:16,789 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:16,789 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:16,920 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:16,920 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:17,035 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:17,037 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("vfhdk").or(true)
2021-03-11 10:58:17,037 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:17,037 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:17,151 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:17,153 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).and(false)
2021-03-11 10:58:17,153 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:17,153 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:17,260 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:17,260 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:17,366 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:17,368 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("okpga").and(true)
2021-03-11 10:58:17,368 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:17,368 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:17,474 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:17,474 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("dqvyq")
2021-03-11 10:58:17,474 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:17,474 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:17,579 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:17,581 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:17,680 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:17,680 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).compareTo(true).equals("ppokr")
2021-03-11 10:58:17,680 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:17,680 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:17,784 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:17,784 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:17,888 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:17,889 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("vripv").equals("gqyem")
2021-03-11 10:58:17,889 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:17,889 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:17,889 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).not()
2021-03-11 10:58:17,889 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:17,889 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:18,001 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:18,001 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:18,001 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("xllzp").not()
2021-03-11 10:58:18,001 [main:63] - replacement of hit of type Boolean is (ShouldBeDisabled().checkTrueWithMessage()).not()
2021-03-11 10:58:18,134 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:18,135 [main:66] - Compilation checking started
2021-03-11 10:58:18,440 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { (ShouldBeDisabled().checkTrueWithMessage()).not() = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return "OK"
}


2021-03-11 10:58:18,449 [main:56] - replacing (true, Boolean)
2021-03-11 10:58:18,450 [main:38] - replacing true Boolean
2021-03-11 10:58:18,450 [main:42] - Getting value of type Boolean
2021-03-11 10:58:18,553 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:18,554 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:58:18,554 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:18,782 [main:55] - randomType = Collection<ShouldBeEnabled?>
2021-03-11 10:58:18,783 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:18,792 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:18,793 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:18,892 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:18,894 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).and(false)
2021-03-11 10:58:18,894 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:18,894 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:18,997 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:19,000 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).or(false)
2021-03-11 10:58:19,000 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:19,000 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:19,103 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:19,104 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:19,205 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("vxdgv").equals(null)
2021-03-11 10:58:19,205 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:19,205 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:19,305 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:19,306 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:19,405 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:19,405 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).compareTo(false).equals("eugfz")
2021-03-11 10:58:19,406 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:19,406 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:19,514 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:19,514 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:19,620 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:19,622 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("wupdl").or(true)
2021-03-11 10:58:19,623 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:19,623 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:19,777 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:19,777 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:19,777 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("ayyvi").not()
2021-03-11 10:58:19,777 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:19,777 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:19,891 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:19,892 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("mhwgg")
2021-03-11 10:58:19,892 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:19,892 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:20,016 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:20,016 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:20,122 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:20,124 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("xdefv").and(false)
2021-03-11 10:58:20,124 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:20,124 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:20,229 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:20,230 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:20,330 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:20,332 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("imdkv").xor(true)
2021-03-11 10:58:20,332 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:20,332 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:20,433 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:20,435 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).xor(true)
2021-03-11 10:58:20,435 [main:63] - replacement of true of type Boolean is (ShouldBeEnabled().checkTrueWithMessage()).equals("wupdl").or(true)
2021-03-11 10:58:20,539 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:20,547 [main:56] - replacing ("OK", String)
2021-03-11 10:58:20,547 [main:38] - replacing "OK" String
2021-03-11 10:58:20,547 [main:42] - Getting value of type String
2021-03-11 10:58:20,649 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:58:20,650 [main:46] - GENERATED VALUE OF TYPE String = "jlhdn"
2021-03-11 10:58:20,650 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:20,653 [main:55] - randomType = Boolean
2021-03-11 10:58:20,756 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:20,771 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:20,874 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:20,875 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:58:20,976 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:58:20,978 [main:66] - Generated call from random type = (false).compareTo(false).toString(-159894093)
2021-03-11 10:58:20,979 [main:94] - GETTING String from Boolean
2021-03-11 10:58:20,992 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:58:20,992 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:21,143 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:21,145 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:58:21,252 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:58:21,254 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(false).toString(1464621458)
2021-03-11 10:58:21,254 [main:63] - replacement of "OK" of type String is (false).compareTo(false).toString(-159894093)
2021-03-11 10:58:21,370 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:21,370 [main:66] - Compilation checking started
2021-03-11 10:58:21,804 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:21,812 [main:56] - replacing (hit, Boolean)
2021-03-11 10:58:21,813 [main:38] - replacing hit Boolean
2021-03-11 10:58:21,813 [main:42] - Getting value of type Boolean
2021-03-11 10:58:21,911 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:21,913 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:58:21,913 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:22,026 [main:55] - randomType = UInt
2021-03-11 10:58:22,124 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 10:58:22,158 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@41306b76]
2021-03-11 10:58:22,158 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2913b17a]
2021-03-11 10:58:22,158 [main:66] - Generated call from random type = (1997625242.toUInt()).toDouble().isFinite()
2021-03-11 10:58:22,158 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:22,166 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:22,166 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:22,267 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:22,268 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("bhspr")
2021-03-11 10:58:22,268 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:22,268 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:22,365 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:22,366 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:22,467 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:22,467 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).compareTo(true).equals("amdok")
2021-03-11 10:58:22,467 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:22,467 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:22,565 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:22,566 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:22,566 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("bkgps").not()
2021-03-11 10:58:22,566 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:22,566 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:22,663 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:22,663 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:22,765 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:22,765 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("ugscc").equals("hlhex")
2021-03-11 10:58:22,765 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:22,765 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:22,892 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:22,894 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).and(true)
2021-03-11 10:58:22,894 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:22,894 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:23,004 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:23,004 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:23,116 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:23,118 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("oklze").and(false)
2021-03-11 10:58:23,118 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:23,118 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:23,223 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:23,224 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:23,323 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:23,325 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("lfcni").or(false)
2021-03-11 10:58:23,325 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:23,325 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:23,325 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).not()
2021-03-11 10:58:23,325 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:23,325 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:23,422 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:23,424 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).xor(true)
2021-03-11 10:58:23,424 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:23,424 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:23,528 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:23,528 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:23,627 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:23,629 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).equals("pslng").xor(false)
2021-03-11 10:58:23,629 [main:63] - replacement of hit of type Boolean is (1997625242.toUInt()).toDouble().isFinite()
2021-03-11 10:58:23,729 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:23,730 [main:66] - Compilation checking started
2021-03-11 10:58:24,015 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { hit = true; (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { (1997625242.toUInt()).toDouble().isFinite() = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:24,023 [main:56] - replacing ("BOOYA", String)
2021-03-11 10:58:24,023 [main:38] - replacing "BOOYA" String
2021-03-11 10:58:24,023 [main:42] - Getting value of type String
2021-03-11 10:58:24,126 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:58:24,127 [main:46] - GENERATED VALUE OF TYPE String = "uvqfo"
2021-03-11 10:58:24,128 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:24,248 [main:55] - randomType = ShouldBeEnabled?
2021-03-11 10:58:24,350 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:58:24,352 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}
2021-03-11 10:58:24,361 [main:94] - GETTING String from Boolean
2021-03-11 10:58:24,373 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:58:24,373 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:24,510 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:24,511 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:58:24,615 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:58:24,617 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).compareTo(false).toString(-213655376)
2021-03-11 10:58:24,617 [main:63] - replacement of "BOOYA" of type String is (ShouldBeDisabled().checkTrue()).compareTo(false).toString(-213655376)
2021-03-11 10:58:24,731 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:24,739 [main:56] - replacing (true, Boolean)
2021-03-11 10:58:24,740 [main:38] - replacing true Boolean
2021-03-11 10:58:24,740 [main:42] - Getting value of type Boolean
2021-03-11 10:58:24,838 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:24,840 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:58:24,840 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:24,955 [main:55] - randomType = Short
2021-03-11 10:58:25,052 [main:302] - generating value of type = Short true depth = 0
2021-03-11 10:58:25,089 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2dfcc324]
2021-03-11 10:58:25,187 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:58:25,189 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@714602a5]
2021-03-11 10:58:25,286 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:25,286 [main:66] - Generated call from random type = (-1385).rangeTo(101).equals("hpppp")
2021-03-11 10:58:25,286 [main:63] - replacement of true of type Boolean is (-1385).rangeTo(101).equals("hpppp")
2021-03-11 10:58:25,383 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:25,383 [main:66] - Compilation checking started
2021-03-11 10:58:25,749 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { hit = (-1385).rangeTo(101).equals("hpppp"); (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if (!c.checkTrueWithMessage()) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:25,758 [main:56] - replacing (l, Function0<Boolean>)
2021-03-11 10:58:25,758 [main:38] - replacing l Function0<Boolean>
2021-03-11 10:58:25,758 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:58:25,855 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:58:25,856 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:58:25,858 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 10:58:25,858 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:25,973 [main:55] - randomType = Checker?
2021-03-11 10:58:25,974 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:25,983 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:25,984 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:25,985 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:25,986 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:58:25,990 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:25,991 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:25,992 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:25,994 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:25,996 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:25,998 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:26,000 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:26,002 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:58:26,003 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:26,004 [main:63] - replacement of l of type Function0<Boolean> is { false}
2021-03-11 10:58:26,111 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:58:26,119 [main:56] - replacing (!c.checkTrueWithMessage(), Boolean)
2021-03-11 10:58:26,120 [main:38] - replacing !c.checkTrueWithMessage() Boolean
2021-03-11 10:58:26,120 [main:42] - Getting value of type Boolean
2021-03-11 10:58:26,247 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:26,248 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:58:26,248 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:26,251 [main:55] - randomType = Int
2021-03-11 10:58:26,356 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:58:26,399 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e9f652]
2021-03-11 10:58:26,399 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@23f14a05]
2021-03-11 10:58:26,511 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:26,511 [main:66] - Generated call from random type = (819668399).toShort().equals("uwtwo")
2021-03-11 10:58:26,511 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:26,524 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:26,524 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:26,624 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:26,626 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).or(false)
2021-03-11 10:58:26,626 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:26,626 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:26,726 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:26,726 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:26,822 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:26,824 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("ldvcm").and(true)
2021-03-11 10:58:26,824 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:26,824 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:26,922 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:26,922 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:27,021 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:27,021 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("bwbea").equals("qctvw")
2021-03-11 10:58:27,021 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:27,021 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:27,124 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:27,124 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:27,124 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("kqair").not()
2021-03-11 10:58:27,124 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:27,124 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:27,226 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:27,226 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")
2021-03-11 10:58:27,226 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:27,226 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:27,324 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:27,324 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:27,422 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:27,423 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("xfgtq").xor(false)
2021-03-11 10:58:27,423 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:27,423 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:27,424 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).not()
2021-03-11 10:58:27,424 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:27,424 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:27,552 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:27,553 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:27,660 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:27,661 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("dvkeb").or(true)
2021-03-11 10:58:27,661 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:27,662 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:27,781 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:27,782 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).xor(false)
2021-03-11 10:58:27,782 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:27,782 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:27,882 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:27,884 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).and(true)
2021-03-11 10:58:27,884 [main:63] - replacement of !c.checkTrueWithMessage() of type Boolean is (ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")
2021-03-11 10:58:27,988 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:27,989 [main:66] - Compilation checking started
2021-03-11 10:58:28,345 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { hit = (-1385).rangeTo(101).equals("hpppp"); (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:28,354 [main:56] - replacing ({ hit = (-1385).rangeTo(101).equals("hpppp"); (ShouldBeEnabled().checkTrueWithMessage()).xor(true) }, Function0<Boolean>)
2021-03-11 10:58:28,354 [main:38] - replacing { hit = (-1385).rangeTo(101).equals("hpppp"); (ShouldBeEnabled().checkTrueWithMessage()).xor(true) } Function0<Boolean>
2021-03-11 10:58:28,354 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:58:28,456 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:58:28,457 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:58:28,458 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 10:58:28,458 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:28,571 [main:55] - randomType = ShouldBeEnabled?
2021-03-11 10:58:28,669 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:58:28,670 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}
2021-03-11 10:58:28,678 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:28,687 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:28,688 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:28,689 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:28,691 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:58:28,699 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:28,700 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:58:28,701 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:28,702 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:28,703 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:28,704 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:28,705 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:28,706 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:28,707 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:28,707 [main:63] - replacement of { hit = (-1385).rangeTo(101).equals("hpppp"); (ShouldBeEnabled().checkTrueWithMessage()).xor(true) } of type Function0<Boolean> is { false}
2021-03-11 10:58:28,803 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:58:28,804 [main:66] - Compilation checking started
2021-03-11 10:58:29,158 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call {
            assert((c).checkTrue().or(false)) { "ilncb"}
        }
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:29,166 [main:56] - replacing ({
            assert((c).checkTrue().or(false)) { "ilncb"}
        }, Function0<Unit>)
2021-03-11 10:58:29,167 [main:38] - replacing {
            assert((c).checkTrue().or(false)) { "ilncb"}
        } Function0<Unit>
2021-03-11 10:58:29,167 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:58:29,269 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:58:29,270 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:58:29,372 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:58:29,374 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:58:29,607 [main:302] - generating value of type = Any false depth = 4
2021-03-11 10:58:29,607 [main:95] - GENERATED = println("egwjb")
2021-03-11 10:58:29,607 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("egwjb")}
2021-03-11 10:58:29,607 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:29,612 [main:55] - randomType = ShouldBeDisabled
2021-03-11 10:58:29,711 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 10:58:29,713 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:58:29,720 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:29,730 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:29,731 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:29,732 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:29,733 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:58:29,738 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:29,739 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:29,740 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:29,741 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:58:29,742 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:29,743 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:29,744 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:29,745 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:29,746 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:29,746 [main:63] - replacement of {
            assert((c).checkTrue().or(false)) { "ilncb"}
        } of type Function0<Unit> is { println("egwjb")}
2021-03-11 10:58:29,842 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:58:29,843 [main:66] - Compilation checking started
2021-03-11 10:58:30,188 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return c.newInstance() as Checker
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:30,200 [main:56] - replacing (c.newInstance() as Checker, Checker)
2021-03-11 10:58:30,200 [main:38] - replacing c.newInstance() as Checker Checker
2021-03-11 10:58:30,200 [main:42] - Getting value of type Checker
2021-03-11 10:58:30,296 [main:302] - generating value of type = Checker false depth = 0
2021-03-11 10:58:30,297 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:58:30,498 [main:302] - generating value of type = ShouldBeDisabled false depth = 2
2021-03-11 10:58:30,499 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:58:30,499 [main:46] - GENERATED VALUE OF TYPE Checker = ShouldBeDisabled()
2021-03-11 10:58:30,499 [main:49] - GENERATED IS CALL =true
2021-03-11 10:58:31,060 [main:55] - randomType = LinkedHashMap<Triple<Checker, UShort?, Int>, Int?>
2021-03-11 10:58:31,155 [main:302] - generating value of type = LinkedHashMap<Triple<Checker, UShort?, Int>, Int?> false depth = 0
2021-03-11 10:58:31,302 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Triple<Checker, UShort?, Int>, Int?>): LkedHashMap<Triple<Checker, UShort?, Int>, Int?> = TODO()
2021-03-11 10:58:31,304 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Triple<Checker, UShort?, Int>, Int?>): LkedHashMap<Triple<Checker, UShort?, Int>, Int?> = TODO()
2021-03-11 10:58:31,412 [main:302] - generating value of type = Pair<Triple<Checker, UShort?, Int>, Int?> false depth = 3
2021-03-11 10:58:31,530 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Triple<Checker, UShort?, Int>, second: Int?): Pair<Triple<Checker, UShort?, Int>, Int?> = TODO()
2021-03-11 10:58:31,532 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Triple<Checker, UShort?, Int>, second: Int?): Pair<Triple<Checker, UShort?, Int>, Int?> = TODO()
2021-03-11 10:58:31,635 [main:302] - generating value of type = Triple<Checker, UShort?, Int> false depth = 6
2021-03-11 10:58:31,738 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Checker, second: UShort?, third: Int): Triple<Checker, UShort?, Int> = TODO()
2021-03-11 10:58:31,740 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Checker, second: UShort?, third: Int): Triple<Checker, UShort?, Int> = TODO()
2021-03-11 10:58:31,840 [main:302] - generating value of type = Checker false depth = 9
2021-03-11 10:58:31,842 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:58:32,041 [main:302] - generating value of type = ShouldBeDisabled false depth = 11
2021-03-11 10:58:32,043 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:58:32,043 [main:302] - generating value of type = UShort true depth = 9
2021-03-11 10:58:32,044 [main:302] - generating value of type = Int true depth = 9
2021-03-11 10:58:32,045 [main:95] - GENERATED = Triple<Checker, UShort?, Int>(ShouldBeDisabled(), 30838.toUShort(), 70518449)
2021-03-11 10:58:32,045 [main:302] - generating value of type = Int true depth = 6
2021-03-11 10:58:32,047 [main:95] - GENERATED = Pair<Triple<Checker, UShort?, Int>, Int?>(Triple<Checker, UShort?, Int>(ShouldBeDisabled(), 30838.toUShort(), 70518449), 897314519)
2021-03-11 10:58:32,047 [main:95] - GENERATED = linkedMapOf<Triple<Checker, UShort?, Int>, Int?>(Pair<Triple<Checker, UShort?, Int>, Int?>(Triple<Checker, UShort?, Int>(ShouldBeDisabled(), 30838.toUShort(), 70518449), 897314519))
2021-03-11 10:58:32,217 [main:94] - GETTING Checker from Boolean
2021-03-11 10:58:32,228 [main:94] - GETTING Checker from Boolean
2021-03-11 10:58:32,229 [main:94] - GETTING Checker from Boolean
2021-03-11 10:58:32,229 [main:94] - GETTING Checker from Boolean
2021-03-11 10:58:32,230 [main:94] - GETTING Checker from Boolean
2021-03-11 10:58:32,230 [main:94] - GETTING Checker from Checker
2021-03-11 10:58:32,234 [main:63] - replacement of c.newInstance() as Checker of type Checker is ShouldBeDisabled()
2021-03-11 10:58:32,330 [main:33] - Trying to replace Element(BINARY_WITH_TYPE) on Element(CALL_EXPRESSION)
2021-03-11 10:58:32,330 [main:66] - Compilation checking started
2021-03-11 10:58:32,669 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:32,677 [main:56] - replacing (hit, Boolean)
2021-03-11 10:58:32,678 [main:38] - replacing hit Boolean
2021-03-11 10:58:32,678 [main:42] - Getting value of type Boolean
2021-03-11 10:58:32,773 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:32,774 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:58:32,775 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:33,130 [main:55] - randomType = Pair<UShort, Checker>
2021-03-11 10:58:33,226 [main:302] - generating value of type = Pair<UShort, Checker> false depth = 0
2021-03-11 10:58:33,330 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort, second: Checker): Pair<UShort, Checker> = TODO()
2021-03-11 10:58:33,332 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort, second: Checker): Pair<UShort, Checker> = TODO()
2021-03-11 10:58:33,431 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 10:58:33,433 [main:302] - generating value of type = Checker false depth = 3
2021-03-11 10:58:33,434 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:58:33,630 [main:302] - generating value of type = ShouldBeDisabled false depth = 5
2021-03-11 10:58:33,631 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:58:33,632 [main:95] - GENERATED = Pair<UShort, Checker>(20682.toUShort(), ShouldBeDisabled())
2021-03-11 10:58:33,646 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@136ddf23]
2021-03-11 10:58:33,741 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:33,741 [main:66] - Generated call from random type = (Pair<UShort, Checker>(20682.toUShort(), ShouldBeDisabled())).equals("fabuo")
2021-03-11 10:58:33,742 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:33,753 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:33,753 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:33,859 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:33,859 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:33,859 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("rdhxd").not()
2021-03-11 10:58:33,859 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:33,859 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:33,859 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:58:33,859 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:33,859 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:33,956 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:33,958 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).and(false)
2021-03-11 10:58:33,958 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:33,958 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:34,056 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:34,058 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).xor(false)
2021-03-11 10:58:34,058 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:34,058 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:34,154 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:34,154 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("sxuzu")
2021-03-11 10:58:34,154 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:34,154 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:34,250 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:34,250 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:34,345 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:34,346 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("flsad").xor(true)
2021-03-11 10:58:34,346 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:34,347 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:34,441 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:34,441 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:34,567 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("rhebu").equals(null)
2021-03-11 10:58:34,567 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:34,567 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:34,670 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:34,672 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:34,787 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:34,787 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).compareTo(true).equals("yzujh")
2021-03-11 10:58:34,787 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:34,787 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:34,884 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:34,884 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:34,982 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:34,983 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("cmsvp").or(false)
2021-03-11 10:58:34,983 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:34,983 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:35,078 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:35,079 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).or(false)
2021-03-11 10:58:35,079 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkTrue()).equals("flsad").xor(true)
2021-03-11 10:58:35,175 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:35,175 [main:66] - Compilation checking started
2021-03-11 10:58:35,462 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { (ShouldBeEnabled().checkTrue()).equals("flsad").xor(true) = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:35,470 [main:56] - replacing (l, Function0<Boolean>)
2021-03-11 10:58:35,470 [main:38] - replacing l Function0<Boolean>
2021-03-11 10:58:35,470 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:58:35,568 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:58:35,569 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:58:35,571 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 10:58:35,571 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:35,680 [main:55] - randomType = Checker?
2021-03-11 10:58:35,682 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:35,693 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:35,694 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:35,695 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:35,696 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:35,697 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:35,698 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:35,699 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:35,700 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:58:35,704 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:58:35,705 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:35,706 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:35,707 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:35,708 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:35,708 [main:63] - replacement of l of type Function0<Boolean> is { false}
2021-03-11 10:58:35,803 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:58:35,811 [main:56] - replacing (hit, Boolean)
2021-03-11 10:58:35,812 [main:38] - replacing hit Boolean
2021-03-11 10:58:35,812 [main:42] - Getting value of type Boolean
2021-03-11 10:58:35,907 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:35,908 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:58:35,908 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:35,913 [main:55] - randomType = Checker
2021-03-11 10:58:35,913 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:35,922 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:35,922 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:36,017 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:36,019 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).or(true)
2021-03-11 10:58:36,019 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:36,019 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:36,114 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:36,115 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("avout")
2021-03-11 10:58:36,115 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:36,115 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:36,115 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).not()
2021-03-11 10:58:36,115 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:36,115 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:36,210 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:36,210 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:36,334 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:36,336 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("rosef").or(false)
2021-03-11 10:58:36,336 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:36,336 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:36,438 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:36,440 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).and(true)
2021-03-11 10:58:36,440 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:36,440 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:36,550 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:36,550 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:36,550 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("rmplf").not()
2021-03-11 10:58:36,550 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:36,550 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:36,649 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:36,649 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:36,755 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:36,757 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("enbwg").and(false)
2021-03-11 10:58:36,757 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:36,757 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:36,852 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:36,852 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:36,947 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:36,948 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("cexwe").xor(true)
2021-03-11 10:58:36,948 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:36,948 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:37,045 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:37,046 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).xor(true)
2021-03-11 10:58:37,046 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:37,046 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:37,142 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:37,142 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:37,237 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:37,238 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("ybomz").equals("iexjw")
2021-03-11 10:58:37,238 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkTrueWithMessage()).or(true)
2021-03-11 10:58:37,333 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:37,334 [main:66] - Compilation checking started
2021-03-11 10:58:37,583 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { (ShouldBeEnabled().checkTrueWithMessage()).or(true) = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:37,590 [main:56] - replacing ({ hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false }, Function0<Boolean>)
2021-03-11 10:58:37,591 [main:38] - replacing { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false } Function0<Boolean>
2021-03-11 10:58:37,591 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:58:37,687 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:58:37,688 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:58:37,689 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 10:58:37,690 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:37,929 [main:55] - randomType = Array<UInt>
2021-03-11 10:58:38,031 [main:302] - generating value of type = Array<UInt> false depth = 0
2021-03-11 10:58:38,146 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<UInt> = TODO()
2021-03-11 10:58:38,148 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<UInt> = TODO()
2021-03-11 10:58:38,250 [main:95] - GENERATED = enumValues<UInt>()
2021-03-11 10:58:38,269 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:58:38,274 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:38,288 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:38,289 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:38,290 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:38,291 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:38,292 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:38,294 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:38,295 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:58:38,296 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:38,297 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:38,298 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:38,299 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:38,300 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:38,300 [main:63] - replacement of { hit = (ShouldBeEnabled().checkFalse()).equals("ckzhr").or(false); false } of type Function0<Boolean> is { true}
2021-03-11 10:58:38,399 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:58:38,399 [main:66] - Compilation checking started
2021-03-11 10:58:38,744 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", true)
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:38,751 [main:56] - replacing (true, Boolean)
2021-03-11 10:58:38,752 [main:38] - replacing true Boolean
2021-03-11 10:58:38,752 [main:42] - Getting value of type Boolean
2021-03-11 10:58:38,846 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:38,847 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:58:38,847 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:39,289 [main:55] - randomType = LinkedHashMap<Byte, HashMap<ShouldBeDisabled, Sequence<UByte>>>
2021-03-11 10:58:39,385 [main:302] - generating value of type = LinkedHashMap<Byte, HashMap<ShouldBeDisabled, Sequence<UByte>>> false depth = 0
2021-03-11 10:58:39,488 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Byte, HashMap<ShouldBeDisabled, Sequence<UByte>>> = TODO()
2021-03-11 10:58:39,490 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Byte, HashMap<ShouldBeDisabled, Sequence<UByte>>> = TODO()
2021-03-11 10:58:39,592 [main:95] - GENERATED = linkedMapOf<Byte, HashMap<ShouldBeDisabled, Sequence<UByte>>>()
2021-03-11 10:58:39,829 [main:137] - GENERATING call of type public abstract fun remove(element: kotlin.Byte): kotlin.Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@3516d6f]
2021-03-11 10:58:39,930 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:58:39,931 [main:66] - Generated call from random type = (linkedMapOf<Byte, HashMap<ShouldBeDisabled, Sequence<UByte>>>()).keys.remove(33)
2021-03-11 10:58:39,931 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:39,940 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:39,940 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:40,039 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:40,040 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:40,144 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:40,144 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).compareTo(true).equals("qstfj")
2021-03-11 10:58:40,144 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:40,144 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:40,245 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:40,247 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).and(true)
2021-03-11 10:58:40,247 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:40,247 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:40,346 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:40,347 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:40,444 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:40,445 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("asynt").or(true)
2021-03-11 10:58:40,445 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:40,445 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:40,541 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:40,541 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:40,639 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:40,640 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("cbzgd").xor(false)
2021-03-11 10:58:40,640 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:40,640 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:40,738 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:40,739 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).or(true)
2021-03-11 10:58:40,739 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:40,739 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:40,739 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).not()
2021-03-11 10:58:40,739 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:40,739 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:40,835 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals(null)
2021-03-11 10:58:40,835 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:40,835 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:40,933 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:40,933 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:41,028 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:41,030 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("imhqz").and(false)
2021-03-11 10:58:41,030 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:41,030 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:41,145 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:41,146 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:41,268 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:41,268 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("tggyj").equals("aqfmk")
2021-03-11 10:58:41,268 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:41,268 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:41,409 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:41,410 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:41,410 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("cvunq").not()
2021-03-11 10:58:41,410 [main:63] - replacement of true of type Boolean is (ShouldBeEnabled().checkFalse()).and(true)
2021-03-11 10:58:41,535 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:41,536 [main:66] - Compilation checking started
2021-03-11 10:58:41,964 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call {
            assert(ShouldBeEnabled().checkFalse())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:41,971 [main:56] - replacing ({
            assert(ShouldBeEnabled().checkFalse())
        }, Function0<Unit>)
2021-03-11 10:58:41,972 [main:38] - replacing {
            assert(ShouldBeEnabled().checkFalse())
        } Function0<Unit>
2021-03-11 10:58:41,972 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:58:42,074 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:58:42,076 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:58:42,080 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 10:58:42,081 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:42,315 [main:55] - randomType = Short?
2021-03-11 10:58:42,417 [main:302] - generating value of type = Short true depth = 0
2021-03-11 10:58:42,486 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:42,502 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:58:42,508 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:42,509 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:42,510 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:42,512 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:42,513 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:42,514 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:42,515 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:42,517 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:42,518 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:58:42,520 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:42,522 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:42,524 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:42,524 [main:63] - replacement of {
            assert(ShouldBeEnabled().checkFalse())
        } of type Function0<Unit> is { println()}
2021-03-11 10:58:42,641 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:58:42,642 [main:66] - Compilation checking started
2021-03-11 10:58:43,061 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:43,069 [main:56] - replacing (hit, Boolean)
2021-03-11 10:58:43,069 [main:38] - replacing hit Boolean
2021-03-11 10:58:43,069 [main:42] - Getting value of type Boolean
2021-03-11 10:58:43,170 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:43,171 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:58:43,171 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:43,424 [main:55] - randomType = MutableMap<String, Array<ShouldBeEnabled>>
2021-03-11 10:58:43,424 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:43,439 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:43,439 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:43,439 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).not()
2021-03-11 10:58:43,439 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:43,439 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:43,556 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:43,556 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("pwqvp")
2021-03-11 10:58:43,556 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:43,556 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:43,669 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:43,670 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:43,818 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:43,819 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).compareTo(false).equals("ukkhx")
2021-03-11 10:58:43,819 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:43,819 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:43,921 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:43,922 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:43,922 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("xgslt").not()
2021-03-11 10:58:43,922 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:43,922 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:44,028 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:44,134 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:44,136 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals(null).or(true)
2021-03-11 10:58:44,136 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:44,136 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:44,241 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:44,243 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).and(false)
2021-03-11 10:58:44,244 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:44,244 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:44,352 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:44,354 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).or(false)
2021-03-11 10:58:44,355 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:44,355 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:44,452 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:44,453 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:44,558 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:44,560 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("wklzr").xor(true)
2021-03-11 10:58:44,560 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:44,560 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:44,657 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:44,658 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
2021-03-11 10:58:44,658 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:44,658 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:44,757 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:44,757 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:44,854 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:44,854 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("wrrwq").equals("zagpw")
2021-03-11 10:58:44,854 [main:63] - replacement of hit of type Boolean is (ShouldBeDisabled().checkTrueWithMessage()).and(false)
2021-03-11 10:58:44,952 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:44,952 [main:66] - Compilation checking started
2021-03-11 10:58:45,337 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:45,350 [main:56] - replacing (false, Boolean)
2021-03-11 10:58:45,350 [main:38] - replacing false Boolean
2021-03-11 10:58:45,350 [main:42] - Getting value of type Boolean
2021-03-11 10:58:45,456 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:45,458 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:58:45,458 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:45,461 [main:55] - randomType = UByte
2021-03-11 10:58:45,558 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:58:45,586 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7fb7a790]
2021-03-11 10:58:45,586 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34b58084]
2021-03-11 10:58:45,586 [main:66] - Generated call from random type = (43.toUByte()).toFloat().isNaN()
2021-03-11 10:58:45,586 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:45,596 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:45,597 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:45,693 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:45,693 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:45,826 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:45,826 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("dvjcp").equals("viizk")
2021-03-11 10:58:45,826 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:45,826 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:45,826 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).not()
2021-03-11 10:58:45,827 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:45,827 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:45,928 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:45,928 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:46,037 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:46,038 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("clcdt").or(false)
2021-03-11 10:58:46,038 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:46,038 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:46,189 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:46,189 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("ldihs")
2021-03-11 10:58:46,189 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:46,189 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:46,302 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:46,303 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:46,417 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:46,417 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).compareTo(true).equals("wxbbx")
2021-03-11 10:58:46,417 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:46,417 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:46,513 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:46,515 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
2021-03-11 10:58:46,515 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:46,515 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:46,609 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:46,610 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).or(true)
2021-03-11 10:58:46,610 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:46,610 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:46,705 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:46,706 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:46,802 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:46,803 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("wywsx").xor(false)
2021-03-11 10:58:46,803 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:46,803 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:46,900 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:46,900 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:46,996 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:46,997 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("nkxyt").and(false)
2021-03-11 10:58:46,997 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:46,997 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:47,093 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:47,094 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:47,094 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("viphj").not()
2021-03-11 10:58:47,094 [main:63] - replacement of false of type Boolean is (ShouldBeDisabled().checkTrueWithMessage()).equals("clcdt").or(false)
2021-03-11 10:58:47,188 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:47,196 [main:56] - replacing (hit, Boolean)
2021-03-11 10:58:47,196 [main:38] - replacing hit Boolean
2021-03-11 10:58:47,196 [main:42] - Getting value of type Boolean
2021-03-11 10:58:47,291 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:47,293 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:58:47,293 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:47,566 [main:55] - randomType = UShort?
2021-03-11 10:58:47,685 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:58:47,731 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2d71fbe3]
2021-03-11 10:58:47,831 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:47,831 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:47,929 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:47,931 [main:66] - Generated call from random type = (15751.toUShort())?.equals("yprcw").xor(true)
2021-03-11 10:58:47,931 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:47,940 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:47,940 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:48,044 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:48,045 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
2021-03-11 10:58:48,045 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:48,046 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:48,153 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:48,155 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).or(false)
2021-03-11 10:58:48,155 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:48,155 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:48,155 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).not()
2021-03-11 10:58:48,155 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:48,155 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:48,250 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:48,251 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("vckhs")
2021-03-11 10:58:48,251 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:48,251 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:48,345 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:48,345 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:48,345 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("gkple").not()
2021-03-11 10:58:48,346 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:48,346 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:48,440 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:48,441 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:48,535 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:48,535 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).compareTo(true).equals("gbmla")
2021-03-11 10:58:48,535 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:48,535 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:48,630 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:48,630 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:48,726 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:48,728 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("sxisf").or(true)
2021-03-11 10:58:48,728 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:48,728 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:48,825 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:48,825 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:48,951 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:48,953 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("uaoyi").xor(false)
2021-03-11 10:58:48,953 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:48,953 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:49,059 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:49,062 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).and(true)
2021-03-11 10:58:49,062 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:49,062 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:49,165 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:49,166 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:49,287 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:49,288 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrueWithMessage()).equals("mazqy").equals("jrecz")
2021-03-11 10:58:49,288 [main:63] - replacement of hit of type Boolean is (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
2021-03-11 10:58:49,393 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:49,394 [main:66] - Compilation checking started
2021-03-11 10:58:49,672 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { (ShouldBeDisabled().checkTrueWithMessage()).xor(false) = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:49,680 [main:56] - replacing ({
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        }, Function0<Unit>)
2021-03-11 10:58:49,680 [main:38] - replacing {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        } Function0<Unit>
2021-03-11 10:58:49,680 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:58:49,778 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:58:49,780 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:58:49,880 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:58:49,883 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:58:50,195 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:58:50,196 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 10:58:50,198 [main:302] - generating value of type = Any false depth = 5
2021-03-11 10:58:50,198 [main:95] - GENERATED = require(false, { "oogou"})
2021-03-11 10:58:50,198 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "oogou"})}
2021-03-11 10:58:50,198 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:50,201 [main:55] - randomType = Double
2021-03-11 10:58:50,296 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:58:50,339 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:50,350 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:50,351 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:50,351 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:50,352 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:58:50,359 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:50,360 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:50,361 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:50,362 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:50,363 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:58:50,364 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:50,365 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:50,366 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:50,367 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:50,367 [main:63] - replacement of {
            assert((ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).equals("fmojt"))
        } of type Function0<Unit> is { require(false, { "oogou"})}
2021-03-11 10:58:50,466 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:58:50,466 [main:66] - Compilation checking started
2021-03-11 10:58:50,803 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:50,811 [main:56] - replacing ("ShouldBeEnabled", String)
2021-03-11 10:58:50,811 [main:38] - replacing "ShouldBeEnabled" String
2021-03-11 10:58:50,811 [main:42] - Getting value of type String
2021-03-11 10:58:50,908 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:58:50,909 [main:46] - GENERATED VALUE OF TYPE String = "uutdp"
2021-03-11 10:58:50,910 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:51,015 [main:55] - randomType = ULong
2021-03-11 10:58:51,138 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:58:51,166 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@802b851]
2021-03-11 10:58:51,166 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b20338e]
2021-03-11 10:58:51,259 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:58:51,261 [main:66] - Generated call from random type = (6262968345340201931.toULong()).toByte().toString(-662219185)
2021-03-11 10:58:51,262 [main:94] - GETTING String from Boolean
2021-03-11 10:58:51,270 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:58:51,270 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:51,363 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:51,365 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:58:51,461 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:58:51,463 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).compareTo(false).toString(1975450407)
2021-03-11 10:58:51,463 [main:63] - replacement of "ShouldBeEnabled" of type String is (6262968345340201931.toULong()).toByte().toString(-662219185)
2021-03-11 10:58:51,557 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:51,565 [main:56] - replacing (hit, Boolean)
2021-03-11 10:58:51,565 [main:38] - replacing hit Boolean
2021-03-11 10:58:51,565 [main:42] - Getting value of type Boolean
2021-03-11 10:58:51,660 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:51,661 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:58:51,661 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:51,873 [main:55] - randomType = List<Byte>
2021-03-11 10:58:51,874 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:51,884 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:51,884 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:51,884 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).not()
2021-03-11 10:58:51,884 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:51,884 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:51,982 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:51,982 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:51,983 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("fxbki").not()
2021-03-11 10:58:51,983 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:51,983 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:52,077 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:52,077 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:52,175 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:52,177 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("wsktt").and(false)
2021-03-11 10:58:52,177 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:52,177 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:52,270 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:52,270 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:52,365 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:52,367 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("nrjai").xor(true)
2021-03-11 10:58:52,367 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:52,367 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:52,461 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:52,461 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:52,555 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:52,555 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("myzqm").equals("rhhxp")
2021-03-11 10:58:52,555 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:52,555 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:52,678 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:52,679 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).xor(true)
2021-03-11 10:58:52,679 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:52,680 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:52,786 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:52,787 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).or(true)
2021-03-11 10:58:52,787 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:52,787 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:52,888 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:52,889 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).and(true)
2021-03-11 10:58:52,889 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:52,889 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:52,997 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:52,998 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).equals("xtudj")
2021-03-11 10:58:52,998 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:52,998 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:53,098 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:53,100 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:53,193 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:53,194 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrueWithMessage()).compareTo(false).equals("tgxyv")
2021-03-11 10:58:53,194 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkTrueWithMessage()).xor(true)
2021-03-11 10:58:53,287 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:53,287 [main:66] - Compilation checking started
2021-03-11 10:58:53,546 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { (ShouldBeEnabled().checkTrueWithMessage()).xor(true) = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:53,554 [main:56] - replacing ({ hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() }, Function0<Boolean>)
2021-03-11 10:58:53,554 [main:38] - replacing { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() } Function0<Boolean>
2021-03-11 10:58:53,554 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:58:53,649 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:58:53,651 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:58:53,652 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 10:58:53,652 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:53,981 [main:55] - randomType = Function2<Long, List<String>, Boolean>
2021-03-11 10:58:53,982 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:58:53,987 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:53,995 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:53,996 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:58:53,997 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:53,998 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:53,999 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:54,000 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:54,001 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:54,002 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:54,003 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:54,004 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:54,005 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:54,006 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:58:54,006 [main:63] - replacement of { hit = (ShouldBeEnabled().checkFalseWithMessage()).equals("jqyep").or(false); (ShouldBeDisabled().checkFalse()).equals("rwege").not() } of type Function0<Boolean> is { true}
2021-03-11 10:58:54,100 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:58:54,100 [main:66] - Compilation checking started
2021-03-11 10:58:54,448 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:54,456 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:58:54,456 [main:38] - replacing c Function0<Unit>
2021-03-11 10:58:54,456 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:58:54,553 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:58:54,555 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:58:54,559 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 10:58:54,559 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:54,663 [main:55] - randomType = UShort
2021-03-11 10:58:54,787 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:58:54,816 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:54,826 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:58:54,829 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:54,830 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:54,831 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:54,832 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:54,833 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:54,834 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:54,835 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:54,836 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:54,837 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:54,837 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:58:54,838 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:54,839 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:58:54,839 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 10:58:54,935 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:58:54,936 [main:66] - Compilation checking started
2021-03-11 10:58:55,250 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:55,262 [main:56] - replacing (hit, Boolean)
2021-03-11 10:58:55,262 [main:38] - replacing hit Boolean
2021-03-11 10:58:55,262 [main:42] - Getting value of type Boolean
2021-03-11 10:58:55,384 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:55,386 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:58:55,386 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:55,511 [main:55] - randomType = Pair<Float, Float>
2021-03-11 10:58:55,611 [main:302] - generating value of type = Pair<Float, Float> false depth = 0
2021-03-11 10:58:55,717 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Float, second: Float): Pair<Float, Float> = TODO()
2021-03-11 10:58:55,720 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Float, second: Float): Pair<Float, Float> = TODO()
2021-03-11 10:58:55,822 [main:302] - generating value of type = Float true depth = 3
2021-03-11 10:58:55,824 [main:302] - generating value of type = Float true depth = 3
2021-03-11 10:58:55,825 [main:95] - GENERATED = Pair<Float, Float>(0.052935958f, 0.61907685f)
2021-03-11 10:58:55,837 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@5028436]
2021-03-11 10:58:55,936 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:55,936 [main:66] - Generated call from random type = (Pair<Float, Float>(0.052935958f, 0.61907685f)).equals("fdjlc")
2021-03-11 10:58:55,936 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:55,947 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:55,947 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:56,051 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:56,053 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).xor(false)
2021-03-11 10:58:56,053 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:56,053 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:56,148 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:56,150 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:56,247 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:56,247 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).compareTo(false).equals("lbvxa")
2021-03-11 10:58:56,247 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:56,247 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:56,346 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:56,346 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:56,444 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:56,445 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("rzsqe").or(false)
2021-03-11 10:58:56,446 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:56,446 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:56,544 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:56,545 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:56,639 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:56,639 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("zwzjg").equals("sdets")
2021-03-11 10:58:56,639 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:58:56,639 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:56,734 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:58:56,829 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:56,830 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals(null).and(false)
2021-03-11 10:58:56,830 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:56,830 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:56,830 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).not()
2021-03-11 10:58:56,830 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:56,830 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:56,956 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:56,958 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).or(true)
2021-03-11 10:58:56,958 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:56,958 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:57,059 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:57,060 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("egubz")
2021-03-11 10:58:57,060 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:57,060 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:57,162 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:57,170 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:57,171 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("hendq").not()
2021-03-11 10:58:57,171 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:57,171 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:57,267 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:57,268 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:57,367 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:57,368 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("nnwrb").xor(false)
2021-03-11 10:58:57,368 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkFalse()).equals("egubz")
2021-03-11 10:58:57,462 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:58:57,462 [main:66] - Compilation checking started
2021-03-11 10:58:57,727 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { (ShouldBeEnabled().checkFalse()).equals("egubz") = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:58:57,736 [main:56] - replacing (hit, Boolean)
2021-03-11 10:58:57,736 [main:38] - replacing hit Boolean
2021-03-11 10:58:57,736 [main:42] - Getting value of type Boolean
2021-03-11 10:58:57,832 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:57,833 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:58:57,833 [main:49] - GENERATED IS CALL =false
2021-03-11 10:58:58,048 [main:55] - randomType = Array<UShort>
2021-03-11 10:58:58,147 [main:302] - generating value of type = Array<UShort> false depth = 0
2021-03-11 10:58:58,246 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<UShort> = TODO()
2021-03-11 10:58:58,248 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<UShort> = TODO()
2021-03-11 10:58:58,451 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:58:58,453 [main:95] - GENERATED = arrayOfNulls<UShort>(-78147459)
2021-03-11 10:58:58,467 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@dbc9d8d]
2021-03-11 10:58:58,564 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 10:58:58,665 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 10:58:58,667 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 10:58:58,906 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:58:58,908 [main:95] - GENERATED = arrayOfNulls<T>(1824419897)
2021-03-11 10:58:58,908 [main:66] - Generated call from random type = (arrayOfNulls<UShort>(-78147459)).contentEquals(arrayOfNulls<T>(1824419897))
2021-03-11 10:58:58,908 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:58:58,919 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:58:58,919 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:59,020 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:59,020 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:58:59,020 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("vpuec").not()
2021-03-11 10:58:59,020 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:59,020 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:59,122 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:59,122 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:59,238 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:59,239 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("odetl").xor(false)
2021-03-11 10:58:59,239 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:58:59,239 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:59,339 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:59,339 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:58:59,433 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:59,433 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("jaofk").equals("agtbe")
2021-03-11 10:58:59,433 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:58:59,433 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:58:59,528 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:59,529 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).xor(true)
2021-03-11 10:58:59,529 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:59,529 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:58:59,625 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:59,625 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:58:59,718 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:59,720 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("hzcli").or(false)
2021-03-11 10:58:59,720 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:58:59,720 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:58:59,813 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:58:59,814 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:58:59,907 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:58:59,908 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).compareTo(false).equals("fthkf")
2021-03-11 10:58:59,908 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:58:59,908 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:00,001 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:00,003 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).or(true)
2021-03-11 10:59:00,003 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:00,003 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:00,099 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:00,099 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:00,193 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:00,194 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("vwrol").and(false)
2021-03-11 10:59:00,194 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:00,194 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:00,287 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:00,287 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).equals("hdrrp")
2021-03-11 10:59:00,287 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:00,287 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:00,382 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:00,383 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).and(false)
2021-03-11 10:59:00,383 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkFalse()).xor(true)
2021-03-11 10:59:00,506 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:00,506 [main:66] - Compilation checking started
2021-03-11 10:59:00,787 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { (ShouldBeEnabled().checkFalse()).xor(true) = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return hit
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:00,800 [main:56] - replacing (hit, Boolean)
2021-03-11 10:59:00,800 [main:38] - replacing hit Boolean
2021-03-11 10:59:00,800 [main:42] - Getting value of type Boolean
2021-03-11 10:59:00,904 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:00,906 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:59:00,906 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:01,017 [main:55] - randomType = Long?
2021-03-11 10:59:01,115 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:59:01,154 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1296fa15]
2021-03-11 10:59:01,154 [main:137] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15744c36]
2021-03-11 10:59:01,154 [main:66] - Generated call from random type = (-7479217222840615375)?.toChar().isDefined()
2021-03-11 10:59:01,154 [main:63] - replacement of hit of type Boolean is (-7479217222840615375)?.toChar().isDefined()
2021-03-11 10:59:01,251 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:01,251 [main:66] - Compilation checking started
2021-03-11 10:59:01,604 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus("ShouldBeEnabled", (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:01,611 [main:56] - replacing ("ShouldBeEnabled", String)
2021-03-11 10:59:01,612 [main:38] - replacing "ShouldBeEnabled" String
2021-03-11 10:59:01,612 [main:42] - Getting value of type String
2021-03-11 10:59:01,710 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:59:01,711 [main:46] - GENERATED VALUE OF TYPE String = "oychz"
2021-03-11 10:59:01,712 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:01,716 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:59:01,811 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:59:01,813 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 10:59:01,822 [main:94] - GETTING String from Boolean
2021-03-11 10:59:01,833 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:59:01,833 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:59:01,942 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:01,945 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:59:02,060 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:59:02,062 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578)
2021-03-11 10:59:02,062 [main:63] - replacement of "ShouldBeEnabled" of type String is (ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578)
2021-03-11 10:59:02,164 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:02,164 [main:66] - Compilation checking started
2021-03-11 10:59:02,529 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:02,537 [main:56] - replacing (c, Checker)
2021-03-11 10:59:02,538 [main:38] - replacing c Checker
2021-03-11 10:59:02,538 [main:42] - Getting value of type Checker
2021-03-11 10:59:02,637 [main:302] - generating value of type = Checker false depth = 0
2021-03-11 10:59:02,638 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:59:02,851 [main:302] - generating value of type = ShouldBeDisabled false depth = 2
2021-03-11 10:59:02,853 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:59:02,853 [main:46] - GENERATED VALUE OF TYPE Checker = ShouldBeDisabled()
2021-03-11 10:59:02,853 [main:49] - GENERATED IS CALL =true
2021-03-11 10:59:03,205 [main:55] - randomType = LinkedHashSet<Short>
2021-03-11 10:59:03,306 [main:302] - generating value of type = LinkedHashSet<Short> false depth = 0
2021-03-11 10:59:03,406 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Short> = TODO()
2021-03-11 10:59:03,408 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Short> = TODO()
2021-03-11 10:59:03,509 [main:95] - GENERATED = linkedSetOf<Short>()
2021-03-11 10:59:03,635 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:03,644 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:03,644 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:03,644 [main:94] - GETTING Checker from Checker
2021-03-11 10:59:03,647 [main:63] - replacement of c of type Checker is setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
2021-03-11 10:59:03,746 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:59:03,746 [main:66] - Compilation checking started
2021-03-11 10:59:03,995 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    setDesiredAssertionStatus(ShouldBeEnabled().checkTrue()) = ShouldBeEnabled()
    if (!true) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:04,003 [main:56] - replacing (v, Boolean)
2021-03-11 10:59:04,003 [main:38] - replacing v Boolean
2021-03-11 10:59:04,003 [main:42] - Getting value of type Boolean
2021-03-11 10:59:04,101 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:04,102 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:59:04,102 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:04,313 [main:55] - randomType = UInt?
2021-03-11 10:59:04,408 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 10:59:04,448 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4e22c4c2]
2021-03-11 10:59:04,448 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@bfbb83b]
2021-03-11 10:59:04,449 [main:66] - Generated call from random type = (333196255.toUInt())?.toFloat().isFinite()
2021-03-11 10:59:04,449 [main:63] - replacement of v of type Boolean is (333196255.toUInt())?.toFloat().isFinite()
2021-03-11 10:59:04,544 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:04,552 [main:56] - replacing (true, Boolean)
2021-03-11 10:59:04,552 [main:38] - replacing true Boolean
2021-03-11 10:59:04,552 [main:42] - Getting value of type Boolean
2021-03-11 10:59:04,648 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:04,649 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:59:04,649 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:04,654 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:59:04,750 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:59:04,751 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 10:59:04,757 [main:137] - GENERATING call of type public open fun checkTrueWithMessage(): kotlin.Boolean defined in ShouldBeEnabled[SimpleFunctionDescriptorImpl@3bc8de34]
2021-03-11 10:59:04,757 [main:66] - Generated call from random type = (ShouldBeEnabled()).checkTrueWithMessage()
2021-03-11 10:59:04,757 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:59:04,765 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:04,765 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:04,859 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:04,861 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
2021-03-11 10:59:04,861 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:04,861 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:04,956 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:04,957 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:05,058 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:05,060 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("tbkdn").and(true)
2021-03-11 10:59:05,060 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:05,060 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:05,187 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:05,187 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:05,282 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:05,284 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("xgwuf").xor(true)
2021-03-11 10:59:05,284 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:05,284 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:05,379 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:05,379 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:05,474 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:05,474 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("zapeq").equals("xvwri")
2021-03-11 10:59:05,474 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:05,474 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:05,569 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:05,569 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:05,570 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("msfbv").not()
2021-03-11 10:59:05,570 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:05,570 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:05,570 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:59:05,570 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:05,570 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:05,665 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:05,665 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:05,761 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:05,762 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("dvyax").or(false)
2021-03-11 10:59:05,762 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:05,762 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:05,857 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:05,859 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(false)
2021-03-11 10:59:05,859 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:05,859 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:05,954 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:05,954 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("ekvwa")
2021-03-11 10:59:05,954 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:59:05,954 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:59:06,050 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:06,051 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:59:06,147 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:06,148 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("omcmo")
2021-03-11 10:59:06,148 [main:63] - replacement of true of type Boolean is (ShouldBeEnabled().checkFalseWithMessage()).equals("dvyax").or(false)
2021-03-11 10:59:06,242 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:06,250 [main:56] - replacing (!true, Boolean)
2021-03-11 10:59:06,251 [main:38] - replacing !true Boolean
2021-03-11 10:59:06,251 [main:42] - Getting value of type Boolean
2021-03-11 10:59:06,347 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:06,349 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:59:06,349 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:06,690 [main:55] - randomType = HashMap<Boolean, Triple<Char, UInt, ShouldBeDisabled>>
2021-03-11 10:59:06,786 [main:302] - generating value of type = HashMap<Boolean, Triple<Char, UInt, ShouldBeDisabled>> false depth = 0
2021-03-11 10:59:06,887 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Boolean, Triple<Char, UInt, ShouldBeDisabled>> = TODO()
2021-03-11 10:59:06,890 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Boolean, Triple<Char, UInt, ShouldBeDisabled>> = TODO()
2021-03-11 10:59:07,028 [main:95] - GENERATED = linkedMapOf<Boolean, Triple<Char, UInt, ShouldBeDisabled>>()
2021-03-11 10:59:07,193 [main:137] - GENERATING call of type public fun <K, V> kotlin.collections.Map<out K, V>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72dbe10c]
2021-03-11 10:59:07,193 [main:66] - Generated call from random type = (linkedMapOf<Boolean, Triple<Char, UInt, ShouldBeDisabled>>()).any()
2021-03-11 10:59:07,193 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:59:07,206 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:07,206 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:07,206 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:59:07,206 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:07,206 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:07,316 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:07,316 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("mbuop")
2021-03-11 10:59:07,316 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:07,316 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:07,414 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:07,415 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).and(true)
2021-03-11 10:59:07,415 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:07,415 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:07,512 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:07,513 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:07,609 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:07,610 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("uospp").or(true)
2021-03-11 10:59:07,610 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:07,610 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:07,706 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:07,706 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:07,807 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:07,808 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")
2021-03-11 10:59:07,808 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:07,808 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:07,906 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:07,906 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:07,906 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("svqnu").not()
2021-03-11 10:59:07,906 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:07,906 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:08,004 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:08,005 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).xor(true)
2021-03-11 10:59:08,005 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:08,006 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:08,104 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:08,105 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).or(true)
2021-03-11 10:59:08,105 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:08,105 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:08,206 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:08,206 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:08,307 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:08,309 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("avizo").xor(true)
2021-03-11 10:59:08,309 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:08,309 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:08,409 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:08,506 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:08,508 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals(null).and(false)
2021-03-11 10:59:08,508 [main:63] - replacement of !true of type Boolean is (ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")
2021-03-11 10:59:08,603 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:08,603 [main:66] - Compilation checking started
2021-03-11 10:59:08,955 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return "FAIL 6"
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:08,963 [main:56] - replacing ("FAIL 6", String)
2021-03-11 10:59:08,963 [main:38] - replacing "FAIL 6" String
2021-03-11 10:59:08,963 [main:42] - Getting value of type String
2021-03-11 10:59:09,080 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:59:09,082 [main:46] - GENERATED VALUE OF TYPE String = "rhbyw"
2021-03-11 10:59:09,082 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:09,202 [main:55] - randomType = ShouldBeDisabled?
2021-03-11 10:59:09,355 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 10:59:09,358 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:59:09,369 [main:94] - GETTING String from Boolean
2021-03-11 10:59:09,385 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:59:09,385 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:59:09,495 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:09,497 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:59:09,624 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:59:09,626 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
2021-03-11 10:59:09,626 [main:63] - replacement of "FAIL 6" of type String is (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
2021-03-11 10:59:09,749 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:09,749 [main:66] - Compilation checking started
2021-03-11 10:59:10,279 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:10,293 [main:56] - replacing (setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi")), Checker)
2021-03-11 10:59:10,294 [main:38] - replacing setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi")) Checker
2021-03-11 10:59:10,294 [main:42] - Getting value of type Checker
2021-03-11 10:59:10,442 [main:302] - generating value of type = Checker false depth = 0
2021-03-11 10:59:10,444 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:59:10,688 [main:302] - generating value of type = ShouldBeDisabled false depth = 2
2021-03-11 10:59:10,690 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:59:10,691 [main:46] - GENERATED VALUE OF TYPE Checker = ShouldBeDisabled()
2021-03-11 10:59:10,691 [main:49] - GENERATED IS CALL =true
2021-03-11 10:59:10,694 [main:55] - randomType = Float
2021-03-11 10:59:10,810 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:59:10,865 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:10,879 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:10,880 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:10,880 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:10,881 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:10,881 [main:94] - GETTING Checker from Checker
2021-03-11 10:59:10,886 [main:63] - replacement of setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi")) of type Checker is ShouldBeDisabled()
2021-03-11 10:59:11,004 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:59:11,004 [main:66] - Compilation checking started
2021-03-11 10:59:11,360 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = ShouldBeDisabled()
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:11,370 [main:56] - replacing (hit, Boolean)
2021-03-11 10:59:11,370 [main:38] - replacing hit Boolean
2021-03-11 10:59:11,370 [main:42] - Getting value of type Boolean
2021-03-11 10:59:11,499 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:11,501 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:59:11,502 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:11,509 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:59:11,632 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:59:11,634 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 10:59:11,646 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ShouldBeEnabled[DeserializedSimpleFunctionDescriptor@7f384ed1]
2021-03-11 10:59:11,777 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:11,777 [main:66] - Generated call from random type = (ShouldBeEnabled()).equals("xkvdo")
2021-03-11 10:59:11,777 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:59:11,790 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:11,790 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:11,930 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:11,931 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:12,062 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:12,064 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("uavvq").or(true)
2021-03-11 10:59:12,064 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:12,064 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:12,201 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:12,203 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).or(false)
2021-03-11 10:59:12,203 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:12,203 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:12,310 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:12,310 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:12,311 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("ffwxw").not()
2021-03-11 10:59:12,311 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:12,311 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:12,417 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:12,419 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).and(false)
2021-03-11 10:59:12,419 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:59:12,419 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:59:12,570 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:12,572 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:59:12,672 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:12,673 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).compareTo(false).equals("tqlok")
2021-03-11 10:59:12,673 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:12,673 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:12,770 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:12,772 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).xor(false)
2021-03-11 10:59:12,772 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:12,772 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:12,870 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:12,871 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:12,967 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:12,967 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("cqqaw").equals("vhjpu")
2021-03-11 10:59:12,967 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:12,967 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:12,967 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).not()
2021-03-11 10:59:12,967 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:12,967 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:13,065 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:13,065 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("eznrk")
2021-03-11 10:59:13,065 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:13,065 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:13,163 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:13,163 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:13,260 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:13,261 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("eahmr").and(false)
2021-03-11 10:59:13,261 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled()).equals("xkvdo")
2021-03-11 10:59:13,365 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:13,365 [main:66] - Compilation checking started
2021-03-11 10:59:13,618 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { (ShouldBeEnabled()).equals("xkvdo") = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:13,626 [main:56] - replacing (hit, Boolean)
2021-03-11 10:59:13,626 [main:38] - replacing hit Boolean
2021-03-11 10:59:13,626 [main:42] - Getting value of type Boolean
2021-03-11 10:59:13,722 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:13,723 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:59:13,724 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:13,729 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:59:13,825 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:59:13,826 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 10:59:13,832 [main:137] - GENERATING call of type public open fun checkTrue(): kotlin.Boolean defined in ShouldBeEnabled[SimpleFunctionDescriptorImpl@4dd07b42]
2021-03-11 10:59:13,832 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:13,929 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:13,930 [main:66] - Generated call from random type = (ShouldBeEnabled()).checkTrue().xor(false)
2021-03-11 10:59:13,930 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:59:13,943 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:13,943 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:14,039 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:14,040 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:14,040 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("nivlq").not()
2021-03-11 10:59:14,040 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:14,040 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:14,040 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).not()
2021-03-11 10:59:14,040 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:14,040 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:14,140 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:14,142 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).xor(true)
2021-03-11 10:59:14,142 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:14,142 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:14,239 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:14,240 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).or(false)
2021-03-11 10:59:14,240 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:14,240 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:14,338 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:14,338 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:14,435 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:14,436 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("bbdsl").xor(false)
2021-03-11 10:59:14,436 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:14,436 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:14,533 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:14,533 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:14,629 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:14,631 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("lunik").or(false)
2021-03-11 10:59:14,631 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:14,631 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:14,728 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:14,728 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:14,858 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:14,860 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("wlezl").and(false)
2021-03-11 10:59:14,860 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:14,860 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:14,964 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:14,966 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).and(false)
2021-03-11 10:59:14,966 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:14,966 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:15,085 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:15,086 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:15,213 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:15,213 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("gjsqj").equals("djttk")
2021-03-11 10:59:15,213 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:15,213 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:15,318 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:15,318 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkTrue()).equals("hdwqn")
2021-03-11 10:59:15,318 [main:63] - replacement of hit of type Boolean is (ShouldBeDisabled().checkTrue()).equals("hdwqn")
2021-03-11 10:59:15,434 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:15,443 [main:56] - replacing (hit, Boolean)
2021-03-11 10:59:15,443 [main:38] - replacing hit Boolean
2021-03-11 10:59:15,443 [main:42] - Getting value of type Boolean
2021-03-11 10:59:15,544 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:15,545 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:59:15,545 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:16,122 [main:55] - randomType = LinkedHashMap<Function2<ULong, Checker?, String?>, UByte>
2021-03-11 10:59:16,237 [main:302] - generating value of type = LinkedHashMap<Function2<ULong, Checker?, String?>, UByte> false depth = 0
2021-03-11 10:59:16,363 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Function2<ULong, Checker?, Strg?>, UByte> = TODO()
2021-03-11 10:59:16,366 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Function2<ULong, Checker?, Strg?>, UByte> = TODO()
2021-03-11 10:59:16,477 [main:95] - GENERATED = linkedMapOf<Function2<ULong, Checker?, String?>, UByte>()
2021-03-11 10:59:16,674 [main:137] - GENERATING call of type public open fun containsKey(key: (kotlin.ULong, Checker?) -> kotlin.String?): kotlin.Boolean defined in kotlin.collections.LinkedHashMap[DeserializedSimpleFunctionDescriptor@175cba88]
2021-03-11 10:59:16,778 [main:302] - generating value of type = Function2<ULong, Checker?, String?> false depth = 0
2021-03-11 10:59:16,779 [main:302] - generating value of type = String true depth = 1
2021-03-11 10:59:16,781 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:16,888 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:16,889 [main:66] - Generated call from random type = (linkedMapOf<Function2<ULong, Checker?, String?>, UByte>()).containsKey({a: ULong, b: Checker? -> "xgoko"}).equals("tbhra")
2021-03-11 10:59:16,889 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:59:16,900 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:16,900 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:16,900 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).not()
2021-03-11 10:59:16,900 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:16,900 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:17,019 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:17,022 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).and(false)
2021-03-11 10:59:17,022 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:17,022 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:17,138 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:17,138 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:17,291 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:17,291 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("iquro").equals("ftbtc")
2021-03-11 10:59:17,291 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:17,291 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:17,413 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals(null)
2021-03-11 10:59:17,414 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:17,414 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:17,533 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:17,533 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:17,664 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:17,665 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("cescd").or(false)
2021-03-11 10:59:17,666 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:59:17,666 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:59:17,794 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:17,796 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:59:17,905 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:17,906 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).compareTo(true).equals("gpflc")
2021-03-11 10:59:17,906 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:17,906 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:18,007 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:18,009 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).xor(true)
2021-03-11 10:59:18,009 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:18,009 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:18,123 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:18,123 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:18,123 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("rcrnm").not()
2021-03-11 10:59:18,123 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:18,123 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:18,227 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:18,227 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:18,324 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:18,325 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).equals("cirlg").and(true)
2021-03-11 10:59:18,325 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:18,325 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:18,422 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:18,424 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).or(true)
2021-03-11 10:59:18,424 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkTrue()).or(true)
2021-03-11 10:59:18,519 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:18,520 [main:66] - Compilation checking started
2021-03-11 10:59:18,810 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { (ShouldBeEnabled().checkTrue()).or(true) = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:18,819 [main:56] - replacing (hit, Boolean)
2021-03-11 10:59:18,819 [main:38] - replacing hit Boolean
2021-03-11 10:59:18,819 [main:42] - Getting value of type Boolean
2021-03-11 10:59:18,920 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:18,921 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:59:18,921 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:18,926 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:59:19,022 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:59:19,024 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 10:59:19,032 [main:137] - GENERATING call of type public open fun checkFalse(): kotlin.Boolean defined in ShouldBeEnabled[SimpleFunctionDescriptorImpl@65e70a07]
2021-03-11 10:59:19,032 [main:66] - Generated call from random type = (ShouldBeEnabled()).checkFalse()
2021-03-11 10:59:19,032 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:59:19,043 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:19,043 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:19,145 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:19,147 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).or(false)
2021-03-11 10:59:19,147 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:19,147 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:19,246 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:19,247 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:19,344 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:19,346 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("sgvsv").xor(false)
2021-03-11 10:59:19,346 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:19,346 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:19,443 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:19,443 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:19,548 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:19,548 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("ggwsk").equals("ymnep")
2021-03-11 10:59:19,548 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:19,548 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:19,677 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:19,677 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:19,783 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:19,784 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("awkcv").and(true)
2021-03-11 10:59:19,784 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:19,784 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:19,784 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).not()
2021-03-11 10:59:19,784 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:19,785 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:19,902 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:19,904 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).and(true)
2021-03-11 10:59:19,904 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:19,904 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:20,039 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:20,039 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:20,039 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("qiqpw").not()
2021-03-11 10:59:20,039 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:59:20,039 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:59:20,173 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:20,175 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:59:20,281 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:20,282 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).compareTo(false).equals("llpja")
2021-03-11 10:59:20,282 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:20,282 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:20,377 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:20,377 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("tchbs")
2021-03-11 10:59:20,378 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:20,378 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:20,473 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:20,473 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:20,569 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:20,570 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("fvwhu").or(false)
2021-03-11 10:59:20,570 [main:63] - replacement of hit of type Boolean is (ShouldBeDisabled().checkFalseWithMessage()).not()
2021-03-11 10:59:20,665 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:20,665 [main:66] - Compilation checking started
2021-03-11 10:59:20,920 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { (ShouldBeDisabled().checkFalseWithMessage()).not() = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus("ShouldBeDisabled", (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:20,928 [main:56] - replacing ("ShouldBeDisabled", String)
2021-03-11 10:59:20,928 [main:38] - replacing "ShouldBeDisabled" String
2021-03-11 10:59:20,928 [main:42] - Getting value of type String
2021-03-11 10:59:21,026 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:59:21,027 [main:46] - GENERATED VALUE OF TYPE String = "jewoy"
2021-03-11 10:59:21,027 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:21,137 [main:55] - randomType = UByte?
2021-03-11 10:59:21,233 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:59:21,263 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@51ffae82]
2021-03-11 10:59:21,360 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:59:21,362 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@332dc06d]
2021-03-11 10:59:21,457 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:59:21,458 [main:66] - Generated call from random type = (103.toUByte())?.div(109.toUByte()).toString(-1097115255)
2021-03-11 10:59:21,459 [main:94] - GETTING String from Boolean
2021-03-11 10:59:21,467 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:59:21,467 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:59:21,563 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:21,564 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:59:21,660 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:59:21,661 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313)
2021-03-11 10:59:21,661 [main:63] - replacement of "ShouldBeDisabled" of type String is (ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313)
2021-03-11 10:59:21,756 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:21,756 [main:66] - Compilation checking started
2021-03-11 10:59:22,110 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "FAIL 0"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:22,118 [main:56] - replacing ("FAIL 0", String)
2021-03-11 10:59:22,119 [main:38] - replacing "FAIL 0" String
2021-03-11 10:59:22,119 [main:42] - Getting value of type String
2021-03-11 10:59:22,256 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:59:22,258 [main:46] - GENERATED VALUE OF TYPE String = "aewqj"
2021-03-11 10:59:22,258 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:22,263 [main:55] - randomType = Checker
2021-03-11 10:59:22,264 [main:94] - GETTING String from Boolean
2021-03-11 10:59:22,273 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:59:22,273 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:59:22,370 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:22,371 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:59:22,479 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:59:22,481 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkTrue()).compareTo(true).toString(-1358752508)
2021-03-11 10:59:22,481 [main:63] - replacement of "FAIL 0" of type String is "aewqj"
2021-03-11 10:59:22,576 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 10:59:22,577 [main:66] - Compilation checking started
2021-03-11 10:59:22,921 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:22,929 [main:56] - replacing ({ hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) }, Function0<Boolean>)
2021-03-11 10:59:22,929 [main:38] - replacing { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) } Function0<Boolean>
2021-03-11 10:59:22,929 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:59:23,029 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:59:23,031 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:59:23,032 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 10:59:23,032 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:23,035 [main:55] - randomType = Long
2021-03-11 10:59:23,135 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:59:23,165 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:23,175 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:23,176 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:59:23,179 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:23,180 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:23,181 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:23,182 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:23,183 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:23,184 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:23,185 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:23,186 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:23,187 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:59:23,188 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:23,189 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:23,189 [main:63] - replacement of { hit = (3283225029933208707)?.toFloat().isNaN(); (true).equals("kslwj").and(false) } of type Function0<Boolean> is { false}
2021-03-11 10:59:23,285 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 10:59:23,285 [main:66] - Compilation checking started
2021-03-11 10:59:23,618 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:23,626 [main:56] - replacing (c.checkTrueWithMessage(), Boolean)
2021-03-11 10:59:23,626 [main:38] - replacing c.checkTrueWithMessage() Boolean
2021-03-11 10:59:23,626 [main:42] - Getting value of type Boolean
2021-03-11 10:59:23,725 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:23,726 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:59:23,726 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:24,052 [main:55] - randomType = HashSet<HashSet<Checker>>?
2021-03-11 10:59:24,154 [main:302] - generating value of type = HashSet<HashSet<Checker>> false depth = 0
2021-03-11 10:59:24,255 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<HashSet<Checker>>): HashSet<HashSet<Checker>> = TODO()
2021-03-11 10:59:24,257 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<HashSet<Checker>>): HashSet<HashSet<Checker>> = TODO()
2021-03-11 10:59:24,468 [main:302] - generating value of type = Collection<HashSet<Checker>> false depth = 3
2021-03-11 10:59:24,569 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: HashSet<Checker>): Collection<HashSet<Checker>> = TODO()
2021-03-11 10:59:24,572 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: HashSet<Checker>): Collection<HashSet<Checker>> = TODO()
2021-03-11 10:59:24,671 [main:302] - generating value of type = HashSet<Checker> false depth = 6
2021-03-11 10:59:24,772 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Checker> = TODO()
2021-03-11 10:59:24,774 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Checker> = TODO()
2021-03-11 10:59:24,922 [main:95] - GENERATED = hashSetOf<Checker>()
2021-03-11 10:59:24,922 [main:95] - GENERATED = linkedSetOf<HashSet<Checker>>(hashSetOf<Checker>())
2021-03-11 10:59:24,922 [main:95] - GENERATED = LinkedHashSet<HashSet<Checker>>(linkedSetOf<HashSet<Checker>>(hashSetOf<Checker>()))
2021-03-11 10:59:25,050 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@1f937f3c]
2021-03-11 10:59:25,154 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:25,154 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:25,250 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:25,251 [main:66] - Generated call from random type = (LinkedHashSet<HashSet<Checker>>(linkedSetOf<HashSet<Checker>>(hashSetOf<Checker>())))?.equals("bmwit").xor(true)
2021-03-11 10:59:25,252 [main:94] - GETTING Boolean from Checker
2021-03-11 10:59:25,256 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]]
2021-03-11 10:59:25,257 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:59:25,257 [main:105] - GENERATED CALL = (c).checkTrue()
2021-03-11 10:59:25,257 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Checker[DeserializedSimpleFunctionDescriptor@e1cc4e5]]
2021-03-11 10:59:25,257 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Checker[DeserializedSimpleFunctionDescriptor@e1cc4e5]
2021-03-11 10:59:25,353 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:25,353 [main:105] - GENERATED CALL = (c).equals("juuji")
2021-03-11 10:59:25,353 [main:101] - Case = [public abstract fun checkTrueWithMessage(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@3192c24f]]
2021-03-11 10:59:25,353 [main:137] - GENERATING call of type public abstract fun checkTrueWithMessage(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@3192c24f]
2021-03-11 10:59:25,353 [main:105] - GENERATED CALL = (c).checkTrueWithMessage()
2021-03-11 10:59:25,353 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:25,353 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:59:25,353 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:25,448 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:25,450 [main:105] - GENERATED CALL = (c).checkTrue().and(false)
2021-03-11 10:59:25,450 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:25,450 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:59:25,450 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:25,545 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:25,546 [main:105] - GENERATED CALL = (c).checkTrue().or(true)
2021-03-11 10:59:25,546 [main:101] - Case = [public abstract fun checkFalse(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@696a33ee]]
2021-03-11 10:59:25,546 [main:137] - GENERATING call of type public abstract fun checkFalse(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@696a33ee]
2021-03-11 10:59:25,546 [main:105] - GENERATED CALL = (c).checkFalse()
2021-03-11 10:59:25,546 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:25,546 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:59:25,546 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:25,641 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:25,643 [main:105] - GENERATED CALL = (c).checkTrue().xor(true)
2021-03-11 10:59:25,643 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:25,643 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:59:25,643 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:25,738 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:25,738 [main:105] - GENERATED CALL = (c).checkTrue().equals("okpmc")
2021-03-11 10:59:25,738 [main:101] - Case = [public abstract fun checkFalseWithMessage(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@5d8c86b]]
2021-03-11 10:59:25,738 [main:137] - GENERATING call of type public abstract fun checkFalseWithMessage(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@5d8c86b]
2021-03-11 10:59:25,738 [main:105] - GENERATED CALL = (c).checkFalseWithMessage()
2021-03-11 10:59:25,738 [main:101] - Case = [public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:25,738 [main:137] - GENERATING call of type public abstract fun checkTrue(): kotlin.Boolean defined in Checker[SimpleFunctionDescriptorImpl@34afdb84]
2021-03-11 10:59:25,738 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:25,739 [main:105] - GENERATED CALL = (c).checkTrue().not()
2021-03-11 10:59:25,739 [main:63] - replacement of c.checkTrueWithMessage() of type Boolean is (c).checkFalse()
2021-03-11 10:59:25,835 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:25,844 [main:56] - replacing ("ShouldBeDisabled", String)
2021-03-11 10:59:25,844 [main:38] - replacing "ShouldBeDisabled" String
2021-03-11 10:59:25,844 [main:42] - Getting value of type String
2021-03-11 10:59:25,940 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:59:25,942 [main:46] - GENERATED VALUE OF TYPE String = "auniq"
2021-03-11 10:59:25,942 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:25,947 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:59:26,043 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:59:26,045 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 10:59:26,051 [main:94] - GETTING String from Boolean
2021-03-11 10:59:26,064 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]]
2021-03-11 10:59:26,064 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:59:26,168 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:26,169 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b8dcf]
2021-03-11 10:59:26,272 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:59:26,273 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalse()).compareTo(true).toString(1164638109)
2021-03-11 10:59:26,273 [main:63] - replacement of "ShouldBeDisabled" of type String is "auniq"
2021-03-11 10:59:26,370 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 10:59:26,378 [main:56] - replacing (hit, Boolean)
2021-03-11 10:59:26,378 [main:38] - replacing hit Boolean
2021-03-11 10:59:26,378 [main:42] - Getting value of type Boolean
2021-03-11 10:59:26,475 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:26,477 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:59:26,477 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:26,586 [main:55] - randomType = String?
2021-03-11 10:59:26,687 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:59:26,720 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5db0ab3b]
2021-03-11 10:59:26,819 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:59:26,820 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@753993bc]
2021-03-11 10:59:26,821 [main:66] - Generated call from random type = ("fbnmi")?.get(1555858339).isWhitespace()
2021-03-11 10:59:26,821 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:59:26,834 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:26,834 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:26,934 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals(null)
2021-03-11 10:59:26,935 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:26,935 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:27,031 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:27,033 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(true)
2021-03-11 10:59:27,033 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:27,033 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:27,130 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:27,130 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:27,261 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:27,262 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("yfzah").and(false)
2021-03-11 10:59:27,262 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:59:27,262 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:59:27,372 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:27,375 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:59:27,496 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:27,496 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ioayv")
2021-03-11 10:59:27,496 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:27,496 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:27,497 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:59:27,497 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:27,497 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:27,608 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:27,609 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:27,712 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:27,713 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("cuxxu").or(true)
2021-03-11 10:59:27,713 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:27,713 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:27,823 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:27,825 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
2021-03-11 10:59:27,825 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:27,825 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:27,921 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:27,921 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:27,921 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("pfyju").not()
2021-03-11 10:59:27,921 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:27,921 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:28,017 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:28,018 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).xor(true)
2021-03-11 10:59:28,018 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:28,018 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:28,123 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:28,239 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:28,239 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals(null).equals("rzkul")
2021-03-11 10:59:28,239 [main:63] - replacement of hit of type Boolean is (ShouldBeEnabled().checkFalseWithMessage()).or(true)
2021-03-11 10:59:28,335 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:28,343 [main:56] - replacing (hit, Boolean)
2021-03-11 10:59:28,343 [main:38] - replacing hit Boolean
2021-03-11 10:59:28,343 [main:42] - Getting value of type Boolean
2021-03-11 10:59:28,438 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:28,439 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:59:28,439 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:28,548 [main:55] - randomType = Checker?
2021-03-11 10:59:28,549 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:59:28,558 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:59:28,559 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:59:28,656 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:28,657 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:59:28,755 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:28,755 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("dkbze")
2021-03-11 10:59:28,755 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:28,755 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:28,854 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:28,854 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("dnvcu")
2021-03-11 10:59:28,854 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:28,854 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:28,953 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:28,954 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).and(false)
2021-03-11 10:59:28,954 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:28,954 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:29,052 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:29,052 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:29,052 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("myaic").not()
2021-03-11 10:59:29,053 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:29,053 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:29,154 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:29,156 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).or(false)
2021-03-11 10:59:29,156 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:29,156 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:29,156 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).not()
2021-03-11 10:59:29,156 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:29,156 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:29,256 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:29,258 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).xor(false)
2021-03-11 10:59:29,258 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:29,258 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:29,355 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:29,356 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:29,504 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:29,505 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("lmpzb").or(false)
2021-03-11 10:59:29,505 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:29,506 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:29,612 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:29,612 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:29,721 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:29,723 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("yogdz").xor(false)
2021-03-11 10:59:29,723 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:29,723 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:29,884 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:29,884 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:30,045 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:30,047 [main:105] - GENERATED CALL = (ShouldBeEnabled().checkFalseWithMessage()).equals("paddf").and(true)
2021-03-11 10:59:30,047 [main:63] - replacement of hit of type Boolean is true
2021-03-11 10:59:30,187 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 10:59:30,199 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:30,199 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:30,199 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:30,318 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:30,320 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:30,438 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:30,440 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:30,688 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:59:30,689 [main:95] - GENERATED = require(true)
2021-03-11 10:59:30,689 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 10:59:30,689 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:30,695 [main:55] - randomType = Checker
2021-03-11 10:59:30,696 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:30,710 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:30,712 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:30,714 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:30,715 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:30,717 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:30,718 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:30,723 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:30,724 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:30,725 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:30,727 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:30,728 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:30,729 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:30,730 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:30,730 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 10:59:30,853 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:30,854 [main:66] - Compilation checking started
2021-03-11 10:59:31,231 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:31,240 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:31,240 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:31,240 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:31,354 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:31,355 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:31,493 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:59:31,495 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:59:31,725 [main:302] - generating value of type = Any false depth = 4
2021-03-11 10:59:31,725 [main:95] - GENERATED = print("fsbpf")
2021-03-11 10:59:31,725 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("fsbpf")}
2021-03-11 10:59:31,726 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:32,105 [main:55] - randomType = LinkedHashMap<ShouldBeEnabled, UShort?>
2021-03-11 10:59:32,212 [main:302] - generating value of type = LinkedHashMap<ShouldBeEnabled, UShort?> false depth = 0
2021-03-11 10:59:32,329 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<ShouldBeEnabled, UShort?> = TODO()
2021-03-11 10:59:32,332 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<ShouldBeEnabled, UShort?> = TODO()
2021-03-11 10:59:32,496 [main:95] - GENERATED = linkedMapOf<ShouldBeEnabled, UShort?>()
2021-03-11 10:59:32,665 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:32,679 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:32,680 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:32,681 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:32,682 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:32,683 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:32,684 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:32,685 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:32,690 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:32,691 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:32,692 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:32,693 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:32,695 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:32,696 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:32,696 [main:63] - replacement of c of type Function0<Unit> is { print("fsbpf")}
2021-03-11 10:59:32,804 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:32,804 [main:66] - Compilation checking started
2021-03-11 10:59:33,110 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("fsbpf")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:33,119 [main:56] - replacing (hit, Boolean)
2021-03-11 10:59:33,119 [main:38] - replacing hit Boolean
2021-03-11 10:59:33,119 [main:42] - Getting value of type Boolean
2021-03-11 10:59:33,218 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:33,220 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:59:33,220 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:33,330 [main:55] - randomType = Byte
2021-03-11 10:59:33,430 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:59:33,467 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49d9ef30]
2021-03-11 10:59:33,467 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@bfbb83b]
2021-03-11 10:59:33,468 [main:66] - Generated call from random type = (-37).toFloat().isFinite()
2021-03-11 10:59:33,468 [main:94] - GETTING Boolean from Boolean
2021-03-11 10:59:33,479 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:33,479 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:33,582 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:33,584 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).or(false)
2021-03-11 10:59:33,584 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:33,584 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:33,684 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:33,686 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).xor(false)
2021-03-11 10:59:33,686 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]]
2021-03-11 10:59:33,686 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:33,785 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:33,785 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7360e8ae]
2021-03-11 10:59:33,884 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:33,886 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("rztej").or(false)
2021-03-11 10:59:33,886 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]]
2021-03-11 10:59:33,886 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b8f29ed]
2021-03-11 10:59:33,986 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:33,987 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).and(true)
2021-03-11 10:59:33,987 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:33,987 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:34,088 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:34,088 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:34,189 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:34,190 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("yegmf").equals("hykfp")
2021-03-11 10:59:34,190 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]]
2021-03-11 10:59:34,190 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47892abe]
2021-03-11 10:59:34,289 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:34,290 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("ulstb")
2021-03-11 10:59:34,290 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:34,290 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:34,290 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).not()
2021-03-11 10:59:34,290 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]]
2021-03-11 10:59:34,290 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:34,391 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:34,392 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d991631]
2021-03-11 10:59:34,392 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("rbnup").not()
2021-03-11 10:59:34,392 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]]
2021-03-11 10:59:34,392 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@348247ed]
2021-03-11 10:59:34,492 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:34,493 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67a64d9d]
2021-03-11 10:59:34,593 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:34,594 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).compareTo(true).equals("buwok")
2021-03-11 10:59:34,594 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]]
2021-03-11 10:59:34,594 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65d37f6]
2021-03-11 10:59:34,702 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:59:34,703 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5ba968cb]
2021-03-11 10:59:34,805 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:59:34,806 [main:105] - GENERATED CALL = (ShouldBeDisabled().checkFalseWithMessage()).equals("wjzgd").xor(true)
2021-03-11 10:59:34,806 [main:63] - replacement of hit of type Boolean is (ShouldBeDisabled().checkFalseWithMessage()).not()
2021-03-11 10:59:34,910 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:59:34,918 [main:56] - replacing (setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi")), Checker)
2021-03-11 10:59:34,919 [main:38] - replacing setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi")) Checker
2021-03-11 10:59:34,919 [main:42] - Getting value of type Checker
2021-03-11 10:59:35,020 [main:302] - generating value of type = Checker false depth = 0
2021-03-11 10:59:35,022 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:59:35,281 [main:302] - generating value of type = ShouldBeDisabled false depth = 2
2021-03-11 10:59:35,283 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:59:35,283 [main:46] - GENERATED VALUE OF TYPE Checker = ShouldBeDisabled()
2021-03-11 10:59:35,283 [main:49] - GENERATED IS CALL =true
2021-03-11 10:59:35,515 [main:55] - randomType = Function1<ShouldBeDisabled, UShort>
2021-03-11 10:59:35,515 [main:94] - GETTING Checker from Checker
2021-03-11 10:59:35,520 [main:63] - replacement of setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi")) of type Checker is ShouldBeDisabled()
2021-03-11 10:59:35,621 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:59:35,622 [main:66] - Compilation checking started
2021-03-11 10:59:35,896 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = ShouldBeDisabled()
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:35,904 [main:56] - replacing (c, Checker)
2021-03-11 10:59:35,905 [main:38] - replacing c Checker
2021-03-11 10:59:35,905 [main:42] - Getting value of type Checker
2021-03-11 10:59:36,010 [main:302] - generating value of type = Checker false depth = 0
2021-03-11 10:59:36,012 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:59:36,234 [main:302] - generating value of type = ShouldBeEnabled false depth = 2
2021-03-11 10:59:36,236 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 10:59:36,236 [main:46] - GENERATED VALUE OF TYPE Checker = ShouldBeEnabled()
2021-03-11 10:59:36,236 [main:49] - GENERATED IS CALL =true
2021-03-11 10:59:36,476 [main:55] - randomType = HashMap<Checker, Float?>
2021-03-11 10:59:36,583 [main:302] - generating value of type = HashMap<Checker, Float?> false depth = 0
2021-03-11 10:59:36,690 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Checker, Float?>): HashMap<Checker, Float?> = TODO()
2021-03-11 10:59:36,693 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Checker, Float?>): HashMap<Checker, Float?> = TODO()
2021-03-11 10:59:36,797 [main:302] - generating value of type = Pair<Checker, Float?> false depth = 3
2021-03-11 10:59:36,906 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Checker, second: Float?): Pair<Checker, Float?> = TODO()
2021-03-11 10:59:36,908 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Checker, second: Float?): Pair<Checker, Float?> = TODO()
2021-03-11 10:59:37,014 [main:302] - generating value of type = Checker false depth = 6
2021-03-11 10:59:37,015 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:59:37,223 [main:302] - generating value of type = ShouldBeEnabled false depth = 8
2021-03-11 10:59:37,226 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 10:59:37,226 [main:302] - generating value of type = Float true depth = 6
2021-03-11 10:59:37,227 [main:95] - GENERATED = Pair<Checker, Float?>(ShouldBeEnabled(), 0.661355f)
2021-03-11 10:59:37,227 [main:95] - GENERATED = hashMapOf<Checker, Float?>(Pair<Checker, Float?>(ShouldBeEnabled(), 0.661355f))
2021-03-11 10:59:37,344 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:37,354 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:37,355 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:37,355 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:37,355 [main:94] - GETTING Checker from Checker
2021-03-11 10:59:37,361 [main:63] - replacement of c of type Checker is setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
2021-03-11 10:59:37,461 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:59:37,462 [main:66] - Compilation checking started
2021-03-11 10:59:37,744 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    setDesiredAssertionStatus(ShouldBeEnabled().checkTrue()) = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:37,752 [main:56] - replacing (c, Checker)
2021-03-11 10:59:37,752 [main:38] - replacing c Checker
2021-03-11 10:59:37,752 [main:42] - Getting value of type Checker
2021-03-11 10:59:37,860 [main:302] - generating value of type = Checker false depth = 0
2021-03-11 10:59:37,861 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:59:38,117 [main:302] - generating value of type = ShouldBeDisabled false depth = 2
2021-03-11 10:59:38,119 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:59:38,119 [main:46] - GENERATED VALUE OF TYPE Checker = ShouldBeDisabled()
2021-03-11 10:59:38,119 [main:49] - GENERATED IS CALL =true
2021-03-11 10:59:38,124 [main:55] - randomType = Checker
2021-03-11 10:59:38,125 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:38,137 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:38,138 [main:94] - GETTING Checker from Boolean
2021-03-11 10:59:38,138 [main:94] - GETTING Checker from Checker
2021-03-11 10:59:38,140 [main:63] - replacement of c of type Checker is c
2021-03-11 10:59:38,243 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 10:59:38,252 [main:56] - replacing (setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi")), Checker)
2021-03-11 10:59:38,252 [main:38] - replacing setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi")) Checker
2021-03-11 10:59:38,252 [main:42] - Getting value of type Checker
2021-03-11 10:59:38,353 [main:302] - generating value of type = Checker false depth = 0
2021-03-11 10:59:38,354 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 10:59:38,568 [main:302] - generating value of type = ShouldBeEnabled false depth = 2
2021-03-11 10:59:38,569 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 10:59:38,570 [main:46] - GENERATED VALUE OF TYPE Checker = ShouldBeEnabled()
2021-03-11 10:59:38,570 [main:49] - GENERATED IS CALL =true
2021-03-11 10:59:38,575 [main:55] - randomType = Checker
2021-03-11 10:59:38,575 [main:94] - GETTING Checker from Checker
2021-03-11 10:59:38,580 [main:63] - replacement of setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi")) of type Checker is setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
2021-03-11 10:59:38,681 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:59:38,681 [main:66] - Compilation checking started
2021-03-11 10:59:39,047 [main:53] - Result = true
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
c()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:39,056 [main:56] - replacing (l, Function0<Boolean>)
2021-03-11 10:59:39,056 [main:38] - replacing l Function0<Boolean>
2021-03-11 10:59:39,056 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 10:59:39,158 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 10:59:39,160 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:59:39,161 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 10:59:39,161 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:39,166 [main:55] - randomType = ShouldBeDisabled
2021-03-11 10:59:39,266 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 10:59:39,267 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:59:39,275 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:39,284 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:39,285 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:39,286 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:39,287 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:39,288 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:39,289 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:39,291 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:39,293 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:39,295 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:39,297 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:39,299 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:59:39,306 [main:94] - GETTING Function0<Boolean> from Checker
2021-03-11 10:59:39,308 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 10:59:39,308 [main:63] - replacement of l of type Function0<Boolean> is { false}
2021-03-11 10:59:39,424 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:39,433 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:39,433 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:39,434 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:39,544 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:39,545 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:39,650 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:39,652 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:39,867 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:59:39,868 [main:95] - GENERATED = require(false)
2021-03-11 10:59:39,868 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 10:59:39,869 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:40,108 [main:55] - randomType = HashSet<ShouldBeDisabled>
2021-03-11 10:59:40,209 [main:302] - generating value of type = HashSet<ShouldBeDisabled> false depth = 0
2021-03-11 10:59:40,328 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<ShouldBeDisabled> = TODO()
2021-03-11 10:59:40,330 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<ShouldBeDisabled> = TODO()
2021-03-11 10:59:40,435 [main:95] - GENERATED = linkedSetOf<ShouldBeDisabled>()
2021-03-11 10:59:40,560 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:40,572 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:40,573 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:40,574 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:40,576 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:40,577 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:40,578 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:40,578 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:40,584 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:40,585 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:40,586 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:40,586 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:40,587 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:40,588 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:40,588 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 10:59:40,689 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:40,690 [main:66] - Compilation checking started
2021-03-11 10:59:40,971 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:40,979 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:40,979 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:40,979 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:41,124 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:41,126 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:41,232 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:59:41,234 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:59:41,569 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:59:41,571 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 10:59:41,572 [main:302] - generating value of type = Any false depth = 5
2021-03-11 10:59:41,572 [main:95] - GENERATED = require(false, { "tnkif"})
2021-03-11 10:59:41,572 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "tnkif"})}
2021-03-11 10:59:41,572 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:41,683 [main:55] - randomType = UInt
2021-03-11 10:59:41,793 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 10:59:41,839 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:41,853 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:41,859 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:41,860 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:41,861 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:41,862 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:41,863 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:41,864 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:41,865 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:41,866 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:41,867 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:41,868 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:41,869 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:41,870 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:41,870 [main:63] - replacement of c of type Function0<Unit> is { require(false, { "tnkif"})}
2021-03-11 10:59:41,974 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:41,974 [main:66] - Compilation checking started
2021-03-11 10:59:42,245 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false, { "tnkif"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:42,253 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:42,254 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:42,254 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:42,366 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:42,367 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:42,472 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 10:59:42,474 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 10:59:42,803 [main:302] - generating value of type = Int true depth = 4
2021-03-11 10:59:42,804 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 10:59:42,805 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 10:59:42,912 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:59:42,914 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:59:43,128 [main:302] - generating value of type = Any false depth = 8
2021-03-11 10:59:43,128 [main:95] - GENERATED = println("olwwt")
2021-03-11 10:59:43,128 [main:95] - GENERATED = repeat(1953924509, {a: Int -> println("olwwt")})
2021-03-11 10:59:43,128 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(1953924509, {a: Int -> println("olwwt")})}
2021-03-11 10:59:43,128 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:43,367 [main:55] - randomType = Map<Boolean, Short>
2021-03-11 10:59:43,368 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:43,382 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:43,383 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:43,388 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:43,389 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:43,390 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:43,391 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:43,393 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:43,395 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:43,396 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:43,397 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:43,398 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:43,399 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:43,400 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:43,400 [main:63] - replacement of c of type Function0<Unit> is { repeat(1953924509, {a: Int -> println("olwwt")})}
2021-03-11 10:59:43,514 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:43,514 [main:66] - Compilation checking started
2021-03-11 10:59:43,770 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(1953924509, {a: Int -> println("olwwt")})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:43,778 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:43,778 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:43,778 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:43,877 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:43,878 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:43,985 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:59:43,987 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:59:44,348 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:59:44,349 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 10:59:44,350 [main:302] - generating value of type = Any false depth = 5
2021-03-11 10:59:44,350 [main:95] - GENERATED = require(false, { "sosiy"})
2021-03-11 10:59:44,350 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "sosiy"})}
2021-03-11 10:59:44,351 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:44,577 [main:55] - randomType = HashMap<ShouldBeDisabled, Set<Int>>
2021-03-11 10:59:44,672 [main:302] - generating value of type = HashMap<ShouldBeDisabled, Set<Int>> false depth = 0
2021-03-11 10:59:44,777 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): HashMap<ShouldBeDisabled, Set<Int>> = TODO()
2021-03-11 10:59:44,779 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): HashMap<ShouldBeDisabled, Set<Int>> = TODO()
2021-03-11 10:59:44,994 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:59:44,996 [main:95] - GENERATED = LinkedHashMap<ShouldBeDisabled, Set<Int>>(-1926195149)
2021-03-11 10:59:45,126 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:45,135 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:45,136 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:45,137 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:45,138 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:45,139 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:45,140 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:45,141 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:45,142 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:45,146 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:45,147 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:45,148 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:45,149 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:45,150 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:45,150 [main:63] - replacement of c of type Function0<Unit> is { require(false, { "sosiy"})}
2021-03-11 10:59:45,255 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:45,255 [main:66] - Compilation checking started
2021-03-11 10:59:45,513 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false, { "sosiy"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:45,521 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:45,521 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:45,521 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:45,619 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:45,620 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:45,728 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 10:59:45,730 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 10:59:45,942 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 10:59:45,944 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 10:59:46,046 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:59:46,048 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:59:46,367 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 10:59:46,368 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 10:59:46,369 [main:302] - generating value of type = Any false depth = 9
2021-03-11 10:59:46,370 [main:95] - GENERATED = check(true, { "guvos"})
2021-03-11 10:59:46,370 [main:95] - GENERATED = contract({ check(true, { "guvos"})})
2021-03-11 10:59:46,370 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(true, { "guvos"})})}
2021-03-11 10:59:46,370 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:46,373 [main:55] - randomType = Double
2021-03-11 10:59:46,475 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:59:46,505 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:46,514 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:46,517 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:46,518 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:46,519 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:46,520 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:46,521 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:46,522 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:46,523 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:46,523 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:46,524 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:46,525 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:46,526 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:46,527 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:46,527 [main:63] - replacement of c of type Function0<Unit> is { contract({ check(true, { "guvos"})})}
2021-03-11 10:59:46,622 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:46,622 [main:66] - Compilation checking started
2021-03-11 10:59:46,894 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ check(true, { "guvos"})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:46,902 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:46,902 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:46,902 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:47,005 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:47,007 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:47,107 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 10:59:47,110 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 10:59:47,358 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 10:59:47,359 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 10:59:47,466 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:47,468 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:47,673 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 10:59:47,675 [main:95] - GENERATED = require(true)
2021-03-11 10:59:47,675 [main:95] - GENERATED = contract({ require(true)})
2021-03-11 10:59:47,675 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(true)})}
2021-03-11 10:59:47,675 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:47,680 [main:55] - randomType = Checker
2021-03-11 10:59:47,682 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:47,690 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:47,700 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:47,701 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:47,702 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:47,703 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:47,704 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:47,705 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:47,706 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:47,707 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:47,708 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:47,709 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:47,709 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:47,710 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:47,710 [main:63] - replacement of c of type Function0<Unit> is { contract({ require(true)})}
2021-03-11 10:59:47,806 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:47,806 [main:66] - Compilation checking started
2021-03-11 10:59:48,061 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ require(true)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:48,069 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:48,069 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:48,069 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:48,166 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:48,167 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:48,172 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 10:59:48,172 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:48,174 [main:55] - randomType = Double
2021-03-11 10:59:48,276 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:59:48,311 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:48,314 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:48,323 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:48,324 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:48,325 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:48,325 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:48,326 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:48,327 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:48,328 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:48,329 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:48,330 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:48,331 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:48,332 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:48,333 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:48,333 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 10:59:48,428 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:48,429 [main:66] - Compilation checking started
2021-03-11 10:59:48,689 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:48,697 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:48,697 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:48,697 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:48,794 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:48,795 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:48,895 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:59:48,897 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:59:49,106 [main:302] - generating value of type = Any false depth = 4
2021-03-11 10:59:49,106 [main:95] - GENERATED = println("gwmnr")
2021-03-11 10:59:49,107 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("gwmnr")}
2021-03-11 10:59:49,107 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:49,329 [main:55] - randomType = Function2<ShouldBeDisabled, Boolean, ULong>
2021-03-11 10:59:49,330 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:49,339 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:49,341 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:49,341 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:49,342 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:49,343 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:49,344 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:49,349 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:49,350 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:49,350 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:49,351 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:49,352 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:49,353 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:49,354 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:49,354 [main:63] - replacement of c of type Function0<Unit> is { println("gwmnr")}
2021-03-11 10:59:49,461 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:49,461 [main:66] - Compilation checking started
2021-03-11 10:59:49,714 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("gwmnr")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:49,722 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:49,722 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:49,722 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:49,818 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:49,820 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:49,920 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 10:59:49,922 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 10:59:50,137 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 10:59:50,138 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 10:59:50,243 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:59:50,246 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:59:50,614 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 10:59:50,616 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 10:59:50,617 [main:302] - generating value of type = Any false depth = 9
2021-03-11 10:59:50,617 [main:95] - GENERATED = require(false, { "hhdqe"})
2021-03-11 10:59:50,617 [main:95] - GENERATED = contract({ require(false, { "hhdqe"})})
2021-03-11 10:59:50,617 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(false, { "hhdqe"})})}
2021-03-11 10:59:50,617 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:50,622 [main:55] - randomType = Checker
2021-03-11 10:59:50,624 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:50,629 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:50,641 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:50,642 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:50,643 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:50,644 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:50,645 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:50,646 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:50,647 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:50,648 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:50,649 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:50,650 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:50,651 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:50,652 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:50,652 [main:63] - replacement of c of type Function0<Unit> is { contract({ require(false, { "hhdqe"})})}
2021-03-11 10:59:50,754 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:50,755 [main:66] - Compilation checking started
2021-03-11 10:59:51,010 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ require(false, { "hhdqe"})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:51,018 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:51,018 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:51,018 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:51,114 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:51,115 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:51,228 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:51,231 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:51,440 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:59:51,442 [main:95] - GENERATED = check(true)
2021-03-11 10:59:51,442 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 10:59:51,443 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:51,451 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:59:51,546 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:59:51,548 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 10:59:51,557 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:51,569 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:51,570 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:51,574 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:51,575 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:51,576 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:51,577 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:51,578 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:51,579 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:51,580 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:51,581 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:51,582 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:51,583 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:51,584 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:51,584 [main:63] - replacement of c of type Function0<Unit> is { check(true)}
2021-03-11 10:59:51,679 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:51,679 [main:66] - Compilation checking started
2021-03-11 10:59:51,926 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:51,934 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:51,934 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:51,934 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:52,036 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:52,037 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:52,152 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:59:52,154 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 10:59:52,368 [main:302] - generating value of type = Any false depth = 4
2021-03-11 10:59:52,368 [main:95] - GENERATED = print("tterl")
2021-03-11 10:59:52,368 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("tterl")}
2021-03-11 10:59:52,369 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:52,371 [main:55] - randomType = Char
2021-03-11 10:59:52,472 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:59:52,492 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:52,500 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:52,501 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:52,506 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:52,507 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:52,508 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:52,509 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:52,510 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:52,511 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:52,512 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:52,513 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:52,514 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:52,515 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:52,516 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:52,516 [main:63] - replacement of c of type Function0<Unit> is { print("tterl")}
2021-03-11 10:59:52,612 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:52,612 [main:66] - Compilation checking started
2021-03-11 10:59:52,878 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("tterl")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:52,886 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:52,887 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:52,887 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:52,986 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:52,988 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:53,088 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:53,090 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:53,301 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:59:53,302 [main:95] - GENERATED = require(true)
2021-03-11 10:59:53,302 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 10:59:53,303 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:53,411 [main:55] - randomType = ShouldBeDisabled?
2021-03-11 10:59:53,508 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 10:59:53,509 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 10:59:53,516 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:53,525 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:53,529 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:53,530 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:53,531 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:53,532 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:53,532 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:53,533 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:53,534 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:53,535 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:53,536 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:53,537 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:53,538 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:53,539 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:53,539 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 10:59:53,670 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:53,670 [main:66] - Compilation checking started
2021-03-11 10:59:53,916 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:53,924 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:53,924 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:53,924 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:54,020 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:54,021 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:54,122 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:59:54,124 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:59:54,434 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:59:54,435 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 10:59:54,436 [main:302] - generating value of type = Any false depth = 5
2021-03-11 10:59:54,437 [main:95] - GENERATED = check(false, { "vwphr"})
2021-03-11 10:59:54,437 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "vwphr"})}
2021-03-11 10:59:54,437 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:54,439 [main:55] - randomType = UByte
2021-03-11 10:59:54,536 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:59:54,564 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:54,574 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:54,575 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:54,575 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:54,576 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:54,577 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:54,581 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:54,582 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:54,583 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:54,584 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:54,585 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:54,586 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:54,587 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:54,588 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:54,588 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "vwphr"})}
2021-03-11 10:59:54,683 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:54,683 [main:66] - Compilation checking started
2021-03-11 10:59:54,931 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "vwphr"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:54,939 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:54,939 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:54,939 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:55,034 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:55,035 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:55,142 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:55,144 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:55,346 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:59:55,348 [main:95] - GENERATED = check(false)
2021-03-11 10:59:55,348 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 10:59:55,348 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:55,569 [main:55] - randomType = ArrayDeque<HashMap<UByte, String>>
2021-03-11 10:59:55,663 [main:302] - generating value of type = ArrayDeque<HashMap<UByte, String>> false depth = 0
2021-03-11 10:59:55,763 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<HashMap<UByte, String>> = TODO()
2021-03-11 10:59:55,765 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<HashMap<UByte, String>> = TODO()
2021-03-11 10:59:55,968 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:59:55,970 [main:95] - GENERATED = ArrayDeque<HashMap<UByte, String>>(233543564)
2021-03-11 10:59:56,153 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,162 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,163 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,164 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,165 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,166 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:56,170 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,171 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:56,172 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,173 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,174 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,175 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,176 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,177 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,177 [main:63] - replacement of c of type Function0<Unit> is { check(false)}
2021-03-11 10:59:56,271 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:56,272 [main:66] - Compilation checking started
2021-03-11 10:59:56,516 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:56,524 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:56,524 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:56,524 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:56,619 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:56,621 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:56,625 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 10:59:56,625 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:56,630 [main:55] - randomType = ShouldBeEnabled
2021-03-11 10:59:56,725 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 10:59:56,726 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 10:59:56,733 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,741 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,742 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,743 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,744 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:56,748 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,749 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,750 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,751 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,752 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,753 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,754 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,755 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:56,756 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:56,756 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 10:59:56,883 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:56,884 [main:66] - Compilation checking started
2021-03-11 10:59:57,134 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:57,142 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:57,142 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:57,142 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:57,237 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:57,238 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:57,337 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:59:57,339 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:59:57,648 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:59:57,649 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 10:59:57,651 [main:302] - generating value of type = Any false depth = 5
2021-03-11 10:59:57,651 [main:95] - GENERATED = require(false, { "plzdq"})
2021-03-11 10:59:57,651 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "plzdq"})}
2021-03-11 10:59:57,651 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:57,981 [main:55] - randomType = MutableMap<Checker, ShouldBeEnabled?>?
2021-03-11 10:59:57,982 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:57,991 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:57,992 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:57,993 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:57,994 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:57,995 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:57,996 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:57,997 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:57,998 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:57,998 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:58,003 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:58,004 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:58,005 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:58,006 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:58,006 [main:63] - replacement of c of type Function0<Unit> is { require(false, { "plzdq"})}
2021-03-11 10:59:58,107 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:58,107 [main:66] - Compilation checking started
2021-03-11 10:59:58,357 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false, { "plzdq"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:58,365 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:58,365 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:58,365 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:58,464 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:58,466 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:58,566 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:58,568 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 10:59:58,770 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:59:58,771 [main:95] - GENERATED = require(false)
2021-03-11 10:59:58,771 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 10:59:58,771 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:58,875 [main:55] - randomType = UShort
2021-03-11 10:59:58,970 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:59:59,000 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,012 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:59,017 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,018 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:59,019 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,020 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,021 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,022 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,023 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,024 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,025 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,026 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,027 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,028 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,028 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 10:59:59,131 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:59,131 [main:66] - Compilation checking started
2021-03-11 10:59:59,375 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 10:59:59,383 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 10:59:59,383 [main:38] - replacing c Function0<Unit>
2021-03-11 10:59:59,383 [main:42] - Getting value of type Function0<Unit>
2021-03-11 10:59:59,478 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 10:59:59,480 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 10:59:59,484 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 10:59:59,484 [main:49] - GENERATED IS CALL =false
2021-03-11 10:59:59,487 [main:55] - randomType = UByte
2021-03-11 10:59:59,582 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:59:59,610 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,618 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:59,623 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,624 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,625 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 10:59:59,626 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,626 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,627 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,628 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,629 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,630 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,631 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,632 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,633 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 10:59:59,633 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 10:59:59,728 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 10:59:59,728 [main:66] - Compilation checking started
2021-03-11 10:59:59,993 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:00,002 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:00,002 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:00,002 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:00,103 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:00,104 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:00,241 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:00,243 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:00,450 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:00:00,450 [main:95] - GENERATED = println("uqvli")
2021-03-11 11:00:00,450 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("uqvli")}
2021-03-11 11:00:00,450 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:00,666 [main:55] - randomType = Set<Double?>
2021-03-11 11:00:00,667 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:00,677 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:00,681 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:00,682 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:00,683 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:00,684 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:00,685 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:00,686 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:00,686 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:00,687 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:00,688 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:00,689 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:00,690 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:00,691 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:00,691 [main:63] - replacement of c of type Function0<Unit> is { println("uqvli")}
2021-03-11 11:00:00,786 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:00,786 [main:66] - Compilation checking started
2021-03-11 11:00:01,030 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("uqvli")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:01,038 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:01,038 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:01,038 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:01,133 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:01,135 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:01,139 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:00:01,139 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:01,144 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:00:01,239 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:00:01,240 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:00:01,247 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:01,256 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:01,257 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:01,258 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:01,258 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:01,259 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:01,260 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:01,261 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:01,262 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:01,263 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:01,264 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:01,265 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:01,266 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:01,271 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:01,271 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:00:01,365 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:01,366 [main:66] - Compilation checking started
2021-03-11 11:00:01,613 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:01,621 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:01,621 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:01,621 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:01,716 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:01,717 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:01,816 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:01,818 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:02,031 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:02,032 [main:95] - GENERATED = require(true)
2021-03-11 11:00:02,032 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:00:02,032 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:02,035 [main:55] - randomType = UByte
2021-03-11 11:00:02,131 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:00:02,161 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:02,170 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:02,171 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:02,172 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:02,173 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:02,174 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:02,175 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:02,176 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:02,180 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:02,181 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:02,182 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:02,183 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:02,184 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:02,185 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:02,185 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:00:02,281 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:02,281 [main:66] - Compilation checking started
2021-03-11 11:00:02,535 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:02,543 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:02,543 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:02,543 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:02,641 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:02,642 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:02,766 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:02,768 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:02,991 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:02,993 [main:95] - GENERATED = check(false)
2021-03-11 11:00:02,993 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 11:00:02,993 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:03,110 [main:55] - randomType = ShouldBeDisabled?
2021-03-11 11:00:03,228 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:00:03,230 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:00:03,237 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:03,250 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:03,251 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:03,252 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:03,253 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:03,254 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:03,255 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:03,261 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:03,262 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:03,264 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:03,264 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:03,265 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:03,267 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:03,268 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:03,268 [main:63] - replacement of c of type Function0<Unit> is { check(false)}
2021-03-11 11:00:03,370 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:03,371 [main:66] - Compilation checking started
2021-03-11 11:00:03,658 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:03,666 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:03,667 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:03,667 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:03,762 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:03,764 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:03,864 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:03,866 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:04,183 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:00:04,184 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:00:04,186 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:04,285 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:04,287 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:04,621 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:00:04,622 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:00:04,623 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:00:04,623 [main:95] - GENERATED = require(false, { "njfif"})
2021-03-11 11:00:04,624 [main:95] - GENERATED = repeat(582203718, {a: Int -> require(false, { "njfif"})})
2021-03-11 11:00:04,624 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(582203718, {a: Int -> require(false, { "njfif"})})}
2021-03-11 11:00:04,624 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:04,965 [main:55] - randomType = Map<Char?, UInt>
2021-03-11 11:00:04,966 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:04,979 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:04,980 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:04,981 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:04,982 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:04,983 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:04,984 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:04,985 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:04,986 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:04,987 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:04,988 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:04,993 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:04,994 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:04,995 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:04,995 [main:63] - replacement of c of type Function0<Unit> is { repeat(582203718, {a: Int -> require(false, { "njfif"})})}
2021-03-11 11:00:05,092 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:05,092 [main:66] - Compilation checking started
2021-03-11 11:00:05,350 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(582203718, {a: Int -> require(false, { "njfif"})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:05,358 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:05,358 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:05,358 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:05,455 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:05,456 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:05,555 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:05,557 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:05,866 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:05,868 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:00:05,869 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:00:05,869 [main:95] - GENERATED = check(false, { "hwsmw"})
2021-03-11 11:00:05,869 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "hwsmw"})}
2021-03-11 11:00:05,869 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:06,188 [main:55] - randomType = ArrayList<Short>
2021-03-11 11:00:06,283 [main:302] - generating value of type = ArrayList<Short> false depth = 0
2021-03-11 11:00:06,382 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<Short> = TODO()
2021-03-11 11:00:06,384 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<Short> = TODO()
2021-03-11 11:00:06,483 [main:95] - GENERATED = ArrayList<Short>()
2021-03-11 11:00:06,600 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:06,608 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:06,609 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:06,610 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:06,611 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:06,612 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:06,613 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:06,614 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:06,615 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:06,615 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:06,616 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:06,621 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:06,622 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:06,623 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:06,623 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "hwsmw"})}
2021-03-11 11:00:06,728 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:06,729 [main:66] - Compilation checking started
2021-03-11 11:00:07,019 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "hwsmw"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:07,027 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:07,028 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:07,028 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:07,125 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:07,126 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:07,227 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:07,229 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:07,433 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:07,435 [main:95] - GENERATED = require(true)
2021-03-11 11:00:07,435 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:00:07,435 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:07,546 [main:55] - randomType = ShouldBeEnabled?
2021-03-11 11:00:07,643 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:00:07,645 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:00:07,655 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:07,667 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:07,668 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:07,669 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:07,671 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:07,672 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:07,673 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:07,674 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:07,679 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:07,680 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:07,681 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:07,682 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:07,683 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:07,684 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:07,684 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:00:07,782 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:07,782 [main:66] - Compilation checking started
2021-03-11 11:00:08,036 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:08,044 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:08,044 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:08,044 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:08,141 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:08,143 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:08,247 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:08,249 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:08,464 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:08,467 [main:95] - GENERATED = require(true)
2021-03-11 11:00:08,467 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:00:08,467 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:08,579 [main:55] - randomType = Function1<Double, Boolean>
2021-03-11 11:00:08,580 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:08,593 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:08,594 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:08,595 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:08,596 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:08,597 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:08,598 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:08,599 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:08,600 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:08,601 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:08,606 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:08,608 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:08,609 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:08,610 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:08,610 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:00:08,713 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:08,714 [main:66] - Compilation checking started
2021-03-11 11:00:08,973 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:08,982 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:08,982 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:08,982 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:09,083 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:09,084 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:09,185 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:09,187 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:09,396 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:00:09,396 [main:95] - GENERATED = println("jkphd")
2021-03-11 11:00:09,396 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("jkphd")}
2021-03-11 11:00:09,397 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:09,399 [main:55] - randomType = Double
2021-03-11 11:00:09,498 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:00:09,529 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:09,538 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:09,539 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:09,540 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:09,541 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:09,542 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:09,543 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:09,547 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:09,548 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:09,549 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:09,550 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:09,551 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:09,552 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:09,553 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:09,553 [main:63] - replacement of c of type Function0<Unit> is { println("jkphd")}
2021-03-11 11:00:09,672 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:09,672 [main:66] - Compilation checking started
2021-03-11 11:00:09,980 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("jkphd")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:09,988 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:09,988 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:09,988 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:10,092 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:10,094 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:10,200 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:10,202 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:10,629 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:00:10,631 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:00:10,633 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:10,743 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:10,745 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:11,061 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:00:11,062 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:00:11,063 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:00:11,064 [main:95] - GENERATED = check(true, { "mxnqo"})
2021-03-11 11:00:11,064 [main:95] - GENERATED = repeat(-1626890408, {a: Int -> check(true, { "mxnqo"})})
2021-03-11 11:00:11,064 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-1626890408, {a: Int -> check(true, { "mxnqo"})})}
2021-03-11 11:00:11,064 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:11,173 [main:55] - randomType = UShort
2021-03-11 11:00:11,273 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:00:11,316 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:11,330 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:11,331 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:11,332 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:11,338 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:11,339 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:11,340 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:11,341 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:11,342 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:11,343 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:11,344 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:11,345 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:11,346 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:11,347 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:11,348 [main:63] - replacement of c of type Function0<Unit> is { repeat(-1626890408, {a: Int -> check(true, { "mxnqo"})})}
2021-03-11 11:00:11,451 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:11,451 [main:66] - Compilation checking started
2021-03-11 11:00:11,747 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-1626890408, {a: Int -> check(true, { "mxnqo"})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:11,760 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:11,760 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:11,760 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:11,892 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:11,894 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:11,995 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:11,997 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:12,271 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:00:12,273 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:12,411 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:12,413 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:12,779 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:00:12,781 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:00:12,783 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:00:12,783 [main:95] - GENERATED = require(true, { "ixdsa"})
2021-03-11 11:00:12,783 [main:95] - GENERATED = contract({ require(true, { "ixdsa"})})
2021-03-11 11:00:12,783 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(true, { "ixdsa"})})}
2021-03-11 11:00:12,783 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:12,792 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:00:12,932 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:00:12,934 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:00:12,945 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:12,962 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:12,967 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:12,968 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:12,969 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:12,971 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:12,973 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:12,974 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:12,975 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:12,976 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:12,977 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:12,978 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:12,980 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:12,981 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:12,981 [main:63] - replacement of c of type Function0<Unit> is { contract({ require(true, { "ixdsa"})})}
2021-03-11 11:00:13,114 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:13,115 [main:66] - Compilation checking started
2021-03-11 11:00:13,450 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ require(true, { "ixdsa"})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:13,459 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:13,459 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:13,459 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:13,567 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:13,569 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:13,679 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:13,681 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:13,950 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:13,951 [main:95] - GENERATED = require(true)
2021-03-11 11:00:13,952 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:00:13,952 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:13,955 [main:55] - randomType = Long
2021-03-11 11:00:14,070 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:00:14,117 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:14,127 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:14,128 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:14,129 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:14,130 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:14,131 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:14,131 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:14,132 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:14,133 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:14,138 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:14,139 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:14,140 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:14,141 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:14,142 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:14,142 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:00:14,255 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:14,256 [main:66] - Compilation checking started
2021-03-11 11:00:14,581 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:14,590 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:14,590 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:14,590 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:14,687 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:14,688 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:14,845 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:14,848 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:15,169 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:00:15,170 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:00:15,171 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:15,279 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:15,281 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:15,599 [main:302] - generating value of type = Int true depth = 8
2021-03-11 11:00:15,600 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 11:00:15,601 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:00:15,703 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:15,705 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:15,972 [main:302] - generating value of type = Any false depth = 12
2021-03-11 11:00:15,973 [main:95] - GENERATED = println("bnqey")
2021-03-11 11:00:15,973 [main:95] - GENERATED = repeat(1193393157, {a: Int -> println("bnqey")})
2021-03-11 11:00:15,973 [main:95] - GENERATED = repeat(-2035839723, {a: Int -> repeat(1193393157, {a: Int -> println("bnqey")})})
2021-03-11 11:00:15,973 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-2035839723, {a: Int -> repeat(1193393157, {a: Int -> println("bnqey")})})}
2021-03-11 11:00:15,973 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:15,979 [main:55] - randomType = Checker
2021-03-11 11:00:15,980 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:15,994 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:15,995 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:15,996 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:15,997 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:16,002 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:16,003 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:16,004 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:16,005 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:16,006 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:16,007 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:16,008 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:16,009 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:16,010 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:16,010 [main:63] - replacement of c of type Function0<Unit> is { repeat(-2035839723, {a: Int -> repeat(1193393157, {a: Int -> println("bnqey")})})}
2021-03-11 11:00:16,121 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:16,122 [main:66] - Compilation checking started
2021-03-11 11:00:16,408 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-2035839723, {a: Int -> repeat(1193393157, {a: Int -> println("bnqey")})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:16,416 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:16,416 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:16,416 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:16,514 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:16,516 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:16,626 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:16,630 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:16,883 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:00:16,884 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:16,990 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:16,992 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:17,207 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:00:17,209 [main:95] - GENERATED = require(false)
2021-03-11 11:00:17,209 [main:95] - GENERATED = contract({ require(false)})
2021-03-11 11:00:17,209 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(false)})}
2021-03-11 11:00:17,209 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:17,214 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:00:17,315 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:00:17,316 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:00:17,323 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:17,336 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:17,337 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:17,338 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:17,339 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:17,340 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:17,341 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:17,342 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:17,343 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:17,344 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:17,345 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:17,346 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:17,352 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:17,353 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:17,353 [main:63] - replacement of c of type Function0<Unit> is { contract({ require(false)})}
2021-03-11 11:00:17,453 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:17,453 [main:66] - Compilation checking started
2021-03-11 11:00:17,725 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ require(false)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:17,734 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:17,734 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:17,734 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:17,835 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:17,837 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:17,943 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:17,945 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:18,162 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:18,163 [main:95] - GENERATED = require(true)
2021-03-11 11:00:18,163 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:00:18,163 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:18,285 [main:55] - randomType = LinkedHashMap<ShouldBeDisabled, String>
2021-03-11 11:00:18,387 [main:302] - generating value of type = LinkedHashMap<ShouldBeDisabled, String> false depth = 0
2021-03-11 11:00:18,496 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<ShouldBeDisabled, String>): LkedHashMap<ShouldBeDisabled, Strg> = TODO()
2021-03-11 11:00:18,499 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<ShouldBeDisabled, String>): LkedHashMap<ShouldBeDisabled, Strg> = TODO()
2021-03-11 11:00:18,653 [main:302] - generating value of type = Pair<ShouldBeDisabled, String> false depth = 3
2021-03-11 11:00:18,758 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ShouldBeDisabled, second: String): Pair<ShouldBeDisabled, String> = TODO()
2021-03-11 11:00:18,760 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ShouldBeDisabled, second: String): Pair<ShouldBeDisabled, String> = TODO()
2021-03-11 11:00:18,866 [main:302] - generating value of type = ShouldBeDisabled false depth = 6
2021-03-11 11:00:18,868 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:00:18,868 [main:302] - generating value of type = String true depth = 6
2021-03-11 11:00:18,869 [main:95] - GENERATED = Pair<ShouldBeDisabled, String>(ShouldBeDisabled(), "qdwak")
2021-03-11 11:00:18,870 [main:95] - GENERATED = linkedMapOf<ShouldBeDisabled, String>(Pair<ShouldBeDisabled, String>(ShouldBeDisabled(), "qdwak"))
2021-03-11 11:00:19,002 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:19,015 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:19,016 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:19,017 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:19,018 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:19,019 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:19,020 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:19,026 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:19,027 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:19,028 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:19,029 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:19,030 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:19,031 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:19,032 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:19,032 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:00:19,133 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:19,133 [main:66] - Compilation checking started
2021-03-11 11:00:19,388 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:19,398 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:19,398 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:19,398 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:19,500 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:19,502 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:19,608 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:19,610 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:19,939 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:00:19,941 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:00:19,943 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:20,049 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:20,051 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:20,269 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:00:20,270 [main:95] - GENERATED = check(true)
2021-03-11 11:00:20,271 [main:95] - GENERATED = repeat(429571130, {a: Int -> check(true)})
2021-03-11 11:00:20,271 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(429571130, {a: Int -> check(true)})}
2021-03-11 11:00:20,271 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:20,499 [main:55] - randomType = Sequence<ShouldBeDisabled>
2021-03-11 11:00:20,500 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:20,504 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:20,515 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:20,516 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:20,517 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:20,518 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:20,519 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:20,520 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:20,521 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:20,522 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:20,523 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:20,524 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:20,525 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:20,526 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:20,526 [main:63] - replacement of c of type Function0<Unit> is { repeat(429571130, {a: Int -> check(true)})}
2021-03-11 11:00:20,628 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:20,629 [main:66] - Compilation checking started
2021-03-11 11:00:20,901 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(429571130, {a: Int -> check(true)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:20,909 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:20,909 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:20,909 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:21,015 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:21,016 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:21,127 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:21,130 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:21,349 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:21,351 [main:95] - GENERATED = check(true)
2021-03-11 11:00:21,351 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 11:00:21,351 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:21,467 [main:55] - randomType = ULong
2021-03-11 11:00:21,569 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:00:21,601 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:21,613 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:21,614 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:21,615 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:21,616 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:21,617 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:21,618 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:21,618 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:21,619 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:21,620 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:21,626 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:21,626 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:21,627 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:21,628 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:21,628 [main:63] - replacement of c of type Function0<Unit> is { check(true)}
2021-03-11 11:00:21,727 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:21,727 [main:66] - Compilation checking started
2021-03-11 11:00:21,996 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:22,006 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:22,006 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:22,006 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:22,114 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:22,115 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:22,221 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:22,223 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:22,437 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:00:22,437 [main:95] - GENERATED = println("tbaoi")
2021-03-11 11:00:22,437 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("tbaoi")}
2021-03-11 11:00:22,438 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:22,440 [main:55] - randomType = Int
2021-03-11 11:00:22,584 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:00:22,625 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:22,632 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:22,643 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:22,644 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:22,645 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:22,646 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:22,647 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:22,648 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:22,649 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:22,650 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:22,651 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:22,652 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:22,653 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:22,654 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:22,654 [main:63] - replacement of c of type Function0<Unit> is { println("tbaoi")}
2021-03-11 11:00:22,756 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:22,757 [main:66] - Compilation checking started
2021-03-11 11:00:23,020 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("tbaoi")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:23,028 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:23,028 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:23,028 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:23,127 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:23,128 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:23,133 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:00:23,133 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:23,253 [main:55] - randomType = MutableMap<Long, ShouldBeEnabled>
2021-03-11 11:00:23,254 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:23,266 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:23,267 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:23,268 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:23,269 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:23,270 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:23,270 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:23,277 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:23,278 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:23,279 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:23,280 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:23,281 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:23,282 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:23,283 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:23,283 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:00:23,382 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:23,383 [main:66] - Compilation checking started
2021-03-11 11:00:23,646 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:23,654 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:23,654 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:23,654 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:23,759 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:23,760 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:23,864 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:23,866 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:24,095 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:00:24,096 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:24,201 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:24,203 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:24,416 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:00:24,417 [main:95] - GENERATED = require(true)
2021-03-11 11:00:24,417 [main:95] - GENERATED = contract({ require(true)})
2021-03-11 11:00:24,417 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(true)})}
2021-03-11 11:00:24,417 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:24,771 [main:55] - randomType = Pair<Short?, ShouldBeDisabled>
2021-03-11 11:00:24,875 [main:302] - generating value of type = Pair<Short?, ShouldBeDisabled> false depth = 0
2021-03-11 11:00:24,985 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Short?, second: ShouldBeDisabled): Pair<Short?, ShouldBeDisabled> = TODO()
2021-03-11 11:00:24,988 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Short?, second: ShouldBeDisabled): Pair<Short?, ShouldBeDisabled> = TODO()
2021-03-11 11:00:25,094 [main:302] - generating value of type = Short true depth = 3
2021-03-11 11:00:25,096 [main:302] - generating value of type = ShouldBeDisabled false depth = 3
2021-03-11 11:00:25,097 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:00:25,097 [main:95] - GENERATED = Pair<Short?, ShouldBeDisabled>(-7623, ShouldBeDisabled())
2021-03-11 11:00:25,112 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:25,120 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:25,121 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:25,122 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:25,124 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:25,130 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:25,131 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:25,132 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:25,133 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:25,134 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:25,135 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:25,135 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:25,136 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:25,137 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:25,137 [main:63] - replacement of c of type Function0<Unit> is { contract({ require(true)})}
2021-03-11 11:00:25,238 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:25,238 [main:66] - Compilation checking started
2021-03-11 11:00:25,504 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ require(true)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:25,513 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:25,513 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:25,513 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:25,614 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:25,616 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:25,720 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:25,722 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:25,937 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:25,938 [main:95] - GENERATED = require(false)
2021-03-11 11:00:25,938 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:00:25,938 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:26,197 [main:55] - randomType = Pair<Function1<ShouldBeDisabled, ShouldBeEnabled>, ShouldBeDisabled>
2021-03-11 11:00:26,300 [main:302] - generating value of type = Pair<Function1<ShouldBeDisabled, ShouldBeEnabled>, ShouldBeDisabled> false depth = 0
2021-03-11 11:00:26,408 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Function1<ShouldBeDisabled, ShouldBeEnabled>, second: ShouldBeDisabled): Pair<Function1<ShouldBeDisabled, ShouldBeEnabled>, ShouldBeDisabled> = TODO()
2021-03-11 11:00:26,410 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Function1<ShouldBeDisabled, ShouldBeEnabled>, second: ShouldBeDisabled): Pair<Function1<ShouldBeDisabled, ShouldBeEnabled>, ShouldBeDisabled> = TODO()
2021-03-11 11:00:26,516 [main:302] - generating value of type = Function1<ShouldBeDisabled, ShouldBeEnabled> false depth = 3
2021-03-11 11:00:26,517 [main:302] - generating value of type = ShouldBeEnabled false depth = 4
2021-03-11 11:00:26,518 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:00:26,518 [main:302] - generating value of type = ShouldBeDisabled false depth = 3
2021-03-11 11:00:26,520 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:00:26,520 [main:95] - GENERATED = Pair<Function1<ShouldBeDisabled, ShouldBeEnabled>, ShouldBeDisabled>({a: ShouldBeDisabled -> ShouldBeEnabled()}, ShouldBeDisabled())
2021-03-11 11:00:26,541 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:26,554 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:26,555 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:26,556 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:26,557 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:26,558 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:26,564 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:26,565 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:26,566 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:26,567 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:26,568 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:26,569 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:26,570 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:26,571 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:26,571 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:00:26,733 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:26,733 [main:66] - Compilation checking started
2021-03-11 11:00:26,997 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:27,005 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:27,005 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:27,006 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:27,107 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:27,109 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:27,213 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:27,215 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:27,428 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:27,429 [main:95] - GENERATED = require(false)
2021-03-11 11:00:27,429 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:00:27,429 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:27,434 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:00:27,536 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:00:27,537 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:00:27,548 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:27,553 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:27,568 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:27,569 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:27,570 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:27,571 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:27,572 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:27,573 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:27,574 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:27,575 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:27,576 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:27,577 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:27,578 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:27,579 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:27,579 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:00:27,679 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:27,680 [main:66] - Compilation checking started
2021-03-11 11:00:27,948 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:27,956 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:27,956 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:27,957 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:28,061 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:28,062 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:28,167 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:28,170 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:28,384 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:28,386 [main:95] - GENERATED = check(false)
2021-03-11 11:00:28,386 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 11:00:28,386 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:28,502 [main:55] - randomType = Set<ShouldBeDisabled>
2021-03-11 11:00:28,504 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:28,514 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:28,515 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:28,517 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:28,521 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:28,522 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:28,524 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:28,525 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:28,526 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:28,527 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:28,528 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:28,529 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:28,530 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:28,530 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:28,531 [main:63] - replacement of c of type Function0<Unit> is { check(false)}
2021-03-11 11:00:28,630 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:28,630 [main:66] - Compilation checking started
2021-03-11 11:00:28,888 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:28,896 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:28,896 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:28,896 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:28,998 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:29,000 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:29,117 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:29,119 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:29,339 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:00:29,341 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:29,445 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:29,447 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:29,780 [main:302] - generating value of type = Int true depth = 8
2021-03-11 11:00:29,782 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 11:00:29,783 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:00:29,892 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:29,894 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:30,229 [main:302] - generating value of type = Boolean true depth = 12
2021-03-11 11:00:30,230 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-11 11:00:30,232 [main:302] - generating value of type = Any false depth = 13
2021-03-11 11:00:30,232 [main:95] - GENERATED = require(true, { "qkeoq"})
2021-03-11 11:00:30,232 [main:95] - GENERATED = repeat(-923939558, {a: Int -> require(true, { "qkeoq"})})
2021-03-11 11:00:30,232 [main:95] - GENERATED = contract({ repeat(-923939558, {a: Int -> require(true, { "qkeoq"})})})
2021-03-11 11:00:30,232 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ repeat(-923939558, {a: Int -> require(true, { "qkeoq"})})})}
2021-03-11 11:00:30,232 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:30,237 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:00:30,336 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:00:30,337 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:00:30,346 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:30,355 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:30,356 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:30,357 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:30,358 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:30,359 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:30,360 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:30,362 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:30,362 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:30,367 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:30,368 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:30,369 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:30,370 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:30,371 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:30,371 [main:63] - replacement of c of type Function0<Unit> is { contract({ repeat(-923939558, {a: Int -> require(true, { "qkeoq"})})})}
2021-03-11 11:00:30,472 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:30,472 [main:66] - Compilation checking started
2021-03-11 11:00:30,735 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ repeat(-923939558, {a: Int -> require(true, { "qkeoq"})})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:30,744 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:30,744 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:30,744 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:30,888 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:30,890 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:30,894 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:00:30,894 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:30,897 [main:55] - randomType = String
2021-03-11 11:00:31,000 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:00:31,028 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,036 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,037 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,038 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:31,045 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,046 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,047 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,048 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,048 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,049 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,050 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,051 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,052 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:31,053 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,053 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:00:31,155 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:31,156 [main:66] - Compilation checking started
2021-03-11 11:00:31,412 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:31,421 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:31,421 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:31,421 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:31,525 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:31,527 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:31,635 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:31,637 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:31,969 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:31,970 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:00:31,971 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:00:31,972 [main:95] - GENERATED = check(false, { "zfxva"})
2021-03-11 11:00:31,972 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "zfxva"})}
2021-03-11 11:00:31,972 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:31,977 [main:55] - randomType = Checker
2021-03-11 11:00:31,978 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,992 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,993 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:31,994 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:31,999 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:32,000 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:32,001 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:32,002 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:32,003 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:32,004 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:32,005 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:32,006 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:32,007 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:32,008 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:32,008 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "zfxva"})}
2021-03-11 11:00:32,115 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:32,115 [main:66] - Compilation checking started
2021-03-11 11:00:32,386 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "zfxva"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:32,395 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:32,395 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:32,395 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:32,499 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:32,500 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:32,506 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:00:32,506 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:32,660 [main:55] - randomType = LinkedHashMap<ShouldBeEnabled, Checker>
2021-03-11 11:00:32,764 [main:302] - generating value of type = LinkedHashMap<ShouldBeEnabled, Checker> false depth = 0
2021-03-11 11:00:32,869 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<ShouldBeEnabled, Checker>): LkedHashMap<ShouldBeEnabled, Checker> = TODO()
2021-03-11 11:00:32,872 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<ShouldBeEnabled, Checker>): LkedHashMap<ShouldBeEnabled, Checker> = TODO()
2021-03-11 11:00:32,976 [main:302] - generating value of type = Pair<ShouldBeEnabled, Checker> false depth = 3
2021-03-11 11:00:33,092 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ShouldBeEnabled, second: Checker): Pair<ShouldBeEnabled, Checker> = TODO()
2021-03-11 11:00:33,094 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ShouldBeEnabled, second: Checker): Pair<ShouldBeEnabled, Checker> = TODO()
2021-03-11 11:00:33,197 [main:302] - generating value of type = ShouldBeEnabled false depth = 6
2021-03-11 11:00:33,199 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:00:33,199 [main:302] - generating value of type = Checker false depth = 6
2021-03-11 11:00:33,200 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 11:00:33,415 [main:302] - generating value of type = ShouldBeEnabled false depth = 8
2021-03-11 11:00:33,416 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:00:33,417 [main:95] - GENERATED = Pair<ShouldBeEnabled, Checker>(ShouldBeEnabled(), ShouldBeEnabled())
2021-03-11 11:00:33,417 [main:95] - GENERATED = linkedMapOf<ShouldBeEnabled, Checker>(Pair<ShouldBeEnabled, Checker>(ShouldBeEnabled(), ShouldBeEnabled()))
2021-03-11 11:00:33,559 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:33,565 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:33,574 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:33,575 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:33,576 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:33,577 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:33,578 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:33,579 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:33,580 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:33,581 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:33,582 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:33,582 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:33,583 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:33,584 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:33,584 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:00:33,685 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:33,686 [main:66] - Compilation checking started
2021-03-11 11:00:33,945 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:33,953 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:33,953 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:33,953 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:34,058 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:34,059 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:34,168 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:34,170 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:34,390 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:00:34,390 [main:95] - GENERATED = println("wlpcl")
2021-03-11 11:00:34,390 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("wlpcl")}
2021-03-11 11:00:34,391 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:34,396 [main:55] - randomType = Checker
2021-03-11 11:00:34,397 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:34,409 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:34,411 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:34,412 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:34,417 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:34,418 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:34,419 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:34,420 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:34,421 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:34,422 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:34,423 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:34,424 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:34,425 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:34,426 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:34,426 [main:63] - replacement of c of type Function0<Unit> is { println("wlpcl")}
2021-03-11 11:00:34,531 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:34,531 [main:66] - Compilation checking started
2021-03-11 11:00:34,788 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("wlpcl")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:34,797 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:34,797 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:34,797 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:34,900 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:34,901 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:35,011 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:35,013 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:35,287 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:00:35,288 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:35,391 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:35,393 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:35,608 [main:302] - generating value of type = Any false depth = 8
2021-03-11 11:00:35,609 [main:95] - GENERATED = print("wqxcm")
2021-03-11 11:00:35,609 [main:95] - GENERATED = contract({ print("wqxcm")})
2021-03-11 11:00:35,609 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ print("wqxcm")})}
2021-03-11 11:00:35,609 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:35,735 [main:55] - randomType = ShouldBeDisabled?
2021-03-11 11:00:35,835 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:00:35,836 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:00:35,847 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:35,859 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:35,860 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:35,861 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:35,865 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:35,866 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:35,867 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:35,868 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:35,869 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:35,870 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:35,871 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:35,872 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:35,873 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:35,874 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:35,874 [main:63] - replacement of c of type Function0<Unit> is { contract({ print("wqxcm")})}
2021-03-11 11:00:35,976 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:35,976 [main:66] - Compilation checking started
2021-03-11 11:00:36,237 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ print("wqxcm")})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:36,248 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:36,248 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:36,248 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:36,349 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:36,350 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:36,459 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:36,461 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:36,680 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:36,681 [main:95] - GENERATED = check(true)
2021-03-11 11:00:36,682 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 11:00:36,682 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:37,147 [main:55] - randomType = Pair<UByte, HashSet<Byte>>
2021-03-11 11:00:37,257 [main:302] - generating value of type = Pair<UByte, HashSet<Byte>> false depth = 0
2021-03-11 11:00:37,368 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UByte, second: HashSet<Byte>): Pair<UByte, HashSet<Byte>> = TODO()
2021-03-11 11:00:37,370 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UByte, second: HashSet<Byte>): Pair<UByte, HashSet<Byte>> = TODO()
2021-03-11 11:00:37,480 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 11:00:37,482 [main:302] - generating value of type = HashSet<Byte> false depth = 3
2021-03-11 11:00:37,592 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Byte> = TODO()
2021-03-11 11:00:37,595 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Byte> = TODO()
2021-03-11 11:00:37,702 [main:95] - GENERATED = hashSetOf<Byte>()
2021-03-11 11:00:37,702 [main:95] - GENERATED = Pair<UByte, HashSet<Byte>>(54.toUByte(), hashSetOf<Byte>())
2021-03-11 11:00:37,723 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:37,735 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:37,736 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:37,737 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:37,738 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:37,739 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:37,740 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:37,745 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:37,746 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:37,747 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:37,748 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:37,749 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:37,750 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:37,751 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:37,751 [main:63] - replacement of c of type Function0<Unit> is { check(true)}
2021-03-11 11:00:37,849 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:37,850 [main:66] - Compilation checking started
2021-03-11 11:00:38,118 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:38,128 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:38,128 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:38,128 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:38,228 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:38,230 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:38,234 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:00:38,234 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:38,237 [main:55] - randomType = Float
2021-03-11 11:00:38,335 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:00:38,374 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:38,382 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:38,386 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:38,387 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:38,388 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:38,389 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:38,390 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:38,392 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:38,392 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:38,393 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:38,394 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:38,395 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:38,396 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:38,397 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:38,397 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:00:38,496 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:38,497 [main:66] - Compilation checking started
2021-03-11 11:00:38,760 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:38,769 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:38,769 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:38,769 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:38,868 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:38,869 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:38,974 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:38,976 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:39,368 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:39,369 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:00:39,370 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:00:39,371 [main:95] - GENERATED = check(true, { "jmpjn"})
2021-03-11 11:00:39,371 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "jmpjn"})}
2021-03-11 11:00:39,371 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:39,484 [main:55] - randomType = ShouldBeDisabled?
2021-03-11 11:00:39,583 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:00:39,584 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:00:39,592 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:39,604 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:39,605 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:39,606 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:39,608 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:39,613 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:39,614 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:39,615 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:39,616 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:39,617 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:39,618 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:39,619 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:39,620 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:39,621 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:39,621 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "jmpjn"})}
2021-03-11 11:00:39,719 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:39,720 [main:66] - Compilation checking started
2021-03-11 11:00:39,978 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "jmpjn"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:39,986 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:39,986 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:39,986 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:40,091 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:40,092 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:40,195 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:40,197 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:40,409 [main:95] - GENERATED = print(null)
2021-03-11 11:00:40,409 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print(null)}
2021-03-11 11:00:40,409 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:40,414 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:00:40,517 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:00:40,518 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:00:40,526 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:40,537 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:40,538 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:40,539 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:40,541 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:40,542 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:40,543 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:40,544 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:40,545 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:40,546 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:40,550 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:40,551 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:40,552 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:40,553 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:40,553 [main:63] - replacement of c of type Function0<Unit> is { print(null)}
2021-03-11 11:00:40,653 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:40,653 [main:66] - Compilation checking started
2021-03-11 11:00:40,920 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print(null)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:40,929 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:40,929 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:40,929 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:41,033 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:41,034 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:41,139 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:41,141 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:41,354 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:00:41,354 [main:95] - GENERATED = println("wmfxw")
2021-03-11 11:00:41,354 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("wmfxw")}
2021-03-11 11:00:41,354 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:41,470 [main:55] - randomType = Array<Checker>
2021-03-11 11:00:41,577 [main:302] - generating value of type = Array<Checker> false depth = 0
2021-03-11 11:00:41,685 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Checker> = TODO()
2021-03-11 11:00:41,687 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Checker> = TODO()
2021-03-11 11:00:41,793 [main:95] - GENERATED = emptyArray<Checker>()
2021-03-11 11:00:41,804 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:41,817 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:41,818 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:41,819 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:41,820 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:41,821 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:41,822 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:41,827 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:41,828 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:41,829 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:41,830 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:41,831 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:41,832 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:41,832 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:41,832 [main:63] - replacement of c of type Function0<Unit> is { println("wmfxw")}
2021-03-11 11:00:41,929 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:41,930 [main:66] - Compilation checking started
2021-03-11 11:00:42,195 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("wmfxw")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:42,205 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:42,205 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:42,205 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:42,305 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:42,307 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:42,409 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:42,411 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:42,625 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:00:42,625 [main:95] - GENERATED = println("mqftf")
2021-03-11 11:00:42,625 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("mqftf")}
2021-03-11 11:00:42,625 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:43,840 [main:55] - randomType = MutableMap<HashMap<Function2<ShouldBeDisabled, Map<HashSet<ShouldBeDisabled>, ULong?>, Boolean>, ShouldBeDisabled?>?, Boolean>?
2021-03-11 11:00:43,841 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:43,853 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:43,857 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:43,858 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:43,859 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:43,860 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:43,861 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:43,862 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:43,863 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:43,864 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:43,865 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:43,866 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:43,867 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:43,868 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:43,868 [main:63] - replacement of c of type Function0<Unit> is { println("mqftf")}
2021-03-11 11:00:43,973 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:43,974 [main:66] - Compilation checking started
2021-03-11 11:00:44,234 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("mqftf")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:44,243 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:44,243 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:44,243 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:44,346 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:44,348 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:44,451 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:44,453 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:44,782 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:00:44,784 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:00:44,786 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:44,898 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:44,900 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:45,222 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:00:45,224 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:00:45,225 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:00:45,225 [main:95] - GENERATED = check(false, { "kgiqw"})
2021-03-11 11:00:45,226 [main:95] - GENERATED = repeat(-2041650865, {a: Int -> check(false, { "kgiqw"})})
2021-03-11 11:00:45,226 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-2041650865, {a: Int -> check(false, { "kgiqw"})})}
2021-03-11 11:00:45,226 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:45,228 [main:55] - randomType = Int
2021-03-11 11:00:45,329 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:00:45,369 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:45,378 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:45,381 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:45,382 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:45,383 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:45,384 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:45,385 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:45,386 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:45,387 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:45,388 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:45,389 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:45,391 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:45,392 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:45,393 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:45,393 [main:63] - replacement of c of type Function0<Unit> is { repeat(-2041650865, {a: Int -> check(false, { "kgiqw"})})}
2021-03-11 11:00:45,494 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:45,494 [main:66] - Compilation checking started
2021-03-11 11:00:45,761 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-2041650865, {a: Int -> check(false, { "kgiqw"})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:45,769 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:45,769 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:45,769 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:45,872 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:45,874 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:45,981 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:45,983 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:46,207 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:00:46,209 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:46,214 [main:95] - GENERATED = contract({ println()})
2021-03-11 11:00:46,214 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println()})}
2021-03-11 11:00:46,214 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:46,337 [main:55] - randomType = ShouldBeDisabled?
2021-03-11 11:00:46,442 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:00:46,444 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:00:46,455 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:46,468 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:46,472 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:46,474 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:46,475 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:46,477 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:46,478 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:46,480 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:46,481 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:46,482 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:46,483 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:46,484 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:46,484 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:46,485 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:46,485 [main:63] - replacement of c of type Function0<Unit> is { contract({ println()})}
2021-03-11 11:00:46,586 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:46,586 [main:66] - Compilation checking started
2021-03-11 11:00:46,847 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ println()})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:46,855 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:46,855 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:46,855 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:46,954 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:46,956 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:47,077 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:47,079 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:47,309 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:00:47,311 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:47,427 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:47,429 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:47,666 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:00:47,668 [main:95] - GENERATED = require(true)
2021-03-11 11:00:47,668 [main:95] - GENERATED = contract({ require(true)})
2021-03-11 11:00:47,668 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(true)})}
2021-03-11 11:00:47,668 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:47,673 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:00:47,793 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:00:47,795 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:00:47,806 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:47,822 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:47,823 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:47,825 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:47,826 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:47,832 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:47,834 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:47,835 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:47,836 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:47,837 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:47,838 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:47,839 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:47,841 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:47,843 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:47,843 [main:63] - replacement of c of type Function0<Unit> is { contract({ require(true)})}
2021-03-11 11:00:47,962 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:47,963 [main:66] - Compilation checking started
2021-03-11 11:00:48,327 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ require(true)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:48,335 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:48,335 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:48,335 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:48,441 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:48,442 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:48,559 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:48,561 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:48,873 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:00:48,874 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:00:48,875 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:48,977 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:48,979 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:49,186 [main:302] - generating value of type = Any false depth = 8
2021-03-11 11:00:49,186 [main:95] - GENERATED = println("kpknt")
2021-03-11 11:00:49,186 [main:95] - GENERATED = repeat(988376277, {a: Int -> println("kpknt")})
2021-03-11 11:00:49,186 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(988376277, {a: Int -> println("kpknt")})}
2021-03-11 11:00:49,186 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:49,189 [main:55] - randomType = Boolean
2021-03-11 11:00:49,288 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:00:49,302 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:49,314 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:49,315 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:49,316 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:49,321 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:49,323 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:49,324 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:49,325 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:49,326 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:49,327 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:49,328 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:49,329 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:49,329 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:49,330 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:49,330 [main:63] - replacement of c of type Function0<Unit> is { repeat(988376277, {a: Int -> println("kpknt")})}
2021-03-11 11:00:49,427 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:49,427 [main:66] - Compilation checking started
2021-03-11 11:00:49,684 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(988376277, {a: Int -> println("kpknt")})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:49,692 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:49,692 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:49,692 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:49,791 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:49,793 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:49,892 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:49,894 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:50,101 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:50,102 [main:95] - GENERATED = require(false)
2021-03-11 11:00:50,102 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:00:50,102 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:50,324 [main:55] - randomType = Map<ShouldBeDisabled, UInt>
2021-03-11 11:00:50,325 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:50,338 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:50,343 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:50,344 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:50,345 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:50,346 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:50,347 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:50,348 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:50,349 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:50,350 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:50,350 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:50,351 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:50,352 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:50,353 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:50,353 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:00:50,449 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:50,450 [main:66] - Compilation checking started
2021-03-11 11:00:50,706 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:50,714 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:50,714 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:50,714 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:50,816 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:50,817 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:50,917 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:50,920 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:00:51,132 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:00:51,132 [main:95] - GENERATED = print("wghao")
2021-03-11 11:00:51,132 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("wghao")}
2021-03-11 11:00:51,132 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:51,137 [main:55] - randomType = Checker
2021-03-11 11:00:51,138 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:51,149 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:51,153 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:51,154 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:51,155 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:51,156 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:51,157 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:51,158 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:51,159 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:51,160 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:51,161 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:51,162 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:51,163 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:51,163 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:51,163 [main:63] - replacement of c of type Function0<Unit> is { print("wghao")}
2021-03-11 11:00:51,267 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:51,268 [main:66] - Compilation checking started
2021-03-11 11:00:51,518 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("wghao")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:51,526 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:51,526 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:51,526 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:51,623 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:51,625 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:51,733 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:51,735 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:52,122 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:52,123 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:00:52,124 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:00:52,125 [main:95] - GENERATED = check(true, { "wopax"})
2021-03-11 11:00:52,125 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "wopax"})}
2021-03-11 11:00:52,125 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:52,250 [main:55] - randomType = Checker?
2021-03-11 11:00:52,251 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:52,266 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:52,270 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:52,271 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:52,272 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:52,273 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:52,274 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:52,275 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:52,276 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:52,277 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:52,277 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:52,278 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:52,279 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:52,280 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:52,280 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "wopax"})}
2021-03-11 11:00:52,395 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:52,395 [main:66] - Compilation checking started
2021-03-11 11:00:52,815 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "wopax"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:52,825 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:52,825 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:52,825 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:52,948 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:52,949 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:53,080 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:53,083 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:53,464 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:53,466 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:00:53,467 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:00:53,467 [main:95] - GENERATED = check(false, { "bkztx"})
2021-03-11 11:00:53,467 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "bkztx"})}
2021-03-11 11:00:53,467 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:53,474 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:00:53,583 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:00:53,584 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:00:53,596 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:53,612 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:53,613 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:53,614 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:53,615 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:53,616 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:53,617 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:53,624 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:53,625 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:53,626 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:53,627 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:53,628 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:53,629 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:53,630 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:53,630 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "bkztx"})}
2021-03-11 11:00:53,743 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:53,743 [main:66] - Compilation checking started
2021-03-11 11:00:54,054 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "bkztx"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:54,064 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:54,065 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:54,065 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:54,178 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:54,179 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:54,309 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:54,311 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:00:54,552 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:00:54,554 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:00:54,669 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:54,672 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:54,897 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:00:54,899 [main:95] - GENERATED = check(false)
2021-03-11 11:00:54,899 [main:95] - GENERATED = contract({ check(false)})
2021-03-11 11:00:54,899 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(false)})}
2021-03-11 11:00:54,899 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:55,019 [main:55] - randomType = ArrayDeque<Boolean>
2021-03-11 11:00:55,133 [main:302] - generating value of type = ArrayDeque<Boolean> false depth = 0
2021-03-11 11:00:55,236 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Boolean> = TODO()
2021-03-11 11:00:55,239 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Boolean> = TODO()
2021-03-11 11:00:55,351 [main:95] - GENERATED = ArrayDeque<Boolean>()
2021-03-11 11:00:55,506 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:55,514 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:55,528 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:55,529 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:55,530 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:55,531 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:55,532 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:55,533 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:55,534 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:55,535 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:55,536 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:55,537 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:55,538 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:55,540 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:55,540 [main:63] - replacement of c of type Function0<Unit> is { contract({ check(false)})}
2021-03-11 11:00:55,640 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:55,640 [main:66] - Compilation checking started
2021-03-11 11:00:55,916 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ check(false)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:55,925 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:55,926 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:55,926 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:56,034 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:56,035 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:56,145 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:56,147 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:56,499 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:56,501 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:00:56,502 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:00:56,502 [main:95] - GENERATED = require(true, { "zmqnh"})
2021-03-11 11:00:56,502 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "zmqnh"})}
2021-03-11 11:00:56,502 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:56,619 [main:55] - randomType = UInt
2021-03-11 11:00:56,730 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:00:56,777 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:56,790 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:56,791 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:56,793 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:56,794 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:56,795 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:56,796 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:56,797 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:56,798 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:56,803 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:56,804 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:56,805 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:56,806 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:56,808 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:56,808 [main:63] - replacement of c of type Function0<Unit> is { require(true, { "zmqnh"})}
2021-03-11 11:00:56,909 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:56,909 [main:66] - Compilation checking started
2021-03-11 11:00:57,213 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true, { "zmqnh"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:57,221 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:57,221 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:57,221 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:57,333 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:57,335 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:57,444 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:57,446 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:00:57,680 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:57,682 [main:95] - GENERATED = require(true)
2021-03-11 11:00:57,682 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:00:57,682 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:58,125 [main:55] - randomType = HashSet<Checker?>?
2021-03-11 11:00:58,228 [main:302] - generating value of type = HashSet<Checker?> false depth = 0
2021-03-11 11:00:58,337 [main:43] - GENERATING CALL OF fun <E> HashSet(): HashSet<Checker?> = TODO()
2021-03-11 11:00:58,340 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(): HashSet<Checker?> = TODO()
2021-03-11 11:00:58,445 [main:95] - GENERATED = HashSet<Checker?>()
2021-03-11 11:00:58,600 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:58,611 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:58,612 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:58,616 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:58,617 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:58,618 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:58,619 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:58,620 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:58,621 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:58,622 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:58,623 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:58,624 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:58,625 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:58,626 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:58,626 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:00:58,728 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:00:58,729 [main:66] - Compilation checking started
2021-03-11 11:00:59,011 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:00:59,019 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:00:59,019 [main:38] - replacing c Function0<Unit>
2021-03-11 11:00:59,019 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:00:59,126 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:00:59,127 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:00:59,232 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:59,235 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:00:59,568 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:00:59,570 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:00:59,571 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:00:59,572 [main:95] - GENERATED = check(true, { "ypgfw"})
2021-03-11 11:00:59,572 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "ypgfw"})}
2021-03-11 11:00:59,572 [main:49] - GENERATED IS CALL =false
2021-03-11 11:00:59,687 [main:55] - randomType = UInt
2021-03-11 11:00:59,811 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:00:59,866 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:59,886 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:59,888 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:59,889 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:59,890 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:59,891 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:59,893 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:59,895 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:59,897 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:59,899 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:59,900 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:59,905 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:00:59,906 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:59,907 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:00:59,907 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "ypgfw"})}
2021-03-11 11:01:00,023 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:00,024 [main:66] - Compilation checking started
2021-03-11 11:01:00,338 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "ypgfw"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:00,346 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:00,347 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:00,347 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:00,463 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:00,465 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:00,594 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:00,597 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:00,864 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:01:00,864 [main:95] - GENERATED = println("szlmy")
2021-03-11 11:01:00,864 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("szlmy")}
2021-03-11 11:01:00,864 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:01,344 [main:55] - randomType = MutableMap<UByte, LinkedHashSet<ArrayDeque<Char?>>>
2021-03-11 11:01:01,346 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:01,361 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:01,362 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:01,363 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:01,369 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:01,370 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:01,371 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:01,372 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:01,374 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:01,375 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:01,376 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:01,378 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:01,379 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:01,380 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:01,380 [main:63] - replacement of c of type Function0<Unit> is { println("szlmy")}
2021-03-11 11:01:01,485 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:01,485 [main:66] - Compilation checking started
2021-03-11 11:01:01,784 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("szlmy")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:01,793 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:01,793 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:01,793 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:01,894 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:01,895 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:02,010 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:02,014 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:02,249 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:02,251 [main:95] - GENERATED = check(true)
2021-03-11 11:01:02,251 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 11:01:02,251 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:02,495 [main:55] - randomType = Function2<Checker, ShouldBeEnabled?, ShouldBeDisabled>
2021-03-11 11:01:02,496 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:02,507 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:02,508 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:02,509 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:02,515 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:02,516 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:02,517 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:02,518 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:02,519 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:02,520 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:02,521 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:02,522 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:02,523 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:02,524 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:02,524 [main:63] - replacement of c of type Function0<Unit> is { check(true)}
2021-03-11 11:01:02,627 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:02,627 [main:66] - Compilation checking started
2021-03-11 11:01:02,946 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:02,954 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:02,954 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:02,954 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:03,056 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:03,057 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:03,163 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:03,165 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:03,498 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:01:03,499 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:01:03,500 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:01:03,604 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:03,606 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:03,934 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:01:03,936 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:01:03,937 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:01:03,937 [main:95] - GENERATED = require(true, { "saihr"})
2021-03-11 11:01:03,937 [main:95] - GENERATED = repeat(705996134, {a: Int -> require(true, { "saihr"})})
2021-03-11 11:01:03,937 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(705996134, {a: Int -> require(true, { "saihr"})})}
2021-03-11 11:01:03,938 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:03,943 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:01:04,047 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:01:04,048 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:01:04,055 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:04,067 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:04,067 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:04,073 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:04,074 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:04,075 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:04,076 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:04,077 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:04,078 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:04,079 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:04,080 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:04,081 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:04,082 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:04,083 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:04,083 [main:63] - replacement of c of type Function0<Unit> is { repeat(705996134, {a: Int -> require(true, { "saihr"})})}
2021-03-11 11:01:04,193 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:04,194 [main:66] - Compilation checking started
2021-03-11 11:01:04,460 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(705996134, {a: Int -> require(true, { "saihr"})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:04,468 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:04,468 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:04,468 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:04,568 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:04,569 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:04,678 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:04,680 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:04,898 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:04,900 [main:95] - GENERATED = require(false)
2021-03-11 11:01:04,900 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:01:04,900 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:05,018 [main:55] - randomType = Set<Float>
2021-03-11 11:01:05,019 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:05,032 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:05,033 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:05,034 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:05,035 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:05,036 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:05,042 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:05,043 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:05,045 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:05,046 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:05,047 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:05,048 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:05,049 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:05,050 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:05,050 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:01:05,149 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:05,150 [main:66] - Compilation checking started
2021-03-11 11:01:05,421 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:05,429 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:05,430 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:05,430 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:05,530 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:05,531 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:05,641 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:05,643 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:05,859 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:01:05,859 [main:95] - GENERATED = print("hvrck")
2021-03-11 11:01:05,859 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("hvrck")}
2021-03-11 11:01:05,859 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:05,975 [main:55] - randomType = ArrayDeque<Checker>
2021-03-11 11:01:06,076 [main:302] - generating value of type = ArrayDeque<Checker> false depth = 0
2021-03-11 11:01:06,184 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Checker>): ArrayDeque<Checker> = TODO()
2021-03-11 11:01:06,187 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Checker>): ArrayDeque<Checker> = TODO()
2021-03-11 11:01:06,405 [main:302] - generating value of type = Collection<Checker> false depth = 3
2021-03-11 11:01:06,509 [main:43] - GENERATING CALL OF fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Checker>.()->kotlin.Unit): Collection<Checker> = TODO()
2021-03-11 11:01:06,512 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Checker>.()->kotlin.Unit): Collection<Checker> = TODO()
2021-03-11 11:01:06,844 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:01:06,846 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<Checker>, Unit> false depth = 6
2021-03-11 11:01:06,847 [main:302] - generating value of type = Unit false depth = 7
2021-03-11 11:01:06,954 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:06,957 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:07,170 [main:302] - generating value of type = Any false depth = 10
2021-03-11 11:01:07,170 [main:95] - GENERATED = print("fpxop")
2021-03-11 11:01:07,171 [main:95] - GENERATED = buildList<Checker>(620011305, { print("fpxop")})
2021-03-11 11:01:07,171 [main:95] - GENERATED = ArrayDeque<Checker>(buildList<Checker>(620011305, { print("fpxop")}))
2021-03-11 11:01:07,322 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:07,331 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:07,332 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:07,333 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:07,334 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:07,340 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:07,342 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:07,343 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:07,344 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:07,345 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:07,346 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:07,347 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:07,348 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:07,348 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:07,349 [main:63] - replacement of c of type Function0<Unit> is { print("hvrck")}
2021-03-11 11:01:07,501 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:07,502 [main:66] - Compilation checking started
2021-03-11 11:01:07,777 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("hvrck")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:07,785 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:07,785 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:07,785 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:07,886 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:07,887 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:07,991 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:07,993 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:08,209 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:01:08,209 [main:95] - GENERATED = println("irbhz")
2021-03-11 11:01:08,209 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("irbhz")}
2021-03-11 11:01:08,209 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:08,323 [main:55] - randomType = Float?
2021-03-11 11:01:08,428 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:01:08,481 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:08,492 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:08,492 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:08,493 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:08,494 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:08,495 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:08,496 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:08,502 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:08,503 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:08,504 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:08,505 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:08,506 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:08,507 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:08,508 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:08,508 [main:63] - replacement of c of type Function0<Unit> is { println("irbhz")}
2021-03-11 11:01:08,611 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:08,611 [main:66] - Compilation checking started
2021-03-11 11:01:08,888 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("irbhz")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:08,898 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:08,898 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:08,898 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:09,002 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:09,003 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:09,110 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:09,112 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:09,458 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:09,460 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:01:09,461 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:01:09,462 [main:95] - GENERATED = check(true, { "ubmtt"})
2021-03-11 11:01:09,462 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "ubmtt"})}
2021-03-11 11:01:09,462 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:09,467 [main:55] - randomType = Checker
2021-03-11 11:01:09,469 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:09,476 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:09,493 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:09,494 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:09,495 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:09,496 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:09,497 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:09,498 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:09,500 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:09,501 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:09,502 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:09,504 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:09,505 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:09,506 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:09,506 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "ubmtt"})}
2021-03-11 11:01:09,623 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:09,623 [main:66] - Compilation checking started
2021-03-11 11:01:09,882 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "ubmtt"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:09,890 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:09,890 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:09,890 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:09,996 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:09,997 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:10,119 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:10,121 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:10,332 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:01:10,332 [main:95] - GENERATED = print("ktzho")
2021-03-11 11:01:10,332 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("ktzho")}
2021-03-11 11:01:10,332 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:10,452 [main:55] - randomType = Map<ShouldBeEnabled, Checker>
2021-03-11 11:01:10,453 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:10,466 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:10,468 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:10,469 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:10,470 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:10,475 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:10,476 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:10,477 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:10,478 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:10,479 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:10,480 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:10,481 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:10,482 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:10,483 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:10,483 [main:63] - replacement of c of type Function0<Unit> is { print("ktzho")}
2021-03-11 11:01:10,586 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:10,587 [main:66] - Compilation checking started
2021-03-11 11:01:10,890 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("ktzho")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:10,898 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:10,898 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:10,898 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:10,995 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:10,997 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:11,098 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:11,100 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:11,421 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:01:11,422 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:01:11,423 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:01:11,522 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:11,524 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:11,760 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:01:11,762 [main:95] - GENERATED = check(true)
2021-03-11 11:01:11,762 [main:95] - GENERATED = repeat(-935420338, {a: Int -> check(true)})
2021-03-11 11:01:11,762 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-935420338, {a: Int -> check(true)})}
2021-03-11 11:01:11,762 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:11,765 [main:55] - randomType = Long
2021-03-11 11:01:11,866 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:01:11,901 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:11,910 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:11,911 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:11,912 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:11,912 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:11,913 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:11,914 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:11,915 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:11,920 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:11,920 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:11,921 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:11,922 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:11,923 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:11,924 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:11,924 [main:63] - replacement of c of type Function0<Unit> is { repeat(-935420338, {a: Int -> check(true)})}
2021-03-11 11:01:12,020 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:12,020 [main:66] - Compilation checking started
2021-03-11 11:01:12,320 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-935420338, {a: Int -> check(true)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:12,328 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:12,328 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:12,328 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:12,426 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:12,427 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:12,529 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:12,531 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:12,936 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:01:12,938 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:01:12,940 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:01:13,058 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:13,060 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:13,270 [main:302] - generating value of type = Any false depth = 8
2021-03-11 11:01:13,270 [main:95] - GENERATED = print("zxwqp")
2021-03-11 11:01:13,270 [main:95] - GENERATED = repeat(-848569068, {a: Int -> print("zxwqp")})
2021-03-11 11:01:13,271 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-848569068, {a: Int -> print("zxwqp")})}
2021-03-11 11:01:13,271 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:13,276 [main:55] - randomType = Checker
2021-03-11 11:01:13,277 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:13,287 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:13,288 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:13,288 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:13,289 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:13,290 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:13,291 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:13,297 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:13,298 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:13,299 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:13,300 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:13,301 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:13,302 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:13,303 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:13,303 [main:63] - replacement of c of type Function0<Unit> is { repeat(-848569068, {a: Int -> print("zxwqp")})}
2021-03-11 11:01:13,398 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:13,398 [main:66] - Compilation checking started
2021-03-11 11:01:13,652 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-848569068, {a: Int -> print("zxwqp")})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:13,660 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:13,660 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:13,660 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:13,757 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:13,759 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:13,859 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:13,861 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:14,227 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:01:14,229 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:01:14,230 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:01:14,332 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:14,334 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:14,538 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:01:14,540 [main:95] - GENERATED = check(false)
2021-03-11 11:01:14,540 [main:95] - GENERATED = repeat(-291083169, {a: Int -> check(false)})
2021-03-11 11:01:14,540 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-291083169, {a: Int -> check(false)})}
2021-03-11 11:01:14,540 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:14,645 [main:55] - randomType = UShort
2021-03-11 11:01:14,742 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:01:14,772 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:14,781 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:14,782 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:14,786 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:14,787 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:14,788 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:14,789 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:14,790 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:14,791 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:14,792 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:14,793 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:14,794 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:14,795 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:14,796 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:14,796 [main:63] - replacement of c of type Function0<Unit> is { repeat(-291083169, {a: Int -> check(false)})}
2021-03-11 11:01:14,890 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:14,891 [main:66] - Compilation checking started
2021-03-11 11:01:15,216 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-291083169, {a: Int -> check(false)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:15,224 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:15,224 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:15,224 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:15,334 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:15,336 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:15,436 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:15,438 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:15,641 [main:95] - GENERATED = print(null)
2021-03-11 11:01:15,642 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print(null)}
2021-03-11 11:01:15,642 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:15,746 [main:55] - randomType = UInt
2021-03-11 11:01:15,840 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:01:15,869 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:15,878 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:15,879 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:15,883 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:15,884 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:15,885 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:15,886 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:15,887 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:15,888 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:15,889 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:15,889 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:15,890 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:15,891 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:15,892 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:15,892 [main:63] - replacement of c of type Function0<Unit> is { print(null)}
2021-03-11 11:01:15,987 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:15,987 [main:66] - Compilation checking started
2021-03-11 11:01:16,321 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print(null)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:16,335 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:16,335 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:16,335 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:16,448 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:16,450 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:16,551 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:16,553 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:16,756 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:16,758 [main:95] - GENERATED = require(false)
2021-03-11 11:01:16,758 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:01:16,758 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:17,297 [main:55] - randomType = Sequence<Function1<Collection<Float?>, Int>>
2021-03-11 11:01:17,299 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:17,315 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:17,317 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:17,318 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:17,319 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:17,320 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:17,321 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:17,322 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:17,330 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:17,331 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:17,332 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:17,333 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:17,334 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:17,335 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:17,335 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:01:17,459 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:17,460 [main:66] - Compilation checking started
2021-03-11 11:01:17,753 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:17,761 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:17,761 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:17,762 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:17,867 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:17,868 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:17,970 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:17,972 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:18,221 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:18,224 [main:95] - GENERATED = require(false)
2021-03-11 11:01:18,224 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:01:18,224 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:18,227 [main:55] - randomType = Char
2021-03-11 11:01:18,339 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:01:18,364 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:18,378 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:18,384 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:18,385 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:18,387 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:18,388 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:18,390 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:18,391 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:18,393 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:18,394 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:18,396 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:18,397 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:18,398 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:18,399 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:18,399 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:01:18,495 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:18,495 [main:66] - Compilation checking started
2021-03-11 11:01:18,758 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:18,767 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:18,767 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:18,767 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:18,883 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:18,885 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:19,019 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:19,021 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:19,242 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:19,243 [main:95] - GENERATED = require(false)
2021-03-11 11:01:19,243 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:01:19,243 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:19,248 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:01:19,348 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:01:19,349 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:01:19,359 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:19,372 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:19,373 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:19,374 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:19,375 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:19,376 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:19,382 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:19,383 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:19,384 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:19,385 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:19,386 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:19,387 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:19,388 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:19,389 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:19,389 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:01:19,501 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:19,502 [main:66] - Compilation checking started
2021-03-11 11:01:19,814 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:19,822 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:19,822 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:19,822 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:19,928 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:19,930 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:19,934 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:01:19,934 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:20,047 [main:55] - randomType = ULong
2021-03-11 11:01:20,145 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:01:20,179 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:20,187 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:20,188 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:20,189 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:20,190 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:20,191 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:20,192 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:20,196 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:20,197 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:20,198 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:20,199 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:20,200 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:20,201 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:20,202 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:20,202 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:01:20,297 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:20,298 [main:66] - Compilation checking started
2021-03-11 11:01:20,561 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:20,570 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:20,570 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:20,570 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:20,666 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:20,667 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:20,768 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:20,770 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:20,975 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:20,976 [main:95] - GENERATED = require(true)
2021-03-11 11:01:20,976 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:01:20,976 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:21,195 [main:55] - randomType = Short?
2021-03-11 11:01:21,332 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:01:21,407 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:21,423 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:21,424 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:21,426 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:21,427 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:21,435 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:21,436 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:21,438 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:21,440 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:21,442 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:21,444 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:21,446 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:21,447 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:21,449 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:21,449 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:01:21,575 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:21,575 [main:66] - Compilation checking started
2021-03-11 11:01:21,912 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:21,920 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:21,920 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:21,920 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:22,037 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:22,038 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:22,043 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:01:22,043 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:22,603 [main:55] - randomType = Function2<ArrayDeque<Boolean?>?, Checker, ShouldBeDisabled>
2021-03-11 11:01:22,604 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:22,614 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:22,618 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:22,619 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:22,620 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:22,621 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:22,622 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:22,623 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:22,624 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:22,625 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:22,626 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:22,627 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:22,627 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:22,628 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:22,628 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:01:22,726 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:22,726 [main:66] - Compilation checking started
2021-03-11 11:01:22,976 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:22,984 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:22,984 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:22,984 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:23,081 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:23,082 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:23,182 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:23,184 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:23,418 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:01:23,418 [main:95] - GENERATED = print("onlrz")
2021-03-11 11:01:23,418 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("onlrz")}
2021-03-11 11:01:23,418 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:23,540 [main:55] - randomType = Checker?
2021-03-11 11:01:23,541 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:23,550 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:23,552 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:23,553 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:23,554 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:23,558 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:23,559 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:23,560 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:23,561 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:23,562 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:23,563 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:23,564 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:23,565 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:23,566 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:23,566 [main:63] - replacement of c of type Function0<Unit> is { print("onlrz")}
2021-03-11 11:01:23,661 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:23,662 [main:66] - Compilation checking started
2021-03-11 11:01:23,910 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("onlrz")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:23,918 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:23,919 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:23,919 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:24,018 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:24,019 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:24,125 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:24,128 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:24,336 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:24,338 [main:95] - GENERATED = check(false)
2021-03-11 11:01:24,338 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 11:01:24,338 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:24,343 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:01:24,441 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:01:24,442 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:01:24,452 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:24,464 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:24,469 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:24,470 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:24,471 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:24,472 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:24,473 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:24,474 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:24,475 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:24,476 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:24,477 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:24,478 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:24,479 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:24,480 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:24,480 [main:63] - replacement of c of type Function0<Unit> is { check(false)}
2021-03-11 11:01:24,575 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:24,575 [main:66] - Compilation checking started
2021-03-11 11:01:24,823 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:24,831 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:24,831 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:24,831 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:24,928 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:24,929 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:25,030 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:25,032 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:25,237 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:01:25,237 [main:95] - GENERATED = print("pbnbt")
2021-03-11 11:01:25,237 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("pbnbt")}
2021-03-11 11:01:25,237 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:25,347 [main:55] - randomType = ShouldBeDisabled?
2021-03-11 11:01:25,448 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:01:25,449 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:01:25,460 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:25,473 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:25,474 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:25,478 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:25,480 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:25,481 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:25,482 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:25,483 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:25,484 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:25,485 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:25,486 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:25,487 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:25,488 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:25,489 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:25,489 [main:63] - replacement of c of type Function0<Unit> is { print("pbnbt")}
2021-03-11 11:01:25,590 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:25,591 [main:66] - Compilation checking started
2021-03-11 11:01:25,855 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("pbnbt")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:25,863 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:25,864 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:25,864 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:25,962 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:25,963 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:26,068 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:26,070 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:26,280 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:26,282 [main:95] - GENERATED = check(false)
2021-03-11 11:01:26,282 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 11:01:26,282 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:26,285 [main:55] - randomType = String
2021-03-11 11:01:26,385 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:01:26,410 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:26,420 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:26,421 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:26,422 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:26,423 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:26,424 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:26,429 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:26,430 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:26,431 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:26,432 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:26,433 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:26,434 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:26,435 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:26,436 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:26,436 [main:63] - replacement of c of type Function0<Unit> is { check(false)}
2021-03-11 11:01:26,534 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:26,534 [main:66] - Compilation checking started
2021-03-11 11:01:26,783 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:26,791 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:26,791 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:26,791 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:26,889 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:26,890 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:26,992 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:26,994 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:27,207 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:27,208 [main:95] - GENERATED = require(true)
2021-03-11 11:01:27,208 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:01:27,208 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:27,213 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:01:27,355 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:01:27,357 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:01:27,367 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:27,379 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:27,381 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:27,382 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:27,383 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:27,384 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:27,385 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:27,386 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:27,392 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:27,393 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:27,394 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:27,395 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:27,396 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:27,397 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:27,397 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:01:27,494 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:27,495 [main:66] - Compilation checking started
2021-03-11 11:01:27,770 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:27,778 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:27,778 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:27,778 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:27,878 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:27,880 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:27,983 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:27,986 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:28,307 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:28,308 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:01:28,309 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:01:28,310 [main:95] - GENERATED = require(false, { "mnohm"})
2021-03-11 11:01:28,310 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "mnohm"})}
2021-03-11 11:01:28,310 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:28,532 [main:55] - randomType = Array<Array<Float>>
2021-03-11 11:01:28,629 [main:302] - generating value of type = Array<Array<Float>> false depth = 0
2021-03-11 11:01:28,733 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Array<Float>> = TODO()
2021-03-11 11:01:28,736 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Array<Float>> = TODO()
2021-03-11 11:01:28,968 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:01:28,970 [main:95] - GENERATED = arrayOfNulls<Array<Float>>(1010948987)
2021-03-11 11:01:28,991 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:28,997 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:29,012 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:29,013 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:29,014 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:29,015 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:29,016 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:29,017 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:29,018 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:29,019 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:29,020 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:29,021 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:29,022 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:29,023 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:29,023 [main:63] - replacement of c of type Function0<Unit> is { require(false, { "mnohm"})}
2021-03-11 11:01:29,119 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:29,119 [main:66] - Compilation checking started
2021-03-11 11:01:29,367 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false, { "mnohm"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:29,376 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:29,376 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:29,376 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:29,472 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:29,473 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:29,573 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:29,575 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:29,781 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:01:29,781 [main:95] - GENERATED = println("rmosg")
2021-03-11 11:01:29,781 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("rmosg")}
2021-03-11 11:01:29,781 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:29,991 [main:55] - randomType = Byte?
2021-03-11 11:01:30,090 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:01:30,127 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:30,136 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:30,137 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:30,138 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:30,139 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:30,140 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:30,141 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:30,142 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:30,143 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:30,143 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:30,144 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:30,149 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:30,150 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:30,151 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:30,151 [main:63] - replacement of c of type Function0<Unit> is { println("rmosg")}
2021-03-11 11:01:30,248 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:30,249 [main:66] - Compilation checking started
2021-03-11 11:01:30,502 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("rmosg")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:30,510 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:30,510 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:30,510 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:30,606 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:30,607 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:30,708 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:30,710 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:31,024 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:01:31,025 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:01:31,027 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:01:31,128 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:31,130 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:31,451 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:01:31,453 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:01:31,454 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:01:31,454 [main:95] - GENERATED = require(false, { "jfouv"})
2021-03-11 11:01:31,454 [main:95] - GENERATED = repeat(703438517, {a: Int -> require(false, { "jfouv"})})
2021-03-11 11:01:31,454 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(703438517, {a: Int -> require(false, { "jfouv"})})}
2021-03-11 11:01:31,454 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:31,678 [main:55] - randomType = ArrayDeque<HashMap<UByte, String>>
2021-03-11 11:01:31,785 [main:302] - generating value of type = ArrayDeque<HashMap<UByte, String>> false depth = 0
2021-03-11 11:01:31,902 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<HashMap<UByte, String>> = TODO()
2021-03-11 11:01:31,904 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<HashMap<UByte, String>> = TODO()
2021-03-11 11:01:32,246 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:01:32,248 [main:95] - GENERATED = ArrayDeque<HashMap<UByte, String>>(-506132684)
2021-03-11 11:01:32,470 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:32,479 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:32,480 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:32,481 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:32,482 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:32,482 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:32,483 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:32,484 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:32,489 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:32,490 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:32,491 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:32,492 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:32,493 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:32,494 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:32,494 [main:63] - replacement of c of type Function0<Unit> is { repeat(703438517, {a: Int -> require(false, { "jfouv"})})}
2021-03-11 11:01:32,589 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:32,589 [main:66] - Compilation checking started
2021-03-11 11:01:32,839 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(703438517, {a: Int -> require(false, { "jfouv"})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:32,848 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:32,848 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:32,848 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:32,962 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:32,964 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:32,968 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:01:32,969 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:33,100 [main:55] - randomType = Set<Checker>
2021-03-11 11:01:33,102 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:33,115 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:33,116 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:33,117 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:33,124 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:33,125 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:33,127 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:33,128 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:33,129 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:33,130 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:33,131 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:33,131 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:33,132 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:33,133 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:33,133 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:01:33,229 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:33,230 [main:66] - Compilation checking started
2021-03-11 11:01:33,518 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:33,527 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:33,527 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:33,527 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:33,650 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:33,652 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:33,764 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:33,766 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:34,117 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:01:34,118 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:01:34,120 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:01:34,223 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:34,225 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:34,578 [main:302] - generating value of type = Int true depth = 8
2021-03-11 11:01:34,580 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 11:01:34,581 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:01:34,704 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:34,707 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:34,929 [main:302] - generating value of type = Any false depth = 12
2021-03-11 11:01:34,929 [main:95] - GENERATED = println("rllhy")
2021-03-11 11:01:34,929 [main:95] - GENERATED = repeat(1165409365, {a: Int -> println("rllhy")})
2021-03-11 11:01:34,929 [main:95] - GENERATED = repeat(-753714250, {a: Int -> repeat(1165409365, {a: Int -> println("rllhy")})})
2021-03-11 11:01:34,929 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-753714250, {a: Int -> repeat(1165409365, {a: Int -> println("rllhy")})})}
2021-03-11 11:01:34,929 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:34,932 [main:55] - randomType = Char
2021-03-11 11:01:35,028 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:01:35,051 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:35,063 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:35,064 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:35,065 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:35,069 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:35,070 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:35,071 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:35,072 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:35,073 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:35,074 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:35,075 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:35,075 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:35,076 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:35,077 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:35,077 [main:63] - replacement of c of type Function0<Unit> is { repeat(-753714250, {a: Int -> repeat(1165409365, {a: Int -> println("rllhy")})})}
2021-03-11 11:01:35,174 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:35,175 [main:66] - Compilation checking started
2021-03-11 11:01:35,434 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-753714250, {a: Int -> repeat(1165409365, {a: Int -> println("rllhy")})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:35,442 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:35,443 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:35,443 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:35,540 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:35,541 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:35,644 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:35,646 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:35,869 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:01:35,870 [main:95] - GENERATED = print("uelqx")
2021-03-11 11:01:35,870 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("uelqx")}
2021-03-11 11:01:35,870 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:36,301 [main:55] - randomType = LinkedHashSet<ULong?>?
2021-03-11 11:01:36,406 [main:302] - generating value of type = LinkedHashSet<ULong?> false depth = 0
2021-03-11 11:01:36,507 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<ULong?> = TODO()
2021-03-11 11:01:36,509 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<ULong?> = TODO()
2021-03-11 11:01:36,610 [main:95] - GENERATED = linkedSetOf<ULong?>()
2021-03-11 11:01:36,748 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:36,758 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:36,759 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:36,764 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:36,765 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:36,765 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:36,766 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:36,767 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:36,768 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:36,769 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:36,770 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:36,771 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:36,772 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:36,773 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:36,773 [main:63] - replacement of c of type Function0<Unit> is { print("uelqx")}
2021-03-11 11:01:36,877 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:36,877 [main:66] - Compilation checking started
2021-03-11 11:01:37,211 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("uelqx")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:37,219 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:37,219 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:37,219 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:37,353 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:37,354 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:37,464 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:37,466 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:37,700 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:37,702 [main:95] - GENERATED = check(false)
2021-03-11 11:01:37,702 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 11:01:37,702 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:37,835 [main:55] - randomType = HashMap<Long, Long>
2021-03-11 11:01:37,949 [main:302] - generating value of type = HashMap<Long, Long> false depth = 0
2021-03-11 11:01:38,082 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Long, Long>): HashMap<Long, Long> = TODO()
2021-03-11 11:01:38,086 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Long, Long>): HashMap<Long, Long> = TODO()
2021-03-11 11:01:38,206 [main:302] - generating value of type = Pair<Long, Long> false depth = 3
2021-03-11 11:01:38,332 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long, second: Long): Pair<Long, Long> = TODO()
2021-03-11 11:01:38,334 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long, second: Long): Pair<Long, Long> = TODO()
2021-03-11 11:01:38,452 [main:302] - generating value of type = Long true depth = 6
2021-03-11 11:01:38,454 [main:302] - generating value of type = Long true depth = 6
2021-03-11 11:01:38,456 [main:95] - GENERATED = Pair<Long, Long>(1906468488191280121, 3167524987391344654)
2021-03-11 11:01:38,456 [main:95] - GENERATED = hashMapOf<Long, Long>(Pair<Long, Long>(1906468488191280121, 3167524987391344654))
2021-03-11 11:01:38,601 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:38,618 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:38,620 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:38,621 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:38,623 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:38,624 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:38,626 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:38,631 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:38,632 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:38,633 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:38,634 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:38,635 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:38,636 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:38,637 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:38,638 [main:63] - replacement of c of type Function0<Unit> is { check(false)}
2021-03-11 11:01:38,738 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:38,738 [main:66] - Compilation checking started
2021-03-11 11:01:38,989 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:38,998 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:38,998 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:38,998 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:39,095 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:39,097 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:39,221 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:39,223 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:39,433 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:01:39,435 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:01:39,536 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:39,538 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:39,747 [main:302] - generating value of type = Any false depth = 8
2021-03-11 11:01:39,748 [main:95] - GENERATED = print("zvcbz")
2021-03-11 11:01:39,748 [main:95] - GENERATED = contract({ print("zvcbz")})
2021-03-11 11:01:39,748 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ print("zvcbz")})}
2021-03-11 11:01:39,748 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:39,860 [main:55] - randomType = Set<ShouldBeDisabled>
2021-03-11 11:01:39,861 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:39,870 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:39,872 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:39,873 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:39,874 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:39,875 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:39,876 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:39,880 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:39,881 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:39,882 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:39,883 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:39,884 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:39,885 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:39,885 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:39,885 [main:63] - replacement of c of type Function0<Unit> is { contract({ print("zvcbz")})}
2021-03-11 11:01:39,985 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:39,985 [main:66] - Compilation checking started
2021-03-11 11:01:40,260 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ print("zvcbz")})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:40,268 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:40,269 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:40,269 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:40,377 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:40,379 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:40,514 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:40,518 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:40,756 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:01:40,756 [main:95] - GENERATED = println("myksp")
2021-03-11 11:01:40,756 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("myksp")}
2021-03-11 11:01:40,756 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:40,763 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:01:40,876 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:01:40,878 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:01:40,888 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:40,903 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:40,905 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:40,906 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:40,908 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:40,909 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:40,910 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:40,911 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:40,913 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:40,914 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:40,915 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:40,916 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:40,917 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:40,923 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:40,923 [main:63] - replacement of c of type Function0<Unit> is { println("myksp")}
2021-03-11 11:01:41,032 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:41,032 [main:66] - Compilation checking started
2021-03-11 11:01:41,307 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("myksp")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:41,318 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:41,318 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:41,318 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:41,428 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:41,429 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:41,558 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:41,562 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:41,824 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:01:41,824 [main:95] - GENERATED = print("eyggj")
2021-03-11 11:01:41,824 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("eyggj")}
2021-03-11 11:01:41,825 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:42,056 [main:55] - randomType = ULong?
2021-03-11 11:01:42,176 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:01:42,231 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:42,249 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:42,255 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:42,256 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:42,257 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:42,258 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:42,259 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:42,261 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:42,262 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:42,264 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:42,265 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:42,266 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:42,268 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:42,270 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:42,271 [main:63] - replacement of c of type Function0<Unit> is { print("eyggj")}
2021-03-11 11:01:42,399 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:42,400 [main:66] - Compilation checking started
2021-03-11 11:01:42,836 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("eyggj")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:42,851 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:42,852 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:42,852 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:43,000 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:43,002 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:43,144 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:43,148 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:43,415 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:01:43,417 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:01:43,581 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:43,583 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:43,868 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:01:43,870 [main:95] - GENERATED = require(true)
2021-03-11 11:01:43,870 [main:95] - GENERATED = contract({ require(true)})
2021-03-11 11:01:43,870 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(true)})}
2021-03-11 11:01:43,870 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:43,874 [main:55] - randomType = String
2021-03-11 11:01:44,018 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:01:44,056 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:44,071 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:44,077 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:44,079 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:44,080 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:44,081 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:44,082 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:44,083 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:44,084 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:44,085 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:44,086 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:44,087 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:44,088 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:44,089 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:44,089 [main:63] - replacement of c of type Function0<Unit> is { contract({ require(true)})}
2021-03-11 11:01:44,202 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:44,202 [main:66] - Compilation checking started
2021-03-11 11:01:44,456 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ require(true)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:44,464 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:44,464 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:44,464 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:44,564 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:44,565 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:44,686 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:44,688 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:44,894 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:01:44,896 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:01:45,000 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:45,002 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:45,228 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 11:01:45,229 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:01:45,346 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:45,348 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:45,666 [main:302] - generating value of type = Int true depth = 12
2021-03-11 11:01:45,668 [main:302] - generating value of type = Function1<Int, Unit> false depth = 12
2021-03-11 11:01:45,669 [main:302] - generating value of type = Unit false depth = 13
2021-03-11 11:01:45,772 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:45,774 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:45,981 [main:302] - generating value of type = Any false depth = 16
2021-03-11 11:01:45,981 [main:385] - Cant generate call of fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:45,981 [main:95] - GENERATED = repeat(1084088932, {a: Int -> })
2021-03-11 11:01:45,982 [main:95] - GENERATED = contract({ repeat(1084088932, {a: Int -> })})
2021-03-11 11:01:45,982 [main:95] - GENERATED = contract({ contract({ repeat(1084088932, {a: Int -> })})})
2021-03-11 11:01:45,982 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ contract({ repeat(1084088932, {a: Int -> })})})}
2021-03-11 11:01:45,982 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:46,089 [main:55] - randomType = Short
2021-03-11 11:01:46,184 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:01:46,216 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:46,226 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:46,227 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:46,228 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:46,229 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:46,230 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:46,231 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:46,232 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:46,233 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:46,234 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:46,239 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:46,240 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:46,241 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:46,242 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:46,242 [main:63] - replacement of c of type Function0<Unit> is { contract({ contract({ repeat(1084088932, {a: Int -> })})})}
2021-03-11 11:01:46,338 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:46,338 [main:66] - Compilation checking started
2021-03-11 11:01:46,591 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ contract({ repeat(1084088932, {a: Int -> })})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:46,599 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:46,599 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:46,599 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:46,699 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:46,700 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:46,804 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:46,806 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:47,013 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:01:47,013 [main:95] - GENERATED = print("xvugf")
2021-03-11 11:01:47,013 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("xvugf")}
2021-03-11 11:01:47,013 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:47,016 [main:55] - randomType = Boolean
2021-03-11 11:01:47,113 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:01:47,127 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:47,139 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:47,140 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:47,141 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:47,142 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:47,147 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:47,148 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:47,149 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:47,150 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:47,151 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:47,152 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:47,153 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:47,154 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:47,155 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:47,155 [main:63] - replacement of c of type Function0<Unit> is { print("xvugf")}
2021-03-11 11:01:47,254 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:47,254 [main:66] - Compilation checking started
2021-03-11 11:01:47,505 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("xvugf")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:47,513 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:47,514 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:47,514 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:47,609 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:47,610 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:47,723 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:47,725 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:47,929 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:01:47,929 [main:95] - GENERATED = print("qhobw")
2021-03-11 11:01:47,929 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("qhobw")}
2021-03-11 11:01:47,930 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:48,209 [main:55] - randomType = ArrayDeque<Float>
2021-03-11 11:01:48,306 [main:302] - generating value of type = ArrayDeque<Float> false depth = 0
2021-03-11 11:01:48,407 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Float> = TODO()
2021-03-11 11:01:48,409 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Float> = TODO()
2021-03-11 11:01:48,509 [main:95] - GENERATED = ArrayDeque<Float>()
2021-03-11 11:01:48,632 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:48,641 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:48,642 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:48,643 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:48,647 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:48,648 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:48,649 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:48,650 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:48,651 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:48,652 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:48,653 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:48,653 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:48,654 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:48,655 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:48,655 [main:63] - replacement of c of type Function0<Unit> is { print("qhobw")}
2021-03-11 11:01:48,750 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:48,750 [main:66] - Compilation checking started
2021-03-11 11:01:49,003 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("qhobw")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:49,011 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:49,011 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:49,011 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:49,108 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:49,110 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:49,210 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:49,212 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:49,418 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:49,420 [main:95] - GENERATED = require(false)
2021-03-11 11:01:49,420 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:01:49,420 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:49,529 [main:55] - randomType = List<String>
2021-03-11 11:01:49,530 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:49,541 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:49,542 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:49,543 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:49,544 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:49,545 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:49,549 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:49,550 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:49,551 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:49,552 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:49,553 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:49,554 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:49,555 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:49,556 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:49,556 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:01:49,653 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:49,653 [main:66] - Compilation checking started
2021-03-11 11:01:49,908 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:49,916 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:49,916 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:49,916 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:50,012 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:50,014 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:50,112 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:50,114 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:50,427 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:50,428 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:01:50,430 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:01:50,430 [main:95] - GENERATED = check(false, { "ujtzr"})
2021-03-11 11:01:50,430 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "ujtzr"})}
2021-03-11 11:01:50,430 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:50,539 [main:55] - randomType = Checker?
2021-03-11 11:01:50,541 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:50,552 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:50,553 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:50,554 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:50,555 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:50,556 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:50,557 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:50,561 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:50,562 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:50,563 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:50,564 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:50,565 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:50,566 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:50,567 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:50,567 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "ujtzr"})}
2021-03-11 11:01:50,661 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:50,662 [main:66] - Compilation checking started
2021-03-11 11:01:50,944 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "ujtzr"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:50,952 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:50,952 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:50,953 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:51,063 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:51,064 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:51,188 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:51,191 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:01:51,400 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:01:51,400 [main:95] - GENERATED = print("yknbf")
2021-03-11 11:01:51,400 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("yknbf")}
2021-03-11 11:01:51,401 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:51,510 [main:55] - randomType = Set<Float>
2021-03-11 11:01:51,511 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:51,516 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:51,526 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:51,527 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:51,528 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:51,529 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:51,530 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:51,531 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:51,532 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:51,533 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:51,534 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:51,535 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:51,535 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:51,536 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:51,536 [main:63] - replacement of c of type Function0<Unit> is { print("yknbf")}
2021-03-11 11:01:51,634 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:51,634 [main:66] - Compilation checking started
2021-03-11 11:01:51,892 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("yknbf")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:51,901 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:51,901 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:51,901 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:52,025 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:52,027 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:52,172 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:52,174 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:52,392 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:01:52,394 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:01:52,493 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:52,495 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:01:52,820 [main:302] - generating value of type = Int true depth = 8
2021-03-11 11:01:52,822 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 11:01:52,823 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:01:52,924 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:52,926 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:53,199 [main:302] - generating value of type = Boolean true depth = 12
2021-03-11 11:01:53,200 [main:95] - GENERATED = require(false)
2021-03-11 11:01:53,200 [main:95] - GENERATED = repeat(-671919612, {a: Int -> require(false)})
2021-03-11 11:01:53,200 [main:95] - GENERATED = contract({ repeat(-671919612, {a: Int -> require(false)})})
2021-03-11 11:01:53,200 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ repeat(-671919612, {a: Int -> require(false)})})}
2021-03-11 11:01:53,200 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:53,206 [main:55] - randomType = Checker
2021-03-11 11:01:53,207 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:53,216 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:53,217 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:53,218 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:53,219 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:53,223 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:53,224 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:53,225 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:53,226 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:53,227 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:53,228 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:53,229 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:53,230 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:53,231 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:53,231 [main:63] - replacement of c of type Function0<Unit> is { contract({ repeat(-671919612, {a: Int -> require(false)})})}
2021-03-11 11:01:53,326 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:53,326 [main:66] - Compilation checking started
2021-03-11 11:01:53,637 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ repeat(-671919612, {a: Int -> require(false)})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:53,648 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:53,648 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:53,648 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:53,758 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:53,760 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:53,871 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:53,874 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:54,192 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:54,193 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:01:54,194 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:01:54,195 [main:95] - GENERATED = check(true, { "hgsjd"})
2021-03-11 11:01:54,195 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "hgsjd"})}
2021-03-11 11:01:54,195 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:54,418 [main:55] - randomType = Sequence<Float>
2021-03-11 11:01:54,419 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:54,429 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:54,430 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:54,431 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:54,432 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:54,432 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:54,433 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:54,434 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:54,439 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:54,440 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:54,441 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:54,441 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:54,442 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:54,443 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:54,443 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "hgsjd"})}
2021-03-11 11:01:54,537 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:54,538 [main:66] - Compilation checking started
2021-03-11 11:01:54,844 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "hgsjd"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:54,854 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:54,854 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:54,854 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:54,969 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:54,971 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:55,083 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:55,086 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:55,304 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:55,306 [main:95] - GENERATED = require(true)
2021-03-11 11:01:55,306 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:01:55,306 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:55,311 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:01:55,417 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:01:55,418 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:01:55,430 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:55,443 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:55,444 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:55,445 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:55,446 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:55,450 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:55,451 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:55,452 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:55,453 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:55,455 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:55,457 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:55,459 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:55,460 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:55,461 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:55,461 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:01:55,560 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:55,560 [main:66] - Compilation checking started
2021-03-11 11:01:55,841 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:55,850 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:55,850 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:55,850 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:55,951 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:55,952 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:55,957 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:01:55,957 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:56,302 [main:55] - randomType = Function2<ShouldBeDisabled, Sequence<Int>, ShouldBeEnabled?>
2021-03-11 11:01:56,304 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:56,316 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:56,320 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:56,322 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:56,323 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:56,324 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:56,325 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:56,326 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:56,327 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:56,328 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:56,329 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:56,330 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:56,331 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:56,332 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:56,332 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:01:56,432 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:56,433 [main:66] - Compilation checking started
2021-03-11 11:01:56,692 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:56,700 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:56,700 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:56,700 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:56,801 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:56,803 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:56,907 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:56,910 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:57,232 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:57,233 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:01:57,235 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:01:57,235 [main:95] - GENERATED = check(false, { "hmsxh"})
2021-03-11 11:01:57,235 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "hmsxh"})}
2021-03-11 11:01:57,235 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:57,348 [main:55] - randomType = Double?
2021-03-11 11:01:57,451 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:01:57,512 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:57,527 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:57,529 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:57,530 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:57,531 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:57,532 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:57,538 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:57,540 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:57,541 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:57,543 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:57,544 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:57,545 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:57,546 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:57,547 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:57,547 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "hmsxh"})}
2021-03-11 11:01:57,647 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:57,648 [main:66] - Compilation checking started
2021-03-11 11:01:57,918 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "hmsxh"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:57,926 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:57,926 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:57,926 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:58,028 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:58,029 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:58,034 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:01:58,034 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:58,150 [main:55] - randomType = List<ShouldBeEnabled>
2021-03-11 11:01:58,151 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:58,160 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:58,161 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:58,162 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:58,167 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:58,168 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:58,170 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:58,171 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:58,172 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:58,173 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:58,174 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:58,175 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:58,176 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:58,177 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:58,177 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:01:58,276 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:58,277 [main:66] - Compilation checking started
2021-03-11 11:01:58,595 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:58,603 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:58,604 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:58,604 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:58,703 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:58,705 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:58,810 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:58,813 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:01:59,136 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:59,138 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:01:59,139 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:01:59,139 [main:95] - GENERATED = check(false, { "fuwcn"})
2021-03-11 11:01:59,139 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "fuwcn"})}
2021-03-11 11:01:59,139 [main:49] - GENERATED IS CALL =false
2021-03-11 11:01:59,144 [main:55] - randomType = Checker
2021-03-11 11:01:59,145 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:59,155 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:59,156 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:59,157 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:59,159 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:59,159 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:59,160 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:59,161 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:59,162 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:59,167 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:59,167 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:59,168 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:59,169 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:01:59,170 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:01:59,170 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "fuwcn"})}
2021-03-11 11:01:59,271 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:01:59,272 [main:66] - Compilation checking started
2021-03-11 11:01:59,548 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "fuwcn"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:01:59,556 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:01:59,557 [main:38] - replacing c Function0<Unit>
2021-03-11 11:01:59,557 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:01:59,657 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:01:59,659 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:01:59,764 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:59,766 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:01:59,979 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:01:59,981 [main:95] - GENERATED = require(false)
2021-03-11 11:01:59,981 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:01:59,981 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:00,321 [main:55] - randomType = MutableMap<Boolean?, Checker?>
2021-03-11 11:02:00,323 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:00,332 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:00,333 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:00,339 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:00,340 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:00,341 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:00,342 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:00,343 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:00,344 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:00,345 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:00,346 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:00,347 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:00,348 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:00,349 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:00,349 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:02:00,447 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:00,447 [main:66] - Compilation checking started
2021-03-11 11:02:00,718 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:00,726 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:00,727 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:00,727 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:00,828 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:00,830 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:00,934 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:00,937 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:01,268 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:02:01,270 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:02:01,272 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:02:01,277 [main:95] - GENERATED = repeat(-640492015, {a: Int -> println()})
2021-03-11 11:02:01,277 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-640492015, {a: Int -> println()})}
2021-03-11 11:02:01,277 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:01,742 [main:55] - randomType = Pair<LinkedHashMap<Boolean, UShort>, Checker>
2021-03-11 11:02:01,847 [main:302] - generating value of type = Pair<LinkedHashMap<Boolean, UShort>, Checker> false depth = 0
2021-03-11 11:02:01,956 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: LinkedHashMap<Boolean, UShort>, second: Checker): Pair<LinkedHashMap<Boolean, UShort>, Checker> = TODO()
2021-03-11 11:02:01,958 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: LinkedHashMap<Boolean, UShort>, second: Checker): Pair<LinkedHashMap<Boolean, UShort>, Checker> = TODO()
2021-03-11 11:02:02,065 [main:302] - generating value of type = LinkedHashMap<Boolean, UShort> false depth = 3
2021-03-11 11:02:02,173 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Boolean, UShort> = TODO()
2021-03-11 11:02:02,175 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Boolean, UShort> = TODO()
2021-03-11 11:02:02,500 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:02:02,502 [main:302] - generating value of type = Float true depth = 6
2021-03-11 11:02:02,504 [main:95] - GENERATED = LinkedHashMap<Boolean, UShort>(201324382, 0.6008605f)
2021-03-11 11:02:02,504 [main:302] - generating value of type = Checker false depth = 3
2021-03-11 11:02:02,505 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 11:02:02,716 [main:302] - generating value of type = ShouldBeDisabled false depth = 5
2021-03-11 11:02:02,717 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:02:02,718 [main:95] - GENERATED = Pair<LinkedHashMap<Boolean, UShort>, Checker>(LinkedHashMap<Boolean, UShort>(201324382, 0.6008605f), ShouldBeDisabled())
2021-03-11 11:02:02,743 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:02,756 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:02,757 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:02,758 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:02,759 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:02,765 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:02,766 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:02,767 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:02,768 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:02,769 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:02,771 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:02,772 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:02,773 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:02,774 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:02,774 [main:63] - replacement of c of type Function0<Unit> is { repeat(-640492015, {a: Int -> println()})}
2021-03-11 11:02:02,874 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:02,875 [main:66] - Compilation checking started
2021-03-11 11:02:03,137 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-640492015, {a: Int -> println()})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:03,146 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:03,146 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:03,146 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:03,248 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:03,249 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:03,359 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:03,361 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:03,580 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:02:03,580 [main:95] - GENERATED = print("kcugp")
2021-03-11 11:02:03,580 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("kcugp")}
2021-03-11 11:02:03,580 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:03,585 [main:55] - randomType = Checker
2021-03-11 11:02:03,587 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:03,602 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:03,603 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:03,604 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:03,605 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:03,606 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:03,607 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:03,608 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:03,613 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:03,614 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:03,615 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:03,616 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:03,617 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:03,618 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:03,618 [main:63] - replacement of c of type Function0<Unit> is { print("kcugp")}
2021-03-11 11:02:03,716 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:03,717 [main:66] - Compilation checking started
2021-03-11 11:02:04,034 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("kcugp")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:04,043 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:04,043 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:04,043 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:04,143 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:04,145 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:04,249 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:04,251 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:04,466 [main:95] - GENERATED = println(null)
2021-03-11 11:02:04,466 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println(null)}
2021-03-11 11:02:04,466 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:04,914 [main:55] - randomType = Map<UByte?, Byte?>
2021-03-11 11:02:04,915 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:04,926 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:04,931 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:04,932 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:04,933 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:04,934 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:04,935 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:04,936 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:04,937 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:04,938 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:04,939 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:04,940 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:04,941 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:04,942 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:04,942 [main:63] - replacement of c of type Function0<Unit> is { println(null)}
2021-03-11 11:02:05,042 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:05,042 [main:66] - Compilation checking started
2021-03-11 11:02:05,305 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println(null)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:05,314 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:05,314 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:05,314 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:05,416 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:05,417 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:05,525 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:05,527 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:05,739 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:02:05,740 [main:95] - GENERATED = print("fwwnk")
2021-03-11 11:02:05,740 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("fwwnk")}
2021-03-11 11:02:05,740 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:05,743 [main:55] - randomType = UByte
2021-03-11 11:02:05,841 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:02:05,875 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:05,886 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:05,887 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:05,888 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:05,889 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:05,890 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:05,891 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:05,892 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:05,893 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:05,894 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:05,895 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:05,900 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:05,901 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:05,902 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:05,902 [main:63] - replacement of c of type Function0<Unit> is { print("fwwnk")}
2021-03-11 11:02:06,004 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:06,004 [main:66] - Compilation checking started
2021-03-11 11:02:06,290 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("fwwnk")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:06,298 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:06,298 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:06,298 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:06,401 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:06,403 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:06,514 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:06,516 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:06,872 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:06,874 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:02:06,875 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:02:06,876 [main:95] - GENERATED = check(true, { "fadsp"})
2021-03-11 11:02:06,876 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "fadsp"})}
2021-03-11 11:02:06,876 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:06,881 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:02:06,981 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:02:06,982 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:02:06,993 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,008 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:07,013 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,014 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,015 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,016 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,017 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,018 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,020 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,021 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,022 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,023 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,024 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,025 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:07,025 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "fadsp"})}
2021-03-11 11:02:07,125 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:07,125 [main:66] - Compilation checking started
2021-03-11 11:02:07,389 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "fadsp"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:07,397 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:07,398 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:07,398 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:07,500 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:07,501 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:07,609 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:07,611 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:07,830 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:07,832 [main:95] - GENERATED = check(true)
2021-03-11 11:02:07,832 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 11:02:07,832 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:07,834 [main:55] - randomType = Long
2021-03-11 11:02:07,936 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:02:07,976 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,984 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,985 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,987 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,988 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,990 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,992 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:07,998 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:07,999 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:08,000 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:08,001 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:08,002 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:08,003 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:08,004 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:08,004 [main:63] - replacement of c of type Function0<Unit> is { check(true)}
2021-03-11 11:02:08,109 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:08,110 [main:66] - Compilation checking started
2021-03-11 11:02:08,371 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:08,380 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:08,380 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:08,380 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:08,481 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:08,482 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:08,585 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:08,588 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:08,906 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:08,907 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:02:08,909 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:02:08,909 [main:95] - GENERATED = require(false, { "otlji"})
2021-03-11 11:02:08,909 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "otlji"})}
2021-03-11 11:02:08,909 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:08,915 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:02:09,013 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:02:09,015 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:02:09,023 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:09,034 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:09,035 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:09,036 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:09,037 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:09,042 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:09,043 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:09,044 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:09,045 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:09,046 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:09,047 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:09,048 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:09,049 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:09,049 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:09,050 [main:63] - replacement of c of type Function0<Unit> is { require(false, { "otlji"})}
2021-03-11 11:02:09,165 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:09,165 [main:66] - Compilation checking started
2021-03-11 11:02:09,470 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false, { "otlji"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:09,478 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:09,478 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:09,478 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:09,578 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:09,579 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:09,688 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:09,691 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:10,011 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:10,013 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:02:10,014 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:02:10,014 [main:95] - GENERATED = check(false, { "wtgmn"})
2021-03-11 11:02:10,014 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "wtgmn"})}
2021-03-11 11:02:10,014 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:10,019 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:02:10,121 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:02:10,122 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:02:10,129 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:10,138 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:10,139 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:10,140 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:10,141 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:10,142 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:10,146 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:10,147 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:10,148 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:10,149 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:10,150 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:10,151 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:10,152 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:10,153 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:10,153 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "wtgmn"})}
2021-03-11 11:02:10,250 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:10,250 [main:66] - Compilation checking started
2021-03-11 11:02:10,507 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "wtgmn"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:10,515 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:10,516 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:10,516 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:10,614 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:10,616 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:10,716 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:10,718 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:10,928 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:02:10,929 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:02:11,030 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:11,032 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:11,241 [main:302] - generating value of type = Any false depth = 8
2021-03-11 11:02:11,241 [main:95] - GENERATED = println("rskux")
2021-03-11 11:02:11,241 [main:95] - GENERATED = contract({ println("rskux")})
2021-03-11 11:02:11,241 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println("rskux")})}
2021-03-11 11:02:11,241 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:11,246 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:02:11,344 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:02:11,346 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:02:11,357 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:11,368 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:11,369 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:11,370 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:11,371 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:11,372 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:11,372 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:11,377 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:11,378 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:11,379 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:11,380 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:11,381 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:11,381 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:11,382 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:11,382 [main:63] - replacement of c of type Function0<Unit> is { contract({ println("rskux")})}
2021-03-11 11:02:11,477 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:11,477 [main:66] - Compilation checking started
2021-03-11 11:02:11,726 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ println("rskux")})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:11,734 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:11,734 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:11,734 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:11,832 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:11,834 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:11,935 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:11,937 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:12,165 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:02:12,166 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:02:12,266 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:12,268 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:12,477 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 11:02:12,478 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:02:12,578 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:12,580 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:12,787 [main:302] - generating value of type = Boolean true depth = 12
2021-03-11 11:02:12,788 [main:95] - GENERATED = require(false)
2021-03-11 11:02:12,788 [main:95] - GENERATED = contract({ require(false)})
2021-03-11 11:02:12,788 [main:95] - GENERATED = contract({ contract({ require(false)})})
2021-03-11 11:02:12,788 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ contract({ require(false)})})}
2021-03-11 11:02:12,788 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:12,897 [main:55] - randomType = ULong
2021-03-11 11:02:12,992 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:02:13,021 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:13,031 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:13,034 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:13,035 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:13,036 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:13,037 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:13,038 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:13,039 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:13,040 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:13,041 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:13,041 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:13,042 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:13,043 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:13,044 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:13,044 [main:63] - replacement of c of type Function0<Unit> is { contract({ contract({ require(false)})})}
2021-03-11 11:02:13,143 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:13,143 [main:66] - Compilation checking started
2021-03-11 11:02:13,407 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ contract({ require(false)})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:13,415 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:13,415 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:13,415 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:13,512 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:13,513 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:13,618 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:13,620 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:13,824 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:13,825 [main:95] - GENERATED = check(true)
2021-03-11 11:02:13,825 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 11:02:13,826 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:13,938 [main:55] - randomType = Char?
2021-03-11 11:02:14,034 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:02:14,062 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:14,070 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:14,071 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:14,076 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:14,076 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:14,077 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:14,078 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:14,079 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:14,080 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:14,081 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:14,082 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:14,083 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:14,084 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:14,085 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:14,085 [main:63] - replacement of c of type Function0<Unit> is { check(true)}
2021-03-11 11:02:14,185 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:14,185 [main:66] - Compilation checking started
2021-03-11 11:02:14,433 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:14,441 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:14,441 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:14,441 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:14,588 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:14,589 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:14,693 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:14,695 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:14,904 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:02:14,904 [main:95] - GENERATED = print("ceilv")
2021-03-11 11:02:14,904 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("ceilv")}
2021-03-11 11:02:14,904 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:15,127 [main:55] - randomType = MutableMap<Short, Checker>
2021-03-11 11:02:15,128 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:15,137 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:15,138 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:15,139 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:15,140 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:15,141 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:15,145 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:15,146 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:15,147 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:15,148 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:15,149 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:15,150 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:15,151 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:15,152 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:15,152 [main:63] - replacement of c of type Function0<Unit> is { print("ceilv")}
2021-03-11 11:02:15,246 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:15,246 [main:66] - Compilation checking started
2021-03-11 11:02:15,502 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("ceilv")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:15,510 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:15,510 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:15,510 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:15,609 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:15,610 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:15,711 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:15,713 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:15,922 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:15,924 [main:95] - GENERATED = require(true)
2021-03-11 11:02:15,925 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:02:15,925 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:16,351 [main:55] - randomType = Array<Char?>?
2021-03-11 11:02:16,449 [main:302] - generating value of type = Array<Char?> false depth = 0
2021-03-11 11:02:16,549 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Char?): Array<Char?> = TODO()
2021-03-11 11:02:16,551 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Char?): Array<Char?> = TODO()
2021-03-11 11:02:16,869 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:02:16,871 [main:302] - generating value of type = Function1<Int, Char?> false depth = 3
2021-03-11 11:02:16,872 [main:302] - generating value of type = Char true depth = 4
2021-03-11 11:02:16,873 [main:95] - GENERATED = Array<Char?>(1708087558, {a: Int -> ''})
2021-03-11 11:02:16,887 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:16,898 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:16,899 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:16,900 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:16,901 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:16,902 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:16,903 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:16,904 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:16,905 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:16,906 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:16,907 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:16,908 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:16,913 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:16,914 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:16,914 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:02:17,008 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:17,009 [main:66] - Compilation checking started
2021-03-11 11:02:17,267 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:17,276 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:17,276 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:17,276 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:17,377 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:17,378 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:17,478 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:17,480 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:17,799 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:17,801 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:02:17,802 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:02:17,802 [main:95] - GENERATED = check(true, { "dcahq"})
2021-03-11 11:02:17,802 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "dcahq"})}
2021-03-11 11:02:17,802 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:18,241 [main:55] - randomType = Triple<UShort, Sequence<Short>, Long>
2021-03-11 11:02:18,338 [main:302] - generating value of type = Triple<UShort, Sequence<Short>, Long> false depth = 0
2021-03-11 11:02:18,442 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UShort, second: Sequence<Short>, third: Long): Triple<UShort, Sequence<Short>, Long> = TODO()
2021-03-11 11:02:18,444 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UShort, second: Sequence<Short>, third: Long): Triple<UShort, Sequence<Short>, Long> = TODO()
2021-03-11 11:02:18,545 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 11:02:18,547 [main:302] - generating value of type = Sequence<Short> false depth = 3
2021-03-11 11:02:18,651 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: Short): Sequence<Short> = TODO()
2021-03-11 11:02:18,653 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: Short): Sequence<Short> = TODO()
2021-03-11 11:02:18,753 [main:302] - generating value of type = Short true depth = 6
2021-03-11 11:02:18,755 [main:95] - GENERATED = sequenceOf<Short>(-20589)
2021-03-11 11:02:18,755 [main:302] - generating value of type = Long true depth = 3
2021-03-11 11:02:18,756 [main:95] - GENERATED = Triple<UShort, Sequence<Short>, Long>(6124.toUShort(), sequenceOf<Short>(-20589), -5309934560235033122)
2021-03-11 11:02:18,778 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:18,782 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:18,793 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:18,794 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:18,795 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:18,796 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:18,797 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:18,798 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:18,799 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:18,800 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:18,801 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:18,802 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:18,803 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:18,804 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:18,804 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "dcahq"})}
2021-03-11 11:02:18,902 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:18,903 [main:66] - Compilation checking started
2021-03-11 11:02:19,150 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "dcahq"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:19,158 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:19,158 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:19,159 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:19,254 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:19,256 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:19,260 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:02:19,260 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:19,365 [main:55] - randomType = Byte
2021-03-11 11:02:19,461 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:02:19,495 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:19,503 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:19,507 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:19,508 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:19,508 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:19,509 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:19,510 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:19,511 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:19,512 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:19,513 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:19,514 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:19,515 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:19,516 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:19,517 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:19,517 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:02:19,634 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:19,635 [main:66] - Compilation checking started
2021-03-11 11:02:19,942 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:19,950 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:19,950 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:19,950 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:20,103 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:20,104 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:20,204 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:20,206 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:20,521 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:20,523 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:02:20,524 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:02:20,524 [main:95] - GENERATED = check(false, { "jlfqy"})
2021-03-11 11:02:20,524 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "jlfqy"})}
2021-03-11 11:02:20,524 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:20,633 [main:55] - randomType = ULong
2021-03-11 11:02:20,734 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:02:20,769 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:20,780 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:20,783 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:20,784 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:20,785 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:20,786 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:20,788 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:20,789 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:20,790 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:20,791 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:20,792 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:20,794 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:20,795 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:20,796 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:20,796 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "jlfqy"})}
2021-03-11 11:02:20,903 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:20,903 [main:66] - Compilation checking started
2021-03-11 11:02:21,165 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "jlfqy"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:21,173 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:21,173 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:21,173 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:21,270 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:21,271 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:21,371 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:21,373 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:21,580 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:02:21,580 [main:95] - GENERATED = print("ivbhd")
2021-03-11 11:02:21,580 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("ivbhd")}
2021-03-11 11:02:21,580 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:21,704 [main:55] - randomType = Triple<Checker, ShouldBeEnabled, Checker>
2021-03-11 11:02:21,800 [main:302] - generating value of type = Triple<Checker, ShouldBeEnabled, Checker> false depth = 0
2021-03-11 11:02:21,905 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Checker, second: ShouldBeEnabled, third: Checker): Triple<Checker, ShouldBeEnabled, Checker> = TODO()
2021-03-11 11:02:21,907 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Checker, second: ShouldBeEnabled, third: Checker): Triple<Checker, ShouldBeEnabled, Checker> = TODO()
2021-03-11 11:02:22,006 [main:302] - generating value of type = Checker false depth = 3
2021-03-11 11:02:22,008 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 11:02:22,212 [main:302] - generating value of type = ShouldBeDisabled false depth = 5
2021-03-11 11:02:22,214 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:02:22,214 [main:302] - generating value of type = ShouldBeEnabled false depth = 3
2021-03-11 11:02:22,215 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:02:22,215 [main:302] - generating value of type = Checker false depth = 3
2021-03-11 11:02:22,217 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 11:02:22,416 [main:302] - generating value of type = ShouldBeEnabled false depth = 5
2021-03-11 11:02:22,417 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:02:22,418 [main:95] - GENERATED = Triple<Checker, ShouldBeEnabled, Checker>(ShouldBeDisabled(), ShouldBeEnabled(), ShouldBeEnabled())
2021-03-11 11:02:22,430 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:22,440 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:22,441 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:22,442 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:22,443 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:22,444 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:22,445 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:22,446 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:22,452 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:22,453 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:22,454 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:22,455 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:22,456 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:22,457 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:22,457 [main:63] - replacement of c of type Function0<Unit> is { print("ivbhd")}
2021-03-11 11:02:22,552 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:22,552 [main:66] - Compilation checking started
2021-03-11 11:02:22,861 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("ivbhd")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:22,869 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:22,869 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:22,869 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:22,966 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:22,967 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:23,067 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:23,069 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:23,316 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:23,318 [main:95] - GENERATED = check(false)
2021-03-11 11:02:23,318 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 11:02:23,318 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:24,244 [main:55] - randomType = Triple<Function1<List<LinkedHashMap<ShouldBeDisabled, Double>>?, ShouldBeDisabled>, Byte, Function1<Int, Float>>?
2021-03-11 11:02:24,346 [main:302] - generating value of type = Triple<Function1<List<LinkedHashMap<ShouldBeDisabled, Double>>?, ShouldBeDisabled>, Byte, Function1<Int, Float>> false depth = 0
2021-03-11 11:02:24,456 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Function1<List<LinkedHashMap<ShouldBeDisabled, Double>>?, ShouldBeDisabled>, second: Byte, third: Function1<Int, Float>): Triple<Function1<List<LinkedHashMap<ShouldBeDisabled, Double>>?, ShouldBeDisabled>, Byte, Function1<Int, Float>> = TODO()
2021-03-11 11:02:24,458 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Function1<List<LinkedHashMap<ShouldBeDisabled, Double>>?, ShouldBeDisabled>, second: Byte, third: Function1<Int, Float>): Triple<Function1<List<LinkedHashMap<ShouldBeDisabled, Double>>?, ShouldBeDisabled>, Byte, Function1<Int, Float>> = TODO()
2021-03-11 11:02:24,563 [main:302] - generating value of type = Function1<List<LinkedHashMap<ShouldBeDisabled, Double>>?, ShouldBeDisabled> false depth = 3
2021-03-11 11:02:24,564 [main:302] - generating value of type = ShouldBeDisabled false depth = 4
2021-03-11 11:02:24,565 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:02:24,566 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 11:02:24,567 [main:302] - generating value of type = Function1<Int, Float> false depth = 3
2021-03-11 11:02:24,568 [main:302] - generating value of type = Float true depth = 4
2021-03-11 11:02:24,570 [main:95] - GENERATED = Triple<Function1<List<LinkedHashMap<ShouldBeDisabled, Double>>?, ShouldBeDisabled>, Byte, Function1<Int, Float>>({a: List<LinkedHashMap<ShouldBeDisabled, Double>>? -> ShouldBeDisabled()}, -90, {a: Int -> 0.1487776f})
2021-03-11 11:02:24,625 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:24,638 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:24,639 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:24,644 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:24,645 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:24,646 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:24,647 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:24,648 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:24,648 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:24,649 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:24,650 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:24,651 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:24,653 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:24,654 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:24,654 [main:63] - replacement of c of type Function0<Unit> is { check(false)}
2021-03-11 11:02:24,758 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:24,758 [main:66] - Compilation checking started
2021-03-11 11:02:25,056 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:25,064 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:25,064 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:25,064 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:25,168 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:25,170 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:25,277 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:25,279 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:25,492 [main:95] - GENERATED = print(null)
2021-03-11 11:02:25,492 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print(null)}
2021-03-11 11:02:25,492 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:25,671 [main:55] - randomType = List<Int>
2021-03-11 11:02:25,673 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:25,685 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:25,687 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:25,688 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:25,689 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:25,690 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:25,691 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:25,695 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:25,696 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:25,697 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:25,698 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:25,699 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:25,700 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:25,701 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:25,701 [main:63] - replacement of c of type Function0<Unit> is { print(null)}
2021-03-11 11:02:25,809 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:25,810 [main:66] - Compilation checking started
2021-03-11 11:02:26,068 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print(null)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:26,076 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:26,076 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:26,076 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:26,175 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:26,177 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:26,288 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:26,290 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:26,662 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:26,663 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:02:26,664 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:02:26,665 [main:95] - GENERATED = require(false, { "xvkhq"})
2021-03-11 11:02:26,665 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "xvkhq"})}
2021-03-11 11:02:26,665 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:26,670 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:02:26,772 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:02:26,773 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:02:26,780 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:26,792 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:26,793 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:26,794 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:26,795 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:26,796 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:26,797 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:26,802 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:26,803 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:26,805 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:26,806 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:26,807 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:26,808 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:26,809 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:26,809 [main:63] - replacement of c of type Function0<Unit> is { require(false, { "xvkhq"})}
2021-03-11 11:02:26,913 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:26,913 [main:66] - Compilation checking started
2021-03-11 11:02:27,194 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false, { "xvkhq"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:27,203 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:27,203 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:27,203 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:27,312 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:27,313 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:27,317 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:02:27,318 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:27,552 [main:55] - randomType = ArrayDeque<Long>
2021-03-11 11:02:27,655 [main:302] - generating value of type = ArrayDeque<Long> false depth = 0
2021-03-11 11:02:27,763 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Long>): ArrayDeque<Long> = TODO()
2021-03-11 11:02:27,765 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Long>): ArrayDeque<Long> = TODO()
2021-03-11 11:02:27,994 [main:302] - generating value of type = Collection<Long> false depth = 3
2021-03-11 11:02:28,107 [main:43] - GENERATING CALL OF fun <T> setOf(elements: Long): Collection<Long> = TODO()
2021-03-11 11:02:28,110 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: Long): Collection<Long> = TODO()
2021-03-11 11:02:28,219 [main:302] - generating value of type = Long true depth = 6
2021-03-11 11:02:28,221 [main:95] - GENERATED = setOf<Long>(-1114292810715768721)
2021-03-11 11:02:28,221 [main:95] - GENERATED = ArrayDeque<Long>(setOf<Long>(-1114292810715768721))
2021-03-11 11:02:28,377 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:28,387 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:28,388 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:28,389 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:28,391 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:28,392 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:28,393 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:28,394 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:28,395 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:28,401 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:28,403 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:28,404 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:28,405 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:28,406 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:28,406 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:02:28,509 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:28,510 [main:66] - Compilation checking started
2021-03-11 11:02:28,782 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:28,791 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:28,791 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:28,791 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:28,894 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:28,896 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:29,006 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:29,008 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:29,231 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:29,233 [main:95] - GENERATED = require(true)
2021-03-11 11:02:29,233 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:02:29,233 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:29,465 [main:55] - randomType = UShort?
2021-03-11 11:02:29,569 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:02:29,613 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:29,626 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:29,627 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:29,632 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:29,633 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:29,634 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:29,635 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:29,636 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:29,637 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:29,638 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:29,639 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:29,640 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:29,641 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:29,642 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:29,642 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:02:29,745 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:29,745 [main:66] - Compilation checking started
2021-03-11 11:02:30,008 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:30,017 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:30,017 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:30,017 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:30,119 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:30,121 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:30,225 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:30,227 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:30,440 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:30,442 [main:95] - GENERATED = check(false)
2021-03-11 11:02:30,442 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 11:02:30,442 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:30,670 [main:55] - randomType = Array<Checker>
2021-03-11 11:02:30,772 [main:302] - generating value of type = Array<Checker> false depth = 0
2021-03-11 11:02:30,878 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Checker> = TODO()
2021-03-11 11:02:30,880 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Checker> = TODO()
2021-03-11 11:02:30,984 [main:95] - GENERATED = emptyArray<Checker>()
2021-03-11 11:02:31,002 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,016 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,017 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,018 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,020 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:31,026 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,027 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,028 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:31,029 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,030 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,031 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,033 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,034 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,035 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,035 [main:63] - replacement of c of type Function0<Unit> is { check(false)}
2021-03-11 11:02:31,136 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:31,137 [main:66] - Compilation checking started
2021-03-11 11:02:31,391 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:31,399 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:31,399 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:31,400 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:31,502 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:31,503 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:31,667 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:31,670 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:31,884 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:02:31,885 [main:95] - GENERATED = print("mkkcy")
2021-03-11 11:02:31,885 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("mkkcy")}
2021-03-11 11:02:31,885 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:31,890 [main:55] - randomType = Checker
2021-03-11 11:02:31,891 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,904 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:31,910 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,911 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,912 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,913 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,913 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,914 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,915 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,916 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,917 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,918 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,919 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:31,920 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:31,920 [main:63] - replacement of c of type Function0<Unit> is { print("mkkcy")}
2021-03-11 11:02:32,021 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:32,022 [main:66] - Compilation checking started
2021-03-11 11:02:32,303 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("mkkcy")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:32,313 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:32,313 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:32,313 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:32,413 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:32,415 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:32,519 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:32,521 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:32,738 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:02:32,739 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:02:32,843 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:32,845 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:33,187 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:02:33,189 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:02:33,190 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:02:33,190 [main:95] - GENERATED = check(false, { "lkpwr"})
2021-03-11 11:02:33,191 [main:95] - GENERATED = contract({ check(false, { "lkpwr"})})
2021-03-11 11:02:33,191 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(false, { "lkpwr"})})}
2021-03-11 11:02:33,191 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:33,528 [main:55] - randomType = LinkedHashSet<HashSet<UByte>>?
2021-03-11 11:02:33,632 [main:302] - generating value of type = LinkedHashSet<HashSet<UByte>> false depth = 0
2021-03-11 11:02:33,734 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<HashSet<UByte>> = TODO()
2021-03-11 11:02:33,737 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<HashSet<UByte>> = TODO()
2021-03-11 11:02:33,841 [main:95] - GENERATED = linkedSetOf<HashSet<UByte>>()
2021-03-11 11:02:34,002 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:34,013 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:34,014 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:34,021 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:34,022 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:34,023 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:34,024 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:34,025 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:34,026 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:34,027 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:34,028 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:34,029 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:34,030 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:34,031 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:34,031 [main:63] - replacement of c of type Function0<Unit> is { contract({ check(false, { "lkpwr"})})}
2021-03-11 11:02:34,139 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:34,139 [main:66] - Compilation checking started
2021-03-11 11:02:34,402 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ check(false, { "lkpwr"})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:34,410 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:34,410 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:34,410 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:34,514 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:34,515 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:34,620 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:34,622 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:34,950 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:34,952 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:02:34,953 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:02:34,953 [main:95] - GENERATED = check(false, { "cyscn"})
2021-03-11 11:02:34,953 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "cyscn"})}
2021-03-11 11:02:34,953 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:34,958 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:02:35,058 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:02:35,059 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:02:35,070 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:35,076 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:35,077 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:35,090 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:35,091 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:35,092 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:35,093 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:35,094 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:35,095 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:35,096 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:35,096 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:35,097 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:35,098 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:35,099 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:35,099 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "cyscn"})}
2021-03-11 11:02:35,198 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:35,199 [main:66] - Compilation checking started
2021-03-11 11:02:35,454 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "cyscn"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:35,462 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:35,462 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:35,462 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:35,567 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:35,568 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:35,677 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:35,679 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:35,892 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:02:35,892 [main:95] - GENERATED = println("oqjbp")
2021-03-11 11:02:35,892 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("oqjbp")}
2021-03-11 11:02:35,892 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:35,897 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:02:35,999 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:02:36,000 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:02:36,008 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:36,019 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:36,020 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:36,021 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:36,022 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:36,023 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:36,024 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:36,025 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:36,026 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:36,028 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:36,032 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:36,033 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:36,034 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:36,035 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:36,035 [main:63] - replacement of c of type Function0<Unit> is { println("oqjbp")}
2021-03-11 11:02:36,135 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:36,136 [main:66] - Compilation checking started
2021-03-11 11:02:36,393 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("oqjbp")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:36,402 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:36,402 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:36,402 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:36,504 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:36,506 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:36,610 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:36,612 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:36,978 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:36,979 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:02:36,981 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:02:36,981 [main:95] - GENERATED = require(true, { "ryfid"})
2021-03-11 11:02:36,981 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "ryfid"})}
2021-03-11 11:02:36,981 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:36,987 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:02:37,117 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:02:37,119 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:02:37,129 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:37,141 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:37,146 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:37,147 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:37,148 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:37,149 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:37,150 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:37,150 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:37,151 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:37,152 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:37,153 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:37,154 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:37,155 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:37,156 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:37,157 [main:63] - replacement of c of type Function0<Unit> is { require(true, { "ryfid"})}
2021-03-11 11:02:37,262 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:37,263 [main:66] - Compilation checking started
2021-03-11 11:02:37,596 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true, { "ryfid"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:37,605 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:37,605 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:37,605 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:37,707 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:37,708 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:37,814 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:37,816 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:38,028 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:38,030 [main:95] - GENERATED = check(true)
2021-03-11 11:02:38,030 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 11:02:38,030 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:38,035 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:02:38,133 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:02:38,134 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:02:38,145 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:38,156 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:38,157 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:38,158 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:38,159 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:38,160 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:38,161 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:38,162 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:38,166 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:38,167 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:38,169 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:38,170 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:38,171 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:38,172 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:38,172 [main:63] - replacement of c of type Function0<Unit> is { check(true)}
2021-03-11 11:02:38,271 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:38,271 [main:66] - Compilation checking started
2021-03-11 11:02:38,532 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:38,540 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:38,540 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:38,541 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:38,640 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:38,642 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:38,748 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:38,750 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:38,965 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:02:38,965 [main:95] - GENERATED = println("leatn")
2021-03-11 11:02:38,965 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("leatn")}
2021-03-11 11:02:38,965 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:39,187 [main:55] - randomType = Byte?
2021-03-11 11:02:39,289 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:02:39,336 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:39,349 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:39,350 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:39,351 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:39,356 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:39,357 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:39,358 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:39,359 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:39,360 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:39,361 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:39,361 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:39,362 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:39,363 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:39,364 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:39,364 [main:63] - replacement of c of type Function0<Unit> is { println("leatn")}
2021-03-11 11:02:39,464 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:39,464 [main:66] - Compilation checking started
2021-03-11 11:02:39,728 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("leatn")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:39,737 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:39,737 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:39,737 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:39,842 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:39,843 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:39,948 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:39,950 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:40,168 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:02:40,169 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:02:40,273 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:40,275 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:40,608 [main:302] - generating value of type = Int true depth = 8
2021-03-11 11:02:40,609 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 11:02:40,610 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:02:40,720 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:40,722 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:41,052 [main:302] - generating value of type = Int true depth = 12
2021-03-11 11:02:41,054 [main:302] - generating value of type = Function1<Int, Unit> false depth = 12
2021-03-11 11:02:41,056 [main:302] - generating value of type = Unit false depth = 13
2021-03-11 11:02:41,062 [main:95] - GENERATED = repeat(-2124272778, {a: Int -> println()})
2021-03-11 11:02:41,062 [main:95] - GENERATED = repeat(-1335021495, {a: Int -> repeat(-2124272778, {a: Int -> println()})})
2021-03-11 11:02:41,062 [main:95] - GENERATED = contract({ repeat(-1335021495, {a: Int -> repeat(-2124272778, {a: Int -> println()})})})
2021-03-11 11:02:41,062 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ repeat(-1335021495, {a: Int -> repeat(-2124272778, {a: Int -> println()})})})}
2021-03-11 11:02:41,062 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:41,065 [main:55] - randomType = UByte
2021-03-11 11:02:41,163 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:02:41,199 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:41,209 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:41,210 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:41,211 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:41,212 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:41,213 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:41,214 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:41,215 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:41,215 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:41,216 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:41,217 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:41,223 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:41,224 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:41,225 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:41,225 [main:63] - replacement of c of type Function0<Unit> is { contract({ repeat(-1335021495, {a: Int -> repeat(-2124272778, {a: Int -> println()})})})}
2021-03-11 11:02:41,324 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:41,324 [main:66] - Compilation checking started
2021-03-11 11:02:41,586 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ repeat(-1335021495, {a: Int -> repeat(-2124272778, {a: Int -> println()})})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:41,594 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:41,594 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:41,594 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:41,693 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:41,695 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:41,797 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:41,799 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:42,013 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:02:42,013 [main:95] - GENERATED = println("dansd")
2021-03-11 11:02:42,014 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("dansd")}
2021-03-11 11:02:42,014 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:42,128 [main:55] - randomType = UShort
2021-03-11 11:02:42,233 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:02:42,265 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:42,278 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:42,279 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:42,283 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:42,284 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:42,286 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:42,287 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:42,288 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:42,289 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:42,289 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:42,290 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:42,292 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:42,293 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:42,294 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:42,294 [main:63] - replacement of c of type Function0<Unit> is { println("dansd")}
2021-03-11 11:02:42,394 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:42,395 [main:66] - Compilation checking started
2021-03-11 11:02:42,656 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("dansd")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:42,664 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:42,664 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:42,664 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:42,763 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:42,764 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:42,867 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:42,870 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:43,266 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:02:43,267 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:02:43,269 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:02:43,372 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:43,374 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:43,694 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:02:43,695 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:02:43,696 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:02:43,696 [main:95] - GENERATED = check(true, { "recsk"})
2021-03-11 11:02:43,696 [main:95] - GENERATED = repeat(355865584, {a: Int -> check(true, { "recsk"})})
2021-03-11 11:02:43,697 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(355865584, {a: Int -> check(true, { "recsk"})})}
2021-03-11 11:02:43,697 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:44,038 [main:55] - randomType = LinkedHashMap<List<Checker>, UShort>
2021-03-11 11:02:44,137 [main:302] - generating value of type = LinkedHashMap<List<Checker>, UShort> false depth = 0
2021-03-11 11:02:44,239 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<List<Checker>, UShort>): LkedHashMap<List<Checker>, UShort> = TODO()
2021-03-11 11:02:44,241 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<List<Checker>, UShort>): LkedHashMap<List<Checker>, UShort> = TODO()
2021-03-11 11:02:44,344 [main:302] - generating value of type = Pair<List<Checker>, UShort> false depth = 3
2021-03-11 11:02:44,447 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: List<Checker>, second: UShort): Pair<List<Checker>, UShort> = TODO()
2021-03-11 11:02:44,449 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: List<Checker>, second: UShort): Pair<List<Checker>, UShort> = TODO()
2021-03-11 11:02:44,552 [main:302] - generating value of type = List<Checker> false depth = 6
2021-03-11 11:02:44,660 [main:43] - GENERATING CALL OF fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Checker): List<Checker> = TODO()
2021-03-11 11:02:44,663 [main:61] - WITHOUT TYPE PARAMS = fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Checker): List<Checker> = TODO()
2021-03-11 11:02:44,984 [main:302] - generating value of type = Int true depth = 9
2021-03-11 11:02:44,985 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, Checker> false depth = 9
2021-03-11 11:02:44,987 [main:302] - generating value of type = Checker false depth = 10
2021-03-11 11:02:44,988 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 11:02:45,194 [main:302] - generating value of type = ShouldBeEnabled false depth = 12
2021-03-11 11:02:45,195 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:02:45,196 [main:95] - GENERATED = List<Checker>(-1430784813, {a: Int -> ShouldBeEnabled()})
2021-03-11 11:02:45,196 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 11:02:45,197 [main:95] - GENERATED = Pair<List<Checker>, UShort>(List<Checker>(-1430784813, {a: Int -> ShouldBeEnabled()}), 16780.toUShort())
2021-03-11 11:02:45,197 [main:95] - GENERATED = linkedMapOf<List<Checker>, UShort>(Pair<List<Checker>, UShort>(List<Checker>(-1430784813, {a: Int -> ShouldBeEnabled()}), 16780.toUShort()))
2021-03-11 11:02:45,359 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:45,373 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:45,374 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:45,375 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:45,381 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:45,382 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:45,383 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:45,384 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:45,385 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:45,386 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:45,387 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:45,389 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:45,390 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:45,391 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:45,391 [main:63] - replacement of c of type Function0<Unit> is { repeat(355865584, {a: Int -> check(true, { "recsk"})})}
2021-03-11 11:02:45,491 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:45,491 [main:66] - Compilation checking started
2021-03-11 11:02:45,751 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(355865584, {a: Int -> check(true, { "recsk"})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:45,759 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:45,760 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:45,760 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:45,858 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:45,859 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:45,864 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:02:45,864 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:46,081 [main:55] - randomType = HashSet<Byte>
2021-03-11 11:02:46,190 [main:302] - generating value of type = HashSet<Byte> false depth = 0
2021-03-11 11:02:46,293 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<Byte> = TODO()
2021-03-11 11:02:46,295 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<Byte> = TODO()
2021-03-11 11:02:46,503 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:02:46,505 [main:95] - GENERATED = HashSet<Byte>(702010757)
2021-03-11 11:02:46,617 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:46,630 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:46,631 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:46,632 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:46,633 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:46,638 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:46,639 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:46,640 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:46,641 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:46,641 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:46,642 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:46,643 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:46,644 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:46,645 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:46,645 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:02:46,746 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:46,747 [main:66] - Compilation checking started
2021-03-11 11:02:47,003 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:47,011 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:47,011 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:47,011 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:47,111 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:47,112 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:47,215 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:47,217 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:47,431 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:47,433 [main:95] - GENERATED = require(true)
2021-03-11 11:02:47,433 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:02:47,433 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:47,435 [main:55] - randomType = String
2021-03-11 11:02:47,533 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:02:47,556 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:47,565 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:47,566 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:47,567 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:47,568 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:47,569 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:47,569 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:47,574 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:47,575 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:47,576 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:47,577 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:47,577 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:47,578 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:47,579 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:47,579 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:02:47,682 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:47,683 [main:66] - Compilation checking started
2021-03-11 11:02:47,946 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:47,954 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:47,955 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:47,955 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:48,057 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:48,058 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:48,159 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:48,161 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:48,372 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:02:48,373 [main:95] - GENERATED = println("xsrhw")
2021-03-11 11:02:48,373 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("xsrhw")}
2021-03-11 11:02:48,373 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:48,486 [main:55] - randomType = ShouldBeDisabled?
2021-03-11 11:02:48,585 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:02:48,587 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:02:48,597 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:48,608 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:48,609 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:48,610 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:48,611 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:48,615 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:48,616 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:48,617 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:48,618 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:48,619 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:48,621 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:48,623 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:48,624 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:48,625 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:48,625 [main:63] - replacement of c of type Function0<Unit> is { println("xsrhw")}
2021-03-11 11:02:48,726 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:48,726 [main:66] - Compilation checking started
2021-03-11 11:02:49,047 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("xsrhw")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:49,061 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:49,061 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:49,061 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:49,165 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:49,166 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:49,279 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:49,281 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:49,599 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:02:49,600 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:02:49,602 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:02:49,714 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:49,718 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:50,045 [main:302] - generating value of type = Int true depth = 8
2021-03-11 11:02:50,046 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 11:02:50,047 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:02:50,153 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:50,155 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:50,370 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 12
2021-03-11 11:02:50,371 [main:302] - generating value of type = Unit false depth = 13
2021-03-11 11:02:50,376 [main:95] - GENERATED = contract({ println()})
2021-03-11 11:02:50,376 [main:95] - GENERATED = repeat(-1818379, {a: Int -> contract({ println()})})
2021-03-11 11:02:50,376 [main:95] - GENERATED = repeat(-405296606, {a: Int -> repeat(-1818379, {a: Int -> contract({ println()})})})
2021-03-11 11:02:50,376 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-405296606, {a: Int -> repeat(-1818379, {a: Int -> contract({ println()})})})}
2021-03-11 11:02:50,376 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:50,487 [main:55] - randomType = UShort
2021-03-11 11:02:50,589 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:02:50,623 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:50,634 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:50,635 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:50,638 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:50,639 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:50,640 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:50,641 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:50,642 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:50,643 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:50,644 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:50,645 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:50,646 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:50,647 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:50,648 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:50,648 [main:63] - replacement of c of type Function0<Unit> is { repeat(-405296606, {a: Int -> repeat(-1818379, {a: Int -> contract({ println()})})})}
2021-03-11 11:02:50,757 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:50,757 [main:66] - Compilation checking started
2021-03-11 11:02:51,026 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-405296606, {a: Int -> repeat(-1818379, {a: Int -> contract({ println()})})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:51,037 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:51,037 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:51,037 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:51,138 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:51,139 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:51,242 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:51,244 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:51,455 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:51,457 [main:95] - GENERATED = require(true)
2021-03-11 11:02:51,457 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:02:51,457 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:51,577 [main:55] - randomType = Map<Int, Checker>
2021-03-11 11:02:51,578 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:51,590 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:51,591 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:51,592 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:51,593 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:51,594 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:51,595 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:51,596 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:51,597 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:51,601 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:51,602 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:51,603 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:51,604 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:51,605 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:51,605 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:02:51,709 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:51,710 [main:66] - Compilation checking started
2021-03-11 11:02:51,992 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:52,000 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:52,000 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:52,000 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:52,111 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:52,112 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:52,219 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:52,221 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:52,451 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:52,453 [main:95] - GENERATED = require(true)
2021-03-11 11:02:52,453 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:02:52,453 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:52,575 [main:55] - randomType = HashMap<ShouldBeDisabled, ShouldBeDisabled>
2021-03-11 11:02:52,679 [main:302] - generating value of type = HashMap<ShouldBeDisabled, ShouldBeDisabled> false depth = 0
2021-03-11 11:02:52,784 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<ShouldBeDisabled, ShouldBeDisabled>): HashMap<ShouldBeDisabled, ShouldBeDisabled> = TODO()
2021-03-11 11:02:52,786 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<ShouldBeDisabled, ShouldBeDisabled>): HashMap<ShouldBeDisabled, ShouldBeDisabled> = TODO()
2021-03-11 11:02:52,898 [main:302] - generating value of type = Pair<ShouldBeDisabled, ShouldBeDisabled> false depth = 3
2021-03-11 11:02:53,003 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ShouldBeDisabled, second: ShouldBeDisabled): Pair<ShouldBeDisabled, ShouldBeDisabled> = TODO()
2021-03-11 11:02:53,006 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ShouldBeDisabled, second: ShouldBeDisabled): Pair<ShouldBeDisabled, ShouldBeDisabled> = TODO()
2021-03-11 11:02:53,110 [main:302] - generating value of type = ShouldBeDisabled false depth = 6
2021-03-11 11:02:53,112 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:02:53,112 [main:302] - generating value of type = ShouldBeDisabled false depth = 6
2021-03-11 11:02:53,113 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:02:53,113 [main:95] - GENERATED = Pair<ShouldBeDisabled, ShouldBeDisabled>(ShouldBeDisabled(), ShouldBeDisabled())
2021-03-11 11:02:53,113 [main:95] - GENERATED = linkedMapOf<ShouldBeDisabled, ShouldBeDisabled>(Pair<ShouldBeDisabled, ShouldBeDisabled>(ShouldBeDisabled(), ShouldBeDisabled()))
2021-03-11 11:02:53,228 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:53,239 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:53,240 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:53,245 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:53,246 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:53,246 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:53,247 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:53,248 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:53,249 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:53,251 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:53,252 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:53,253 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:53,255 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:53,256 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:53,256 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:02:53,358 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:53,358 [main:66] - Compilation checking started
2021-03-11 11:02:53,616 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:53,625 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:53,626 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:53,626 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:53,726 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:53,727 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:53,840 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:53,842 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:54,100 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:02:54,101 [main:95] - GENERATED = println("idcwb")
2021-03-11 11:02:54,101 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("idcwb")}
2021-03-11 11:02:54,101 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:54,763 [main:55] - randomType = Set<ArrayDeque<Triple<Byte, String, Char>>>?
2021-03-11 11:02:54,764 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:54,769 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:54,783 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:54,784 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:54,785 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:54,786 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:54,787 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:54,789 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:54,790 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:54,791 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:54,793 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:54,794 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:54,795 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:54,796 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:54,796 [main:63] - replacement of c of type Function0<Unit> is { println("idcwb")}
2021-03-11 11:02:54,910 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:54,910 [main:66] - Compilation checking started
2021-03-11 11:02:55,243 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("idcwb")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:55,251 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:55,251 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:55,251 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:55,358 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:55,359 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:55,468 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:55,470 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:55,814 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:02:55,815 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:02:55,817 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:02:55,946 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:55,948 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:56,177 [main:95] - GENERATED = print(null)
2021-03-11 11:02:56,178 [main:95] - GENERATED = repeat(981348877, {a: Int -> print(null)})
2021-03-11 11:02:56,178 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(981348877, {a: Int -> print(null)})}
2021-03-11 11:02:56,178 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:56,312 [main:55] - randomType = Checker?
2021-03-11 11:02:56,313 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:56,318 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:56,332 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:56,334 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:56,335 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:56,336 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:56,337 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:56,338 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:56,340 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:56,342 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:56,343 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:56,344 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:56,345 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:56,346 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:56,346 [main:63] - replacement of c of type Function0<Unit> is { repeat(981348877, {a: Int -> print(null)})}
2021-03-11 11:02:56,455 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:56,456 [main:66] - Compilation checking started
2021-03-11 11:02:56,781 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(981348877, {a: Int -> print(null)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:56,790 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:56,790 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:56,790 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:56,909 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:56,911 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:57,031 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:57,034 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:57,403 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:02:57,405 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:02:57,407 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:02:57,520 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:57,523 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:02:57,853 [main:302] - generating value of type = Int true depth = 8
2021-03-11 11:02:57,854 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 11:02:57,856 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:02:57,960 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:57,962 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:02:58,173 [main:302] - generating value of type = Any false depth = 12
2021-03-11 11:02:58,173 [main:95] - GENERATED = println("nuidc")
2021-03-11 11:02:58,173 [main:95] - GENERATED = repeat(-1571960061, {a: Int -> println("nuidc")})
2021-03-11 11:02:58,173 [main:95] - GENERATED = repeat(-972452858, {a: Int -> repeat(-1571960061, {a: Int -> println("nuidc")})})
2021-03-11 11:02:58,173 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-972452858, {a: Int -> repeat(-1571960061, {a: Int -> println("nuidc")})})}
2021-03-11 11:02:58,173 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:58,278 [main:55] - randomType = Short
2021-03-11 11:02:58,374 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:02:58,425 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:58,436 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:58,437 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:58,443 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:58,444 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:58,445 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:58,446 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:58,447 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:58,448 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:58,449 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:58,450 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:58,451 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:58,452 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:58,453 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:58,453 [main:63] - replacement of c of type Function0<Unit> is { repeat(-972452858, {a: Int -> repeat(-1571960061, {a: Int -> println("nuidc")})})}
2021-03-11 11:02:58,548 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:58,548 [main:66] - Compilation checking started
2021-03-11 11:02:58,800 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-972452858, {a: Int -> repeat(-1571960061, {a: Int -> println("nuidc")})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:58,808 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:58,808 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:58,808 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:58,909 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:58,911 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:59,010 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:59,012 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:02:59,218 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:02:59,220 [main:95] - GENERATED = check(true)
2021-03-11 11:02:59,220 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 11:02:59,220 [main:49] - GENERATED IS CALL =false
2021-03-11 11:02:59,222 [main:55] - randomType = Int
2021-03-11 11:02:59,316 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:02:59,349 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:59,357 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:59,358 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:59,359 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:59,363 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:59,363 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:59,364 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:59,365 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:59,366 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:02:59,367 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:59,368 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:59,369 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:59,371 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:59,372 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:02:59,372 [main:63] - replacement of c of type Function0<Unit> is { check(true)}
2021-03-11 11:02:59,472 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:02:59,473 [main:66] - Compilation checking started
2021-03-11 11:02:59,728 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:02:59,736 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:02:59,736 [main:38] - replacing c Function0<Unit>
2021-03-11 11:02:59,736 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:02:59,832 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:02:59,834 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:02:59,940 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:02:59,942 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:00,276 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:00,277 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:00,279 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:00,279 [main:95] - GENERATED = check(false, { "thwas"})
2021-03-11 11:03:00,279 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "thwas"})}
2021-03-11 11:03:00,279 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:00,281 [main:55] - randomType = UByte
2021-03-11 11:03:00,377 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:03:00,417 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:00,421 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:00,429 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:00,430 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:00,431 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:00,432 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:00,433 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:00,434 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:00,435 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:00,436 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:00,437 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:00,438 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:00,439 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:00,439 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:00,440 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "thwas"})}
2021-03-11 11:03:00,534 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:00,534 [main:66] - Compilation checking started
2021-03-11 11:03:00,785 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "thwas"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:00,793 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:00,793 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:00,793 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:00,889 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:00,890 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:00,995 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:00,997 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:01,206 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:01,208 [main:95] - GENERATED = require(true)
2021-03-11 11:03:01,208 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:03:01,208 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:01,617 [main:55] - randomType = Map<UInt, ULong>
2021-03-11 11:03:01,618 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:01,631 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:01,632 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:01,637 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:01,638 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:01,639 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:01,640 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:01,640 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:01,641 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:01,642 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:01,643 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:01,644 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:01,645 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:01,647 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:01,647 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:03:01,748 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:01,749 [main:66] - Compilation checking started
2021-03-11 11:03:02,012 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:02,020 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:02,020 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:02,021 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:02,117 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:02,119 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:02,220 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:02,222 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:02,599 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:02,600 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:02,601 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:02,602 [main:95] - GENERATED = check(false, { "cgimt"})
2021-03-11 11:03:02,602 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "cgimt"})}
2021-03-11 11:03:02,602 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:02,725 [main:55] - randomType = Checker?
2021-03-11 11:03:02,726 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:02,731 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:02,741 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:02,742 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:02,743 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:02,744 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:02,745 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:02,746 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:02,747 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:02,748 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:02,749 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:02,749 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:02,750 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:02,751 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:02,751 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "cgimt"})}
2021-03-11 11:03:02,846 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:02,847 [main:66] - Compilation checking started
2021-03-11 11:03:03,092 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "cgimt"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:03,100 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:03,100 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:03,100 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:03,198 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:03,199 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:03,299 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:03,301 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:03,506 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:03:03,506 [main:95] - GENERATED = print("cgpht")
2021-03-11 11:03:03,506 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("cgpht")}
2021-03-11 11:03:03,506 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:03,726 [main:55] - randomType = Set<Collection<Long>>
2021-03-11 11:03:03,728 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:03,737 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:03,738 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:03,739 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:03,743 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:03,744 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:03,745 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:03,746 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:03,747 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:03,748 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:03,749 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:03,749 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:03,750 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:03,751 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:03,751 [main:63] - replacement of c of type Function0<Unit> is { print("cgpht")}
2021-03-11 11:03:03,845 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:03,846 [main:66] - Compilation checking started
2021-03-11 11:03:04,092 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("cgpht")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:04,103 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:04,103 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:04,103 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:04,198 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:04,199 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:04,299 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:04,301 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:04,611 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:03:04,613 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:03:04,614 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:03:04,714 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:04,716 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:04,925 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:03:04,926 [main:95] - GENERATED = check(true)
2021-03-11 11:03:04,927 [main:95] - GENERATED = repeat(241579913, {a: Int -> check(true)})
2021-03-11 11:03:04,927 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(241579913, {a: Int -> check(true)})}
2021-03-11 11:03:04,927 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:04,929 [main:55] - randomType = Float
2021-03-11 11:03:05,023 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:03:05,053 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:05,057 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:05,058 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:05,067 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:05,068 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:05,069 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:05,070 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:05,071 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:05,072 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:05,073 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:05,074 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:05,075 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:05,075 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:05,076 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:05,076 [main:63] - replacement of c of type Function0<Unit> is { repeat(241579913, {a: Int -> check(true)})}
2021-03-11 11:03:05,170 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:05,170 [main:66] - Compilation checking started
2021-03-11 11:03:05,413 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(241579913, {a: Int -> check(true)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:05,422 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:05,422 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:05,422 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:05,516 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:05,517 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:05,616 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:05,618 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:05,933 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:03:05,935 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:03:05,936 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:03:06,038 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:06,040 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:06,244 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 11:03:06,245 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:03:06,344 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:06,346 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:06,550 [main:302] - generating value of type = Any false depth = 12
2021-03-11 11:03:06,550 [main:95] - GENERATED = print("mmeta")
2021-03-11 11:03:06,550 [main:95] - GENERATED = contract({ print("mmeta")})
2021-03-11 11:03:06,550 [main:95] - GENERATED = repeat(-385042141, {a: Int -> contract({ print("mmeta")})})
2021-03-11 11:03:06,550 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-385042141, {a: Int -> contract({ print("mmeta")})})}
2021-03-11 11:03:06,551 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:06,770 [main:55] - randomType = Function2<Checker, UInt, Checker>
2021-03-11 11:03:06,771 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:06,777 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:06,789 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:06,790 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:06,791 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:06,792 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:06,793 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:06,794 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:06,795 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:06,796 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:06,797 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:06,798 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:06,799 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:06,800 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:06,800 [main:63] - replacement of c of type Function0<Unit> is { repeat(-385042141, {a: Int -> contract({ print("mmeta")})})}
2021-03-11 11:03:06,894 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:06,895 [main:66] - Compilation checking started
2021-03-11 11:03:07,145 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-385042141, {a: Int -> contract({ print("mmeta")})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:07,153 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:07,153 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:07,153 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:07,249 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:07,251 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:07,422 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:07,424 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:07,739 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:07,741 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:07,742 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:07,742 [main:95] - GENERATED = require(true, { "iobij"})
2021-03-11 11:03:07,742 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "iobij"})}
2021-03-11 11:03:07,742 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:07,747 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:03:07,842 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:03:07,844 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:03:07,850 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:07,860 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:07,861 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:07,862 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:07,862 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:07,866 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:07,868 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:07,869 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:07,870 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:07,871 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:07,873 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:07,874 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:07,875 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:07,876 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:07,876 [main:63] - replacement of c of type Function0<Unit> is { require(true, { "iobij"})}
2021-03-11 11:03:07,975 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:07,975 [main:66] - Compilation checking started
2021-03-11 11:03:08,259 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true, { "iobij"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:08,267 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:08,268 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:08,268 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:08,367 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:08,369 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:08,468 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:08,470 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:08,675 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:03:08,675 [main:95] - GENERATED = print("wsvkw")
2021-03-11 11:03:08,675 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("wsvkw")}
2021-03-11 11:03:08,675 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:08,780 [main:55] - randomType = UInt
2021-03-11 11:03:08,874 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:03:08,902 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:08,911 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:08,912 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:08,915 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:08,916 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:08,917 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:08,918 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:08,919 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:08,920 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:08,921 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:08,922 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:08,923 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:08,924 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:08,925 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:08,925 [main:63] - replacement of c of type Function0<Unit> is { print("wsvkw")}
2021-03-11 11:03:09,019 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:09,019 [main:66] - Compilation checking started
2021-03-11 11:03:09,260 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("wsvkw")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:09,268 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:09,268 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:09,268 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:09,363 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:09,364 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:09,463 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:09,466 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:09,671 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:03:09,672 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:03:09,771 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:09,773 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:09,976 [main:302] - generating value of type = Any false depth = 8
2021-03-11 11:03:09,976 [main:95] - GENERATED = println("kfcvd")
2021-03-11 11:03:09,976 [main:95] - GENERATED = contract({ println("kfcvd")})
2021-03-11 11:03:09,976 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println("kfcvd")})}
2021-03-11 11:03:09,976 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:10,306 [main:55] - randomType = MutableMap<UShort, UShort>
2021-03-11 11:03:10,307 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:10,317 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:10,321 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:10,322 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:10,323 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:10,324 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:10,325 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:10,326 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:10,327 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:10,328 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:10,329 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:10,330 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:10,330 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:10,331 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:10,331 [main:63] - replacement of c of type Function0<Unit> is { contract({ println("kfcvd")})}
2021-03-11 11:03:10,429 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:10,430 [main:66] - Compilation checking started
2021-03-11 11:03:10,689 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ println("kfcvd")})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:10,698 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:10,698 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:10,698 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:10,801 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:10,802 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:10,943 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:10,947 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:11,207 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:11,208 [main:95] - GENERATED = require(false)
2021-03-11 11:03:11,209 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:03:11,209 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:11,214 [main:55] - randomType = Checker
2021-03-11 11:03:11,215 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:11,221 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:11,230 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:11,231 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:11,233 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:11,234 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:11,235 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:11,236 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:11,237 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:11,239 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:11,240 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:11,241 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:11,242 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:11,243 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:11,243 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:03:11,345 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:11,346 [main:66] - Compilation checking started
2021-03-11 11:03:11,607 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:11,615 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:11,615 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:11,616 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:11,717 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:11,718 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:11,722 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:03:11,722 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:11,951 [main:55] - randomType = Short?
2021-03-11 11:03:12,063 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:03:12,118 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:12,123 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,135 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,136 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:12,137 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,138 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,139 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,140 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,141 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,142 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,143 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,143 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,144 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,145 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,145 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:03:12,244 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:12,244 [main:66] - Compilation checking started
2021-03-11 11:03:12,505 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:12,513 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:12,513 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:12,513 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:12,617 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:12,619 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:12,625 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:03:12,626 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:12,633 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:03:12,733 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:03:12,735 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:03:12,741 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:12,745 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,760 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,761 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,762 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,763 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,764 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,765 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,766 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,767 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,768 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,769 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,770 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:12,771 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:12,771 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:03:12,874 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:12,874 [main:66] - Compilation checking started
2021-03-11 11:03:13,146 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:13,155 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:13,155 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:13,155 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:13,256 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:13,257 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:13,360 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:13,362 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:13,643 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:13,645 [main:95] - GENERATED = require(false)
2021-03-11 11:03:13,645 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:03:13,645 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:13,759 [main:55] - randomType = Collection<Checker>
2021-03-11 11:03:13,760 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:13,773 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:13,774 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:13,775 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:13,776 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:13,780 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:13,781 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:13,782 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:13,783 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:13,784 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:13,785 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:13,786 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:13,787 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:13,788 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:13,788 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:03:13,888 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:13,889 [main:66] - Compilation checking started
2021-03-11 11:03:14,151 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:14,160 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:14,161 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:14,161 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:14,263 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:14,264 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:14,368 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:14,370 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:14,582 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:14,584 [main:95] - GENERATED = check(false)
2021-03-11 11:03:14,585 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 11:03:14,585 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:14,590 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:03:14,689 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:03:14,690 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:03:14,697 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:14,709 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:14,710 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:14,711 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:14,712 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:14,712 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:14,713 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:14,718 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:14,719 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:14,720 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:14,721 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:14,722 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:14,723 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:14,724 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:14,724 [main:63] - replacement of c of type Function0<Unit> is { check(false)}
2021-03-11 11:03:14,825 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:14,826 [main:66] - Compilation checking started
2021-03-11 11:03:15,083 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:15,091 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:15,091 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:15,092 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:15,194 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:15,195 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:15,300 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:15,302 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:15,629 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:15,631 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:15,632 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:15,632 [main:95] - GENERATED = check(true, { "fpryd"})
2021-03-11 11:03:15,633 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "fpryd"})}
2021-03-11 11:03:15,633 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:15,636 [main:55] - randomType = Double
2021-03-11 11:03:15,737 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:03:15,779 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:15,791 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:15,795 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:15,796 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:15,797 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:15,798 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:15,799 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:15,800 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:15,801 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:15,801 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:15,802 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:15,803 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:15,804 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:15,805 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:15,805 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "fpryd"})}
2021-03-11 11:03:15,906 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:15,907 [main:66] - Compilation checking started
2021-03-11 11:03:16,174 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "fpryd"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:16,182 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:16,182 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:16,182 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:16,285 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:16,286 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:16,395 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:16,397 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:16,722 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:16,724 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:16,725 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:16,725 [main:95] - GENERATED = check(true, { "sbwdq"})
2021-03-11 11:03:16,725 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "sbwdq"})}
2021-03-11 11:03:16,725 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:17,064 [main:55] - randomType = HashSet<Collection<UShort>>
2021-03-11 11:03:17,166 [main:302] - generating value of type = HashSet<Collection<UShort>> false depth = 0
2021-03-11 11:03:17,274 [main:43] - GENERATING CALL OF fun <E> HashSet(elements: kotlin.collections.Collection<Collection<UShort>>): HashSet<Collection<UShort>> = TODO()
2021-03-11 11:03:17,276 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(elements: kotlin.collections.Collection<Collection<UShort>>): HashSet<Collection<UShort>> = TODO()
2021-03-11 11:03:17,493 [main:302] - generating value of type = Collection<Collection<UShort>> false depth = 3
2021-03-11 11:03:17,600 [main:43] - GENERATING CALL OF fun ULongArray(size: kotlin.Int): Collection<Collection<UShort>> = TODO()
2021-03-11 11:03:17,602 [main:61] - WITHOUT TYPE PARAMS = fun ULongArray(size: kotlin.Int): Collection<Collection<UShort>> = TODO()
2021-03-11 11:03:17,820 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:03:17,822 [main:95] - GENERATED = ULongArray(1293266876)
2021-03-11 11:03:17,822 [main:95] - GENERATED = HashSet<Collection<UShort>>(ULongArray(1293266876))
2021-03-11 11:03:17,967 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:17,976 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:17,977 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:17,978 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:17,983 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:17,985 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:17,987 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:17,988 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:17,990 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:17,991 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:17,992 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:17,993 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:17,993 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:17,994 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:17,994 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "sbwdq"})}
2021-03-11 11:03:18,095 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:18,096 [main:66] - Compilation checking started
2021-03-11 11:03:18,358 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "sbwdq"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:18,366 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:18,367 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:18,367 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:18,473 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:18,474 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:18,579 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:18,581 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:18,795 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:03:18,795 [main:95] - GENERATED = println("fukps")
2021-03-11 11:03:18,795 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("fukps")}
2021-03-11 11:03:18,795 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:18,800 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:03:18,901 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:03:18,902 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:03:18,910 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:18,919 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:18,920 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:18,921 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:18,922 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:18,923 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:18,924 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:18,925 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:18,929 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:18,930 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:18,931 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:18,932 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:18,933 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:18,934 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:18,934 [main:63] - replacement of c of type Function0<Unit> is { println("fukps")}
2021-03-11 11:03:19,034 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:19,034 [main:66] - Compilation checking started
2021-03-11 11:03:19,291 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("fukps")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:19,300 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:19,300 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:19,300 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:19,402 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:19,404 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:19,510 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:19,512 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:19,727 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:03:19,728 [main:95] - GENERATED = println("vwyoo")
2021-03-11 11:03:19,728 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("vwyoo")}
2021-03-11 11:03:19,728 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:20,620 [main:55] - randomType = HashSet<Function2<Checker?, LinkedHashSet<Checker>, Function2<Checker?, ShouldBeDisabled, HashSet<Double>>>>
2021-03-11 11:03:20,723 [main:302] - generating value of type = HashSet<Function2<Checker?, LinkedHashSet<Checker>, Function2<Checker?, ShouldBeDisabled, HashSet<Double>>>> false depth = 0
2021-03-11 11:03:20,834 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Function2<Checker?, LinkedHashSet<Checker>, Function2<Checker?, ShouldBeDisabled, HashSet<Double>>>): HashSet<Function2<Checker?, LkedHashSet<Checker>, Function2<Checker?, ShouldBeDisabled, HashSet<Double>>>> = TODO()
2021-03-11 11:03:20,836 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Function2<Checker?, LinkedHashSet<Checker>, Function2<Checker?, ShouldBeDisabled, HashSet<Double>>>): HashSet<Function2<Checker?, LkedHashSet<Checker>, Function2<Checker?, ShouldBeDisabled, HashSet<Double>>>> = TODO()
2021-03-11 11:03:20,943 [main:302] - generating value of type = Function2<Checker?, LinkedHashSet<Checker>, Function2<Checker?, ShouldBeDisabled, HashSet<Double>>> false depth = 3
2021-03-11 11:03:20,944 [main:302] - generating value of type = Function2<Checker?, ShouldBeDisabled, HashSet<Double>> false depth = 4
2021-03-11 11:03:20,946 [main:302] - generating value of type = HashSet<Double> false depth = 5
2021-03-11 11:03:21,053 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Double> = TODO()
2021-03-11 11:03:21,055 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Double> = TODO()
2021-03-11 11:03:21,160 [main:95] - GENERATED = hashSetOf<Double>()
2021-03-11 11:03:21,161 [main:95] - GENERATED = linkedSetOf<Function2<Checker?, LinkedHashSet<Checker>, Function2<Checker?, ShouldBeDisabled, HashSet<Double>>>>({a: Checker?, b: LinkedHashSet<Checker> -> {a: Checker?, b: ShouldBeDisabled -> hashSetOf<Double>()}})
2021-03-11 11:03:21,424 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:21,435 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:21,436 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:21,438 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:21,440 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:21,441 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:21,442 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:21,443 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:21,448 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:21,449 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:21,450 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:21,451 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:21,453 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:21,454 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:21,454 [main:63] - replacement of c of type Function0<Unit> is { println("vwyoo")}
2021-03-11 11:03:21,571 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:21,571 [main:66] - Compilation checking started
2021-03-11 11:03:21,845 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("vwyoo")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:21,854 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:21,854 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:21,854 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:21,959 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:21,960 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:22,070 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:22,072 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:22,301 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:22,302 [main:95] - GENERATED = require(false)
2021-03-11 11:03:22,302 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:03:22,302 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:22,530 [main:55] - randomType = UShort?
2021-03-11 11:03:22,646 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:03:22,703 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:22,720 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:22,721 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:22,722 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:22,728 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:22,730 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:22,731 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:22,732 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:22,734 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:22,735 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:22,736 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:22,738 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:22,740 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:22,742 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:22,742 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:03:22,867 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:22,867 [main:66] - Compilation checking started
2021-03-11 11:03:23,160 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:23,169 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:23,170 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:23,170 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:23,270 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:23,272 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:23,375 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:23,377 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:23,604 [main:95] - GENERATED = println(null)
2021-03-11 11:03:23,604 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println(null)}
2021-03-11 11:03:23,604 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:23,610 [main:55] - randomType = Checker
2021-03-11 11:03:23,611 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:23,622 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:23,623 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:23,624 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:23,628 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:23,629 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:23,630 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:23,631 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:23,632 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:23,633 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:23,634 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:23,635 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:23,636 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:23,637 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:23,638 [main:63] - replacement of c of type Function0<Unit> is { println(null)}
2021-03-11 11:03:23,739 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:23,740 [main:66] - Compilation checking started
2021-03-11 11:03:24,018 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println(null)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:24,027 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:24,027 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:24,027 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:24,142 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:24,143 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:24,148 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:03:24,148 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:24,154 [main:55] - randomType = Checker
2021-03-11 11:03:24,155 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,168 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,169 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,170 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,171 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,171 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:24,177 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,178 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,179 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,180 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:24,181 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,182 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,183 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,185 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,185 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:03:24,292 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:24,292 [main:66] - Compilation checking started
2021-03-11 11:03:24,564 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:24,573 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:24,573 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:24,573 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:24,677 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:24,678 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:24,683 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:03:24,683 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:24,801 [main:55] - randomType = Set<UByte>
2021-03-11 11:03:24,802 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,814 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,815 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,816 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,818 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:24,825 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,825 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:24,826 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,827 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,828 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,829 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,830 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,831 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,832 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:24,832 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:03:24,936 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:24,936 [main:66] - Compilation checking started
2021-03-11 11:03:25,207 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:25,216 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:25,216 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:25,216 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:25,319 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:25,320 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:25,424 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:25,426 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:25,756 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:25,758 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:25,759 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:25,759 [main:95] - GENERATED = require(false, { "zmlzm"})
2021-03-11 11:03:25,759 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "zmlzm"})}
2021-03-11 11:03:25,759 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:26,111 [main:55] - randomType = Pair<Short, ULong>
2021-03-11 11:03:26,281 [main:302] - generating value of type = Pair<Short, ULong> false depth = 0
2021-03-11 11:03:26,394 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Short, second: ULong): Pair<Short, ULong> = TODO()
2021-03-11 11:03:26,396 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Short, second: ULong): Pair<Short, ULong> = TODO()
2021-03-11 11:03:26,524 [main:302] - generating value of type = Short true depth = 3
2021-03-11 11:03:26,525 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 11:03:26,527 [main:95] - GENERATED = Pair<Short, ULong>(17383, 6060286439802259174.toULong())
2021-03-11 11:03:26,544 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:26,559 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:26,560 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:26,561 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:26,562 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:26,569 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:26,570 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:26,571 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:26,572 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:26,574 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:26,575 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:26,576 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:26,576 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:26,577 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:26,577 [main:63] - replacement of c of type Function0<Unit> is { require(false, { "zmlzm"})}
2021-03-11 11:03:26,685 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:26,686 [main:66] - Compilation checking started
2021-03-11 11:03:26,971 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false, { "zmlzm"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:26,980 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:26,980 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:26,980 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:27,092 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:27,094 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:27,199 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:27,201 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:27,527 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:27,528 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:27,529 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:27,530 [main:95] - GENERATED = check(false, { "fhnlv"})
2021-03-11 11:03:27,530 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "fhnlv"})}
2021-03-11 11:03:27,530 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:27,533 [main:55] - randomType = Boolean
2021-03-11 11:03:27,634 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:03:27,649 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:27,660 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:27,661 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:27,662 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:27,667 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:27,668 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:27,669 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:27,670 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:27,671 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:27,672 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:27,673 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:27,674 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:27,675 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:27,676 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:27,676 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "fhnlv"})}
2021-03-11 11:03:27,777 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:27,777 [main:66] - Compilation checking started
2021-03-11 11:03:28,036 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "fhnlv"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:28,044 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:28,044 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:28,045 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:28,143 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:28,145 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:28,150 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:03:28,150 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:28,153 [main:55] - randomType = Boolean
2021-03-11 11:03:28,254 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:03:28,265 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:28,277 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:28,278 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:28,279 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:28,285 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:28,286 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:28,287 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:28,288 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:28,289 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:28,290 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:28,291 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:28,292 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:28,293 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:28,294 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:28,294 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:03:28,395 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:28,395 [main:66] - Compilation checking started
2021-03-11 11:03:28,654 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:28,663 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:28,663 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:28,663 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:28,763 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:28,764 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:28,871 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:28,873 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:29,089 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:29,091 [main:95] - GENERATED = check(false)
2021-03-11 11:03:29,091 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 11:03:29,091 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:29,093 [main:55] - randomType = UByte
2021-03-11 11:03:29,198 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:03:29,239 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:29,245 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:29,258 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:29,259 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:29,260 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:29,261 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:29,262 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:29,263 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:29,264 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:29,265 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:29,266 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:29,267 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:29,268 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:29,269 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:29,269 [main:63] - replacement of c of type Function0<Unit> is { check(false)}
2021-03-11 11:03:29,371 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:29,371 [main:66] - Compilation checking started
2021-03-11 11:03:29,625 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:29,633 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:29,633 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:29,633 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:29,737 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:29,739 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:29,842 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:29,844 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:30,176 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:03:30,177 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:03:30,178 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:03:30,288 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:30,290 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:30,507 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:03:30,508 [main:95] - GENERATED = require(true)
2021-03-11 11:03:30,508 [main:95] - GENERATED = repeat(-1733221586, {a: Int -> require(true)})
2021-03-11 11:03:30,508 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-1733221586, {a: Int -> require(true)})}
2021-03-11 11:03:30,509 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:30,623 [main:55] - randomType = ShouldBeEnabled?
2021-03-11 11:03:30,724 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:03:30,725 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:03:30,736 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:30,746 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:30,747 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:30,748 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:30,749 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:30,750 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:30,751 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:30,758 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:30,759 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:30,760 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:30,761 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:30,762 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:30,763 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:30,764 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:30,764 [main:63] - replacement of c of type Function0<Unit> is { repeat(-1733221586, {a: Int -> require(true)})}
2021-03-11 11:03:30,865 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:30,866 [main:66] - Compilation checking started
2021-03-11 11:03:31,131 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-1733221586, {a: Int -> require(true)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:31,141 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:31,141 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:31,141 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:31,243 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:31,244 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:31,249 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:03:31,249 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:31,364 [main:55] - randomType = Array<ShouldBeEnabled>
2021-03-11 11:03:31,464 [main:302] - generating value of type = Array<ShouldBeEnabled> false depth = 0
2021-03-11 11:03:31,569 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<ShouldBeEnabled> = TODO()
2021-03-11 11:03:31,571 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<ShouldBeEnabled> = TODO()
2021-03-11 11:03:31,673 [main:95] - GENERATED = emptyArray<ShouldBeEnabled>()
2021-03-11 11:03:31,686 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:31,691 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:31,700 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:31,701 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:31,702 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:31,703 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:31,704 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:31,706 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:31,707 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:31,709 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:31,710 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:31,711 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:31,712 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:31,712 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:31,712 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:03:31,812 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:31,812 [main:66] - Compilation checking started
2021-03-11 11:03:32,081 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:32,089 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:32,089 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:32,089 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:32,194 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:32,196 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:32,302 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:32,304 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:32,692 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:32,693 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:32,694 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:32,695 [main:95] - GENERATED = require(true, { "ezius"})
2021-03-11 11:03:32,695 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "ezius"})}
2021-03-11 11:03:32,695 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:33,485 [main:55] - randomType = Set<HashMap<Short, Pair<ULong, Boolean>>>?
2021-03-11 11:03:33,486 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:33,495 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:33,501 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:33,502 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:33,503 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:33,504 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:33,505 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:33,506 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:33,507 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:33,508 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:33,509 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:33,509 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:33,510 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:33,511 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:33,511 [main:63] - replacement of c of type Function0<Unit> is { require(true, { "ezius"})}
2021-03-11 11:03:33,608 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:33,609 [main:66] - Compilation checking started
2021-03-11 11:03:33,867 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true, { "ezius"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:33,878 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:33,878 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:33,878 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:33,975 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:33,976 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:34,079 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:34,081 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:34,295 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:34,296 [main:95] - GENERATED = check(true)
2021-03-11 11:03:34,296 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 11:03:34,296 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:34,519 [main:55] - randomType = ULong?
2021-03-11 11:03:34,621 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:03:34,665 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:34,671 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:34,682 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:34,683 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:34,684 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:34,685 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:34,686 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:34,687 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:34,689 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:34,690 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:34,690 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:34,691 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:34,692 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:34,693 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:34,693 [main:63] - replacement of c of type Function0<Unit> is { check(true)}
2021-03-11 11:03:34,795 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:34,795 [main:66] - Compilation checking started
2021-03-11 11:03:35,055 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:35,063 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:35,063 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:35,063 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:35,164 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:35,166 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:35,270 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:35,272 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:35,486 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:03:35,486 [main:95] - GENERATED = println("itzva")
2021-03-11 11:03:35,486 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("itzva")}
2021-03-11 11:03:35,486 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:35,595 [main:55] - randomType = Boolean?
2021-03-11 11:03:35,692 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:03:35,708 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:35,716 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:35,717 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:35,718 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:35,719 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:35,720 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:35,724 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:35,725 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:35,726 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:35,727 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:35,728 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:35,729 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:35,730 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:35,731 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:35,731 [main:63] - replacement of c of type Function0<Unit> is { println("itzva")}
2021-03-11 11:03:35,828 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:35,828 [main:66] - Compilation checking started
2021-03-11 11:03:36,088 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("itzva")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:36,096 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:36,096 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:36,096 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:36,197 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:36,199 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:36,303 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:36,305 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:36,626 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:36,627 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:36,628 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:36,629 [main:95] - GENERATED = check(false, { "gqgsh"})
2021-03-11 11:03:36,629 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "gqgsh"})}
2021-03-11 11:03:36,629 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:36,862 [main:55] - randomType = HashMap<ShouldBeEnabled?, ShouldBeEnabled>
2021-03-11 11:03:36,960 [main:302] - generating value of type = HashMap<ShouldBeEnabled?, ShouldBeEnabled> false depth = 0
2021-03-11 11:03:37,063 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<ShouldBeEnabled?, ShouldBeEnabled> = TODO()
2021-03-11 11:03:37,065 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<ShouldBeEnabled?, ShouldBeEnabled> = TODO()
2021-03-11 11:03:37,167 [main:95] - GENERATED = hashMapOf<ShouldBeEnabled?, ShouldBeEnabled>()
2021-03-11 11:03:37,284 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:37,293 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:37,297 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:37,298 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:37,300 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:37,302 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:37,303 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:37,305 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:37,306 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:37,307 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:37,308 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:37,309 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:37,310 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:37,311 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:37,311 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "gqgsh"})}
2021-03-11 11:03:37,409 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:37,409 [main:66] - Compilation checking started
2021-03-11 11:03:37,672 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "gqgsh"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:37,680 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:37,680 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:37,680 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:37,778 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:37,779 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:37,883 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:37,885 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:38,100 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:03:38,100 [main:95] - GENERATED = println("shtzh")
2021-03-11 11:03:38,100 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("shtzh")}
2021-03-11 11:03:38,100 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:38,328 [main:55] - randomType = MutableMap<Long?, Char>
2021-03-11 11:03:38,329 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:38,335 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:38,346 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:38,347 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:38,348 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:38,350 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:38,351 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:38,352 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:38,353 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:38,354 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:38,355 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:38,356 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:38,357 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:38,359 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:38,359 [main:63] - replacement of c of type Function0<Unit> is { println("shtzh")}
2021-03-11 11:03:38,459 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:38,460 [main:66] - Compilation checking started
2021-03-11 11:03:38,785 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("shtzh")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:38,793 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:38,793 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:38,793 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:38,892 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:38,894 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:38,996 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:38,998 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:39,208 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:03:39,208 [main:95] - GENERATED = print("jceln")
2021-03-11 11:03:39,208 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("jceln")}
2021-03-11 11:03:39,209 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:39,214 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:03:39,317 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:03:39,318 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:03:39,328 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:39,340 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:39,341 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:39,342 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:39,343 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:39,344 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:39,345 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:39,346 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:39,347 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:39,347 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:39,348 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:39,350 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:39,355 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:39,356 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:39,356 [main:63] - replacement of c of type Function0<Unit> is { print("jceln")}
2021-03-11 11:03:39,457 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:39,458 [main:66] - Compilation checking started
2021-03-11 11:03:39,716 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("jceln")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:39,724 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:39,724 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:39,724 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:39,845 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:39,846 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:39,948 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:39,951 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:40,276 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:40,277 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:40,278 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:40,278 [main:95] - GENERATED = check(false, { "akjqy"})
2021-03-11 11:03:40,279 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "akjqy"})}
2021-03-11 11:03:40,279 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:40,282 [main:55] - randomType = Char
2021-03-11 11:03:40,381 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:03:40,406 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:40,417 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:40,418 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:40,419 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:40,424 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:40,424 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:40,425 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:40,426 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:40,427 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:40,428 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:40,429 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:40,430 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:40,431 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:40,432 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:40,432 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "akjqy"})}
2021-03-11 11:03:40,529 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:40,530 [main:66] - Compilation checking started
2021-03-11 11:03:40,804 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "akjqy"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:40,816 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:40,817 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:40,817 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:40,928 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:40,929 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:41,036 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:41,038 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:41,254 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:03:41,255 [main:95] - GENERATED = print("yhpbi")
2021-03-11 11:03:41,255 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("yhpbi")}
2021-03-11 11:03:41,255 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:41,258 [main:55] - randomType = Float
2021-03-11 11:03:41,356 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:03:41,394 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:41,403 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:41,406 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:41,407 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:41,408 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:41,409 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:41,410 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:41,411 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:41,412 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:41,413 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:41,413 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:41,414 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:41,416 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:41,417 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:41,417 [main:63] - replacement of c of type Function0<Unit> is { print("yhpbi")}
2021-03-11 11:03:41,517 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:41,517 [main:66] - Compilation checking started
2021-03-11 11:03:41,779 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("yhpbi")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:41,787 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:41,787 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:41,787 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:41,886 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:41,888 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:41,995 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:41,997 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:42,219 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:03:42,220 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:03:42,328 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:42,330 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:42,663 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:03:42,664 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:03:42,666 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:03:42,666 [main:95] - GENERATED = check(false, { "xndpt"})
2021-03-11 11:03:42,666 [main:95] - GENERATED = contract({ check(false, { "xndpt"})})
2021-03-11 11:03:42,666 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(false, { "xndpt"})})}
2021-03-11 11:03:42,667 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:42,673 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:03:42,775 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:03:42,776 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:03:42,785 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:42,798 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:42,802 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:42,803 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:42,804 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:42,805 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:42,806 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:42,807 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:42,808 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:42,808 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:42,809 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:42,810 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:42,811 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:42,812 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:42,812 [main:63] - replacement of c of type Function0<Unit> is { contract({ check(false, { "xndpt"})})}
2021-03-11 11:03:42,918 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:42,918 [main:66] - Compilation checking started
2021-03-11 11:03:43,184 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ check(false, { "xndpt"})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:43,192 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:43,192 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:43,192 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:43,290 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:43,292 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:43,395 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:43,397 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:43,609 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:03:43,611 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:03:43,716 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:43,718 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:43,928 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:03:43,929 [main:95] - GENERATED = check(true)
2021-03-11 11:03:43,929 [main:95] - GENERATED = contract({ check(true)})
2021-03-11 11:03:43,929 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(true)})}
2021-03-11 11:03:43,929 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:44,041 [main:55] - randomType = Short
2021-03-11 11:03:44,143 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:03:44,189 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,199 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:44,204 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,205 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,206 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,207 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,208 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,209 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,209 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,210 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:44,211 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,212 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,213 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,214 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,214 [main:63] - replacement of c of type Function0<Unit> is { contract({ check(true)})}
2021-03-11 11:03:44,317 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:44,317 [main:66] - Compilation checking started
2021-03-11 11:03:44,579 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ check(true)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:44,588 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:44,589 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:44,589 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:44,689 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:44,690 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:44,695 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:03:44,695 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:44,698 [main:55] - randomType = Char
2021-03-11 11:03:44,800 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:03:44,825 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,837 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,838 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,839 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,840 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,841 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,842 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:44,849 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,850 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,852 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,854 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:44,856 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,857 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,859 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:44,859 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:03:44,961 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:44,961 [main:66] - Compilation checking started
2021-03-11 11:03:45,287 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:45,301 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:45,301 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:45,301 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:45,408 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:45,409 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:45,518 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:45,521 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:45,738 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:03:45,738 [main:95] - GENERATED = print("tnpmg")
2021-03-11 11:03:45,738 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("tnpmg")}
2021-03-11 11:03:45,738 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:45,847 [main:55] - randomType = UShort
2021-03-11 11:03:45,947 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:03:45,981 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:45,993 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:45,994 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:45,998 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:45,999 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:46,000 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:46,000 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:46,001 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:46,002 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:46,003 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:46,004 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:46,005 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:46,006 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:46,007 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:46,007 [main:63] - replacement of c of type Function0<Unit> is { print("tnpmg")}
2021-03-11 11:03:46,113 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:46,113 [main:66] - Compilation checking started
2021-03-11 11:03:46,370 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("tnpmg")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:46,378 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:46,378 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:46,378 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:46,479 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:46,480 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:46,586 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:46,589 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:46,808 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:46,809 [main:95] - GENERATED = require(true)
2021-03-11 11:03:46,809 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:03:46,809 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:46,924 [main:55] - randomType = UShort
2021-03-11 11:03:47,025 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:03:47,066 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,078 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,079 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,080 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,081 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,082 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,083 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,084 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:47,090 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,091 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:47,092 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,093 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,094 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,095 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,095 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:03:47,193 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:47,193 [main:66] - Compilation checking started
2021-03-11 11:03:47,450 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:47,458 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:47,458 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:47,458 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:47,558 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:47,560 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:47,663 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:47,666 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:47,876 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:03:47,877 [main:95] - GENERATED = println("effbz")
2021-03-11 11:03:47,877 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("effbz")}
2021-03-11 11:03:47,877 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:47,883 [main:55] - randomType = Checker
2021-03-11 11:03:47,884 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:47,888 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,898 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,900 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,901 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,901 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,902 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,904 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,905 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,906 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:47,907 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,908 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,909 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,910 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:47,910 [main:63] - replacement of c of type Function0<Unit> is { println("effbz")}
2021-03-11 11:03:48,010 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:48,010 [main:66] - Compilation checking started
2021-03-11 11:03:48,277 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("effbz")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:48,285 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:48,285 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:48,285 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:48,390 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:48,391 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:48,494 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:48,496 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:48,710 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:03:48,710 [main:95] - GENERATED = print("fzfqv")
2021-03-11 11:03:48,710 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("fzfqv")}
2021-03-11 11:03:48,710 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:48,713 [main:55] - randomType = Char
2021-03-11 11:03:48,812 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:03:48,847 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:48,860 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:48,861 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:48,862 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:48,863 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:48,864 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:48,871 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:48,872 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:48,873 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:48,874 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:48,875 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:48,876 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:48,876 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:48,877 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:48,877 [main:63] - replacement of c of type Function0<Unit> is { print("fzfqv")}
2021-03-11 11:03:48,976 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:48,976 [main:66] - Compilation checking started
2021-03-11 11:03:49,247 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("fzfqv")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:49,255 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:49,255 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:49,255 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:49,360 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:49,361 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:49,468 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:49,471 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:49,795 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:49,797 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:49,798 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:49,798 [main:95] - GENERATED = check(true, { "xctad"})
2021-03-11 11:03:49,798 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "xctad"})}
2021-03-11 11:03:49,798 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:50,024 [main:55] - randomType = HashSet<ArrayDeque<ShouldBeEnabled>>
2021-03-11 11:03:50,125 [main:302] - generating value of type = HashSet<ArrayDeque<ShouldBeEnabled>> false depth = 0
2021-03-11 11:03:50,234 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<ArrayDeque<ShouldBeEnabled>> = TODO()
2021-03-11 11:03:50,237 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<ArrayDeque<ShouldBeEnabled>> = TODO()
2021-03-11 11:03:50,342 [main:95] - GENERATED = linkedSetOf<ArrayDeque<ShouldBeEnabled>>()
2021-03-11 11:03:50,492 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:50,506 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:50,507 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:50,508 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:50,509 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:50,510 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:50,510 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:50,511 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:50,512 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:50,513 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:50,514 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:50,515 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:50,519 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:50,520 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:50,520 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "xctad"})}
2021-03-11 11:03:50,622 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:50,622 [main:66] - Compilation checking started
2021-03-11 11:03:50,881 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "xctad"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:50,889 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:50,889 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:50,889 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:50,990 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:50,991 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:51,095 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:51,097 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:03:51,380 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:51,382 [main:95] - GENERATED = require(true)
2021-03-11 11:03:51,382 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:03:51,382 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:51,726 [main:55] - randomType = Triple<Long, Checker?, Short>
2021-03-11 11:03:51,843 [main:302] - generating value of type = Triple<Long, Checker?, Short> false depth = 0
2021-03-11 11:03:51,947 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Long, second: Checker?, third: Short): Triple<Long, Checker?, Short> = TODO()
2021-03-11 11:03:51,950 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Long, second: Checker?, third: Short): Triple<Long, Checker?, Short> = TODO()
2021-03-11 11:03:52,056 [main:302] - generating value of type = Long true depth = 3
2021-03-11 11:03:52,057 [main:302] - generating value of type = Checker false depth = 3
2021-03-11 11:03:52,059 [main:112] - generating klass Checker text = interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}
2021-03-11 11:03:52,281 [main:302] - generating value of type = ShouldBeEnabled false depth = 5
2021-03-11 11:03:52,283 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:03:52,283 [main:302] - generating value of type = Short true depth = 3
2021-03-11 11:03:52,284 [main:95] - GENERATED = Triple<Long, Checker?, Short>(4144861328386306686, ShouldBeEnabled(), -18386)
2021-03-11 11:03:52,302 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,314 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,315 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,316 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,317 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,317 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,318 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,319 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,320 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:52,325 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,326 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,327 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,327 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:52,328 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,328 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:03:52,430 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:52,430 [main:66] - Compilation checking started
2021-03-11 11:03:52,691 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:52,699 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:52,699 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:52,699 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:52,801 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:52,802 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:52,807 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:03:52,807 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:52,809 [main:55] - randomType = Float
2021-03-11 11:03:52,912 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:03:52,954 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,963 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:52,968 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,969 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,971 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,972 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:52,973 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,974 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,975 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,976 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,977 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,978 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,978 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,979 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:52,979 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:03:53,079 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:53,079 [main:66] - Compilation checking started
2021-03-11 11:03:53,338 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:53,346 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:53,346 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:53,346 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:53,448 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:53,450 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:53,553 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:53,556 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:53,773 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:03:53,774 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:03:53,878 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:53,881 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:03:54,095 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 11:03:54,097 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:03:54,102 [main:95] - GENERATED = contract({ println()})
2021-03-11 11:03:54,102 [main:95] - GENERATED = contract({ contract({ println()})})
2021-03-11 11:03:54,102 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ contract({ println()})})}
2021-03-11 11:03:54,102 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:54,107 [main:55] - randomType = Checker
2021-03-11 11:03:54,108 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:54,113 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:54,114 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,124 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,125 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,126 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,127 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,128 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,129 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,130 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,131 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,132 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,133 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,134 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,134 [main:63] - replacement of c of type Function0<Unit> is { contract({ contract({ println()})})}
2021-03-11 11:03:54,233 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:54,234 [main:66] - Compilation checking started
2021-03-11 11:03:54,496 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ contract({ println()})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:54,504 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:54,505 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:54,505 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:54,605 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:54,606 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:54,610 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:03:54,611 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:54,730 [main:55] - randomType = Double?
2021-03-11 11:03:54,831 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:03:54,871 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,881 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,882 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,883 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,884 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,885 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,886 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,887 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,888 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:54,894 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,895 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,896 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,896 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:54,897 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:54,898 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:03:54,996 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:54,996 [main:66] - Compilation checking started
2021-03-11 11:03:55,252 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:55,260 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:55,260 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:55,260 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:55,360 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:55,362 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:55,466 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:55,468 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:55,790 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:55,791 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:55,792 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:55,792 [main:95] - GENERATED = require(true, { "qgtsa"})
2021-03-11 11:03:55,792 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "qgtsa"})}
2021-03-11 11:03:55,793 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:56,016 [main:55] - randomType = Set<ShouldBeEnabled?>
2021-03-11 11:03:56,018 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,027 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,028 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,029 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,030 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,032 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,033 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,034 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:56,040 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,041 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,042 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,043 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,044 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:56,044 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,045 [main:63] - replacement of c of type Function0<Unit> is { require(true, { "qgtsa"})}
2021-03-11 11:03:56,143 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:56,143 [main:66] - Compilation checking started
2021-03-11 11:03:56,416 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true, { "qgtsa"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:56,424 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:56,424 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:56,424 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:56,528 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:56,529 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:56,636 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:56,638 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:56,847 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:03:56,848 [main:95] - GENERATED = print("ufaqo")
2021-03-11 11:03:56,848 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("ufaqo")}
2021-03-11 11:03:56,848 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:56,853 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:03:56,953 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:03:56,955 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:03:56,963 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:56,968 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,978 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:56,979 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,980 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,981 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,982 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,983 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,985 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,987 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,988 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,989 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,990 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,991 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:56,991 [main:63] - replacement of c of type Function0<Unit> is { print("ufaqo")}
2021-03-11 11:03:57,091 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:57,092 [main:66] - Compilation checking started
2021-03-11 11:03:57,349 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("ufaqo")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:57,358 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:57,358 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:57,358 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:57,460 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:57,461 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:57,566 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:57,568 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:03:57,843 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:03:57,843 [main:95] - GENERATED = print("xuipp")
2021-03-11 11:03:57,843 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("xuipp")}
2021-03-11 11:03:57,843 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:57,846 [main:55] - randomType = Char
2021-03-11 11:03:57,946 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:03:57,971 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:57,981 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:57,987 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:57,988 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:57,989 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:57,990 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:57,991 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:57,992 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:57,993 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:57,994 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:57,995 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:57,996 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:57,997 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:57,997 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:57,998 [main:63] - replacement of c of type Function0<Unit> is { print("xuipp")}
2021-03-11 11:03:58,096 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:58,096 [main:66] - Compilation checking started
2021-03-11 11:03:58,355 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("xuipp")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:58,363 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:58,363 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:58,363 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:58,464 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:58,465 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:58,569 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:58,571 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:58,894 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:58,896 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:58,897 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:58,897 [main:95] - GENERATED = check(false, { "ykjxh"})
2021-03-11 11:03:58,897 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "ykjxh"})}
2021-03-11 11:03:58,897 [main:49] - GENERATED IS CALL =false
2021-03-11 11:03:58,901 [main:55] - randomType = String
2021-03-11 11:03:59,003 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:03:59,024 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:59,028 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:59,041 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:59,043 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:59,044 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:59,045 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:59,046 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:59,046 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:59,047 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:03:59,048 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:59,049 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:59,050 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:59,051 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:59,052 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:03:59,052 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "ykjxh"})}
2021-03-11 11:03:59,155 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:03:59,155 [main:66] - Compilation checking started
2021-03-11 11:03:59,423 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "ykjxh"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:03:59,431 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:03:59,431 [main:38] - replacing c Function0<Unit>
2021-03-11 11:03:59,431 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:03:59,530 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:03:59,532 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:03:59,634 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:59,636 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:03:59,960 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:03:59,962 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:03:59,963 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:03:59,963 [main:95] - GENERATED = check(true, { "vqbik"})
2021-03-11 11:03:59,963 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "vqbik"})}
2021-03-11 11:03:59,963 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:00,075 [main:55] - randomType = UInt
2021-03-11 11:04:00,177 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:04:00,217 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:00,226 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:00,227 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:00,228 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:00,229 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:00,237 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:00,238 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:00,239 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:00,240 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:00,241 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:00,242 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:00,243 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:00,243 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:00,244 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:00,244 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "vqbik"})}
2021-03-11 11:04:00,343 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:00,343 [main:66] - Compilation checking started
2021-03-11 11:04:00,603 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "vqbik"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:00,611 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:00,611 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:00,611 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:00,714 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:00,715 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:00,820 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:00,822 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:01,037 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:04:01,038 [main:95] - GENERATED = print("tlors")
2021-03-11 11:04:01,038 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("tlors")}
2021-03-11 11:04:01,038 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:01,150 [main:55] - randomType = UShort
2021-03-11 11:04:01,252 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:04:01,287 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:01,297 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:01,299 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:01,300 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:01,301 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:01,302 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:01,303 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:01,304 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:01,305 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:01,306 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:01,307 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:01,312 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:01,313 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:01,314 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:01,314 [main:63] - replacement of c of type Function0<Unit> is { print("tlors")}
2021-03-11 11:04:01,413 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:01,413 [main:66] - Compilation checking started
2021-03-11 11:04:01,672 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("tlors")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:01,680 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:01,680 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:01,680 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:01,780 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:01,782 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:01,888 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:01,890 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:02,103 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:02,105 [main:95] - GENERATED = check(false)
2021-03-11 11:04:02,105 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 11:04:02,105 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:02,331 [main:55] - randomType = Map<Boolean, ULong>
2021-03-11 11:04:02,333 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:02,337 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:02,346 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:02,347 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:02,348 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:02,349 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:02,350 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:02,351 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:02,352 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:02,353 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:02,354 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:02,355 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:02,356 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:02,357 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:02,357 [main:63] - replacement of c of type Function0<Unit> is { check(false)}
2021-03-11 11:04:02,457 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:02,457 [main:66] - Compilation checking started
2021-03-11 11:04:02,719 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:02,727 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:02,727 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:02,727 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:02,827 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:02,829 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:02,935 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:02,937 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:03,261 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:03,262 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:04:03,263 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:04:03,264 [main:95] - GENERATED = check(false, { "yongo"})
2021-03-11 11:04:03,264 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "yongo"})}
2021-03-11 11:04:03,264 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:03,489 [main:55] - randomType = LinkedHashMap<Checker, UShort>
2021-03-11 11:04:03,589 [main:302] - generating value of type = LinkedHashMap<Checker, UShort> false depth = 0
2021-03-11 11:04:03,698 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Checker, UShort> = TODO()
2021-03-11 11:04:03,700 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Checker, UShort> = TODO()
2021-03-11 11:04:03,806 [main:95] - GENERATED = linkedMapOf<Checker, UShort>()
2021-03-11 11:04:04,016 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,026 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,027 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,027 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,028 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,029 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,030 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,032 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:04,037 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,039 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:04,039 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,040 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,041 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,042 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,042 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "yongo"})}
2021-03-11 11:04:04,143 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:04,143 [main:66] - Compilation checking started
2021-03-11 11:04:04,404 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "yongo"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:04,412 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:04,412 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:04,412 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:04,514 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:04,515 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:04,618 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:04,620 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:04,834 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:04,836 [main:95] - GENERATED = require(true)
2021-03-11 11:04:04,836 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:04:04,836 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:04,841 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:04:04,944 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:04:04,946 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:04:04,958 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,971 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,972 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:04,977 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,978 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,979 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,980 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,982 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,983 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,984 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:04,985 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,987 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,988 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,990 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:04,990 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:04:05,123 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:05,123 [main:66] - Compilation checking started
2021-03-11 11:04:05,401 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:05,410 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:05,410 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:05,410 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:05,516 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:05,517 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:05,522 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:04:05,522 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:05,639 [main:55] - randomType = ShouldBeDisabled?
2021-03-11 11:04:05,742 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:04:05,743 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:04:05,755 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:05,769 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:05,770 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:05,771 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:05,772 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:05,773 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:05,774 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:05,775 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:05,776 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:05,780 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:05,782 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:05,784 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:05,785 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:05,787 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:05,787 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:04:05,890 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:05,890 [main:66] - Compilation checking started
2021-03-11 11:04:06,152 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:06,161 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:06,161 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:06,161 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:06,263 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:06,264 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:06,269 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:04:06,269 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:06,378 [main:55] - randomType = UInt
2021-03-11 11:04:06,480 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:04:06,516 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:06,526 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:06,527 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:06,528 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:06,529 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:06,530 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:06,535 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:06,536 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:06,537 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:06,538 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:06,539 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:06,540 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:06,541 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:06,542 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:06,542 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:04:06,640 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:06,640 [main:66] - Compilation checking started
2021-03-11 11:04:06,903 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:06,912 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:06,912 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:06,912 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:07,015 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:07,016 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:07,131 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:07,135 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:07,491 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:04:07,493 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:04:07,494 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:04:07,499 [main:95] - GENERATED = repeat(-901466470, {a: Int -> println()})
2021-03-11 11:04:07,499 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-901466470, {a: Int -> println()})}
2021-03-11 11:04:07,499 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:07,955 [main:55] - randomType = MutableMap<UByte, Function1<ULong?, Int>>
2021-03-11 11:04:07,956 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:07,970 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:07,971 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:07,976 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:07,977 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:07,977 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:07,978 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:07,979 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:07,980 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:07,982 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:07,983 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:07,984 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:07,985 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:07,986 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:07,986 [main:63] - replacement of c of type Function0<Unit> is { repeat(-901466470, {a: Int -> println()})}
2021-03-11 11:04:08,089 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:08,089 [main:66] - Compilation checking started
2021-03-11 11:04:08,349 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-901466470, {a: Int -> println()})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:08,358 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:08,358 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:08,358 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:08,460 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:08,461 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:08,567 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:08,570 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:08,810 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:04:08,810 [main:95] - GENERATED = print("mlgks")
2021-03-11 11:04:08,810 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("mlgks")}
2021-03-11 11:04:08,811 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:09,176 [main:55] - randomType = LinkedHashMap<Checker, Array<ShouldBeEnabled?>>
2021-03-11 11:04:09,284 [main:302] - generating value of type = LinkedHashMap<Checker, Array<ShouldBeEnabled?>> false depth = 0
2021-03-11 11:04:09,402 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Checker, Array<ShouldBeEnabled?>> = TODO()
2021-03-11 11:04:09,404 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Checker, Array<ShouldBeEnabled?>> = TODO()
2021-03-11 11:04:09,518 [main:95] - GENERATED = linkedMapOf<Checker, Array<ShouldBeEnabled?>>()
2021-03-11 11:04:09,709 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:09,723 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:09,724 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:09,725 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:09,726 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:09,732 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:09,733 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:09,734 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:09,736 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:09,737 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:09,738 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:09,739 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:09,740 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:09,741 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:09,741 [main:63] - replacement of c of type Function0<Unit> is { print("mlgks")}
2021-03-11 11:04:09,844 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:09,845 [main:66] - Compilation checking started
2021-03-11 11:04:10,126 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("mlgks")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:10,135 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:10,135 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:10,135 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:10,240 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:10,241 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:10,356 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:10,359 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:10,668 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:10,669 [main:95] - GENERATED = require(false)
2021-03-11 11:04:10,669 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:04:10,669 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:10,672 [main:55] - randomType = String
2021-03-11 11:04:10,776 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:04:10,804 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:10,814 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:10,815 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:10,816 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:10,817 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:10,818 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:10,819 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:10,820 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:10,821 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:10,826 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:10,827 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:10,828 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:10,829 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:10,830 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:10,830 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:04:10,936 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:10,937 [main:66] - Compilation checking started
2021-03-11 11:04:11,201 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:11,209 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:11,209 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:11,209 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:11,310 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:11,311 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:11,416 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:11,418 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:11,745 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:11,747 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:04:11,748 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:04:11,749 [main:95] - GENERATED = check(true, { "fdqfy"})
2021-03-11 11:04:11,749 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "fdqfy"})}
2021-03-11 11:04:11,749 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:11,752 [main:55] - randomType = Long
2021-03-11 11:04:11,853 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:04:11,891 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:11,903 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:11,908 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:11,909 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:11,909 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:11,910 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:11,911 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:11,912 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:11,913 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:11,914 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:11,915 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:11,916 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:11,917 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:11,918 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:11,918 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "fdqfy"})}
2021-03-11 11:04:12,018 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:12,018 [main:66] - Compilation checking started
2021-03-11 11:04:12,279 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "fdqfy"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:12,288 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:12,288 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:12,288 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:12,390 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:12,392 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:12,497 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:12,500 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:12,716 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:12,718 [main:95] - GENERATED = check(true)
2021-03-11 11:04:12,718 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 11:04:12,718 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:12,834 [main:55] - randomType = LinkedHashSet<ShouldBeEnabled>
2021-03-11 11:04:12,936 [main:302] - generating value of type = LinkedHashSet<ShouldBeEnabled> false depth = 0
2021-03-11 11:04:13,062 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<ShouldBeEnabled> = TODO()
2021-03-11 11:04:13,065 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<ShouldBeEnabled> = TODO()
2021-03-11 11:04:13,293 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:04:13,294 [main:95] - GENERATED = LinkedHashSet<ShouldBeEnabled>(-1163765942)
2021-03-11 11:04:13,434 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:13,446 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:13,448 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:13,449 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:13,450 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:13,455 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:13,457 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:13,457 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:13,458 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:13,459 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:13,460 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:13,461 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:13,462 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:13,463 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:13,463 [main:63] - replacement of c of type Function0<Unit> is { check(true)}
2021-03-11 11:04:13,563 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:13,563 [main:66] - Compilation checking started
2021-03-11 11:04:13,829 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:13,838 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:13,838 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:13,838 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:13,939 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:13,940 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:14,045 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:14,048 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:14,264 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:04:14,266 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:04:14,271 [main:95] - GENERATED = contract({ println()})
2021-03-11 11:04:14,271 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println()})}
2021-03-11 11:04:14,271 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:14,624 [main:55] - randomType = Function2<ShouldBeDisabled, ShouldBeDisabled, Set<UShort>>
2021-03-11 11:04:14,626 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:14,641 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:14,642 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:14,643 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:14,644 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:14,645 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:14,646 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:14,647 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:14,654 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:14,655 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:14,656 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:14,657 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:14,658 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:14,659 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:14,660 [main:63] - replacement of c of type Function0<Unit> is { contract({ println()})}
2021-03-11 11:04:14,766 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:14,766 [main:66] - Compilation checking started
2021-03-11 11:04:15,049 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ println()})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:15,057 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:15,058 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:15,058 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:15,159 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:15,161 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:15,270 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:15,272 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:15,500 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:15,502 [main:95] - GENERATED = require(false)
2021-03-11 11:04:15,502 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:04:15,502 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:15,507 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:04:15,621 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:04:15,622 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:04:15,633 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:15,648 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:15,650 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:15,651 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:15,652 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:15,654 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:15,660 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:15,661 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:15,662 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:15,663 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:15,665 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:15,666 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:15,667 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:15,668 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:15,668 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:04:15,773 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:15,773 [main:66] - Compilation checking started
2021-03-11 11:04:16,061 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:16,071 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:16,071 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:16,071 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:16,177 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:16,179 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:16,290 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:16,292 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:16,646 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:16,648 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:04:16,650 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:04:16,650 [main:95] - GENERATED = check(false, { "pqohh"})
2021-03-11 11:04:16,650 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "pqohh"})}
2021-03-11 11:04:16,650 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:16,653 [main:55] - randomType = Float
2021-03-11 11:04:16,761 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:04:16,815 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:16,827 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:16,828 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:16,833 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:16,834 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:16,835 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:16,836 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:16,837 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:16,838 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:16,839 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:16,841 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:16,842 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:16,843 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:16,844 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:16,844 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "pqohh"})}
2021-03-11 11:04:16,952 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:16,953 [main:66] - Compilation checking started
2021-03-11 11:04:17,294 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "pqohh"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:17,303 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:17,303 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:17,303 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:17,409 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:17,410 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:17,520 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:17,522 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:17,746 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:17,749 [main:95] - GENERATED = require(false)
2021-03-11 11:04:17,749 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:04:17,749 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:17,755 [main:55] - randomType = Checker
2021-03-11 11:04:17,756 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:17,771 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:17,776 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:17,778 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:17,779 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:17,780 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:17,781 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:17,782 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:17,783 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:17,785 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:17,786 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:17,787 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:17,788 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:17,789 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:17,789 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:04:17,892 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:17,893 [main:66] - Compilation checking started
2021-03-11 11:04:18,180 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:18,190 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:18,190 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:18,190 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:18,295 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:18,296 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:18,404 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:18,406 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:18,635 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:18,637 [main:95] - GENERATED = check(false)
2021-03-11 11:04:18,637 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 11:04:18,637 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:18,750 [main:55] - randomType = ULong
2021-03-11 11:04:18,859 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:04:18,905 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:18,919 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:18,920 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:18,921 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:18,922 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:18,923 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:18,928 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:18,929 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:18,931 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:18,933 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:18,934 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:18,935 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:18,937 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:18,938 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:18,938 [main:63] - replacement of c of type Function0<Unit> is { check(false)}
2021-03-11 11:04:19,040 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:19,040 [main:66] - Compilation checking started
2021-03-11 11:04:19,311 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:19,319 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:19,319 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:19,319 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:19,419 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:19,421 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:19,524 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:19,526 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:19,859 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:19,860 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:04:19,861 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:04:19,861 [main:95] - GENERATED = check(false, { "ujiud"})
2021-03-11 11:04:19,862 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "ujiud"})}
2021-03-11 11:04:19,862 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:19,976 [main:55] - randomType = Checker?
2021-03-11 11:04:19,977 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:19,984 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:19,997 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:19,998 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:19,999 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,001 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,001 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,002 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,003 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,004 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,005 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,006 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:20,007 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,008 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,008 [main:63] - replacement of c of type Function0<Unit> is { check(false, { "ujiud"})}
2021-03-11 11:04:20,110 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:20,110 [main:66] - Compilation checking started
2021-03-11 11:04:20,365 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(false, { "ujiud"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:20,375 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:20,375 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:20,375 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:20,477 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:20,479 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:20,587 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:20,590 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:20,812 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:04:20,813 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:04:20,818 [main:95] - GENERATED = contract({ println()})
2021-03-11 11:04:20,818 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println()})}
2021-03-11 11:04:20,818 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:20,821 [main:55] - randomType = Int
2021-03-11 11:04:20,927 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:04:20,973 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,984 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,985 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,987 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,988 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,989 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,990 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,991 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:20,997 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,998 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:20,999 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:20,999 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,000 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,001 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,001 [main:63] - replacement of c of type Function0<Unit> is { contract({ println()})}
2021-03-11 11:04:21,110 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:21,111 [main:66] - Compilation checking started
2021-03-11 11:04:21,373 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ println()})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:21,382 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:21,382 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:21,382 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:21,482 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:21,483 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:21,586 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:21,588 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:21,798 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:04:21,799 [main:95] - GENERATED = print("itsax")
2021-03-11 11:04:21,799 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("itsax")}
2021-03-11 11:04:21,799 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:21,804 [main:55] - randomType = Checker
2021-03-11 11:04:21,805 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,819 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,820 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,821 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:21,825 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,826 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,827 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,828 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,829 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,830 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,831 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,832 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,833 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:21,834 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:21,834 [main:63] - replacement of c of type Function0<Unit> is { print("itsax")}
2021-03-11 11:04:21,933 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:21,934 [main:66] - Compilation checking started
2021-03-11 11:04:22,196 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("itsax")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:22,205 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:22,205 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:22,205 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:22,306 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:22,307 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:22,411 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:22,413 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:22,738 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:22,739 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:04:22,741 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:04:22,741 [main:95] - GENERATED = check(true, { "hblpa"})
2021-03-11 11:04:22,741 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "hblpa"})}
2021-03-11 11:04:22,741 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:23,084 [main:55] - randomType = Pair<Char, Char?>?
2021-03-11 11:04:23,184 [main:302] - generating value of type = Pair<Char, Char?> false depth = 0
2021-03-11 11:04:23,289 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Char, second: Char?): Pair<Char, Char?> = TODO()
2021-03-11 11:04:23,291 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Char, second: Char?): Pair<Char, Char?> = TODO()
2021-03-11 11:04:23,397 [main:302] - generating value of type = Char true depth = 3
2021-03-11 11:04:23,398 [main:302] - generating value of type = Char true depth = 3
2021-03-11 11:04:23,400 [main:95] - GENERATED = Pair<Char, Char?>('穦', '㵈')
2021-03-11 11:04:23,420 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:23,434 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:23,435 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:23,436 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:23,437 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:23,438 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:23,439 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:23,440 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:23,445 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:23,447 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:23,448 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:23,449 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:23,450 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:23,451 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:23,451 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "hblpa"})}
2021-03-11 11:04:23,551 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:23,551 [main:66] - Compilation checking started
2021-03-11 11:04:23,904 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "hblpa"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:23,912 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:23,912 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:23,912 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:24,015 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:24,016 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:24,121 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:24,123 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:24,335 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:04:24,336 [main:95] - GENERATED = println("olxtp")
2021-03-11 11:04:24,336 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("olxtp")}
2021-03-11 11:04:24,336 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:24,445 [main:55] - randomType = Short
2021-03-11 11:04:24,544 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:04:24,590 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:24,599 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:24,600 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:24,601 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:24,602 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:24,603 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:24,604 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:24,605 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:24,609 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:24,610 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:24,611 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:24,612 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:24,613 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:24,615 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:24,615 [main:63] - replacement of c of type Function0<Unit> is { println("olxtp")}
2021-03-11 11:04:24,715 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:24,715 [main:66] - Compilation checking started
2021-03-11 11:04:24,975 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("olxtp")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:24,983 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:24,983 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:24,983 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:25,082 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:25,084 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:25,188 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:25,190 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:25,404 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:04:25,404 [main:95] - GENERATED = println("oqhld")
2021-03-11 11:04:25,404 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("oqhld")}
2021-03-11 11:04:25,404 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:25,639 [main:55] - randomType = Function2<ShouldBeDisabled, Sequence<Checker>, ShouldBeEnabled>
2021-03-11 11:04:25,640 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:25,652 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:25,654 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:25,655 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:25,656 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:25,656 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:25,657 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:25,658 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:25,659 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:25,660 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:25,661 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:25,667 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:25,668 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:25,669 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:25,669 [main:63] - replacement of c of type Function0<Unit> is { println("oqhld")}
2021-03-11 11:04:25,768 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:25,768 [main:66] - Compilation checking started
2021-03-11 11:04:26,024 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("oqhld")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:26,033 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:26,033 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:26,033 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:26,135 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:26,136 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:26,241 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:26,243 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:26,454 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:04:26,454 [main:95] - GENERATED = println("oizvi")
2021-03-11 11:04:26,454 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("oizvi")}
2021-03-11 11:04:26,454 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:27,618 [main:55] - randomType = LinkedHashMap<ULong, LinkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>>
2021-03-11 11:04:27,719 [main:302] - generating value of type = LinkedHashMap<ULong, LinkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>> false depth = 0
2021-03-11 11:04:27,829 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<ULong, LinkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>>): LkedHashMap<ULong, LkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>> = TODO()
2021-03-11 11:04:27,833 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<ULong, LinkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>>): LkedHashMap<ULong, LkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>> = TODO()
2021-03-11 11:04:27,941 [main:302] - generating value of type = Pair<ULong, LinkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>> false depth = 3
2021-03-11 11:04:28,058 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ULong, second: LinkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>): Pair<ULong, LinkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>> = TODO()
2021-03-11 11:04:28,060 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ULong, second: LinkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>): Pair<ULong, LinkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>> = TODO()
2021-03-11 11:04:28,170 [main:302] - generating value of type = ULong true depth = 6
2021-03-11 11:04:28,172 [main:302] - generating value of type = LinkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>> false depth = 6
2021-03-11 11:04:28,287 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>> = TODO()
2021-03-11 11:04:28,289 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>> = TODO()
2021-03-11 11:04:28,393 [main:95] - GENERATED = linkedMapOf<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>()
2021-03-11 11:04:28,394 [main:95] - GENERATED = Pair<ULong, LinkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>>(58573001664026444.toULong(), linkedMapOf<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>())
2021-03-11 11:04:28,394 [main:95] - GENERATED = linkedMapOf<ULong, LinkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>>(Pair<ULong, LinkedHashMap<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>>(58573001664026444.toULong(), linkedMapOf<Boolean, Function2<MutableMap<Double, Float>, ShouldBeEnabled?, Triple<Char?, Short?, Boolean>>>()))
2021-03-11 11:04:28,742 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:28,755 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:28,760 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:28,761 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:28,762 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:28,764 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:28,765 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:28,766 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:28,767 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:28,768 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:28,769 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:28,770 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:28,771 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:28,772 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:28,772 [main:63] - replacement of c of type Function0<Unit> is { println("oizvi")}
2021-03-11 11:04:28,872 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:28,872 [main:66] - Compilation checking started
2021-03-11 11:04:29,135 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("oizvi")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:29,143 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:29,143 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:29,143 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:29,245 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:29,247 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:29,350 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:29,353 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:29,568 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:29,570 [main:95] - GENERATED = require(true)
2021-03-11 11:04:29,570 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:04:29,570 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:29,688 [main:55] - randomType = ShouldBeDisabled?
2021-03-11 11:04:29,789 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:04:29,790 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:04:29,799 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:29,802 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:29,812 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:29,814 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:29,815 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:29,816 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:29,817 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:29,818 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:29,819 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:29,820 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:29,821 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:29,822 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:29,822 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:29,823 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:29,823 [main:63] - replacement of c of type Function0<Unit> is { require(true)}
2021-03-11 11:04:30,028 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:30,029 [main:66] - Compilation checking started
2021-03-11 11:04:30,291 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:30,300 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:30,300 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:30,300 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:30,402 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:30,403 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:30,508 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:30,510 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:30,722 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:30,723 [main:95] - GENERATED = require(false)
2021-03-11 11:04:30,723 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:04:30,723 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:30,942 [main:55] - randomType = List<UInt>
2021-03-11 11:04:30,943 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:30,957 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:30,961 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:30,962 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:30,963 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:30,964 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:30,965 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:30,966 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:30,967 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:30,968 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:30,968 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:30,969 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:30,970 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:30,971 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:30,971 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:04:31,069 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:31,069 [main:66] - Compilation checking started
2021-03-11 11:04:31,329 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:31,337 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:31,337 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:31,337 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:31,440 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:31,442 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:31,446 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:04:31,446 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:31,560 [main:55] - randomType = Short
2021-03-11 11:04:31,660 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:04:31,705 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:31,715 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:31,715 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:31,716 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:31,717 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:31,723 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:31,724 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:31,725 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:31,726 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:31,727 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:31,728 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:31,729 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:31,730 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:31,731 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:31,731 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:04:31,832 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:31,832 [main:66] - Compilation checking started
2021-03-11 11:04:32,091 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:32,099 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:32,099 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:32,099 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:32,200 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:32,201 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:32,305 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:32,307 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:32,524 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:04:32,524 [main:95] - GENERATED = println("uasac")
2021-03-11 11:04:32,524 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("uasac")}
2021-03-11 11:04:32,524 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:32,527 [main:55] - randomType = Boolean
2021-03-11 11:04:32,627 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:04:32,643 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:32,652 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:32,653 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:32,654 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:32,655 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:32,656 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:32,661 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:32,662 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:32,663 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:32,664 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:32,665 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:32,667 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:32,669 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:32,670 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:32,670 [main:63] - replacement of c of type Function0<Unit> is { println("uasac")}
2021-03-11 11:04:32,771 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:32,772 [main:66] - Compilation checking started
2021-03-11 11:04:33,039 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("uasac")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:33,047 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:33,047 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:33,047 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:33,147 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:33,148 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:33,252 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:33,254 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:33,463 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:04:33,464 [main:95] - GENERATED = println("tpcwv")
2021-03-11 11:04:33,465 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("tpcwv")}
2021-03-11 11:04:33,465 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:33,469 [main:55] - randomType = Boolean
2021-03-11 11:04:33,569 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:04:33,580 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:33,594 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:33,595 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:33,595 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:33,601 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:33,602 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:33,603 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:33,604 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:33,604 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:33,605 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:33,606 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:33,607 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:33,608 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:33,609 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:33,609 [main:63] - replacement of c of type Function0<Unit> is { println("tpcwv")}
2021-03-11 11:04:33,712 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:33,713 [main:66] - Compilation checking started
2021-03-11 11:04:33,972 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("tpcwv")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:33,981 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:33,981 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:33,981 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:34,082 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:34,083 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:34,190 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:34,192 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:34,522 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:34,524 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:04:34,525 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:04:34,525 [main:95] - GENERATED = check(true, { "woifj"})
2021-03-11 11:04:34,525 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "woifj"})}
2021-03-11 11:04:34,525 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:34,531 [main:55] - randomType = Checker
2021-03-11 11:04:34,532 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:34,538 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:34,548 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:34,549 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:34,551 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:34,553 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:34,554 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:34,556 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:34,557 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:34,558 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:34,559 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:34,560 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:34,561 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:34,562 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:34,562 [main:63] - replacement of c of type Function0<Unit> is { check(true, { "woifj"})}
2021-03-11 11:04:34,668 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:34,668 [main:66] - Compilation checking started
2021-03-11 11:04:34,939 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true, { "woifj"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:34,947 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:34,948 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:34,948 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:35,058 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:35,059 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:35,207 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:35,210 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:35,557 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:35,559 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:04:35,560 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:04:35,560 [main:95] - GENERATED = require(true, { "ecxih"})
2021-03-11 11:04:35,560 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "ecxih"})}
2021-03-11 11:04:35,560 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:35,563 [main:55] - randomType = UByte
2021-03-11 11:04:35,680 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:04:35,727 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:35,740 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:35,741 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:35,746 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:35,748 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:35,749 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:35,750 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:35,751 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:35,752 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:35,753 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:35,754 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:35,755 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:35,756 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:35,757 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:35,757 [main:63] - replacement of c of type Function0<Unit> is { require(true, { "ecxih"})}
2021-03-11 11:04:35,859 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:35,859 [main:66] - Compilation checking started
2021-03-11 11:04:36,124 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(true, { "ecxih"})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:36,133 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:36,133 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:36,133 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:36,237 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:36,238 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:36,353 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:36,355 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:36,746 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:04:36,746 [main:95] - GENERATED = println("zunwb")
2021-03-11 11:04:36,747 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("zunwb")}
2021-03-11 11:04:36,747 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:36,863 [main:55] - randomType = Long?
2021-03-11 11:04:36,971 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:04:37,027 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:37,042 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:37,043 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:37,044 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:37,045 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:37,046 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:37,048 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:37,049 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:37,050 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:37,055 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:37,057 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:37,058 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:37,059 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:37,060 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:37,060 [main:63] - replacement of c of type Function0<Unit> is { println("zunwb")}
2021-03-11 11:04:37,163 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:37,163 [main:66] - Compilation checking started
2021-03-11 11:04:37,437 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("zunwb")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:37,445 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:37,445 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:37,445 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:37,550 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:37,552 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:37,658 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:37,660 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:38,000 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:04:38,002 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:04:38,003 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:04:38,113 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:38,115 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:38,450 [main:302] - generating value of type = Int true depth = 8
2021-03-11 11:04:38,452 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 11:04:38,453 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:04:38,564 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:38,567 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:38,980 [main:302] - generating value of type = Int true depth = 12
2021-03-11 11:04:38,982 [main:302] - generating value of type = Function1<Int, Unit> false depth = 12
2021-03-11 11:04:38,983 [main:302] - generating value of type = Unit false depth = 13
2021-03-11 11:04:39,100 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:39,104 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:39,479 [main:302] - generating value of type = Boolean true depth = 16
2021-03-11 11:04:39,479 [main:385] - Cant generate call of fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:39,480 [main:95] - GENERATED = repeat(255143313, {a: Int -> })
2021-03-11 11:04:39,480 [main:95] - GENERATED = repeat(1033598416, {a: Int -> repeat(255143313, {a: Int -> })})
2021-03-11 11:04:39,480 [main:95] - GENERATED = repeat(-680411260, {a: Int -> repeat(1033598416, {a: Int -> repeat(255143313, {a: Int -> })})})
2021-03-11 11:04:39,480 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-680411260, {a: Int -> repeat(1033598416, {a: Int -> repeat(255143313, {a: Int -> })})})}
2021-03-11 11:04:39,480 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:39,871 [main:55] - randomType = Function2<ULong, Checker?, ShouldBeEnabled>
2021-03-11 11:04:39,873 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:39,888 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:39,893 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:39,894 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:39,895 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:39,897 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:39,899 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:39,900 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:39,901 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:39,902 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:39,903 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:39,904 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:39,905 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:39,906 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:39,906 [main:63] - replacement of c of type Function0<Unit> is { repeat(-680411260, {a: Int -> repeat(1033598416, {a: Int -> repeat(255143313, {a: Int -> })})})}
2021-03-11 11:04:40,012 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:40,013 [main:66] - Compilation checking started
2021-03-11 11:04:40,336 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ repeat(-680411260, {a: Int -> repeat(1033598416, {a: Int -> repeat(255143313, {a: Int -> })})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:40,344 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:40,344 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:40,344 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:40,455 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:40,456 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:40,561 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:40,564 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:40,794 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:04:40,795 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:04:40,907 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:40,909 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:41,131 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:04:41,133 [main:95] - GENERATED = require(false)
2021-03-11 11:04:41,133 [main:95] - GENERATED = contract({ require(false)})
2021-03-11 11:04:41,133 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(false)})}
2021-03-11 11:04:41,133 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:41,360 [main:55] - randomType = Sequence<Byte>
2021-03-11 11:04:41,361 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:41,373 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:41,377 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:41,378 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:41,380 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:41,381 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:41,382 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:41,383 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:41,384 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:41,385 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:41,386 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:41,387 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:41,388 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:41,389 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:41,389 [main:63] - replacement of c of type Function0<Unit> is { contract({ require(false)})}
2021-03-11 11:04:41,493 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:41,494 [main:66] - Compilation checking started
2021-03-11 11:04:41,783 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ require(false)})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:41,791 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:41,791 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:41,791 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:41,894 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:41,895 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:42,002 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:42,004 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:42,235 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:04:42,237 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:04:42,344 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:42,346 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:42,691 [main:302] - generating value of type = Int true depth = 8
2021-03-11 11:04:42,693 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 11:04:42,694 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:04:42,804 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:42,806 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:43,030 [main:302] - generating value of type = Any false depth = 12
2021-03-11 11:04:43,030 [main:95] - GENERATED = println("xepzp")
2021-03-11 11:04:43,030 [main:95] - GENERATED = repeat(-297427909, {a: Int -> println("xepzp")})
2021-03-11 11:04:43,030 [main:95] - GENERATED = contract({ repeat(-297427909, {a: Int -> println("xepzp")})})
2021-03-11 11:04:43,030 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ repeat(-297427909, {a: Int -> println("xepzp")})})}
2021-03-11 11:04:43,030 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:43,256 [main:55] - randomType = Byte?
2021-03-11 11:04:43,361 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:04:43,404 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:43,412 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:43,413 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:43,414 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:43,415 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:43,416 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:43,421 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:43,422 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:43,423 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:43,424 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:43,425 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:43,426 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:43,426 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:43,427 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:43,427 [main:63] - replacement of c of type Function0<Unit> is { contract({ repeat(-297427909, {a: Int -> println("xepzp")})})}
2021-03-11 11:04:43,525 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:43,525 [main:66] - Compilation checking started
2021-03-11 11:04:43,789 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ contract({ repeat(-297427909, {a: Int -> println("xepzp")})})}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:43,797 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:43,797 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:43,797 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:43,926 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:43,928 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:44,033 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:44,035 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:44,247 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:04:44,247 [main:95] - GENERATED = println("bepbu")
2021-03-11 11:04:44,247 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("bepbu")}
2021-03-11 11:04:44,247 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:44,376 [main:55] - randomType = Int?
2021-03-11 11:04:44,483 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:04:44,524 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:44,536 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:44,537 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:44,538 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:44,539 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:44,540 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:44,545 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:44,547 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:44,548 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:44,549 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:44,550 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:44,551 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:44,552 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:44,553 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:44,553 [main:63] - replacement of c of type Function0<Unit> is { println("bepbu")}
2021-03-11 11:04:44,655 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:44,655 [main:66] - Compilation checking started
2021-03-11 11:04:44,984 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("bepbu")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:44,992 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:44,992 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:44,992 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:45,103 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:45,104 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:45,219 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:45,221 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:45,467 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:04:45,467 [main:95] - GENERATED = print("jbgoa")
2021-03-11 11:04:45,467 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("jbgoa")}
2021-03-11 11:04:45,467 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:45,470 [main:55] - randomType = Double
2021-03-11 11:04:45,574 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:04:45,619 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:45,628 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:45,629 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:45,631 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:45,632 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:45,633 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:45,639 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:45,640 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:45,641 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:45,642 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:45,643 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:45,644 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:45,645 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:45,646 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:45,646 [main:63] - replacement of c of type Function0<Unit> is { print("jbgoa")}
2021-03-11 11:04:45,754 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:45,754 [main:66] - Compilation checking started
2021-03-11 11:04:46,020 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ print("jbgoa")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:46,028 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:46,029 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:46,029 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:46,135 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:46,136 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:46,141 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:04:46,141 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:46,147 [main:55] - randomType = ShouldBeDisabled
2021-03-11 11:04:46,254 [main:302] - generating value of type = ShouldBeDisabled false depth = 0
2021-03-11 11:04:46,255 [main:112] - generating klass ShouldBeDisabled text = class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}
2021-03-11 11:04:46,262 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:46,276 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:46,277 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:46,278 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:46,278 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:46,285 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:46,286 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:46,287 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:46,288 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:46,289 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:46,290 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:46,291 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:46,292 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:46,293 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:46,293 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:04:46,402 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:46,403 [main:66] - Compilation checking started
2021-03-11 11:04:46,687 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:46,695 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:46,695 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:46,695 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:46,800 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:46,801 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:46,805 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:04:46,805 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:46,923 [main:55] - randomType = Array<ShouldBeDisabled>
2021-03-11 11:04:47,030 [main:302] - generating value of type = Array<ShouldBeDisabled> false depth = 0
2021-03-11 11:04:47,144 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<ShouldBeDisabled> = TODO()
2021-03-11 11:04:47,147 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<ShouldBeDisabled> = TODO()
2021-03-11 11:04:47,257 [main:95] - GENERATED = emptyArray<ShouldBeDisabled>()
2021-03-11 11:04:47,274 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:47,286 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:47,287 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:47,287 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:47,288 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:47,294 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:47,295 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:47,297 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:47,298 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:47,299 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:47,300 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:47,301 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:47,302 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:47,303 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:47,303 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:04:47,408 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:47,409 [main:66] - Compilation checking started
2021-03-11 11:04:47,681 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:47,689 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:47,689 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:47,689 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:47,787 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:47,789 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:47,793 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:04:47,793 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:48,014 [main:55] - randomType = Collection<Char?>
2021-03-11 11:04:48,015 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:48,019 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:48,028 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:48,029 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:48,030 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:48,031 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:48,033 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:48,034 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:48,035 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:48,036 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:48,038 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:48,038 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:48,039 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:48,040 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:48,040 [main:63] - replacement of c of type Function0<Unit> is { println()}
2021-03-11 11:04:48,141 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:48,141 [main:66] - Compilation checking started
2021-03-11 11:04:48,400 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println()}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:48,409 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:48,409 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:48,409 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:48,520 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:48,521 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:48,623 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:48,625 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:04:48,834 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:04:48,834 [main:95] - GENERATED = println("ecwoq")
2021-03-11 11:04:48,834 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("ecwoq")}
2021-03-11 11:04:48,835 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:49,173 [main:55] - randomType = Collection<ArrayList<String>>
2021-03-11 11:04:49,174 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:49,188 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:49,193 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:49,194 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:49,195 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:49,196 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:49,197 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:49,198 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:49,199 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:49,201 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:49,202 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:49,203 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:49,204 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:49,205 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:49,205 [main:63] - replacement of c of type Function0<Unit> is { println("ecwoq")}
2021-03-11 11:04:49,306 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:49,306 [main:66] - Compilation checking started
2021-03-11 11:04:49,575 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ println("ecwoq")}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:49,585 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:49,585 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:49,585 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:49,688 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:49,689 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:49,796 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:49,798 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:50,018 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:50,019 [main:95] - GENERATED = check(true)
2021-03-11 11:04:50,019 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 11:04:50,019 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:50,138 [main:55] - randomType = Checker?
2021-03-11 11:04:50,139 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:50,153 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:50,155 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:50,160 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:50,161 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:50,162 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:50,163 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:50,164 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:50,165 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:50,166 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:50,167 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:50,168 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:50,169 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:50,170 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:50,170 [main:63] - replacement of c of type Function0<Unit> is { check(true)}
2021-03-11 11:04:50,269 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:50,270 [main:66] - Compilation checking started
2021-03-11 11:04:50,536 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ check(true)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:50,544 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:50,544 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:50,544 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:50,643 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:50,644 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:50,747 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:50,749 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:04:50,959 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:04:50,961 [main:95] - GENERATED = require(false)
2021-03-11 11:04:50,961 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 11:04:50,961 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:50,967 [main:55] - randomType = ShouldBeEnabled
2021-03-11 11:04:51,067 [main:302] - generating value of type = ShouldBeEnabled false depth = 0
2021-03-11 11:04:51,069 [main:112] - generating klass ShouldBeEnabled text = class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}
2021-03-11 11:04:51,079 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:51,090 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:51,091 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:51,092 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:51,097 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:51,098 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:51,099 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:51,099 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:51,101 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:51,102 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:51,103 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:51,104 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:51,105 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:51,106 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:51,106 [main:63] - replacement of c of type Function0<Unit> is { require(false)}
2021-03-11 11:04:51,204 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:51,204 [main:66] - Compilation checking started
2021-03-11 11:04:51,464 [main:49] - Result = false
Text:


inline fun call(c: () -> Unit) {
    var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
{ require(false)}()
}

interface Checker {
    fun checkTrue(): Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalseWithMessage()).and(true)
        val l = { false}
        call { check(false, { "ebeou"})}
        return (ShouldBeDisabled().checkFalseWithMessage()).equals("iibxz").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (false).and(false)
        val l = { true}
        call { println()}
        return (ShouldBeDisabled().checkTrueWithMessage()).and(false)
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeEnabled().checkFalse()).xor(true)
        val l = { false}
        call { require(false, { "fkmhw"})}
        return (ShouldBeDisabled().checkTrueWithMessage()).xor(false)
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("ecxgq")
        val l = { false}
        call { println("mgbhm")}
        return (ShouldBeDisabled().checkFalseWithMessage()).not()
    }
}

class ShouldBeEnabled : Checker {
    override fun checkTrue(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (0.76083726f).toDouble().isFinite()
        val l = { true}
        call { check(false)}
        return (ShouldBeEnabled().checkFalseWithMessage()).equals("gvwqf").not()
    }

    override fun checkFalse(): Boolean {
        var c = setDesiredAssertionStatus((ShouldBeEnabled().checkFalseWithMessage()).compareTo(true).equals("gxwqi"))
var hit = (ShouldBeEnabled().checkFalse()).and(false)
        val l = { false}
        call { require(false, { "oogou"})}
        return (ShouldBeEnabled().checkTrue()).equals("pzfqi")
    }

    override fun checkTrueWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = false
        val l = { true}
        call { require(true, { "aflcn"})}
        return false
    }

    override fun checkFalseWithMessage(): Boolean {
        var c = setDesiredAssertionStatus(false)
var hit = (ShouldBeDisabled().checkFalseWithMessage()).equals("ksejc").or(false)
        val l = { true}
        call { println("egwjb")}
        return (-7479217222840615375)?.toChar().isDefined()
    }
}

fun setDesiredAssertionStatus(v: Boolean): Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-629096578), (ShouldBeEnabled().checkFalse()).and(true))
    loader.setClassAssertionStatus((ShouldBeDisabled().checkFalse()).compareTo(true).toString(-412011313), (15737).toChar().isHighSurrogate())
    val c = loader.loadClass("gxxyr")
    return ShouldBeDisabled()
}

fun box(): String {
    var c = setDesiredAssertionStatus(ShouldBeEnabled().checkTrue())
    if ((ShouldBeDisabled().checkTrue()).not()) return "aewqj"
    if ((c).checkFalseWithMessage()) return (81.toUByte()).toLong().toString(-191125192)
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("pocxm").equals("dgxyz")) return "ksulm"
    if (ShouldBeEnabled().checkFalse()) return (ShouldBeEnabled().checkTrueWithMessage()).compareTo(true).toString(-994748927)
    c = ShouldBeEnabled()
    if ((ShouldBeEnabled().checkTrue()).equals("mncbl").equals("cdoqp")) return "iodej"
    if ((ShouldBeDisabled().checkFalseWithMessage()).equals("gnvls")) return ('')?.dec().titlecase()
    try {
        (2483672013832373045).equals("mlbrl").xor(true)
        return (ShouldBeDisabled().checkFalse()).compareTo(false).toString(-941918751)
    } catch (ignore: AssertionError) {
    }
    try {
        (ShouldBeEnabled().checkFalseWithMessage()).equals("gfcdd").or(true)
        return (HashMap<Int, Checker>(mutableMapOf<Int, Checker>())).size.toString(-813259341)
    } catch (ignore: AssertionError) {
    }
    return (false).compareTo(false).toString(-159894093)
}


2021-03-11 11:04:51,472 [main:56] - replacing (c, Function0<Unit>)
2021-03-11 11:04:51,472 [main:38] - replacing c Function0<Unit>
2021-03-11 11:04:51,472 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:04:51,570 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:04:51,572 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:04:51,687 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:51,689 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:52,015 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:04:52,016 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:04:52,017 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:04:52,142 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:52,144 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:04:52,376 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 11:04:52,377 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:04:52,484 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:52,486 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:04:52,824 [main:302] - generating value of type = Boolean true depth = 12
2021-03-11 11:04:52,826 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-11 11:04:52,827 [main:302] - generating value of type = Any false depth = 13
2021-03-11 11:04:52,827 [main:95] - GENERATED = check(true, { "cmixt"})
2021-03-11 11:04:52,827 [main:95] - GENERATED = contract({ check(true, { "cmixt"})})
2021-03-11 11:04:52,828 [main:95] - GENERATED = repeat(1399288217, {a: Int -> contract({ check(true, { "cmixt"})})})
2021-03-11 11:04:52,828 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(1399288217, {a: Int -> contract({ check(true, { "cmixt"})})})}
2021-03-11 11:04:52,828 [main:49] - GENERATED IS CALL =false
2021-03-11 11:04:52,943 [main:55] - randomType = Char?
2021-03-11 11:04:53,051 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:04:53,079 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:53,092 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:53,095 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:53,096 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:53,098 [main:94] - GETTING Function0<Unit> from Checker
2021-03-11 11:04:53,099 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:53,099 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:53,100 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:53,102 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:53,103 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:53,104 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:53,105 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:53,106 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:53,107 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:04:53,107 [main:63] - replacement of c of type Function0<Unit> is { repeat(1399288217, {a: Int -> contract({ check(true, { "cmixt"})})})}
2021-03-11 11:04:53,209 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:04:53,209 [main:66] - Compilation checking started
