2021-03-11 21:05:10,050 [main:66] - Compilation checking started
2021-03-11 21:05:11,205 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, String> false depth = 0
2021-03-11 21:05:11,206 [main:302] - generating value of type = String true depth = 1
2021-03-11 21:05:11,210 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 21:05:11,223 [main:66] - Compilation checking started
2021-03-11 21:05:11,608 [main:49] - Result = false
Text:
fun <T> T.runExt(fn: T.() -> String = { "kxfwd"}{ "kxfwd"}) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()
2021-03-11 21:05:11,610 [main:50] - replacing private val r: String String
2021-03-11 21:05:11,610 [main:54] - Getting value of type String
2021-03-11 21:05:11,730 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:11,731 [main:58] - GENERATED VALUE OF TYPE String = "kgejw"
2021-03-11 21:05:11,732 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:12,329 [main:67] - randomType = Double
2021-03-11 21:05:12,481 [main:302] - generating value of type = Double true depth = 0
2021-03-11 21:05:12,622 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@43405ae5]
2021-03-11 21:05:12,623 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ad8aeb5]
2021-03-11 21:05:12,624 [main:78] - Generated call from random type = (0.3381873376940413).toChar().uppercase()
2021-03-11 21:05:12,637 [main:106] - GETTING String from [@kotlin.ExtensionFunctionType] Function1<T, String>
2021-03-11 21:05:12,685 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44db06d9]]
2021-03-11 21:05:12,685 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3]
2021-03-11 21:05:12,819 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:12,990 [main:43] - GENERATING CALL OF fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<R>)->kotlin.Unit): T = TODO()
2021-03-11 21:05:12,995 [main:61] - WITHOUT TYPE PARAMS = fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<R>)->kotlin.Unit): T = TODO()
2021-03-11 21:05:13,228 [main:302] - generating value of type = Function1<Continuation<R>, Unit> false depth = 3
2021-03-11 21:05:13,229 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 21:05:13,383 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:05:13,387 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:05:13,614 [main:302] - generating value of type = Any false depth = 7
2021-03-11 21:05:13,614 [main:95] - GENERATED = println("obuzl")
2021-03-11 21:05:13,616 [main:95] - GENERATED = suspendCoroutine<R>({a: Continuation<R> -> println("obuzl")})
2021-03-11 21:05:13,617 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44db06d9]
2021-03-11 21:05:13,620 [main:117] - GENERATED CALL = (fn).invoke(suspendCoroutine<R>({a: Continuation<R> -> println("obuzl")})).toUpperCase()
2021-03-11 21:05:13,620 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3daeaf18]]
2021-03-11 21:05:13,620 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3]
2021-03-11 21:05:13,713 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:13,818 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Comparable<T>, other: Comparable<T>): T = TODO()
2021-03-11 21:05:13,821 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Comparable<T>, other: Comparable<T>): T = TODO()
2021-03-11 21:05:13,924 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 21:05:13,932 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 21:05:13,939 [main:95] - GENERATED = maxOf<Comparable<T>>(24128, 3.toUByte())
2021-03-11 21:05:13,940 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3daeaf18]
2021-03-11 21:05:14,042 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:05:14,130 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:14,132 [main:117] - GENERATED CALL = (fn).invoke(maxOf<Comparable<T>>(24128, 3.toUByte())).substringAfter('왳', "fgpwn")
2021-03-11 21:05:14,132 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@220481f9]]
2021-03-11 21:05:14,132 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3]
2021-03-11 21:05:14,267 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:14,372 [main:43] - GENERATING CALL OF fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-11 21:05:14,375 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-11 21:05:14,575 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:05:14,576 [main:95] - GENERATED = enumValueOf<Enum<T>>("pufup")
2021-03-11 21:05:14,577 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@220481f9]
2021-03-11 21:05:14,664 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:14,666 [main:117] - GENERATED CALL = (fn).invoke(enumValueOf<Enum<T>>("pufup")).prependIndent("fyerg")
2021-03-11 21:05:14,666 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7639b2]]
2021-03-11 21:05:14,666 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3]
2021-03-11 21:05:14,748 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:14,849 [main:43] - GENERATING CALL OF fun <T> maxOf(a: UByte, b: UByte): T = TODO()
2021-03-11 21:05:14,851 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: UByte, b: UByte): T = TODO()
2021-03-11 21:05:14,966 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 21:05:14,967 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 21:05:14,967 [main:95] - GENERATED = maxOf<UByte>(13.toUByte(), 8.toUByte())
2021-03-11 21:05:14,968 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7639b2]
2021-03-11 21:05:15,050 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:15,051 [main:117] - GENERATED CALL = (fn).invoke(maxOf<UByte>(13.toUByte(), 8.toUByte())).take(-803331068)
2021-03-11 21:05:15,051 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@643b94ab]]
2021-03-11 21:05:15,051 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3]
2021-03-11 21:05:15,132 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:15,215 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: R): T = TODO()
2021-03-11 21:05:15,217 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: R): T = TODO()
2021-03-11 21:05:15,314 [main:302] - generating value of type = R false depth = 3
2021-03-11 21:05:15,315 [main:112] - generating klass R text = inline class R(private val r: String) {
    fun test() = runExt { r }
}
2021-03-11 21:05:15,413 [main:194] - Type params = []
2021-03-11 21:05:15,491 [main:302] - generating value of type = String true depth = 5
2021-03-11 21:05:15,493 [main:95] - GENERATED = requireNotNull<R>(R("myzma"))
2021-03-11 21:05:15,494 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@643b94ab]
2021-03-11 21:05:15,595 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:05:15,599 [main:117] - GENERATED CALL = (fn).invoke(requireNotNull<R>(R("myzma"))).plus("imjyz")
2021-03-11 21:05:15,599 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e843b26]]
2021-03-11 21:05:15,599 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3]
2021-03-11 21:05:15,715 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:15,804 [main:43] - GENERATING CALL OF fun <T> maxOf(a: UShort, other: UShort): T = TODO()
2021-03-11 21:05:15,806 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: UShort, other: UShort): T = TODO()
2021-03-11 21:05:15,886 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 21:05:15,887 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 21:05:15,887 [main:95] - GENERATED = maxOf<UShort>(3856.toUShort(), 642.toUShort())
2021-03-11 21:05:15,888 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e843b26]
2021-03-11 21:05:15,963 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:05:16,053 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:16,131 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:16,132 [main:117] - GENERATED CALL = (fn).invoke(maxOf<UShort>(3856.toUShort(), 642.toUShort())).replaceAfter('뛧', "gtkha", "dnoab")
2021-03-11 21:05:16,133 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d09b44]]
2021-03-11 21:05:16,133 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3]
2021-03-11 21:05:16,208 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:16,289 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Char, b: Char): T = TODO()
2021-03-11 21:05:16,291 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Char, b: Char): T = TODO()
2021-03-11 21:05:16,386 [main:302] - generating value of type = Char true depth = 3
2021-03-11 21:05:16,386 [main:302] - generating value of type = Char true depth = 3
2021-03-11 21:05:16,387 [main:95] - GENERATED = maxOf<Char>('锌', '롩')
2021-03-11 21:05:16,388 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d09b44]
2021-03-11 21:05:16,468 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:16,469 [main:117] - GENERATED CALL = (fn).invoke(maxOf<Char>('锌', '롩')).replaceIndent("nuyms")
2021-03-11 21:05:16,470 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ac90548]]
2021-03-11 21:05:16,470 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3]
2021-03-11 21:05:16,546 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:16,807 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Short?, other: Short?, comparator: kotlin.Comparator<Short?>): T = TODO()
2021-03-11 21:05:16,809 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Short?, other: Short?, comparator: kotlin.Comparator<Short?>): T = TODO()
2021-03-11 21:05:16,974 [main:302] - generating value of type = Short true depth = 3
2021-03-11 21:05:16,974 [main:302] - generating value of type = Short true depth = 3
2021-03-11 21:05:16,974 [main:302] - generating value of type = Comparator<Short?> false depth = 3
2021-03-11 21:05:17,271 [main:43] - GENERATING CALL OF fun <T, K> compareBy(comparator: kotlin.Comparator<Long?>, selector: (Short?)->Long?): Comparator<Short?> = TODO()
2021-03-11 21:05:17,273 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareBy(comparator: kotlin.Comparator<Long?>, selector: (Short?)->Long?): Comparator<Short?> = TODO()
2021-03-11 21:05:17,539 [main:302] - generating value of type = Comparator<Long?> false depth = 6
2021-03-11 21:05:17,725 [main:43] - GENERATING CALL OF fun <T, K> compareByDescending(comparator: kotlin.Comparator<UInt>, selector: (Long?)->UInt): Comparator<Long?> = TODO()
2021-03-11 21:05:17,727 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareByDescending(comparator: kotlin.Comparator<UInt>, selector: (Long?)->UInt): Comparator<Long?> = TODO()
2021-03-11 21:05:18,008 [main:302] - generating value of type = Comparator<UInt> false depth = 9
2021-03-11 21:05:18,098 [main:43] - GENERATING CALL OF fun <T> reverseOrder(): Comparator<UInt> = TODO()
2021-03-11 21:05:18,099 [main:61] - WITHOUT TYPE PARAMS = fun <T> reverseOrder(): Comparator<UInt> = TODO()
2021-03-11 21:05:18,180 [main:95] - GENERATED = reverseOrder<UInt>()
2021-03-11 21:05:18,180 [main:302] - generating value of type = Function1<Long?, UInt> false depth = 9
2021-03-11 21:05:18,181 [main:302] - generating value of type = UInt true depth = 10
2021-03-11 21:05:18,181 [main:95] - GENERATED = compareByDescending<Long?, UInt>(reverseOrder<UInt>(), {a: Long? -> 2015216959.toUInt()})
2021-03-11 21:05:18,182 [main:302] - generating value of type = Function1<Short?, Long?> false depth = 6
2021-03-11 21:05:18,182 [main:302] - generating value of type = Long true depth = 7
2021-03-11 21:05:18,183 [main:95] - GENERATED = compareBy<Short?, Long?>(compareByDescending<Long?, UInt>(reverseOrder<UInt>(), {a: Long? -> 2015216959.toUInt()}), {a: Short? -> -6971204257578472768})
2021-03-11 21:05:18,183 [main:95] - GENERATED = maxOf<Short?>(-23979, 23114, compareBy<Short?, Long?>(compareByDescending<Long?, UInt>(reverseOrder<UInt>(), {a: Long? -> 2015216959.toUInt()}), {a: Short? -> -6971204257578472768}))
2021-03-11 21:05:18,184 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ac90548]
2021-03-11 21:05:18,258 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:18,259 [main:117] - GENERATED CALL = (fn).invoke(maxOf<Short?>(-23979, 23114, compareBy<Short?, Long?>(compareByDescending<Long?, UInt>(reverseOrder<UInt>(), {a: Long? -> 2015216959.toUInt()}), {a: Short? -> -6971204257578472768}))).concat("hhxkn")
2021-03-11 21:05:18,260 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558eb96b]]
2021-03-11 21:05:18,260 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3]
2021-03-11 21:05:18,352 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:18,522 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Boolean, b: Boolean, c: Boolean, comparator: kotlin.Comparator<Boolean>): T = TODO()
2021-03-11 21:05:18,524 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Boolean, b: Boolean, c: Boolean, comparator: kotlin.Comparator<Boolean>): T = TODO()
2021-03-11 21:05:18,693 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 21:05:18,693 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 21:05:18,693 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 21:05:18,694 [main:302] - generating value of type = Comparator<Boolean> false depth = 3
2021-03-11 21:05:18,790 [main:43] - GENERATING CALL OF fun <T> compareBy(selectors: Function1<Boolean, Comparable<*>?>): Comparator<Boolean> = TODO()
2021-03-11 21:05:18,792 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selectors: Function1<Boolean, Comparable<*>?>): Comparator<Boolean> = TODO()
2021-03-11 21:05:18,879 [main:302] - generating value of type = Function1<Boolean, Comparable<*>?> false depth = 6
2021-03-11 21:05:18,879 [main:302] - generating value of type = Comparable<*> false depth = 7
2021-03-11 21:05:18,978 [main:43] - GENERATING CALL OF fun <E> Enum(name: kotlin.String, ordinal: kotlin.Int): Comparable<*> = TODO()
2021-03-11 21:05:18,979 [main:61] - WITHOUT TYPE PARAMS = fun <E> Enum(name: kotlin.String, ordinal: kotlin.Int): Comparable<*> = TODO()
2021-03-11 21:05:19,320 [main:302] - generating value of type = String true depth = 10
2021-03-11 21:05:19,320 [main:302] - generating value of type = Int true depth = 10
2021-03-11 21:05:19,321 [main:95] - GENERATED = Enum<Enum<E>>("bszfj", 521052881)
2021-03-11 21:05:19,321 [main:95] - GENERATED = compareBy<Boolean>({a: Boolean -> Enum<Enum<E>>("bszfj", 521052881)})
2021-03-11 21:05:19,322 [main:95] - GENERATED = maxOf<Boolean>(true, true, true, compareBy<Boolean>({a: Boolean -> Enum<Enum<E>>("bszfj", 521052881)}))
2021-03-11 21:05:19,323 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558eb96b]
2021-03-11 21:05:19,408 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:05:19,408 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:05:19,409 [main:117] - GENERATED CALL = (fn).invoke(maxOf<Boolean>(true, true, true, compareBy<Boolean>({a: Boolean -> Enum<Enum<E>>("bszfj", 521052881)}))).filterNot({a: Char -> true})
2021-03-11 21:05:19,410 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c7aac9b]]
2021-03-11 21:05:19,410 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@23e892d3]
2021-03-11 21:05:19,482 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:19,560 [main:43] - GENERATING CALL OF fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-11 21:05:19,561 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-11 21:05:19,731 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:05:19,732 [main:95] - GENERATED = enumValueOf<Enum<T>>("pwllj")
2021-03-11 21:05:19,733 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c7aac9b]
2021-03-11 21:05:19,816 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:05:19,893 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:05:19,971 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:19,972 [main:117] - GENERATED CALL = (fn).invoke(enumValueOf<Enum<T>>("pwllj")).replaceFirst('䝍', '', true)
2021-03-11 21:05:19,973 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 21:05:19,973 [main:66] - Compilation checking started
2021-03-11 21:05:20,352 [main:49] - Result = false
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String = (fn).invoke(maxOf<Short?>(-23979, 23114, compareBy<Short?, Long?>(compareByDescending<Long?, UInt>(reverseOrder<UInt>(), {a: Long? -> 2015216959.toUInt()}), {a: Short? -> -6971204257578472768}))).concat("hhxkn")) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()


2021-03-11 21:05:20,540 [main:112] - generating klass R text = inline class R(private val r: String) {
    fun test() = runExt { r }
}
2021-03-11 21:05:20,638 [main:194] - Type params = []
2021-03-11 21:05:20,714 [main:302] - generating value of type = String true depth = 1
2021-03-11 21:05:20,876 [main:43] - GENERATING CALL OF fun <T> T.runExt(fn: T.() -> String) = fn()
2021-03-11 21:05:21,611 [main:61] - WITHOUT TYPE PARAMS = fun <T> Function1<HashMap<HashSet<String>, UInt>?, Collection<Boolean>>.runExt(fn: Function1<HashMap<HashSet<String>, UInt>?, Collection<Boolean>>.() -> String) = fn()
2021-03-11 21:05:21,791 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Function1<HashMap<HashSet<String>, UInt>?, Collection<Boolean>>, String> false depth = 1
2021-03-11 21:05:21,791 [main:302] - generating value of type = String true depth = 2
2021-03-11 21:05:21,791 [main:302] - generating value of type = Function1<HashMap<HashSet<String>, UInt>?, Collection<Boolean>> false depth = 1
2021-03-11 21:05:21,791 [main:302] - generating value of type = Collection<Boolean> false depth = 2
2021-03-11 21:05:21,877 [main:43] - GENERATING CALL OF fun ULongArray(size: kotlin.Int): Collection<Boolean> = TODO()
2021-03-11 21:05:21,878 [main:61] - WITHOUT TYPE PARAMS = fun ULongArray(size: kotlin.Int): Collection<Boolean> = TODO()
2021-03-11 21:05:22,038 [main:302] - generating value of type = Int true depth = 5
2021-03-11 21:05:22,039 [main:95] - GENERATED = ULongArray(402861703)
2021-03-11 21:05:22,039 [main:95] - GENERATED = {a: HashMap<HashSet<String>, UInt>? -> ULongArray(402861703)}.runExt<Function1<HashMap<HashSet<String>, UInt>?, Collection<Boolean>>>({ "fesfo"})
2021-03-11 21:05:22,139 [main:45] - Trying to change 7 nodes
2021-03-11 21:05:22,141 [main:53] - replacing (fn(), String)
2021-03-11 21:05:22,141 [main:50] - replacing fn() String
2021-03-11 21:05:22,141 [main:54] - Getting value of type String
2021-03-11 21:05:22,219 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:22,219 [main:58] - GENERATED VALUE OF TYPE String = "fenta"
2021-03-11 21:05:22,219 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:22,220 [main:67] - randomType = R
2021-03-11 21:05:22,293 [main:302] - generating value of type = R false depth = 0
2021-03-11 21:05:22,293 [main:112] - generating klass R text = inline class R(private val r: String) {
    fun test() = runExt { r }
}
2021-03-11 21:05:22,373 [main:194] - Type params = []
2021-03-11 21:05:22,448 [main:302] - generating value of type = String true depth = 2
2021-03-11 21:05:22,456 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@53fbb1bc]
2021-03-11 21:05:22,457 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@685a4baf]
2021-03-11 21:05:22,457 [main:78] - Generated call from random type = (R("lzctf")).test().lowercase()
2021-03-11 21:05:22,458 [main:106] - GETTING String from [@kotlin.ExtensionFunctionType] Function1<T, String>
2021-03-11 21:05:22,496 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d09b44]]
2021-03-11 21:05:22,496 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8]
2021-03-11 21:05:22,602 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:22,687 [main:43] - GENERATING CALL OF fun <T> minOf(a: Long, b: Long): T = TODO()
2021-03-11 21:05:22,689 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Long, b: Long): T = TODO()
2021-03-11 21:05:22,763 [main:302] - generating value of type = Long true depth = 3
2021-03-11 21:05:22,764 [main:302] - generating value of type = Long true depth = 3
2021-03-11 21:05:22,764 [main:95] - GENERATED = minOf<Long>(5301732948616931898, -5402737138145323693)
2021-03-11 21:05:22,764 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d09b44]
2021-03-11 21:05:22,836 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:22,837 [main:117] - GENERATED CALL = (fn).invoke(minOf<Long>(5301732948616931898, -5402737138145323693)).replaceIndent("wigwz")
2021-03-11 21:05:22,837 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@da32ee2]]
2021-03-11 21:05:22,837 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8]
2021-03-11 21:05:22,909 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:23,017 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Comparable<T>, b: Comparable<T>): T = TODO()
2021-03-11 21:05:23,018 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Comparable<T>, b: Comparable<T>): T = TODO()
2021-03-11 21:05:23,097 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 21:05:23,172 [main:43] - GENERATING CALL OF fun KotlinVersion(major: kotlin.Int, minor: kotlin.Int): Comparable<T> = TODO()
2021-03-11 21:05:23,173 [main:61] - WITHOUT TYPE PARAMS = fun KotlinVersion(major: kotlin.Int, minor: kotlin.Int): Comparable<T> = TODO()
2021-03-11 21:05:23,426 [main:302] - generating value of type = Int true depth = 6
2021-03-11 21:05:23,427 [main:302] - generating value of type = Int true depth = 6
2021-03-11 21:05:23,427 [main:95] - GENERATED = KotlinVersion(-195581387, -180276438)
2021-03-11 21:05:23,427 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 21:05:23,432 [main:95] - GENERATED = maxOf<Comparable<T>>(KotlinVersion(-195581387, -180276438), 57.toUByte())
2021-03-11 21:05:23,432 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@da32ee2]
2021-03-11 21:05:23,514 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:05:23,518 [main:117] - GENERATED CALL = (fn).invoke(maxOf<Comparable<T>>(KotlinVersion(-195581387, -180276438), 57.toUByte())).removeSuffix("krqfq")
2021-03-11 21:05:23,518 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@643b94ab]]
2021-03-11 21:05:23,518 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8]
2021-03-11 21:05:23,597 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:23,676 [main:43] - GENERATING CALL OF fun <T> minOf(a: Comparable<T>, other: Comparable<T>): T = TODO()
2021-03-11 21:05:23,678 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Comparable<T>, other: Comparable<T>): T = TODO()
2021-03-11 21:05:23,753 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 21:05:23,756 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 21:05:23,761 [main:95] - GENERATED = minOf<Comparable<T>>(31749, 7762516314216514639)
2021-03-11 21:05:23,761 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@643b94ab]
2021-03-11 21:05:23,845 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:05:23,846 [main:117] - GENERATED CALL = (fn).invoke(minOf<Comparable<T>>(31749, 7762516314216514639)).plus("iceko")
2021-03-11 21:05:23,846 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66db892b]]
2021-03-11 21:05:23,846 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8]
2021-03-11 21:05:23,924 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66db892b]
2021-03-11 21:05:24,000 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:05:24,074 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:24,075 [main:117] - GENERATED CALL = (fn).invoke(null).substringBefore('镗', "zxghy")
2021-03-11 21:05:24,076 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8]]
2021-03-11 21:05:24,076 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8]
2021-03-11 21:05:24,147 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:24,234 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Comparable<T>, b: Comparable<T>): T = TODO()
2021-03-11 21:05:24,236 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Comparable<T>, b: Comparable<T>): T = TODO()
2021-03-11 21:05:24,322 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 21:05:24,326 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 21:05:24,330 [main:95] - GENERATED = maxOf<Comparable<T>>(110.toUByte(), 5360170007816200867.toULong())
2021-03-11 21:05:24,331 [main:117] - GENERATED CALL = (fn).invoke(maxOf<Comparable<T>>(110.toUByte(), 5360170007816200867.toULong()))
2021-03-11 21:05:24,331 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57f5ed0f]]
2021-03-11 21:05:24,331 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8]
2021-03-11 21:05:24,404 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:24,486 [main:43] - GENERATING CALL OF fun <T> minOf(a: UShort, other: UShort): T = TODO()
2021-03-11 21:05:24,488 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UShort, other: UShort): T = TODO()
2021-03-11 21:05:24,581 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 21:05:24,581 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 21:05:24,582 [main:95] - GENERATED = minOf<UShort>(20741.toUShort(), 16575.toUShort())
2021-03-11 21:05:24,582 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57f5ed0f]
2021-03-11 21:05:24,583 [main:117] - GENERATED CALL = (fn).invoke(minOf<UShort>(20741.toUShort(), 16575.toUShort())).trimIndent()
2021-03-11 21:05:24,583 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68053668]]
2021-03-11 21:05:24,583 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8]
2021-03-11 21:05:24,666 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:24,743 [main:43] - GENERATING CALL OF fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-11 21:05:24,744 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-11 21:05:24,917 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:05:24,918 [main:95] - GENERATED = enumValueOf<Enum<T>>("ykwah")
2021-03-11 21:05:24,918 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68053668]
2021-03-11 21:05:24,998 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:25,089 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:25,090 [main:117] - GENERATED CALL = (fn).invoke(enumValueOf<Enum<T>>("ykwah")).replaceIndentByMargin("wqqfx", "shpll")
2021-03-11 21:05:25,090 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d40e1b4]]
2021-03-11 21:05:25,090 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8]
2021-03-11 21:05:25,162 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:25,321 [main:43] - GENERATING CALL OF fun <T> maxOf(a: UInt, other: UInt, comparator: kotlin.Comparator<UInt>): T = TODO()
2021-03-11 21:05:25,323 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: UInt, other: UInt, comparator: kotlin.Comparator<UInt>): T = TODO()
2021-03-11 21:05:25,481 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 21:05:25,481 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 21:05:25,481 [main:302] - generating value of type = Comparator<UInt> false depth = 3
2021-03-11 21:05:25,563 [main:43] - GENERATING CALL OF fun <T> nullsFirst(): Comparator<UInt> = TODO()
2021-03-11 21:05:25,564 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(): Comparator<UInt> = TODO()
2021-03-11 21:05:25,638 [main:95] - GENERATED = nullsFirst<UInt>()
2021-03-11 21:05:25,638 [main:95] - GENERATED = maxOf<UInt>(1216276551.toUInt(), 1036565098.toUInt(), nullsFirst<UInt>())
2021-03-11 21:05:25,639 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d40e1b4]
2021-03-11 21:05:25,727 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:25,805 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:05:25,806 [main:117] - GENERATED CALL = (fn).invoke(maxOf<UInt>(1216276551.toUInt(), 1036565098.toUInt(), nullsFirst<UInt>())).padEnd(-1885000496, '趯')
2021-03-11 21:05:25,806 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@685a4baf]]
2021-03-11 21:05:25,806 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8]
2021-03-11 21:05:25,876 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:26,220 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: HashMap<UInt, String?>): T = TODO()
2021-03-11 21:05:26,221 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: HashMap<UInt, String?>): T = TODO()
2021-03-11 21:05:26,296 [main:302] - generating value of type = HashMap<UInt, String?> false depth = 3
2021-03-11 21:05:26,372 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<UInt, Strg?> = TODO()
2021-03-11 21:05:26,373 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<UInt, Strg?> = TODO()
2021-03-11 21:05:26,467 [main:95] - GENERATED = hashMapOf<UInt, String?>()
2021-03-11 21:05:26,467 [main:95] - GENERATED = requireNotNull<HashMap<UInt, String?>>(hashMapOf<UInt, String?>())
2021-03-11 21:05:26,468 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@685a4baf]
2021-03-11 21:05:26,469 [main:117] - GENERATED CALL = (fn).invoke(requireNotNull<HashMap<UInt, String?>>(hashMapOf<UInt, String?>())).lowercase()
2021-03-11 21:05:26,469 [main:113] - Case = [public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33f82515]]
2021-03-11 21:05:26,469 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: T): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@40a7e5a8]
2021-03-11 21:05:26,564 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:05:26,657 [main:43] - GENERATING CALL OF fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<R>)->kotlin.Unit): T = TODO()
2021-03-11 21:05:26,658 [main:61] - WITHOUT TYPE PARAMS = fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<R>)->kotlin.Unit): T = TODO()
2021-03-11 21:05:26,825 [main:302] - generating value of type = Function1<Continuation<R>, Unit> false depth = 3
2021-03-11 21:05:26,825 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 21:05:26,900 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:05:26,901 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:05:27,075 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 7
2021-03-11 21:05:27,075 [main:302] - generating value of type = Unit false depth = 8
2021-03-11 21:05:27,155 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:05:27,156 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:05:27,380 [main:302] - generating value of type = Boolean true depth = 11
2021-03-11 21:05:27,380 [main:302] - generating value of type = Function0<Any> false depth = 11
2021-03-11 21:05:27,380 [main:302] - generating value of type = Any false depth = 12
2021-03-11 21:05:27,381 [main:95] - GENERATED = check(false, { "anewo"})
2021-03-11 21:05:27,381 [main:95] - GENERATED = contract({ check(false, { "anewo"})})
2021-03-11 21:05:27,381 [main:95] - GENERATED = suspendCoroutine<R>({a: Continuation<R> -> contract({ check(false, { "anewo"})})})
2021-03-11 21:05:27,382 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33f82515]
2021-03-11 21:05:27,462 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:27,463 [main:117] - GENERATED CALL = (fn).invoke(suspendCoroutine<R>({a: Continuation<R> -> contract({ check(false, { "anewo"})})})).trimMargin("kjxxy")
2021-03-11 21:05:27,463 [main:61] - replacement of fn() of type String is "fenta"
2021-03-11 21:05:27,540 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 21:05:27,540 [main:66] - Compilation checking started
2021-03-11 21:05:27,896 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = "fenta"

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()


2021-03-11 21:05:27,896 [main:53] - replacing (r, String)
2021-03-11 21:05:27,896 [main:50] - replacing r String
2021-03-11 21:05:27,896 [main:54] - Getting value of type String
2021-03-11 21:05:27,969 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:27,969 [main:58] - GENERATED VALUE OF TYPE String = "dleoh"
2021-03-11 21:05:27,970 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:28,195 [main:67] - randomType = ArrayDeque<UShort>
2021-03-11 21:05:28,279 [main:302] - generating value of type = ArrayDeque<UShort> false depth = 0
2021-03-11 21:05:28,353 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UShort> = TODO()
2021-03-11 21:05:28,354 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UShort> = TODO()
2021-03-11 21:05:28,497 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:05:28,498 [main:95] - GENERATED = ArrayDeque<UShort>(-1526154780)
2021-03-11 21:05:28,719 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@62a00a42]
2021-03-11 21:05:28,720 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@18adeae]
2021-03-11 21:05:28,720 [main:78] - Generated call from random type = (ArrayDeque<UShort>(-1526154780)).toArray().contentDeepToString()
2021-03-11 21:05:28,720 [main:61] - replacement of r of type String is "dleoh"
2021-03-11 21:05:28,791 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 21:05:28,791 [main:66] - Compilation checking started
2021-03-11 21:05:29,138 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = "fenta"

inline class R(private val r: String) {
    fun test() = runExt { "dleoh" }
}

fun box() = R("OK").test()


2021-03-11 21:05:29,138 [main:53] - replacing (r, String)
2021-03-11 21:05:29,138 [main:50] - replacing r String
2021-03-11 21:05:29,138 [main:54] - Getting value of type String
2021-03-11 21:05:29,207 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:29,208 [main:58] - GENERATED VALUE OF TYPE String = "jizzb"
2021-03-11 21:05:29,208 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:29,510 [main:67] - randomType = Function1<Array<Boolean>, UInt>
2021-03-11 21:05:29,510 [main:61] - replacement of r of type String is "jizzb"
2021-03-11 21:05:29,577 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 21:05:29,578 [main:53] - replacing ({ "dleoh" }, [@kotlin.ExtensionFunctionType] Function1<R, String>)
2021-03-11 21:05:29,578 [main:50] - replacing { "dleoh" } [@kotlin.ExtensionFunctionType] Function1<R, String>
2021-03-11 21:05:29,578 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<R, String>
2021-03-11 21:05:29,645 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<R, String> false depth = 0
2021-03-11 21:05:29,646 [main:302] - generating value of type = String true depth = 1
2021-03-11 21:05:29,646 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<R, String> = { "nivmn"}
2021-03-11 21:05:29,646 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:29,794 [main:67] - randomType = LinkedHashSet<Map<R, R>>
2021-03-11 21:05:29,878 [main:302] - generating value of type = LinkedHashSet<Map<R, R>> false depth = 0
2021-03-11 21:05:29,958 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Map<R, R>> = TODO()
2021-03-11 21:05:29,959 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Map<R, R>> = TODO()
2021-03-11 21:05:30,030 [main:95] - GENERATED = linkedSetOf<Map<R, R>>()
2021-03-11 21:05:30,251 [main:61] - replacement of { "dleoh" } of type [@kotlin.ExtensionFunctionType] Function1<R, String> is { "nivmn"}
2021-03-11 21:05:30,320 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 21:05:30,320 [main:66] - Compilation checking started
2021-03-11 21:05:30,611 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = "fenta"

inline class R(private val r: String) {
    fun test() = runExt { "nivmn"}
}

fun box() = R("OK").test()


2021-03-11 21:05:30,611 [main:53] - replacing (runExt { "nivmn"}, String)
2021-03-11 21:05:30,611 [main:50] - replacing runExt { "nivmn"} String
2021-03-11 21:05:30,611 [main:54] - Getting value of type String
2021-03-11 21:05:30,683 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:30,683 [main:58] - GENERATED VALUE OF TYPE String = "uojtk"
2021-03-11 21:05:30,684 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:30,849 [main:67] - randomType = Sequence<Boolean>
2021-03-11 21:05:30,850 [main:61] - replacement of runExt { "nivmn"} of type String is "uojtk"
2021-03-11 21:05:30,917 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 21:05:30,918 [main:66] - Compilation checking started
2021-03-11 21:05:31,165 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = "fenta"

inline class R(private val r: String) {
    fun test() = "uojtk"
}

fun box() = R("OK").test()


2021-03-11 21:05:31,165 [main:53] - replacing ("OK", String)
2021-03-11 21:05:31,165 [main:50] - replacing "OK" String
2021-03-11 21:05:31,165 [main:54] - Getting value of type String
2021-03-11 21:05:31,238 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:31,239 [main:58] - GENERATED VALUE OF TYPE String = "qxgda"
2021-03-11 21:05:31,239 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:31,390 [main:67] - randomType = Byte?
2021-03-11 21:05:31,455 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:05:31,495 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a80d21]
2021-03-11 21:05:31,496 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294bdbbe]
2021-03-11 21:05:31,561 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:31,562 [main:78] - Generated call from random type = (10)?.toLong().toString(632852235)
2021-03-11 21:05:31,562 [main:61] - replacement of "OK" of type String is "qxgda"
2021-03-11 21:05:31,679 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 21:05:31,680 [main:66] - Compilation checking started
2021-03-11 21:05:31,933 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = "fenta"

inline class R(private val r: String) {
    fun test() = "uojtk"
}

fun box() = R("qxgda").test()


2021-03-11 21:05:32,014 [main:66] - Compilation checking started
2021-03-11 21:05:32,253 [main:41] - AFTER TRY 0 res = fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()
2021-03-11 21:05:32,394 [main:112] - generating klass R text = inline class R(private val r: String) {
    fun test() = runExt { r }
}
2021-03-11 21:05:32,466 [main:194] - Type params = []
2021-03-11 21:05:32,560 [main:302] - generating value of type = String true depth = 1
2021-03-11 21:05:32,725 [main:43] - GENERATING CALL OF fun <T> T.runExt(fn: T.() -> String) = fn()
2021-03-11 21:05:32,868 [main:61] - WITHOUT TYPE PARAMS = fun <T> Boolean?.runExt(fn: Boolean?.() -> String) = fn()
2021-03-11 21:05:33,028 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Boolean?, String> false depth = 1
2021-03-11 21:05:33,028 [main:302] - generating value of type = String true depth = 2
2021-03-11 21:05:33,028 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:05:33,028 [main:95] - GENERATED = false.runExt<Boolean?>({ "lncvs"})
2021-03-11 21:05:33,111 [main:43] - Try №0
2021-03-11 21:05:34,085 [main:69] - Trying to insert fun box320(): String {
    val prope0 = Kla0(23, {x -> 2 * x})
    return if (prope0.fu0() == 46) "OK" else "fail"
}
2021-03-11 21:05:34,169 [main:66] - Compilation checking started
2021-03-11 21:05:34,653 [main:103] - Trying to change 20 nodes
2021-03-11 21:05:34,653 [main:107] - replacing (state, Int)
2021-03-11 21:05:34,653 [main:50] - replacing state Int
2021-03-11 21:05:34,653 [main:54] - Getting value of type Int
2021-03-11 21:05:34,731 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:34,732 [main:58] - GENERATED VALUE OF TYPE Int = 984082062
2021-03-11 21:05:34,732 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:34,818 [main:67] - randomType = ArrayDeque<R>
2021-03-11 21:05:34,920 [main:302] - generating value of type = ArrayDeque<R> false depth = 0
2021-03-11 21:05:35,006 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<R> = TODO()
2021-03-11 21:05:35,007 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<R> = TODO()
2021-03-11 21:05:35,175 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:05:35,175 [main:95] - GENERATED = ArrayDeque<R>(302704930)
2021-03-11 21:05:35,346 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76f51ce2]
2021-03-11 21:05:35,346 [main:78] - Generated call from random type = (ArrayDeque<R>(302704930)).size.unaryMinus()
2021-03-11 21:05:35,347 [main:106] - GETTING Int from String
2021-03-11 21:05:35,378 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@402e7c0b]]
2021-03-11 21:05:35,378 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:05:35,464 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:35,549 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:35,550 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@402e7c0b]
2021-03-11 21:05:35,634 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 21:05:35,756 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:05:35,758 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:05:35,879 [main:302] - generating value of type = Char true depth = 3
2021-03-11 21:05:35,880 [main:95] - GENERATED = charArrayOf('涃')
2021-03-11 21:05:35,984 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:36,061 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:36,061 [main:117] - GENERATED CALL = (R("mvhgz").test()).subSequence(417634707, -1022786897).indexOfAny(charArrayOf('涃'), 746003982, false)
2021-03-11 21:05:36,061 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5123b41a]]
2021-03-11 21:05:36,062 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5123b41a]
2021-03-11 21:05:36,139 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:36,139 [main:117] - GENERATED CALL = (R("mvhgz").test()).length.and(1070844125)
2021-03-11 21:05:36,139 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1869639d], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3f8d1391]]
2021-03-11 21:05:36,139 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1869639d]
2021-03-11 21:05:36,217 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:05:36,218 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3f8d1391]
2021-03-11 21:05:36,298 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:36,298 [main:117] - GENERATED CALL = (R("mvhgz").test()).equals("hesyp").compareTo(true)
2021-03-11 21:05:36,299 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e366f8]]
2021-03-11 21:05:36,299 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e366f8]
2021-03-11 21:05:36,299 [main:117] - GENERATED CALL = (R("mvhgz").test()).count()
2021-03-11 21:05:36,299 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a9358ae]]
2021-03-11 21:05:36,299 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982]
2021-03-11 21:05:36,397 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:36,398 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a9358ae]
2021-03-11 21:05:36,496 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:36,496 [main:117] - GENERATED CALL = (R("mvhgz").test()).compareTo("rodfh").ushr(1665669303)
2021-03-11 21:05:36,497 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1db5ad28]]
2021-03-11 21:05:36,497 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1db5ad28]
2021-03-11 21:05:36,497 [main:117] - GENERATED CALL = (R("mvhgz").test()).length.countOneBits()
2021-03-11 21:05:36,497 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7efc8091]]
2021-03-11 21:05:36,497 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7efc8091]
2021-03-11 21:05:36,498 [main:117] - GENERATED CALL = (R("mvhgz").test()).length.dec()
2021-03-11 21:05:36,498 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e366f8]]
2021-03-11 21:05:36,498 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:05:36,598 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:36,693 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:36,693 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e366f8]
2021-03-11 21:05:36,694 [main:117] - GENERATED CALL = (R("mvhgz").test()).subSequence(1046292059, 289348310).count()
2021-03-11 21:05:36,694 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2ef2a62a]]
2021-03-11 21:05:36,694 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5]
2021-03-11 21:05:36,789 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:36,789 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2ef2a62a]
2021-03-11 21:05:36,790 [main:117] - GENERATED CALL = (R("mvhgz").test()).get(233038376).toInt()
2021-03-11 21:05:36,790 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3be64]]
2021-03-11 21:05:36,790 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3be64]
2021-03-11 21:05:36,878 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:36,879 [main:117] - GENERATED CALL = (R("mvhgz").test()).compareTo(false.runExt<Boolean?>({ "lncvs"}), false)
2021-03-11 21:05:36,879 [main:114] - replacement of state of type Int is 984082062
2021-03-11 21:05:36,956 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 21:05:36,956 [main:66] - Compilation checking started
2021-03-11 21:05:37,126 [main:49] - Result = false
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = prope0(state)
        984082062 = prope1
        return state
    }
}

fun box320(): String {
    val prope0 = Kla0(23, {x -> 2 * x})
    return if (prope0.fu0() == 46) "OK" else "fail"
}


2021-03-11 21:05:37,126 [main:107] - replacing ("fail", String)
2021-03-11 21:05:37,126 [main:50] - replacing "fail" String
2021-03-11 21:05:37,127 [main:54] - Getting value of type String
2021-03-11 21:05:37,205 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:37,205 [main:58] - GENERATED VALUE OF TYPE String = "slmva"
2021-03-11 21:05:37,205 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:37,206 [main:67] - randomType = R
2021-03-11 21:05:37,284 [main:302] - generating value of type = R false depth = 0
2021-03-11 21:05:37,285 [main:112] - generating klass R text = inline class R(private val r: String) {
    fun test() = runExt { r }
}
2021-03-11 21:05:37,383 [main:194] - Type params = []
2021-03-11 21:05:37,468 [main:302] - generating value of type = String true depth = 2
2021-03-11 21:05:37,476 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6c2ffb5f]
2021-03-11 21:05:37,477 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bada6bd]
2021-03-11 21:05:37,589 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 21:05:37,589 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:05:37,590 [main:78] - Generated call from random type = (R("bsphb")).test().filterIndexed({a: Int, b: Char -> true})
2021-03-11 21:05:37,591 [main:106] - GETTING String from R
2021-03-11 21:05:37,598 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f512f2d]]
2021-03-11 21:05:37,598 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:37,599 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f512f2d]
2021-03-11 21:05:37,675 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 21:05:37,675 [main:302] - generating value of type = Char true depth = 1
2021-03-11 21:05:37,676 [main:117] - GENERATED CALL = (R("OK")).test().replaceFirstChar({a: Char -> 'ヮ'})
2021-03-11 21:05:37,676 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c7aac9b]]
2021-03-11 21:05:37,676 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:37,676 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c7aac9b]
2021-03-11 21:05:37,754 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:05:37,832 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:05:37,909 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:37,909 [main:117] - GENERATED CALL = (R("OK")).test().replaceFirst('ꧣ', '芗', false)
2021-03-11 21:05:37,909 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1351ee94]]
2021-03-11 21:05:37,909 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:37,910 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1351ee94]
2021-03-11 21:05:37,910 [main:117] - GENERATED CALL = (R("OK")).test().reversed()
2021-03-11 21:05:37,910 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65583b07]]
2021-03-11 21:05:37,910 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:37,910 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65583b07]
2021-03-11 21:05:37,987 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:05:37,987 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:05:37,988 [main:117] - GENERATED CALL = (R("OK")).test().dropWhile({a: Char -> true})
2021-03-11 21:05:37,988 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66db892b]]
2021-03-11 21:05:37,988 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:37,988 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66db892b]
2021-03-11 21:05:38,063 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:05:38,064 [main:117] - GENERATED CALL = (R("OK")).test().substringBefore('뿐', false.runExt<Boolean?>({ "lncvs"}))
2021-03-11 21:05:38,064 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e843b26]]
2021-03-11 21:05:38,064 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:38,064 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e843b26]
2021-03-11 21:05:38,162 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:05:38,256 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:38,258 [main:117] - GENERATED CALL = (R("OK")).test().replaceAfter('', false.runExt<Boolean?>({ "lncvs"}), "gdugn")
2021-03-11 21:05:38,258 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2065118c]]
2021-03-11 21:05:38,258 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:38,258 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2065118c]
2021-03-11 21:05:38,340 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:38,422 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:05:38,422 [main:117] - GENERATED CALL = (R("OK")).test().padStart(-533174702, 'ꬍ')
2021-03-11 21:05:38,423 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73922468]]
2021-03-11 21:05:38,423 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:38,423 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73922468]
2021-03-11 21:05:38,503 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:38,504 [main:117] - GENERATED CALL = (R("OK")).test().substring(-1814419697)
2021-03-11 21:05:38,504 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bb3f8b7]]
2021-03-11 21:05:38,504 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:38,504 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bb3f8b7]
2021-03-11 21:05:38,504 [main:117] - GENERATED CALL = (R("OK")).test().trim()
2021-03-11 21:05:38,504 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@da32ee2]]
2021-03-11 21:05:38,504 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:38,504 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@da32ee2]
2021-03-11 21:05:38,586 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:05:38,669 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 21:05:38,670 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 21:05:38,830 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 21:05:38,833 [main:95] - GENERATED = StringBuilder("kgdsl")
2021-03-11 21:05:38,833 [main:117] - GENERATED CALL = (R("OK")).test().removeSuffix(StringBuilder("kgdsl"))
2021-03-11 21:05:38,833 [main:114] - replacement of "fail" of type String is "slmva"
2021-03-11 21:05:38,928 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 21:05:38,928 [main:66] - Compilation checking started
2021-03-11 21:05:39,232 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = prope0(state)
        state = prope1
        return state
    }
}

fun box320(): String {
    val prope0 = Kla0(23, {x -> 2 * x})
    return if (prope0.fu0() == 46) "OK" else "slmva"
}


2021-03-11 21:05:39,232 [main:107] - replacing ("OK", String)
2021-03-11 21:05:39,232 [main:50] - replacing "OK" String
2021-03-11 21:05:39,232 [main:54] - Getting value of type String
2021-03-11 21:05:39,309 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:39,310 [main:58] - GENERATED VALUE OF TYPE String = "mzhax"
2021-03-11 21:05:39,310 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:39,311 [main:67] - randomType = Kla0
2021-03-11 21:05:39,402 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 21:05:39,402 [main:112] - generating klass Kla0 text = class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = prope0(state)
        state = prope1
        return state
    }
}
2021-03-11 21:05:39,486 [main:194] - Type params = []
2021-03-11 21:05:39,562 [main:302] - generating value of type = Int true depth = 2
2021-03-11 21:05:39,562 [main:302] - generating value of type = Function1<Int, Int> false depth = 2
2021-03-11 21:05:39,562 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:05:39,573 [main:149] - GENERATING call of type public final fun fu0(): kotlin.Int defined in Kla0[SimpleFunctionDescriptorImpl@2ae73b2e]
2021-03-11 21:05:39,573 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@262449c3]
2021-03-11 21:05:39,648 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:39,649 [main:78] - Generated call from random type = (Kla0(-671789660, {a: Int -> 1372468339})).fu0().toString(4316740)
2021-03-11 21:05:39,650 [main:106] - GETTING String from R
2021-03-11 21:05:39,655 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@315eba2c]]
2021-03-11 21:05:39,655 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:39,655 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@315eba2c]
2021-03-11 21:05:39,741 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:05:39,741 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:05:39,742 [main:117] - GENERATED CALL = (R("OK")).test().takeLastWhile({a: Char -> false})
2021-03-11 21:05:39,742 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@da32ee2]]
2021-03-11 21:05:39,742 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:39,742 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@da32ee2]
2021-03-11 21:05:39,819 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:05:39,823 [main:117] - GENERATED CALL = (R("OK")).test().removeSuffix("saeea")
2021-03-11 21:05:39,823 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7752d5ce]]
2021-03-11 21:05:39,823 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:39,823 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7752d5ce]
2021-03-11 21:05:39,923 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:05:39,924 [main:117] - GENERATED CALL = (R("OK")).test().substringAfterLast('즢', R("mvhgz").test())
2021-03-11 21:05:39,924 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@220481f9]]
2021-03-11 21:05:39,924 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:39,924 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@220481f9]
2021-03-11 21:05:39,925 [main:117] - GENERATED CALL = (R("OK")).test().prependIndent(false.runExt<Boolean?>({ "lncvs"}))
2021-03-11 21:05:39,925 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d79eebb]]
2021-03-11 21:05:39,925 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:39,925 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d79eebb]
2021-03-11 21:05:40,014 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:40,015 [main:117] - GENERATED CALL = (R("OK")).test().drop(-1692038214)
2021-03-11 21:05:40,015 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2839fe6c]]
2021-03-11 21:05:40,015 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:40,016 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2839fe6c]
2021-03-11 21:05:40,016 [main:117] - GENERATED CALL = (R("OK")).test().toLowerCase()
2021-03-11 21:05:40,016 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@685a4baf]]
2021-03-11 21:05:40,016 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:40,016 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@685a4baf]
2021-03-11 21:05:40,017 [main:117] - GENERATED CALL = (R("OK")).test().lowercase()
2021-03-11 21:05:40,017 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44db06d9]]
2021-03-11 21:05:40,017 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:40,017 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44db06d9]
2021-03-11 21:05:40,017 [main:117] - GENERATED CALL = (R("OK")).test().toUpperCase()
2021-03-11 21:05:40,018 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdfeead]]
2021-03-11 21:05:40,018 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:40,018 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdfeead]
2021-03-11 21:05:40,100 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:40,182 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:40,183 [main:117] - GENERATED CALL = (R("OK")).test().removeRange(1700871443, -877518922)
2021-03-11 21:05:40,183 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10fbb3d]]
2021-03-11 21:05:40,183 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:40,183 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10fbb3d]
2021-03-11 21:05:40,271 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:05:40,353 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 21:05:40,354 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 21:05:40,523 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:05:40,524 [main:95] - GENERATED = StringBuilder("uwdtu")
2021-03-11 21:05:40,524 [main:117] - GENERATED CALL = (R("OK")).test().removeSurrounding(StringBuilder("uwdtu"))
2021-03-11 21:05:40,525 [main:114] - replacement of "OK" of type String is (R("OK")).test().takeLastWhile({a: Char -> false})
2021-03-11 21:05:40,605 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:05:40,605 [main:66] - Compilation checking started
2021-03-11 21:05:40,993 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = prope0(state)
        state = prope1
        return state
    }
}

fun box320(): String {
    val prope0 = Kla0(23, {x -> 2 * x})
    return if (prope0.fu0() == 46) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:40,993 [main:107] - replacing (2, Int)
2021-03-11 21:05:40,993 [main:50] - replacing 2 Int
2021-03-11 21:05:40,993 [main:54] - Getting value of type Int
2021-03-11 21:05:41,077 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:41,078 [main:58] - GENERATED VALUE OF TYPE Int = -1686966090
2021-03-11 21:05:41,078 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:41,079 [main:67] - randomType = R
2021-03-11 21:05:41,168 [main:302] - generating value of type = R false depth = 0
2021-03-11 21:05:41,168 [main:112] - generating klass R text = inline class R(private val r: String) {
    fun test() = runExt { r }
}
2021-03-11 21:05:41,254 [main:194] - Type params = []
2021-03-11 21:05:41,333 [main:302] - generating value of type = String true depth = 2
2021-03-11 21:05:41,339 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@72262dbc]
2021-03-11 21:05:41,340 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3be64]
2021-03-11 21:05:41,420 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:41,421 [main:78] - Generated call from random type = (R("sfiju")).test().compareTo(false.runExt<Boolean?>({ "lncvs"}), false)
2021-03-11 21:05:41,421 [main:114] - replacement of 2 of type Int is (R("sfiju")).test().compareTo(false.runExt<Boolean?>({ "lncvs"}), false)
2021-03-11 21:05:41,501 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:05:41,501 [main:66] - Compilation checking started
2021-03-11 21:05:41,885 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = prope0(state)
        state = prope1
        return state
    }
}

fun box320(): String {
    val prope0 = Kla0(23, {x -> (R("sfiju")).test().compareTo(false.runExt<Boolean?>({ "lncvs"}), false) * x})
    return if (prope0.fu0() == 46) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:41,885 [main:107] - replacing ({x -> (R("sfiju")).test().compareTo(false.runExt<Boolean?>({ "lncvs"}), false) * x}, Function1<Int, Int>)
2021-03-11 21:05:41,886 [main:50] - replacing {x -> (R("sfiju")).test().compareTo(false.runExt<Boolean?>({ "lncvs"}), false) * x} Function1<Int, Int>
2021-03-11 21:05:41,886 [main:54] - Getting value of type Function1<Int, Int>
2021-03-11 21:05:42,004 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-11 21:05:42,005 [main:302] - generating value of type = Int true depth = 1
2021-03-11 21:05:42,005 [main:58] - GENERATED VALUE OF TYPE Function1<Int, Int> = {a: Int -> -1956472889}
2021-03-11 21:05:42,005 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:42,093 [main:67] - randomType = UInt
2021-03-11 21:05:42,201 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 21:05:42,250 [main:106] - GETTING Function1<Int, Int> from R
2021-03-11 21:05:42,258 [main:106] - GETTING Function1<Int, Int> from String
2021-03-11 21:05:42,287 [main:106] - GETTING Function1<Int, Int> from String
2021-03-11 21:05:42,287 [main:114] - replacement of {x -> (R("sfiju")).test().compareTo(false.runExt<Boolean?>({ "lncvs"}), false) * x} of type Function1<Int, Int> is {a: Int -> -1956472889}
2021-03-11 21:05:42,372 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 21:05:42,373 [main:66] - Compilation checking started
2021-03-11 21:05:42,707 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = prope0(state)
        state = prope1
        return state
    }
}

fun box320(): String {
    val prope0 = Kla0(23, {a: Int -> -1956472889})
    return if (prope0.fu0() == 46) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:42,707 [main:107] - replacing (state, Int)
2021-03-11 21:05:42,707 [main:50] - replacing state Int
2021-03-11 21:05:42,708 [main:54] - Getting value of type Int
2021-03-11 21:05:42,791 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:42,792 [main:58] - GENERATED VALUE OF TYPE Int = -1147204458
2021-03-11 21:05:42,792 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:42,794 [main:67] - randomType = R
2021-03-11 21:05:42,879 [main:302] - generating value of type = R false depth = 0
2021-03-11 21:05:42,880 [main:112] - generating klass R text = inline class R(private val r: String) {
    fun test() = runExt { r }
}
2021-03-11 21:05:42,963 [main:194] - Type params = []
2021-03-11 21:05:43,063 [main:302] - generating value of type = String true depth = 2
2021-03-11 21:05:43,073 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@63b034dd]
2021-03-11 21:05:43,164 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:05:43,164 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3f8d1391]
2021-03-11 21:05:43,250 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:43,251 [main:78] - Generated call from random type = (R("rtsdp")).equals("rgafv").compareTo(false)
2021-03-11 21:05:43,252 [main:106] - GETTING Int from R
2021-03-11 21:05:43,259 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6]]
2021-03-11 21:05:43,259 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:43,259 [main:117] - GENERATED CALL = (R("OK")).test().length
2021-03-11 21:05:43,259 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@31feb7ad], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3f8d1391]]
2021-03-11 21:05:43,259 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@31feb7ad]
2021-03-11 21:05:43,341 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:05:43,341 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3f8d1391]
2021-03-11 21:05:43,433 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:43,433 [main:117] - GENERATED CALL = (R("OK")).equals("qhrnz").compareTo(false)
2021-03-11 21:05:43,434 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290bfb68]]
2021-03-11 21:05:43,434 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:43,434 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290bfb68]
2021-03-11 21:05:43,434 [main:117] - GENERATED CALL = (R("OK")).test().toInt()
2021-03-11 21:05:43,434 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3be64]]
2021-03-11 21:05:43,434 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:43,434 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3be64]
2021-03-11 21:05:43,513 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:43,592 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:43,593 [main:117] - GENERATED CALL = (R("OK")).test().compareTo("mrtcj", false)
2021-03-11 21:05:43,593 [main:114] - replacement of state of type Int is (R("OK")).equals("qhrnz").compareTo(false)
2021-03-11 21:05:43,670 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:05:43,670 [main:66] - Compilation checking started
2021-03-11 21:05:44,033 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = prope0(state)
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo(false)
    }
}

fun box320(): String {
    val prope0 = Kla0(23, {a: Int -> -1956472889})
    return if (prope0.fu0() == 46) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:44,033 [main:107] - replacing (prope0, Function1<Int, Int>)
2021-03-11 21:05:44,033 [main:50] - replacing prope0 Function1<Int, Int>
2021-03-11 21:05:44,033 [main:54] - Getting value of type Function1<Int, Int>
2021-03-11 21:05:44,120 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-11 21:05:44,121 [main:302] - generating value of type = Int true depth = 1
2021-03-11 21:05:44,121 [main:58] - GENERATED VALUE OF TYPE Function1<Int, Int> = {a: Int -> 911380316}
2021-03-11 21:05:44,122 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:44,557 [main:67] - randomType = Function1<Byte, Function1<Kla0, Byte?>>
2021-03-11 21:05:44,558 [main:106] - GETTING Function1<Int, Int> from R
2021-03-11 21:05:44,566 [main:106] - GETTING Function1<Int, Int> from String
2021-03-11 21:05:44,591 [main:106] - GETTING Function1<Int, Int> from String
2021-03-11 21:05:44,591 [main:114] - replacement of prope0 of type Function1<Int, Int> is {a: Int -> 911380316}
2021-03-11 21:05:44,696 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 21:05:44,697 [main:66] - Compilation checking started
2021-03-11 21:05:45,002 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> 911380316}(state)
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo(false)
    }
}

fun box320(): String {
    val prope0 = Kla0(23, {a: Int -> -1956472889})
    return if (prope0.fu0() == 46) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:45,003 [main:107] - replacing (23, Int)
2021-03-11 21:05:45,003 [main:50] - replacing 23 Int
2021-03-11 21:05:45,003 [main:54] - Getting value of type Int
2021-03-11 21:05:45,084 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:45,084 [main:58] - GENERATED VALUE OF TYPE Int = -1537513383
2021-03-11 21:05:45,084 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:45,433 [main:67] - randomType = Pair<UByte?, UShort>
2021-03-11 21:05:45,517 [main:302] - generating value of type = Pair<UByte?, UShort> false depth = 0
2021-03-11 21:05:45,606 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UByte?, second: UShort): Pair<UByte?, UShort> = TODO()
2021-03-11 21:05:45,607 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UByte?, second: UShort): Pair<UByte?, UShort> = TODO()
2021-03-11 21:05:45,691 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 21:05:45,691 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 21:05:45,692 [main:95] - GENERATED = Pair<UByte?, UShort>(116.toUByte(), 4443.toUShort())
2021-03-11 21:05:45,711 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@e3d0158]
2021-03-11 21:05:45,794 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 21:05:45,795 [main:78] - Generated call from random type = (Pair<UByte?, UShort>(116.toUByte(), 4443.toUShort())).second.compareTo(38.toUByte())
2021-03-11 21:05:45,796 [main:106] - GETTING Int from R
2021-03-11 21:05:45,803 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6]]
2021-03-11 21:05:45,803 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:45,804 [main:117] - GENERATED CALL = (R("OK")).test().length
2021-03-11 21:05:45,804 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@31feb7ad], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3f8d1391]]
2021-03-11 21:05:45,804 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@31feb7ad]
2021-03-11 21:05:45,920 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:05:45,920 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3f8d1391]
2021-03-11 21:05:46,001 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:46,002 [main:117] - GENERATED CALL = (R("OK")).equals("cjnwj").compareTo(true)
2021-03-11 21:05:46,002 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290bfb68]]
2021-03-11 21:05:46,002 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:46,002 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290bfb68]
2021-03-11 21:05:46,003 [main:117] - GENERATED CALL = (R("OK")).test().toInt()
2021-03-11 21:05:46,003 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3be64]]
2021-03-11 21:05:46,003 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:46,003 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3be64]
2021-03-11 21:05:46,082 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:46,083 [main:117] - GENERATED CALL = (R("OK")).test().compareTo(R("mvhgz").test(), false)
2021-03-11 21:05:46,083 [main:114] - replacement of 23 of type Int is (R("OK")).test().length
2021-03-11 21:05:46,161 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:05:46,161 [main:66] - Compilation checking started
2021-03-11 21:05:46,455 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> 911380316}(state)
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo(false)
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> -1956472889})
    return if (prope0.fu0() == 46) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:46,456 [main:107] - replacing (state, Int)
2021-03-11 21:05:46,456 [main:50] - replacing state Int
2021-03-11 21:05:46,456 [main:54] - Getting value of type Int
2021-03-11 21:05:46,537 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:46,537 [main:58] - GENERATED VALUE OF TYPE Int = 440189055
2021-03-11 21:05:46,537 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:46,625 [main:67] - randomType = Double
2021-03-11 21:05:46,710 [main:302] - generating value of type = Double true depth = 0
2021-03-11 21:05:46,747 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@595713fd]
2021-03-11 21:05:46,748 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@46a2f032]
2021-03-11 21:05:46,825 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:46,826 [main:78] - Generated call from random type = (0.4439253437470344).toInt().coerceAtLeast(-402042957)
2021-03-11 21:05:46,827 [main:106] - GETTING Int from String
2021-03-11 21:05:46,848 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@260fb925]]
2021-03-11 21:05:46,848 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@260fb925]
2021-03-11 21:05:46,926 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:05:46,927 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).length.minus(17)
2021-03-11 21:05:46,927 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d918b2d]]
2021-03-11 21:05:46,927 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d918b2d]
2021-03-11 21:05:47,005 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:05:47,005 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:05:47,006 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).indexOfFirst({a: Char -> false})
2021-03-11 21:05:47,006 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-11 21:05:47,006 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982]
2021-03-11 21:05:47,006 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-11 21:05:47,087 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:05:47,087 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).compareTo(false.runExt<Boolean?>({ "lncvs"})).times(20)
2021-03-11 21:05:47,087 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-11 21:05:47,088 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-11 21:05:47,187 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:47,188 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).length.shr(-475406546)
2021-03-11 21:05:47,188 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-11 21:05:47,188 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-11 21:05:47,266 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:05:47,267 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).length.times(-101)
2021-03-11 21:05:47,267 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5123b41a]]
2021-03-11 21:05:47,267 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5123b41a]
2021-03-11 21:05:47,345 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:47,346 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).length.and(-1105430086)
2021-03-11 21:05:47,346 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dc77ff4]]
2021-03-11 21:05:47,346 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982]
2021-03-11 21:05:47,427 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:47,427 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dc77ff4]
2021-03-11 21:05:47,508 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:47,508 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).compareTo("yhnah").or(-298625376)
2021-03-11 21:05:47,509 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@73b0b1d5]]
2021-03-11 21:05:47,509 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@73b0b1d5]
2021-03-11 21:05:47,586 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:47,587 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).length.rotateRight(526523)
2021-03-11 21:05:47,587 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2ef2a62a]]
2021-03-11 21:05:47,587 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5]
2021-03-11 21:05:47,665 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:47,666 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2ef2a62a]
2021-03-11 21:05:47,666 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).get(116835618).toInt()
2021-03-11 21:05:47,666 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c02d4b2]]
2021-03-11 21:05:47,666 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5]
2021-03-11 21:05:47,746 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:47,747 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c02d4b2]
2021-03-11 21:05:47,747 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).get(-407000407).digitToInt()
2021-03-11 21:05:47,747 [main:114] - replacement of state of type Int is (false.runExt<Boolean?>({ "lncvs"})).get(-407000407).digitToInt()
2021-03-11 21:05:47,828 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:05:47,828 [main:66] - Compilation checking started
2021-03-11 21:05:48,031 [main:49] - Result = false
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> 911380316}(state)
        (false.runExt<Boolean?>({ "lncvs"})).get(-407000407).digitToInt() = prope1
        return (R("OK")).equals("qhrnz").compareTo(false)
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> -1956472889})
    return if (prope0.fu0() == 46) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:48,032 [main:107] - replacing (state, Int)
2021-03-11 21:05:48,032 [main:50] - replacing state Int
2021-03-11 21:05:48,032 [main:54] - Getting value of type Int
2021-03-11 21:05:48,117 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:48,118 [main:58] - GENERATED VALUE OF TYPE Int = 822225961
2021-03-11 21:05:48,118 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:48,287 [main:67] - randomType = LinkedHashSet<Byte>
2021-03-11 21:05:48,393 [main:302] - generating value of type = LinkedHashSet<Byte> false depth = 0
2021-03-11 21:05:48,477 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Byte): LkedHashSet<Byte> = TODO()
2021-03-11 21:05:48,478 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Byte): LkedHashSet<Byte> = TODO()
2021-03-11 21:05:48,562 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 21:05:48,563 [main:95] - GENERATED = linkedSetOf<Byte>(-88)
2021-03-11 21:05:48,710 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@7a7e4980]
2021-03-11 21:05:48,710 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@25410c7f]
2021-03-11 21:05:48,710 [main:78] - Generated call from random type = (linkedSetOf<Byte>(-88)).toArray().count()
2021-03-11 21:05:48,710 [main:114] - replacement of state of type Int is (linkedSetOf<Byte>(-88)).toArray().count()
2021-03-11 21:05:48,788 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:05:48,788 [main:66] - Compilation checking started
2021-03-11 21:05:49,075 [main:49] - Result = false
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> 911380316}(state)
        (linkedSetOf<Byte>(-88)).toArray().count() = prope1
        return (R("OK")).equals("qhrnz").compareTo(false)
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> -1956472889})
    return if (prope0.fu0() == 46) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:49,076 [main:107] - replacing (state, Int)
2021-03-11 21:05:49,076 [main:50] - replacing state Int
2021-03-11 21:05:49,076 [main:54] - Getting value of type Int
2021-03-11 21:05:49,166 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:49,166 [main:58] - GENERATED VALUE OF TYPE Int = -227235272
2021-03-11 21:05:49,167 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:49,167 [main:67] - randomType = Boolean
2021-03-11 21:05:49,252 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:49,265 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3f8d1391]
2021-03-11 21:05:49,355 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:49,355 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@260fb925]
2021-03-11 21:05:49,443 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:05:49,443 [main:78] - Generated call from random type = (false).compareTo(true).minus(118)
2021-03-11 21:05:49,444 [main:106] - GETTING Int from R
2021-03-11 21:05:49,452 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6]]
2021-03-11 21:05:49,452 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:49,453 [main:117] - GENERATED CALL = (R("OK")).test().length
2021-03-11 21:05:49,453 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3be64]]
2021-03-11 21:05:49,453 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:49,453 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3be64]
2021-03-11 21:05:49,539 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:49,621 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:49,622 [main:117] - GENERATED CALL = (R("OK")).test().compareTo("ckviy", false)
2021-03-11 21:05:49,622 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@31feb7ad], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3f8d1391]]
2021-03-11 21:05:49,622 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@31feb7ad]
2021-03-11 21:05:49,704 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:05:49,705 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3f8d1391]
2021-03-11 21:05:49,819 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:49,820 [main:117] - GENERATED CALL = (R("OK")).equals("fyyqy").compareTo(false)
2021-03-11 21:05:49,820 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290bfb68]]
2021-03-11 21:05:49,820 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:49,821 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290bfb68]
2021-03-11 21:05:49,821 [main:117] - GENERATED CALL = (R("OK")).test().toInt()
2021-03-11 21:05:49,821 [main:114] - replacement of state of type Int is (R("OK")).test().toInt()
2021-03-11 21:05:49,906 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:05:49,906 [main:66] - Compilation checking started
2021-03-11 21:05:50,262 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> 911380316}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo(false)
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> -1956472889})
    return if (prope0.fu0() == 46) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:50,263 [main:107] - replacing (state, Int)
2021-03-11 21:05:50,263 [main:50] - replacing state Int
2021-03-11 21:05:50,263 [main:54] - Getting value of type Int
2021-03-11 21:05:50,343 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:50,344 [main:58] - GENERATED VALUE OF TYPE Int = 636539269
2021-03-11 21:05:50,344 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:50,802 [main:67] - randomType = Function1<Triple<UInt, UInt, Double>, R>
2021-03-11 21:05:50,803 [main:106] - GETTING Int from String
2021-03-11 21:05:50,833 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@cd59ef8]]
2021-03-11 21:05:50,833 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982]
2021-03-11 21:05:50,833 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@cd59ef8]
2021-03-11 21:05:50,914 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:05:50,915 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).compareTo(false.runExt<Boolean?>({ "lncvs"})).plus(73)
2021-03-11 21:05:50,915 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d918b2d]]
2021-03-11 21:05:50,915 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:05:50,999 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:51,089 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:51,090 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d918b2d]
2021-03-11 21:05:51,171 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:05:51,171 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:05:51,172 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).subSequence(407227264, -1530648337).indexOfFirst({a: Char -> false})
2021-03-11 21:05:51,172 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d9d7f05]]
2021-03-11 21:05:51,172 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982]
2021-03-11 21:05:51,172 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d9d7f05]
2021-03-11 21:05:51,173 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).compareTo(R("mvhgz").test()).takeHighestOneBit()
2021-03-11 21:05:51,173 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a4d1343]]
2021-03-11 21:05:51,173 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a4d1343]
2021-03-11 21:05:51,173 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).length.unaryPlus()
2021-03-11 21:05:51,173 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@4ccd39a7]]
2021-03-11 21:05:51,173 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5]
2021-03-11 21:05:51,259 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:51,260 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).get(-1031103049).code
2021-03-11 21:05:51,260 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3be64]]
2021-03-11 21:05:51,260 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3be64]
2021-03-11 21:05:51,394 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:05:51,477 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:51,478 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).compareTo("qqsao", true)
2021-03-11 21:05:51,478 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d918b2d]]
2021-03-11 21:05:51,478 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d918b2d]
2021-03-11 21:05:51,555 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:05:51,556 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:05:51,556 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).indexOfFirst({a: Char -> true})
2021-03-11 21:05:51,557 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@4e3fd320]]
2021-03-11 21:05:51,557 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:05:51,635 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:51,713 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:51,714 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).subSequence(-872302369, 574019829).lastIndex
2021-03-11 21:05:51,714 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32a7a271]]
2021-03-11 21:05:51,714 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:05:51,794 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:51,876 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:51,877 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32a7a271]
2021-03-11 21:05:51,959 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 21:05:51,959 [main:302] - generating value of type = Int true depth = 1
2021-03-11 21:05:51,960 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).subSequence(805996879, 579252949).sumBy({a: Char -> -164326779})
2021-03-11 21:05:51,960 [main:113] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@402e7c0b]]
2021-03-11 21:05:51,960 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@402e7c0b]
2021-03-11 21:05:52,039 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 21:05:52,122 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:05:52,123 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:05:52,206 [main:302] - generating value of type = Char true depth = 3
2021-03-11 21:05:52,207 [main:95] - GENERATED = charArrayOf('뗁')
2021-03-11 21:05:52,288 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:52,368 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:52,368 [main:117] - GENERATED CALL = (false.runExt<Boolean?>({ "lncvs"})).indexOfAny(charArrayOf('뗁'), -889800053, true)
2021-03-11 21:05:52,368 [main:114] - replacement of state of type Int is (false.runExt<Boolean?>({ "lncvs"})).length.unaryPlus()
2021-03-11 21:05:52,451 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:05:52,451 [main:66] - Compilation checking started
2021-03-11 21:05:52,711 [main:49] - Result = false
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> 911380316}((R("OK")).test().toInt())
        (false.runExt<Boolean?>({ "lncvs"})).length.unaryPlus() = prope1
        return (R("OK")).equals("qhrnz").compareTo(false)
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> -1956472889})
    return if (prope0.fu0() == 46) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:52,711 [main:107] - replacing (46, Int)
2021-03-11 21:05:52,712 [main:50] - replacing 46 Int
2021-03-11 21:05:52,712 [main:54] - Getting value of type Int
2021-03-11 21:05:52,824 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:05:52,824 [main:58] - GENERATED VALUE OF TYPE Int = 1690332097
2021-03-11 21:05:52,825 [main:61] - GENERATED IS CALL =false
2021-03-11 21:05:52,913 [main:67] - randomType = ULong
2021-03-11 21:05:52,995 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 21:05:53,033 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7d162b9d]
2021-03-11 21:05:53,111 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 21:05:53,112 [main:78] - Generated call from random type = (3450806466849353471.toULong()).compareTo(58.toUByte())
2021-03-11 21:05:53,113 [main:106] - GETTING Int from R
2021-03-11 21:05:53,119 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290bfb68]]
2021-03-11 21:05:53,119 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:53,119 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290bfb68]
2021-03-11 21:05:53,119 [main:117] - GENERATED CALL = (R("OK")).test().toInt()
2021-03-11 21:05:53,119 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6]]
2021-03-11 21:05:53,119 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:53,120 [main:117] - GENERATED CALL = (R("OK")).test().length
2021-03-11 21:05:53,120 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3be64]]
2021-03-11 21:05:53,120 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@6d057121]
2021-03-11 21:05:53,120 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3be64]
2021-03-11 21:05:53,198 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:53,199 [main:117] - GENERATED CALL = (R("OK")).test().compareTo(false.runExt<Boolean?>({ "lncvs"}), true)
2021-03-11 21:05:53,199 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@31feb7ad], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3f8d1391]]
2021-03-11 21:05:53,199 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@31feb7ad]
2021-03-11 21:05:53,278 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:05:53,279 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3f8d1391]
2021-03-11 21:05:53,368 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:05:53,369 [main:117] - GENERATED CALL = (R("OK")).equals("mfcxm").compareTo(false)
2021-03-11 21:05:53,369 [main:114] - replacement of 46 of type Int is (R("OK")).test().length
2021-03-11 21:05:53,451 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:05:53,451 [main:66] - Compilation checking started
2021-03-11 21:05:53,767 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> 911380316}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo(false)
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> -1956472889})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:53,849 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 21:05:53,931 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 21:05:53,931 [main:66] - Compilation checking started
2021-03-11 21:05:54,151 [main:49] - Result = false
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> 911380316}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo(false)
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> -1956472889})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> equals("qhrnz")}) else "slmva"
}


2021-03-11 21:05:54,152 [main:141] - TRYING TO REPLACE CONSTANT 1956472889
2021-03-11 21:05:54,235 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:05:54,235 [main:66] - Compilation checking started
2021-03-11 21:05:54,575 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> 911380316}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo(false)
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:54,576 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 21:05:54,655 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:05:54,655 [main:66] - Compilation checking started
2021-03-11 21:05:54,973 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> 911380316}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:54,973 [main:141] - TRYING TO REPLACE CONSTANT 911380316
2021-03-11 21:05:55,064 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 21:05:55,064 [main:66] - Compilation checking started
2021-03-11 21:05:55,370 [main:53] - Result = true
Text:
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:55,370 [main:41] - AFTER TRY 1 res = fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}


2021-03-11 21:05:55,564 [main:112] - generating klass R text = inline class R(private val r: String) {
    fun test() = runExt { r }
}
2021-03-11 21:05:55,652 [main:194] - Type params = []
2021-03-11 21:05:55,736 [main:302] - generating value of type = String true depth = 1
2021-03-11 21:05:55,737 [main:112] - generating klass Kla0 text = class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}
2021-03-11 21:05:55,822 [main:194] - Type params = []
2021-03-11 21:05:55,905 [main:302] - generating value of type = Int true depth = 1
2021-03-11 21:05:55,906 [main:302] - generating value of type = Function1<Int, Int> false depth = 1
2021-03-11 21:05:55,906 [main:302] - generating value of type = Int true depth = 2
2021-03-11 21:05:56,081 [main:43] - GENERATING CALL OF fun <T> T.runExt(fn: T.() -> String) = fn()
2021-03-11 21:05:56,279 [main:61] - WITHOUT TYPE PARAMS = fun <T> ArrayDeque<LinkedHashSet<String>>.runExt(fn: ArrayDeque<LinkedHashSet<String>>.() -> String) = fn()
2021-03-11 21:05:56,510 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ArrayDeque<LinkedHashSet<String>>, String> false depth = 1
2021-03-11 21:05:56,511 [main:302] - generating value of type = String true depth = 2
2021-03-11 21:05:56,511 [main:302] - generating value of type = ArrayDeque<LinkedHashSet<String>> false depth = 1
2021-03-11 21:05:56,600 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<LinkedHashSet<String>>): ArrayDeque<LinkedHashSet<String>> = TODO()
2021-03-11 21:05:56,602 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<LinkedHashSet<String>>): ArrayDeque<LinkedHashSet<String>> = TODO()
2021-03-11 21:05:56,786 [main:302] - generating value of type = Collection<LinkedHashSet<String>> false depth = 4
2021-03-11 21:05:56,878 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: LinkedHashSet<String>): Collection<LkedHashSet<Strg>> = TODO()
2021-03-11 21:05:56,879 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: LinkedHashSet<String>): Collection<LkedHashSet<Strg>> = TODO()
2021-03-11 21:05:56,972 [main:302] - generating value of type = LinkedHashSet<String> false depth = 7
2021-03-11 21:05:57,062 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<String> = TODO()
2021-03-11 21:05:57,063 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<String> = TODO()
2021-03-11 21:05:57,324 [main:302] - generating value of type = Int true depth = 10
2021-03-11 21:05:57,324 [main:302] - generating value of type = Float true depth = 10
2021-03-11 21:05:57,325 [main:95] - GENERATED = LinkedHashSet<String>(918098948, 0.44874734f)
2021-03-11 21:05:57,325 [main:95] - GENERATED = hashSetOf<LinkedHashSet<String>>(LinkedHashSet<String>(918098948, 0.44874734f))
2021-03-11 21:05:57,325 [main:95] - GENERATED = ArrayDeque<LinkedHashSet<String>>(hashSetOf<LinkedHashSet<String>>(LinkedHashSet<String>(918098948, 0.44874734f)))
2021-03-11 21:05:57,325 [main:95] - GENERATED = ArrayDeque<LinkedHashSet<String>>(hashSetOf<LinkedHashSet<String>>(LinkedHashSet<String>(918098948, 0.44874734f))).runExt<ArrayDeque<LinkedHashSet<String>>>({ "tebos"})
2021-03-11 21:05:57,426 [main:43] - Try №1
2021-03-11 21:06:07,784 [main:48] - Already checked
2021-03-11 21:06:11,676 [main:69] - Trying to insert override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
2021-03-11 21:06:11,778 [main:66] - Compilation checking started
2021-03-11 21:06:12,867 [main:103] - Trying to change 148 nodes
2021-03-11 21:06:12,867 [main:107] - replacing ("Continuation " + c, String)
2021-03-11 21:06:12,868 [main:50] - replacing "Continuation " + c String
2021-03-11 21:06:12,868 [main:54] - Getting value of type String
2021-03-11 21:06:13,025 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:06:13,027 [main:58] - GENERATED VALUE OF TYPE String = "pftqm"
2021-03-11 21:06:13,027 [main:61] - GENERATED IS CALL =false
2021-03-11 21:06:13,880 [main:67] - randomType = Function2<Set<ArrayList<UShort>>, Kla6, Kla6>
2021-03-11 21:06:13,881 [main:106] - GETTING String from Int
2021-03-11 21:06:13,916 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@494b20a4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aca9296]]
2021-03-11 21:06:13,916 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@494b20a4]
2021-03-11 21:06:13,916 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aca9296]
2021-03-11 21:06:13,916 [main:117] - GENERATED CALL = (prope0.fu0()).toShort().toString(prope0.fu0())
2021-03-11 21:06:13,917 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ac8adc1]]
2021-03-11 21:06:13,917 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890]
2021-03-11 21:06:13,917 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ac8adc1]
2021-03-11 21:06:13,917 [main:117] - GENERATED CALL = (prope0.fu0()).toChar().titlecase()
2021-03-11 21:06:13,917 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6df445a1]]
2021-03-11 21:06:13,917 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890]
2021-03-11 21:06:13,917 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6df445a1]
2021-03-11 21:06:13,917 [main:117] - GENERATED CALL = (prope0.fu0()).toChar().lowercase()
2021-03-11 21:06:13,917 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472505ef], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294bdbbe]]
2021-03-11 21:06:13,917 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472505ef]
2021-03-11 21:06:14,050 [main:302] - generating value of type = Long true depth = 0
2021-03-11 21:06:14,052 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294bdbbe]
2021-03-11 21:06:14,052 [main:117] - GENERATED CALL = (prope0.fu0()).div(666299408054549562).toString(Kla0(1037863339, {a: Int -> 1609665518}).state)
2021-03-11 21:06:14,052 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@262449c3]]
2021-03-11 21:06:14,052 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@262449c3]
2021-03-11 21:06:14,053 [main:117] - GENERATED CALL = (prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state)
2021-03-11 21:06:14,053 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a80d21], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294bdbbe]]
2021-03-11 21:06:14,053 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a80d21]
2021-03-11 21:06:14,053 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294bdbbe]
2021-03-11 21:06:14,196 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:14,198 [main:117] - GENERATED CALL = (prope0.fu0()).toLong().toString(-2007798183)
2021-03-11 21:06:14,198 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3988e188]]
2021-03-11 21:06:14,198 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890]
2021-03-11 21:06:14,198 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3988e188]
2021-03-11 21:06:14,198 [main:117] - GENERATED CALL = (prope0.fu0()).toChar().plus(R("kcltn").test())
2021-03-11 21:06:14,199 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@85d8054], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eeb3d4e]]
2021-03-11 21:06:14,199 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@85d8054]
2021-03-11 21:06:14,199 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eeb3d4e]
2021-03-11 21:06:14,199 [main:117] - GENERATED CALL = (prope0.fu0()).toByte().toString(Kla0(1037863339, {a: Int -> 1609665518}).fu0())
2021-03-11 21:06:14,199 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e1be76], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@262449c3]]
2021-03-11 21:06:14,199 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e1be76]
2021-03-11 21:06:14,199 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@262449c3]
2021-03-11 21:06:14,200 [main:117] - GENERATED CALL = (prope0.fu0()).compareTo(Kla0(1037863339, {a: Int -> 1609665518}).fu0()).toString(prope0.fu0())
2021-03-11 21:06:14,200 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ad8aeb5]]
2021-03-11 21:06:14,200 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890]
2021-03-11 21:06:14,200 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ad8aeb5]
2021-03-11 21:06:14,200 [main:117] - GENERATED CALL = (prope0.fu0()).toChar().uppercase()
2021-03-11 21:06:14,200 [main:114] - replacement of "Continuation " + c of type String is (prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state)
2021-03-11 21:06:14,338 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:06:14,338 [main:66] - Compilation checking started
2021-03-11 21:06:15,086 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14(2)
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(2)
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:06:15,088 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected ", String)
2021-03-11 21:06:15,089 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " String
2021-03-11 21:06:15,089 [main:54] - Getting value of type String
2021-03-11 21:06:15,230 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:06:15,233 [main:58] - GENERATED VALUE OF TYPE String = "taodx"
2021-03-11 21:06:15,233 [main:61] - GENERATED IS CALL =false
2021-03-11 21:06:15,433 [main:67] - randomType = UInt
2021-03-11 21:06:15,578 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 21:06:15,614 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6ce543b4]
2021-03-11 21:06:15,751 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 21:06:15,754 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@143da344]
2021-03-11 21:06:15,902 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:15,905 [main:78] - Generated call from random type = (257688214.toUInt()).div(7994286462035181812.toULong()).toString(-2012165679)
2021-03-11 21:06:15,905 [main:106] - GETTING String from String
2021-03-11 21:06:15,931 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1351ee94]]
2021-03-11 21:06:15,931 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1351ee94]
2021-03-11 21:06:15,932 [main:117] - GENERATED CALL = (R("kcltn").test()).reversed()
2021-03-11 21:06:15,932 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a40537a]]
2021-03-11 21:06:15,932 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:06:16,079 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:16,082 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a40537a]
2021-03-11 21:06:16,241 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 21:06:16,397 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 21:06:16,401 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 21:06:16,869 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:06:16,872 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 21:06:16,878 [main:95] - GENERATED = Regex("hsiuk", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-11 21:06:17,014 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 21:06:17,017 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 21:06:17,162 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:06:17,166 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:06:17,469 [main:302] - generating value of type = Int true depth = 4
2021-03-11 21:06:17,471 [main:95] - GENERATED = StringBuilder(1443532895)
2021-03-11 21:06:17,472 [main:117] - GENERATED CALL = (R("kcltn").test()).subSequence(prope0.fu0(), 982840870).replace(Regex("hsiuk", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> StringBuilder(1443532895)})
2021-03-11 21:06:17,472 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@465cdd2f]]
2021-03-11 21:06:17,472 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@465cdd2f]
2021-03-11 21:06:17,609 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:17,612 [main:117] - GENERATED CALL = (R("kcltn").test()).repeat(915921449)
2021-03-11 21:06:17,612 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46b37844]]
2021-03-11 21:06:17,612 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:06:17,612 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46b37844]
2021-03-11 21:06:17,781 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:06:17,917 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:06:17,920 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:06:18,232 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:06:18,235 [main:95] - GENERATED = StringBuilder(-1065003205)
2021-03-11 21:06:18,376 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:06:18,379 [main:117] - GENERATED CALL = (R("kcltn").test()).subSequence(Kla0(1037863339, {a: Int -> 1609665518}).fu0(), Kla0(1037863339, {a: Int -> 1609665518}).state).commonPrefixWith(StringBuilder(-1065003205), false)
2021-03-11 21:06:18,379 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f512f2d]]
2021-03-11 21:06:18,379 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f512f2d]
2021-03-11 21:06:18,532 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 21:06:18,534 [main:302] - generating value of type = Char true depth = 1
2021-03-11 21:06:18,537 [main:117] - GENERATED CALL = (R("kcltn").test()).replaceFirstChar({a: Char -> 'ყ'})
2021-03-11 21:06:18,538 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73922468]]
2021-03-11 21:06:18,538 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73922468]
2021-03-11 21:06:18,677 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:18,682 [main:117] - GENERATED CALL = (R("kcltn").test()).substring(-1586266022)
2021-03-11 21:06:18,682 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ad8aeb5]]
2021-03-11 21:06:18,682 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5]
2021-03-11 21:06:18,682 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ad8aeb5]
2021-03-11 21:06:18,683 [main:117] - GENERATED CALL = (R("kcltn").test()).get(Kla0(1037863339, {a: Int -> 1609665518}).state).uppercase()
2021-03-11 21:06:18,683 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7639b2]]
2021-03-11 21:06:18,683 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7639b2]
2021-03-11 21:06:18,815 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:18,820 [main:117] - GENERATED CALL = (R("kcltn").test()).take(689838780)
2021-03-11 21:06:18,820 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bada6bd]]
2021-03-11 21:06:18,820 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bada6bd]
2021-03-11 21:06:18,979 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 21:06:18,982 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:06:18,985 [main:117] - GENERATED CALL = (R("kcltn").test()).filterIndexed({a: Int, b: Char -> true})
2021-03-11 21:06:18,985 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66db892b]]
2021-03-11 21:06:18,985 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66db892b]
2021-03-11 21:06:19,129 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:06:19,132 [main:117] - GENERATED CALL = (R("kcltn").test()).substringBefore('꿨', R("kcltn").test())
2021-03-11 21:06:19,132 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " of type String is (R("kcltn").test()).reversed()
2021-03-11 21:06:19,263 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:06:19,264 [main:66] - Compilation checking started
2021-03-11 21:06:19,948 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14(2)
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(2)
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:06:19,951 [main:107] - replacing (let(x), Unit?)
2021-03-11 21:06:19,952 [main:50] - replacing let(x) Unit?
2021-03-11 21:06:19,952 [main:54] - Getting value of type Unit?
2021-03-11 21:06:20,138 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 21:06:20,309 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:06:20,313 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:06:20,609 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 3
2021-03-11 21:06:20,612 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 21:06:20,754 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 21:06:20,758 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 21:06:21,199 [main:302] - generating value of type = Int true depth = 7
2021-03-11 21:06:21,202 [main:302] - generating value of type = Function1<Int, Unit> false depth = 7
2021-03-11 21:06:21,204 [main:302] - generating value of type = Unit false depth = 8
2021-03-11 21:06:21,340 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:06:21,344 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:06:21,650 [main:302] - generating value of type = Boolean true depth = 11
2021-03-11 21:06:21,653 [main:95] - GENERATED = check(false)
2021-03-11 21:06:21,653 [main:95] - GENERATED = repeat(-1040763525, {a: Int -> check(false)})
2021-03-11 21:06:21,654 [main:95] - GENERATED = contract({ repeat(-1040763525, {a: Int -> check(false)})})
2021-03-11 21:06:21,654 [main:58] - GENERATED VALUE OF TYPE Unit? = contract({ repeat(-1040763525, {a: Int -> check(false)})})
2021-03-11 21:06:21,654 [main:61] - GENERATED IS CALL =true
2021-03-11 21:06:21,664 [main:67] - randomType = Kla6
2021-03-11 21:06:21,796 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 21:06:21,798 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:06:21,807 [main:149] - GENERATING call of type public final fun fu12(): kotlin.Unit defined in Kla6[SimpleFunctionDescriptorImpl@7e96a57e]
2021-03-11 21:06:21,807 [main:78] - Generated call from random type = (Kla6()).fu12()
2021-03-11 21:06:21,813 [main:106] - GETTING Unit? from Int
2021-03-11 21:06:21,850 [main:106] - GETTING Unit? from String
2021-03-11 21:06:21,870 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb9fbbe]]
2021-03-11 21:06:21,871 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb9fbbe]
2021-03-11 21:06:22,004 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 21:06:22,007 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:06:22,145 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:06:22,149 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:06:22,446 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 21:06:22,448 [main:95] - GENERATED = require(true)
2021-03-11 21:06:22,449 [main:117] - GENERATED CALL = ((R("OK")).test())?.forEach({a: Char -> require(true)})
2021-03-11 21:06:22,449 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36d08f]]
2021-03-11 21:06:22,449 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36d08f]
2021-03-11 21:06:22,620 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 21:06:22,623 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:06:22,759 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:06:22,762 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:06:23,204 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 21:06:23,207 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 21:06:23,209 [main:302] - generating value of type = Any false depth = 5
2021-03-11 21:06:23,210 [main:95] - GENERATED = require(true, { "yzrfs"})
2021-03-11 21:06:23,210 [main:117] - GENERATED CALL = ((R("OK")).test())?.forEachIndexed({a: Int, b: Char -> require(true, { "yzrfs"})})
2021-03-11 21:06:23,210 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb9fbbe]]
2021-03-11 21:06:23,210 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:06:23,339 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:23,342 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb9fbbe]
2021-03-11 21:06:23,477 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 21:06:23,480 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:06:23,486 [main:117] - GENERATED CALL = ((R("OK")).test())?.subSequence(Kla0(1037863339, {a: Int -> 1609665518}).fu0(), -292351659).forEach({a: Char -> println()})
2021-03-11 21:06:23,486 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36d08f]]
2021-03-11 21:06:23,486 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:06:23,486 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36d08f]
2021-03-11 21:06:23,618 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 21:06:23,621 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:06:23,759 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:06:23,763 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:06:24,049 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 21:06:24,052 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 21:06:24,189 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:06:24,193 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:06:24,630 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 21:06:24,633 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 21:06:24,636 [main:302] - generating value of type = Any false depth = 9
2021-03-11 21:06:24,636 [main:95] - GENERATED = check(false, { "fpqcg"})
2021-03-11 21:06:24,636 [main:95] - GENERATED = contract({ check(false, { "fpqcg"})})
2021-03-11 21:06:24,637 [main:117] - GENERATED CALL = ((R("OK")).test())?.subSequence(Kla0(1037863339, {a: Int -> 1609665518}).state, Kla0(1037863339, {a: Int -> 1609665518}).fu0()).forEachIndexed({a: Int, b: Char -> contract({ check(false, { "fpqcg"})})})
2021-03-11 21:06:24,637 [main:114] - replacement of let(x) of type Unit? is ((R("OK")).test())?.forEach({a: Char -> require(true)})
2021-03-11 21:06:24,766 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 21:06:24,766 [main:66] - Compilation checking started
2021-03-11 21:06:25,213 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14(2)
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(2)
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.((R("OK")).test())?.forEach({a: Char -> require(true)})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:06:25,216 [main:107] - replacing (prope4, Result<Ty0>)
2021-03-11 21:06:25,216 [main:50] - replacing prope4 Result<Ty0>
2021-03-11 21:06:25,216 [main:54] - Getting value of type Result<Ty0>
2021-03-11 21:06:25,349 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 21:06:25,491 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:06:25,495 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:06:25,793 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:06:25,793 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 21:06:26,106 [main:67] - randomType = ArrayList<Sequence<String>>
2021-03-11 21:06:26,237 [main:302] - generating value of type = ArrayList<Sequence<String>> false depth = 0
2021-03-11 21:06:26,372 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Sequence<String>): ArrayList<Sequence<Strg>> = TODO()
2021-03-11 21:06:26,376 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Sequence<String>): ArrayList<Sequence<Strg>> = TODO()
2021-03-11 21:06:26,512 [main:302] - generating value of type = Sequence<String> false depth = 3
2021-03-11 21:06:26,647 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: String): Sequence<Strg> = TODO()
2021-03-11 21:06:26,651 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: String): Sequence<Strg> = TODO()
2021-03-11 21:06:26,788 [main:302] - generating value of type = String true depth = 6
2021-03-11 21:06:26,791 [main:95] - GENERATED = sequenceOf<String>("uqmbb")
2021-03-11 21:06:26,791 [main:95] - GENERATED = arrayListOf<Sequence<String>>(sequenceOf<String>("uqmbb"))
2021-03-11 21:06:26,943 [main:106] - GETTING Result<Ty0> from R
2021-03-11 21:06:26,949 [main:106] - GETTING Result<Ty0> from Kla0
2021-03-11 21:06:26,957 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 21:06:26,987 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 21:06:26,989 [main:106] - GETTING Result<Ty0> from String
2021-03-11 21:06:27,006 [main:106] - GETTING Result<Ty0> from R
2021-03-11 21:06:27,007 [main:106] - GETTING Result<Ty0> from Function1<Int, Int>
2021-03-11 21:06:27,018 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 21:06:27,019 [main:106] - GETTING Result<Ty0> from String
2021-03-11 21:06:27,021 [main:106] - GETTING Result<Ty0> from String
2021-03-11 21:06:27,021 [main:111] - Cant find and generate replacement for prope4 type Result<Ty0>
2021-03-11 21:06:27,021 [main:107] - replacing (prope6, Int)
2021-03-11 21:06:27,021 [main:50] - replacing prope6 Int
2021-03-11 21:06:27,021 [main:54] - Getting value of type Int
2021-03-11 21:06:27,151 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:27,154 [main:58] - GENERATED VALUE OF TYPE Int = -1131083119
2021-03-11 21:06:27,154 [main:61] - GENERATED IS CALL =false
2021-03-11 21:06:27,334 [main:67] - randomType = Double
2021-03-11 21:06:27,467 [main:302] - generating value of type = Double true depth = 0
2021-03-11 21:06:27,500 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@595713fd]
2021-03-11 21:06:27,501 [main:78] - Generated call from random type = (0.08516582115927174).toInt().sign
2021-03-11 21:06:27,501 [main:106] - GETTING Int from Int
2021-03-11 21:06:27,530 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e1be76], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@46a2f032]]
2021-03-11 21:06:27,531 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e1be76]
2021-03-11 21:06:27,531 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@46a2f032]
2021-03-11 21:06:27,666 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:27,669 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).compareTo(prope0.fu0()).coerceAtLeast(-1691211726)
2021-03-11 21:06:27,669 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a6057bf], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2a59f665]]
2021-03-11 21:06:27,669 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a6057bf]
2021-03-11 21:06:27,797 [main:302] - generating value of type = Double true depth = 0
2021-03-11 21:06:27,800 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2a59f665]
2021-03-11 21:06:27,800 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).div(0.7673057226700113).toInt()
2021-03-11 21:06:27,800 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@85d8054], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2a7716cc]]
2021-03-11 21:06:27,800 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@85d8054]
2021-03-11 21:06:27,800 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2a7716cc]
2021-03-11 21:06:27,927 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:06:27,930 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).toByte().compareTo(-17)
2021-03-11 21:06:27,930 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23f7b16]]
2021-03-11 21:06:27,930 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23f7b16]
2021-03-11 21:06:28,057 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:06:28,060 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).rem(-112)
2021-03-11 21:06:28,060 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@595713fd], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a9358ae]]
2021-03-11 21:06:28,060 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@595713fd]
2021-03-11 21:06:28,060 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a9358ae]
2021-03-11 21:06:28,189 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:28,192 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().ushr(-1837284872)
2021-03-11 21:06:28,192 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e1be76], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25d168d8]]
2021-03-11 21:06:28,192 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e1be76]
2021-03-11 21:06:28,192 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25d168d8]
2021-03-11 21:06:28,192 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).compareTo(prope0.fu0()).toInt()
2021-03-11 21:06:28,192 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e1be76], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a4d1343]]
2021-03-11 21:06:28,192 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e1be76]
2021-03-11 21:06:28,321 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:28,324 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a4d1343]
2021-03-11 21:06:28,324 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).compareTo(260364792).unaryPlus()
2021-03-11 21:06:28,324 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@595713fd], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-11 21:06:28,324 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@595713fd]
2021-03-11 21:06:28,324 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-11 21:06:28,452 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:28,455 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029)
2021-03-11 21:06:28,455 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@8fa7f10]]
2021-03-11 21:06:28,455 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]
2021-03-11 21:06:28,587 [main:302] - generating value of type = Float true depth = 0
2021-03-11 21:06:28,590 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@8fa7f10]
2021-03-11 21:06:28,590 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).div(0.68089217f).toRawBits()
2021-03-11 21:06:28,590 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@85d8054], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@23c343e1]]
2021-03-11 21:06:28,591 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@85d8054]
2021-03-11 21:06:28,591 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@23c343e1]
2021-03-11 21:06:28,591 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).toByte().toInt()
2021-03-11 21:06:28,591 [main:114] - replacement of prope6 of type Int is (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029)
2021-03-11 21:06:28,718 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:06:28,718 [main:66] - Compilation checking started
2021-03-11 21:06:29,395 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14(2)
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(2)
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:06:29,398 [main:107] - replacing (prope4.exceptionOrNull(), Throwable?)
2021-03-11 21:06:29,399 [main:50] - replacing prope4.exceptionOrNull() Throwable?
2021-03-11 21:06:29,399 [main:54] - Getting value of type Throwable?
2021-03-11 21:06:29,534 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 21:06:29,672 [main:43] - GENERATING CALL OF fun ClassCastException(message: kotlin.String?): Throwable = TODO()
2021-03-11 21:06:29,676 [main:61] - WITHOUT TYPE PARAMS = fun ClassCastException(message: kotlin.String?): Throwable = TODO()
2021-03-11 21:06:29,993 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:06:29,996 [main:95] - GENERATED = ClassCastException("bnyra")
2021-03-11 21:06:29,996 [main:58] - GENERATED VALUE OF TYPE Throwable? = ClassCastException("bnyra")
2021-03-11 21:06:29,996 [main:61] - GENERATED IS CALL =true
2021-03-11 21:06:30,144 [main:67] - randomType = UInt
2021-03-11 21:06:30,273 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 21:06:30,303 [main:106] - GETTING Throwable? from R
2021-03-11 21:06:30,307 [main:106] - GETTING Throwable? from Kla0
2021-03-11 21:06:30,315 [main:106] - GETTING Throwable? from Int
2021-03-11 21:06:30,344 [main:106] - GETTING Throwable? from R
2021-03-11 21:06:30,345 [main:106] - GETTING Throwable? from Int
2021-03-11 21:06:30,346 [main:106] - GETTING Throwable? from Function1<Int, Int>
2021-03-11 21:06:30,355 [main:106] - GETTING Throwable? from String
2021-03-11 21:06:30,372 [main:106] - GETTING Throwable? from String
2021-03-11 21:06:30,373 [main:106] - GETTING Throwable? from String
2021-03-11 21:06:30,373 [main:106] - GETTING Throwable? from Int
2021-03-11 21:06:30,373 [main:114] - replacement of prope4.exceptionOrNull() of type Throwable? is ClassCastException("bnyra")
2021-03-11 21:06:30,502 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:06:30,502 [main:66] - Compilation checking started
2021-03-11 21:06:31,187 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14(2)
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(2)
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:06:31,191 [main:107] - replacing (prope4, Result<Ty0>)
2021-03-11 21:06:31,191 [main:50] - replacing prope4 Result<Ty0>
2021-03-11 21:06:31,191 [main:54] - Getting value of type Result<Ty0>
2021-03-11 21:06:31,338 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 21:06:31,486 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:06:31,491 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:06:31,782 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:06:31,782 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 21:06:32,462 [main:67] - randomType = Pair<Collection<Char?>, Map<String, Kla6>>
2021-03-11 21:06:32,594 [main:302] - generating value of type = Pair<Collection<Char?>, Map<String, Kla6>> false depth = 0
2021-03-11 21:06:32,732 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Collection<Char?>, second: Map<String, Kla6>): Pair<Collection<Char?>, Map<String, Kla6>> = TODO()
2021-03-11 21:06:32,736 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Collection<Char?>, second: Map<String, Kla6>): Pair<Collection<Char?>, Map<String, Kla6>> = TODO()
2021-03-11 21:06:32,876 [main:302] - generating value of type = Collection<Char?> false depth = 3
2021-03-11 21:06:33,026 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Char?): Collection<Char?> = TODO()
2021-03-11 21:06:33,030 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Char?): Collection<Char?> = TODO()
2021-03-11 21:06:33,177 [main:302] - generating value of type = Char true depth = 6
2021-03-11 21:06:33,180 [main:95] - GENERATED = arrayListOf<Char?>('䘋')
2021-03-11 21:06:33,180 [main:302] - generating value of type = Map<String, Kla6> false depth = 3
2021-03-11 21:06:33,318 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(pairs: Pair<String, Kla6>): Map<Strg, Kla6> = TODO()
2021-03-11 21:06:33,322 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(pairs: Pair<String, Kla6>): Map<Strg, Kla6> = TODO()
2021-03-11 21:06:33,464 [main:302] - generating value of type = Pair<String, Kla6> false depth = 6
2021-03-11 21:06:33,600 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: Kla6): Pair<String, Kla6> = TODO()
2021-03-11 21:06:33,604 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: Kla6): Pair<String, Kla6> = TODO()
2021-03-11 21:06:33,746 [main:302] - generating value of type = String true depth = 9
2021-03-11 21:06:33,749 [main:302] - generating value of type = Kla6 false depth = 9
2021-03-11 21:06:33,752 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:06:33,752 [main:95] - GENERATED = Pair<String, Kla6>("gojnx", Kla6())
2021-03-11 21:06:33,752 [main:95] - GENERATED = mutableMapOf<String, Kla6>(Pair<String, Kla6>("gojnx", Kla6()))
2021-03-11 21:06:33,752 [main:95] - GENERATED = Pair<Collection<Char?>, Map<String, Kla6>>(arrayListOf<Char?>('䘋'), mutableMapOf<String, Kla6>(Pair<String, Kla6>("gojnx", Kla6())))
2021-03-11 21:06:33,774 [main:106] - GETTING Result<Ty0> from R
2021-03-11 21:06:33,780 [main:106] - GETTING Result<Ty0> from R
2021-03-11 21:06:33,782 [main:106] - GETTING Result<Ty0> from String
2021-03-11 21:06:33,807 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 21:06:33,848 [main:106] - GETTING Result<Ty0> from Kla0
2021-03-11 21:06:33,858 [main:106] - GETTING Result<Ty0> from String
2021-03-11 21:06:33,859 [main:106] - GETTING Result<Ty0> from Function1<Int, Int>
2021-03-11 21:06:33,873 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 21:06:33,875 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 21:06:33,876 [main:106] - GETTING Result<Ty0> from String
2021-03-11 21:06:33,876 [main:111] - Cant find and generate replacement for prope4 type Result<Ty0>
2021-03-11 21:06:33,876 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 21:06:33,876 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 21:06:33,876 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 21:06:34,007 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 21:06:34,013 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 21:06:34,643 [main:67] - randomType = ArrayList<Triple<Double, Double, Kla5>>
2021-03-11 21:06:34,773 [main:302] - generating value of type = ArrayList<Triple<Double, Double, Kla5>> false depth = 0
2021-03-11 21:06:34,942 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Triple<Double, Double, Kla5>> = TODO()
2021-03-11 21:06:34,946 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Triple<Double, Double, Kla5>> = TODO()
2021-03-11 21:06:35,236 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:06:35,239 [main:95] - GENERATED = ArrayList<Triple<Double, Double, Kla5>>(1238416561)
2021-03-11 21:06:35,459 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 21:06:35,477 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-11 21:06:35,487 [main:106] - GETTING EmptyCoroutineContext from Function1<Int, Int>
2021-03-11 21:06:35,500 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 21:06:35,542 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 21:06:35,543 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 21:06:35,544 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 21:06:35,544 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 21:06:35,545 [main:106] - GETTING EmptyCoroutineContext from R
2021-03-11 21:06:35,552 [main:106] - GETTING EmptyCoroutineContext from R
2021-03-11 21:06:35,553 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 21:06:35,553 [main:107] - replacing (2, Int)
2021-03-11 21:06:35,553 [main:50] - replacing 2 Int
2021-03-11 21:06:35,553 [main:54] - Getting value of type Int
2021-03-11 21:06:35,693 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:35,696 [main:58] - GENERATED VALUE OF TYPE Int = -1975672241
2021-03-11 21:06:35,696 [main:61] - GENERATED IS CALL =false
2021-03-11 21:06:35,857 [main:67] - randomType = Kla3?
2021-03-11 21:06:35,991 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 21:06:35,994 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 21:06:36,014 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@634851c1]
2021-03-11 21:06:36,015 [main:78] - Generated call from random type = (Kla3())?.prope4?.hashCode()!!
2021-03-11 21:06:36,015 [main:106] - GETTING Int from Int
2021-03-11 21:06:36,051 [main:113] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-11 21:06:36,051 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-11 21:06:36,051 [main:117] - GENERATED CALL = (prope0.fu0()).shr(prope0.fu0())
2021-03-11 21:06:36,051 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e1be76], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3cea2750]]
2021-03-11 21:06:36,051 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e1be76]
2021-03-11 21:06:36,051 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3cea2750]
2021-03-11 21:06:36,052 [main:117] - GENERATED CALL = (prope0.fu0()).compareTo(Kla0(1037863339, {a: Int -> 1609665518}).fu0()).coerceAtMost(prope0.fu0())
2021-03-11 21:06:36,052 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23f7b16]]
2021-03-11 21:06:36,052 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23f7b16]
2021-03-11 21:06:36,186 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:06:36,189 [main:117] - GENERATED CALL = (prope0.fu0()).rem(62)
2021-03-11 21:06:36,189 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472505ef], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3d07f8f8]]
2021-03-11 21:06:36,189 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472505ef]
2021-03-11 21:06:36,319 [main:302] - generating value of type = Long true depth = 0
2021-03-11 21:06:36,322 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3d07f8f8]
2021-03-11 21:06:36,322 [main:117] - GENERATED CALL = (prope0.fu0()).div(923368039419139729).countLeadingZeroBits()
2021-03-11 21:06:36,322 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@595713fd], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1838cb5b]]
2021-03-11 21:06:36,322 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@595713fd]
2021-03-11 21:06:36,322 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1838cb5b]
2021-03-11 21:06:36,323 [main:117] - GENERATED CALL = (prope0.fu0()).toInt().takeLowestOneBit()
2021-03-11 21:06:36,323 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e1be76], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5123b41a]]
2021-03-11 21:06:36,323 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27e1be76]
2021-03-11 21:06:36,323 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5123b41a]
2021-03-11 21:06:36,323 [main:117] - GENERATED CALL = (prope0.fu0()).compareTo(Kla0(1037863339, {a: Int -> 1609665518}).state).and(Kla0(1037863339, {a: Int -> 1609665518}).fu0())
2021-03-11 21:06:36,323 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a6057bf], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2cacda88]]
2021-03-11 21:06:36,323 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a6057bf]
2021-03-11 21:06:36,455 [main:302] - generating value of type = Double true depth = 0
2021-03-11 21:06:36,458 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2cacda88]
2021-03-11 21:06:36,590 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:06:36,593 [main:117] - GENERATED CALL = (prope0.fu0()).div(0.42405195806910856).compareTo(13)
2021-03-11 21:06:36,594 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@494b20a4], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@a026d6]]
2021-03-11 21:06:36,594 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@494b20a4]
2021-03-11 21:06:36,594 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@a026d6]
2021-03-11 21:06:36,594 [main:117] - GENERATED CALL = (prope0.fu0()).toShort().toInt()
2021-03-11 21:06:36,594 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@595713fd], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7efc8091]]
2021-03-11 21:06:36,594 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@595713fd]
2021-03-11 21:06:36,594 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7efc8091]
2021-03-11 21:06:36,594 [main:117] - GENERATED CALL = (prope0.fu0()).toInt().dec()
2021-03-11 21:06:36,594 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472505ef], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2dd7279f]]
2021-03-11 21:06:36,594 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472505ef]
2021-03-11 21:06:36,728 [main:302] - generating value of type = Long true depth = 0
2021-03-11 21:06:36,731 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2dd7279f]
2021-03-11 21:06:36,731 [main:117] - GENERATED CALL = (prope0.fu0()).div(967541503726651777).countOneBits()
2021-03-11 21:06:36,731 [main:114] - replacement of 2 of type Int is (prope0.fu0()).div(0.42405195806910856).compareTo(13)
2021-03-11 21:06:36,863 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:06:36,863 [main:66] - Compilation checking started
2021-03-11 21:06:37,579 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(2)
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:06:37,583 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 21:06:37,584 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 21:06:37,584 [main:54] - Getting value of type Function0<Boolean>
2021-03-11 21:06:37,738 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 21:06:37,741 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:06:37,744 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 21:06:37,744 [main:61] - GENERATED IS CALL =false
2021-03-11 21:06:38,217 [main:67] - randomType = HashSet<ArrayList<UShort>>
2021-03-11 21:06:38,352 [main:302] - generating value of type = HashSet<ArrayList<UShort>> false depth = 0
2021-03-11 21:06:38,493 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<ArrayList<UShort>> = TODO()
2021-03-11 21:06:38,497 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<ArrayList<UShort>> = TODO()
2021-03-11 21:06:38,638 [main:95] - GENERATED = linkedSetOf<ArrayList<UShort>>()
2021-03-11 21:06:38,761 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 21:06:38,778 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 21:06:38,779 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 21:06:38,809 [main:106] - GETTING Function0<Boolean> from Kla0
2021-03-11 21:06:38,817 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 21:06:38,818 [main:106] - GETTING Function0<Boolean> from R
2021-03-11 21:06:38,824 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 21:06:38,825 [main:106] - GETTING Function0<Boolean> from R
2021-03-11 21:06:38,826 [main:106] - GETTING Function0<Boolean> from Function1<Int, Int>
2021-03-11 21:06:38,836 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 21:06:38,837 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { false}
2021-03-11 21:06:38,974 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 21:06:38,975 [main:66] - Compilation checking started
2021-03-11 21:06:39,631 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(2)
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:06:39,634 [main:107] - replacing (method, String)
2021-03-11 21:06:39,635 [main:50] - replacing method String
2021-03-11 21:06:39,635 [main:54] - Getting value of type String
2021-03-11 21:06:39,773 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:06:39,776 [main:58] - GENERATED VALUE OF TYPE String = "bcwlv"
2021-03-11 21:06:39,776 [main:61] - GENERATED IS CALL =false
2021-03-11 21:06:39,940 [main:67] - randomType = ArrayList<Kla2>
2021-03-11 21:06:40,096 [main:302] - generating value of type = ArrayList<Kla2> false depth = 0
2021-03-11 21:06:40,233 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla2): ArrayList<Kla2> = TODO()
2021-03-11 21:06:40,237 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla2): ArrayList<Kla2> = TODO()
2021-03-11 21:06:40,375 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 21:06:40,378 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 21:06:40,509 [main:194] - Type params = []
2021-03-11 21:06:40,640 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-11 21:06:40,775 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:06:40,779 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:06:41,075 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-11 21:06:41,215 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:06:41,219 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:06:41,677 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 21:06:41,818 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:06:41,822 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:06:42,279 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:06:42,279 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:06:42,279 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:06:42,280 [main:95] - GENERATED = arrayListOf<Kla2>(Kla2())
2021-03-11 21:06:42,425 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@1a02696b]
2021-03-11 21:06:42,425 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@34fb622b]
2021-03-11 21:06:42,426 [main:78] - Generated call from random type = (arrayListOf<Kla2>(Kla2())).toArray().contentToString()
2021-03-11 21:06:42,426 [main:106] - GETTING String from String
2021-03-11 21:06:42,443 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54cc983b]]
2021-03-11 21:06:42,443 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54cc983b]
2021-03-11 21:06:42,443 [main:117] - GENERATED CALL = (R("kcltn").test()).trimEnd()
2021-03-11 21:06:42,443 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bb3f8b7]]
2021-03-11 21:06:42,443 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bb3f8b7]
2021-03-11 21:06:42,443 [main:117] - GENERATED CALL = (R("kcltn").test()).trim()
2021-03-11 21:06:42,443 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16727030]]
2021-03-11 21:06:42,444 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:06:42,444 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16727030]
2021-03-11 21:06:42,602 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:06:42,740 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:06:42,744 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:06:43,040 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:06:43,043 [main:95] - GENERATED = StringBuilder(-1104958824)
2021-03-11 21:06:43,178 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:06:43,181 [main:117] - GENERATED CALL = (R("kcltn").test()).subSequence(Kla0(1037863339, {a: Int -> 1609665518}).state, prope0.fu0()).commonSuffixWith(StringBuilder(-1104958824), true)
2021-03-11 21:06:43,181 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@262449c3]]
2021-03-11 21:06:43,181 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@262449c3]
2021-03-11 21:06:43,311 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:43,314 [main:117] - GENERATED CALL = (R("kcltn").test()).length.toString(-836056368)
2021-03-11 21:06:43,314 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558eb96b]]
2021-03-11 21:06:43,314 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558eb96b]
2021-03-11 21:06:43,448 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:06:43,451 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:06:43,454 [main:117] - GENERATED CALL = (R("kcltn").test()).filterNot({a: Char -> false})
2021-03-11 21:06:43,454 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bada6bd]]
2021-03-11 21:06:43,454 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bada6bd]
2021-03-11 21:06:43,589 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 21:06:43,592 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:06:43,595 [main:117] - GENERATED CALL = (R("kcltn").test()).filterIndexed({a: Int, b: Char -> true})
2021-03-11 21:06:43,595 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1519e1d1]]
2021-03-11 21:06:43,595 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1519e1d1]
2021-03-11 21:06:43,728 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 21:06:43,866 [main:43] - GENERATING CALL OF fun <T> emptyList(): Iterable<Int> = TODO()
2021-03-11 21:06:43,870 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyList(): Iterable<Int> = TODO()
2021-03-11 21:06:44,006 [main:95] - GENERATED = emptyList<Int>()
2021-03-11 21:06:44,007 [main:117] - GENERATED CALL = (R("kcltn").test()).slice(emptyList<Int>())
2021-03-11 21:06:44,007 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0e29c9]]
2021-03-11 21:06:44,007 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:06:44,007 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0e29c9]
2021-03-11 21:06:44,137 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 21:06:44,273 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 21:06:44,277 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 21:06:44,566 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:06:44,569 [main:95] - GENERATED = Regex("hwvtn")
2021-03-11 21:06:44,570 [main:117] - GENERATED CALL = (R("kcltn").test()).subSequence(Kla0(1037863339, {a: Int -> 1609665518}).state, Kla0(1037863339, {a: Int -> 1609665518}).fu0()).replaceFirst(Regex("hwvtn"), (R("OK")).test())
2021-03-11 21:06:44,570 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67f91afe]]
2021-03-11 21:06:44,570 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67f91afe]
2021-03-11 21:06:44,570 [main:117] - GENERATED CALL = (R("kcltn").test()).capitalize()
2021-03-11 21:06:44,570 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@372073e2]]
2021-03-11 21:06:44,570 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@372073e2]
2021-03-11 21:06:44,570 [main:117] - GENERATED CALL = (R("kcltn").test()).takeLast(prope0.fu0())
2021-03-11 21:06:44,570 [main:114] - replacement of method of type String is (R("kcltn").test()).takeLast(prope0.fu0())
2021-03-11 21:06:44,705 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:06:44,705 [main:66] - Compilation checking started
2021-03-11 21:06:45,424 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(2)
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error("tail-call optimization hit: method " + (R("kcltn").test()).takeLast(prope0.fu0()) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:06:45,429 [main:107] - replacing ("tail-call optimization hit: method " + (R("kcltn").test()).takeLast(prope0.fu0()) + " has no state-machine ", String)
2021-03-11 21:06:45,429 [main:50] - replacing "tail-call optimization hit: method " + (R("kcltn").test()).takeLast(prope0.fu0()) + " has no state-machine " String
2021-03-11 21:06:45,430 [main:54] - Getting value of type String
2021-03-11 21:06:45,591 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:06:45,594 [main:58] - GENERATED VALUE OF TYPE String = "hfall"
2021-03-11 21:06:45,594 [main:61] - GENERATED IS CALL =false
2021-03-11 21:06:45,763 [main:67] - randomType = Char?
2021-03-11 21:06:45,897 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:06:45,919 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Char defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@56e68adc]
2021-03-11 21:06:45,919 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ad8aeb5]
2021-03-11 21:06:45,919 [main:78] - Generated call from random type = ('')?.dec().uppercase()
2021-03-11 21:06:45,920 [main:106] - GETTING String from String
2021-03-11 21:06:45,936 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c87c7d]]
2021-03-11 21:06:45,936 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c87c7d]
2021-03-11 21:06:46,068 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:06:46,205 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:06:46,208 [main:117] - GENERATED CALL = ((R("OK")).test()).substringBeforeLast('', "vmdoj")
2021-03-11 21:06:46,208 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0e29c9]]
2021-03-11 21:06:46,208 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:06:46,208 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0e29c9]
2021-03-11 21:06:46,342 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 21:06:46,486 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 21:06:46,490 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 21:06:46,930 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:06:46,933 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 21:06:46,936 [main:95] - GENERATED = Regex("mepve", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-11 21:06:46,937 [main:117] - GENERATED CALL = ((R("OK")).test()).subSequence(Kla0(1037863339, {a: Int -> 1609665518}).fu0(), prope0.fu0()).replaceFirst(Regex("mepve", kotlin.text.RegexOption.IGNORE_CASE), ArrayDeque<LinkedHashSet<String>>(hashSetOf<LinkedHashSet<String>>(LinkedHashSet<String>(918098948, 0.44874734f))).runExt<ArrayDeque<LinkedHashSet<String>>>({ "tebos"}))
2021-03-11 21:06:46,937 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54cc983b]]
2021-03-11 21:06:46,937 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54cc983b]
2021-03-11 21:06:46,938 [main:117] - GENERATED CALL = ((R("OK")).test()).trimEnd()
2021-03-11 21:06:46,938 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586efe71]]
2021-03-11 21:06:46,938 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586efe71]
2021-03-11 21:06:47,071 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:06:47,077 [main:117] - GENERATED CALL = ((R("OK")).test()).replaceRange(Kla0(1037863339, {a: Int -> 1609665518}).fu0(), Kla0(1037863339, {a: Int -> 1609665518}).fu0(), "vmvxi")
2021-03-11 21:06:47,077 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ac8adc1]]
2021-03-11 21:06:47,078 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5]
2021-03-11 21:06:47,078 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ac8adc1]
2021-03-11 21:06:47,078 [main:117] - GENERATED CALL = ((R("OK")).test()).get(Kla0(1037863339, {a: Int -> 1609665518}).state).titlecase()
2021-03-11 21:06:47,078 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1351ee94]]
2021-03-11 21:06:47,078 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1351ee94]
2021-03-11 21:06:47,078 [main:117] - GENERATED CALL = ((R("OK")).test()).reversed()
2021-03-11 21:06:47,078 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d40e1b4]]
2021-03-11 21:06:47,078 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d40e1b4]
2021-03-11 21:06:47,211 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:06:47,214 [main:117] - GENERATED CALL = ((R("OK")).test()).padEnd(prope0.fu0(), '뫠')
2021-03-11 21:06:47,214 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c7aac9b]]
2021-03-11 21:06:47,214 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c7aac9b]
2021-03-11 21:06:47,347 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:06:47,483 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:06:47,618 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:06:47,621 [main:117] - GENERATED CALL = ((R("OK")).test()).replaceFirst('뮲', '', true)
2021-03-11 21:06:47,621 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7752d5ce]]
2021-03-11 21:06:47,621 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7752d5ce]
2021-03-11 21:06:47,756 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:06:47,891 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:06:47,895 [main:117] - GENERATED CALL = ((R("OK")).test()).substringAfterLast('跟', "cvjmy")
2021-03-11 21:06:47,895 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@465cdd2f]]
2021-03-11 21:06:47,895 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@465cdd2f]
2021-03-11 21:06:47,895 [main:117] - GENERATED CALL = ((R("OK")).test()).repeat(Kla0(1037863339, {a: Int -> 1609665518}).state)
2021-03-11 21:06:47,895 [main:114] - replacement of "tail-call optimization hit: method " + (R("kcltn").test()).takeLast(prope0.fu0()) + " has no state-machine " of type String is (R("OK")).test()
2021-03-11 21:06:48,053 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:06:48,053 [main:66] - Compilation checking started
2021-03-11 21:06:48,682 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(2)
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((R("OK")).test() +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:06:48,684 [main:107] - replacing (2, Int)
2021-03-11 21:06:48,685 [main:50] - replacing 2 Int
2021-03-11 21:06:48,685 [main:54] - Getting value of type Int
2021-03-11 21:06:48,819 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:48,822 [main:58] - GENERATED VALUE OF TYPE Int = -1437117896
2021-03-11 21:06:48,822 [main:61] - GENERATED IS CALL =false
2021-03-11 21:06:49,434 [main:67] - randomType = Function1<ULong, ArrayList<Short>>
2021-03-11 21:06:49,435 [main:106] - GETTING Int from String
2021-03-11 21:06:49,455 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32a7a271]]
2021-03-11 21:06:49,455 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:06:49,585 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:49,588 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32a7a271]
2021-03-11 21:06:49,718 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 21:06:49,721 [main:302] - generating value of type = Int true depth = 1
2021-03-11 21:06:49,725 [main:117] - GENERATED CALL = ((R("OK")).test()).subSequence(-1008401683, prope0.fu0()).sumBy({a: Char -> -1414941716})
2021-03-11 21:06:49,725 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-11 21:06:49,725 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-11 21:06:49,725 [main:117] - GENERATED CALL = ((R("OK")).test()).length.shr(Kla0(1037863339, {a: Int -> 1609665518}).state)
2021-03-11 21:06:49,725 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e4bd4f1]]
2021-03-11 21:06:49,725 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e4bd4f1]
2021-03-11 21:06:49,862 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 21:06:50,003 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:06:50,007 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:06:50,149 [main:302] - generating value of type = Char true depth = 3
2021-03-11 21:06:50,152 [main:95] - GENERATED = charArrayOf('➺')
2021-03-11 21:06:50,283 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:06:50,286 [main:117] - GENERATED CALL = ((R("OK")).test()).lastIndexOfAny(charArrayOf('➺'), Kla0(1037863339, {a: Int -> 1609665518}).fu0(), true)
2021-03-11 21:06:50,286 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1db5ad28]]
2021-03-11 21:06:50,286 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982]
2021-03-11 21:06:50,286 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1db5ad28]
2021-03-11 21:06:50,287 [main:117] - GENERATED CALL = ((R("OK")).test()).compareTo(ArrayDeque<LinkedHashSet<String>>(hashSetOf<LinkedHashSet<String>>(LinkedHashSet<String>(918098948, 0.44874734f))).runExt<ArrayDeque<LinkedHashSet<String>>>({ "tebos"})).countOneBits()
2021-03-11 21:06:50,287 [main:113] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32a7a271]]
2021-03-11 21:06:50,287 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32a7a271]
2021-03-11 21:06:50,415 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 21:06:50,418 [main:302] - generating value of type = Int true depth = 1
2021-03-11 21:06:50,421 [main:117] - GENERATED CALL = ((R("OK")).test()).sumBy({a: Char -> 502297493})
2021-03-11 21:06:50,422 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35d5f8ab]]
2021-03-11 21:06:50,422 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:06:50,422 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35d5f8ab]
2021-03-11 21:06:50,550 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:06:50,682 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:06:50,685 [main:117] - GENERATED CALL = ((R("OK")).test()).subSequence(Kla0(1037863339, {a: Int -> 1609665518}).fu0(), prope0.fu0()).lastIndexOf('䝔', Kla0(1037863339, {a: Int -> 1609665518}).fu0(), true)
2021-03-11 21:06:50,686 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@616e867b]]
2021-03-11 21:06:50,687 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@616e867b]
2021-03-11 21:06:50,687 [main:117] - GENERATED CALL = ((R("OK")).test()).length.inv()
2021-03-11 21:06:50,687 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290bfb68]]
2021-03-11 21:06:50,687 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290bfb68]
2021-03-11 21:06:50,687 [main:117] - GENERATED CALL = ((R("OK")).test()).toInt()
2021-03-11 21:06:50,687 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@260fb925]]
2021-03-11 21:06:50,687 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@260fb925]
2021-03-11 21:06:50,846 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:06:50,849 [main:117] - GENERATED CALL = ((R("OK")).test()).length.minus(57)
2021-03-11 21:06:50,849 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-11 21:06:50,849 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-11 21:06:50,978 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:06:50,981 [main:117] - GENERATED CALL = ((R("OK")).test()).length.times(16)
2021-03-11 21:06:50,981 [main:114] - replacement of 2 of type Int is ((R("OK")).test()).length.minus(57)
2021-03-11 21:06:51,108 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:06:51,109 [main:66] - Compilation checking started
2021-03-11 21:06:51,738 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(((R("OK")).test()).length.minus(57))
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((R("OK")).test() +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:06:51,741 [main:107] - replacing (prope9 != null, Boolean)
2021-03-11 21:06:51,741 [main:50] - replacing prope9 != null Boolean
2021-03-11 21:06:51,741 [main:54] - Getting value of type Boolean
2021-03-11 21:06:51,884 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:06:51,887 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 21:06:51,888 [main:61] - GENERATED IS CALL =false
2021-03-11 21:06:51,899 [main:67] - randomType = Kla1
2021-03-11 21:06:51,900 [main:106] - GETTING Boolean from Function1<Int, Int>
2021-03-11 21:06:51,910 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function1[DeserializedSimpleFunctionDescriptor@6e5ffaee]]
2021-03-11 21:06:51,910 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function1[DeserializedSimpleFunctionDescriptor@6e5ffaee]
2021-03-11 21:06:52,040 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:06:52,040 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).prope0).equals("lyujw")
2021-03-11 21:06:52,040 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function1[DeserializedSimpleFunctionDescriptor@6e5ffaee], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@12855741]]
2021-03-11 21:06:52,040 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function1[DeserializedSimpleFunctionDescriptor@6e5ffaee]
2021-03-11 21:06:52,178 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:06:52,178 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@12855741]
2021-03-11 21:06:52,308 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:06:52,312 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).prope0).equals("bsbxn").or(false)
2021-03-11 21:06:52,312 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function1[DeserializedSimpleFunctionDescriptor@6e5ffaee], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ffb6ee8]]
2021-03-11 21:06:52,312 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function1[DeserializedSimpleFunctionDescriptor@6e5ffaee]
2021-03-11 21:06:52,442 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:06:52,443 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ffb6ee8]
2021-03-11 21:06:52,576 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:06:52,580 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).prope0).equals("eotld").and(false)
2021-03-11 21:06:52,580 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function1[DeserializedSimpleFunctionDescriptor@6e5ffaee], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@49475c0a]]
2021-03-11 21:06:52,580 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function1[DeserializedSimpleFunctionDescriptor@6e5ffaee]
2021-03-11 21:06:52,710 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:06:52,711 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@49475c0a]
2021-03-11 21:06:52,843 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:06:52,846 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).prope0).equals("gctes").xor(true)
2021-03-11 21:06:52,846 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function1[DeserializedSimpleFunctionDescriptor@6e5ffaee], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@290505f8]]
2021-03-11 21:06:52,846 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function1[DeserializedSimpleFunctionDescriptor@6e5ffaee]
2021-03-11 21:06:52,976 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:06:52,976 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@290505f8]
2021-03-11 21:06:53,106 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:06:53,106 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).prope0).equals("ubtko").equals("fmcmq")
2021-03-11 21:06:53,106 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.Int): kotlin.Int defined in kotlin.Function1[FunctionInvokeDescriptor@10c03615], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e0d2566]]
2021-03-11 21:06:53,106 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.Int): kotlin.Int defined in kotlin.Function1[FunctionInvokeDescriptor@10c03615]
2021-03-11 21:06:53,107 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e0d2566]
2021-03-11 21:06:53,235 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:06:53,236 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).fu0()).equals("qyamc")
2021-03-11 21:06:53,236 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function1[DeserializedSimpleFunctionDescriptor@6e5ffaee], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@45c3d5f3]]
2021-03-11 21:06:53,236 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function1[DeserializedSimpleFunctionDescriptor@6e5ffaee]
2021-03-11 21:06:53,365 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:06:53,365 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@45c3d5f3]
2021-03-11 21:06:53,366 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).prope0).equals("asiyf").not()
2021-03-11 21:06:53,366 [main:114] - replacement of prope9 != null of type Boolean is (Kla0(1037863339, {a: Int -> 1609665518}).prope0).equals("lyujw")
2021-03-11 21:06:53,495 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:06:53,496 [main:66] - Compilation checking started
2021-03-11 21:06:53,921 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(((R("OK")).test()).length.minus(57))
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while ((Kla0(1037863339, {a: Int -> 1609665518}).prope0).equals("lyujw")) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((R("OK")).test() +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:06:53,924 [main:107] - replacing ((R("OK")).test() +
                prope5.joinToString(separator = "\n"), String)
2021-03-11 21:06:53,924 [main:50] - replacing (R("OK")).test() +
                prope5.joinToString(separator = "\n") String
2021-03-11 21:06:53,924 [main:54] - Getting value of type String
2021-03-11 21:06:54,058 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:06:54,062 [main:58] - GENERATED VALUE OF TYPE String = "hydgq"
2021-03-11 21:06:54,062 [main:61] - GENERATED IS CALL =false
2021-03-11 21:06:54,073 [main:67] - randomType = Kla5
2021-03-11 21:06:54,212 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 21:06:54,215 [main:112] - generating klass Kla5 text = class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((R("OK")).test() +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 21:06:54,221 [main:106] - GETTING String from Function1<Int, Int>
2021-03-11 21:06:54,231 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.Int): kotlin.Int defined in kotlin.Function1[FunctionInvokeDescriptor@10c03615], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@262449c3]]
2021-03-11 21:06:54,231 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.Int): kotlin.Int defined in kotlin.Function1[FunctionInvokeDescriptor@10c03615]
2021-03-11 21:06:54,232 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@262449c3]
2021-03-11 21:06:54,362 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:06:54,366 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824)
2021-03-11 21:06:54,366 [main:114] - replacement of (R("OK")).test() +
                prope5.joinToString(separator = "\n") of type String is (Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824)
2021-03-11 21:06:54,494 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:06:54,495 [main:66] - Compilation checking started
2021-03-11 21:06:55,137 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(((R("OK")).test()).length.minus(57))
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:06:55,141 [main:107] - replacing (prope7, Boolean)
2021-03-11 21:06:55,142 [main:50] - replacing prope7 Boolean
2021-03-11 21:06:55,142 [main:54] - Getting value of type Boolean
2021-03-11 21:06:55,305 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:06:55,308 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 21:06:55,308 [main:61] - GENERATED IS CALL =false
2021-03-11 21:06:55,637 [main:67] - randomType = Kla4<UInt>
2021-03-11 21:06:55,775 [main:302] - generating value of type = Kla4<UInt> false depth = 0
2021-03-11 21:06:55,778 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 21:06:56,533 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-11 21:06:56,536 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:06:56,552 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@4a9ec224]
2021-03-11 21:06:56,714 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:06:56,714 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@49475c0a]
2021-03-11 21:06:56,845 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:06:56,848 [main:78] - Generated call from random type = (Kla7).equals("cazub").xor(true)
2021-03-11 21:06:56,849 [main:106] - GETTING Boolean from Int
2021-03-11 21:06:56,893 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2c41b93]]
2021-03-11 21:06:56,893 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 21:06:56,893 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2c41b93]
2021-03-11 21:06:56,894 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).toDouble().isNaN()
2021-03-11 21:06:56,894 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f0d2a97], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@7e6a2cb5]]
2021-03-11 21:06:56,894 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 21:06:56,894 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@7e6a2cb5]
2021-03-11 21:06:57,026 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:06:57,026 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).toDouble().equals("hfrnt")
2021-03-11 21:06:57,027 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3949654f]]
2021-03-11 21:06:57,027 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890]
2021-03-11 21:06:57,027 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3949654f]
2021-03-11 21:06:57,027 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).toChar().isHighSurrogate()
2021-03-11 21:06:57,027 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@85d8054], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2c8f94f6]]
2021-03-11 21:06:57,027 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@85d8054]
2021-03-11 21:06:57,027 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2c8f94f6]
2021-03-11 21:06:57,158 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).toByte().equals(null)
2021-03-11 21:06:57,158 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3b9f3db5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@20014987]]
2021-03-11 21:06:57,158 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3b9f3db5]
2021-03-11 21:06:57,158 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@20014987]
2021-03-11 21:06:57,289 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:06:57,290 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).toFloat().equals("dbfne")
2021-03-11 21:06:57,290 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@620e5544]]
2021-03-11 21:06:57,290 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 21:06:57,290 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@620e5544]
2021-03-11 21:06:57,290 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).toDouble().isFinite()
2021-03-11 21:06:57,290 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e0d2566]]
2021-03-11 21:06:57,290 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e0d2566]
2021-03-11 21:06:57,431 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:06:57,432 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).equals("fwpyv")
2021-03-11 21:06:57,432 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a53a94d]]
2021-03-11 21:06:57,432 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890]
2021-03-11 21:06:57,432 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a53a94d]
2021-03-11 21:06:57,432 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).toChar().isSurrogate()
2021-03-11 21:06:57,432 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b1385b6]]
2021-03-11 21:06:57,432 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1765e890]
2021-03-11 21:06:57,432 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b1385b6]
2021-03-11 21:06:57,433 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).toChar().isISOControl()
2021-03-11 21:06:57,433 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3b9f3db5], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1270c8ec]]
2021-03-11 21:06:57,433 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3b9f3db5]
2021-03-11 21:06:57,433 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1270c8ec]
2021-03-11 21:06:57,433 [main:117] - GENERATED CALL = (Kla0(1037863339, {a: Int -> 1609665518}).state).toFloat().isInfinite()
2021-03-11 21:06:57,433 [main:114] - replacement of prope7 of type Boolean is (Kla0(1037863339, {a: Int -> 1609665518}).state).toChar().isISOControl()
2021-03-11 21:06:57,566 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:06:57,566 [main:66] - Compilation checking started
2021-03-11 21:06:57,947 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(((R("OK")).test()).length.minus(57))
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope6 = 0
        (Kla0(1037863339, {a: Int -> 1609665518}).state).toChar().isISOControl() = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:06:57,951 [main:107] - replacing (prope3.prope8, Function0<Unit>)
2021-03-11 21:06:57,952 [main:50] - replacing prope3.prope8 Function0<Unit>
2021-03-11 21:06:57,952 [main:54] - Getting value of type Function0<Unit>
2021-03-11 21:06:58,092 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 21:06:58,097 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:06:58,107 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 21:06:58,107 [main:61] - GENERATED IS CALL =false
2021-03-11 21:06:58,285 [main:67] - randomType = Kla2?
2021-03-11 21:06:58,418 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 21:06:58,421 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 21:06:58,555 [main:194] - Type params = []
2021-03-11 21:06:58,688 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 21:06:58,827 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:06:58,831 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:06:59,133 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 21:06:59,276 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:06:59,280 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:06:59,784 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 21:06:59,925 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:06:59,929 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:07:00,397 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 21:07:00,545 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:07:00,550 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:07:01,012 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 14
2021-03-11 21:07:01,157 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:07:01,161 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:07:01,633 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 17
2021-03-11 21:07:01,633 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:07:01,633 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:07:01,633 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:07:01,633 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:07:01,633 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:07:01,647 [main:106] - GETTING Function0<Unit> from Function1<Int, Int>
2021-03-11 21:07:01,657 [main:106] - GETTING Function0<Unit> from R
2021-03-11 21:07:01,662 [main:106] - GETTING Function0<Unit> from String
2021-03-11 21:07:01,682 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 21:07:01,713 [main:106] - GETTING Function0<Unit> from String
2021-03-11 21:07:01,714 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 21:07:01,715 [main:106] - GETTING Function0<Unit> from R
2021-03-11 21:07:01,716 [main:106] - GETTING Function0<Unit> from String
2021-03-11 21:07:01,717 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-11 21:07:01,727 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 21:07:01,727 [main:114] - replacement of prope3.prope8 of type Function0<Unit> is { println()}
2021-03-11 21:07:01,857 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 21:07:01,858 [main:66] - Compilation checking started
2021-03-11 21:07:02,279 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(((R("OK")).test()).length.minus(57))
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
{ println()} = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:07:02,282 [main:107] - replacing (true, Boolean)
2021-03-11 21:07:02,282 [main:50] - replacing true Boolean
2021-03-11 21:07:02,282 [main:54] - Getting value of type Boolean
2021-03-11 21:07:02,418 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:07:02,421 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 21:07:02,421 [main:61] - GENERATED IS CALL =false
2021-03-11 21:07:02,905 [main:67] - randomType = Map<UByte, UInt>
2021-03-11 21:07:02,906 [main:106] - GETTING Boolean from R
2021-03-11 21:07:02,913 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@57b49b76], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69fe2612]]
2021-03-11 21:07:02,913 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@57b49b76]
2021-03-11 21:07:02,913 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69fe2612]
2021-03-11 21:07:03,049 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:07:03,188 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:07:03,191 [main:117] - GENERATED CALL = ((R("OK"))).test().startsWith("nlyaq", false)
2021-03-11 21:07:03,192 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5811cf52]]
2021-03-11 21:07:03,192 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5811cf52]
2021-03-11 21:07:03,327 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:07:03,482 [main:43] - GENERATING CALL OF fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<String>)->kotlin.Unit): T = TODO()
2021-03-11 21:07:03,486 [main:61] - WITHOUT TYPE PARAMS = fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<String>)->kotlin.Unit): T = TODO()
2021-03-11 21:07:03,808 [main:302] - generating value of type = Function1<Continuation<String>, Unit> false depth = 3
2021-03-11 21:07:03,811 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 21:07:03,953 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:07:03,957 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:07:04,432 [main:302] - generating value of type = Boolean true depth = 7
2021-03-11 21:07:04,435 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-11 21:07:04,438 [main:302] - generating value of type = Any false depth = 8
2021-03-11 21:07:04,439 [main:95] - GENERATED = require(true, { "zvvtj"})
2021-03-11 21:07:04,439 [main:95] - GENERATED = suspendCoroutine<String>({a: Continuation<String> -> require(true, { "zvvtj"})})
2021-03-11 21:07:04,439 [main:117] - GENERATED CALL = ((R("OK"))).contains(suspendCoroutine<String>({a: Continuation<String> -> require(true, { "zvvtj"})}))
2021-03-11 21:07:04,440 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@316736c2], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@49475c0a]]
2021-03-11 21:07:04,440 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@316736c2]
2021-03-11 21:07:04,580 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:07:04,580 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@49475c0a]
2021-03-11 21:07:04,721 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:07:04,724 [main:117] - GENERATED CALL = ((R("OK"))).equals("lrszk").xor(false)
2021-03-11 21:07:04,724 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@316736c2], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@12855741]]
2021-03-11 21:07:04,724 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@316736c2]
2021-03-11 21:07:04,867 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:07:04,868 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@12855741]
2021-03-11 21:07:05,012 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:07:05,016 [main:117] - GENERATED CALL = ((R("OK"))).equals("nxcwp").or(true)
2021-03-11 21:07:05,016 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@57b49b76], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64e1f5df]]
2021-03-11 21:07:05,016 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@57b49b76]
2021-03-11 21:07:05,016 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64e1f5df]
2021-03-11 21:07:05,017 [main:117] - GENERATED CALL = ((R("OK"))).test().matches(ArrayDeque<LinkedHashSet<String>>(hashSetOf<LinkedHashSet<String>>(LinkedHashSet<String>(918098948, 0.44874734f))).runExt<ArrayDeque<LinkedHashSet<String>>>({ "tebos"}))
2021-03-11 21:07:05,017 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@316736c2], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ffb6ee8]]
2021-03-11 21:07:05,017 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@316736c2]
2021-03-11 21:07:05,197 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:07:05,198 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ffb6ee8]
2021-03-11 21:07:05,331 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:07:05,335 [main:117] - GENERATED CALL = ((R("OK"))).equals("ebauh").and(true)
2021-03-11 21:07:05,335 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@57b49b76], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13237eb1]]
2021-03-11 21:07:05,335 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@57b49b76]
2021-03-11 21:07:05,335 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13237eb1]
2021-03-11 21:07:05,469 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:07:05,611 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:07:05,615 [main:117] - GENERATED CALL = ((R("OK"))).test().endsWith("uhiyz", true)
2021-03-11 21:07:05,615 [main:113] - Case = [public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@57b49b76], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1869639d]]
2021-03-11 21:07:05,615 [main:149] - GENERATING call of type public final fun test(): kotlin.String defined in R[SimpleFunctionDescriptorImpl@57b49b76]
2021-03-11 21:07:05,615 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1869639d]
2021-03-11 21:07:05,751 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:07:05,751 [main:117] - GENERATED CALL = ((R("OK"))).test().equals("vnwhr")
2021-03-11 21:07:05,751 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@316736c2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@290505f8]]
2021-03-11 21:07:05,751 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@316736c2]
2021-03-11 21:07:05,889 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:07:05,890 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@290505f8]
2021-03-11 21:07:06,024 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:07:06,024 [main:117] - GENERATED CALL = ((R("OK"))).equals("oomjl").equals("ydctr")
2021-03-11 21:07:06,185 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@316736c2]]
2021-03-11 21:07:06,186 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in R[SimpleFunctionDescriptorImpl@316736c2]
2021-03-11 21:07:06,324 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:07:06,325 [main:117] - GENERATED CALL = ((R("OK"))).equals("cqboz")
2021-03-11 21:07:06,325 [main:114] - replacement of true of type Boolean is ((R("OK"))).test().startsWith("nlyaq", false)
2021-03-11 21:07:06,459 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:07:06,460 [main:66] - Compilation checking started
2021-03-11 21:07:07,082 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(((R("OK")).test()).length.minus(57))
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { it?.methodName?.startsWith(method) == ((R("OK"))).test().startsWith("nlyaq", false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:07:07,085 [main:107] - replacing (c, Continuation<Unit>)
2021-03-11 21:07:07,085 [main:50] - replacing c Continuation<Unit>
2021-03-11 21:07:07,085 [main:54] - Getting value of type Continuation<Unit>
2021-03-11 21:07:07,220 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 21:07:07,363 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 21:07:07,367 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 21:07:07,832 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 21:07:07,976 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:07:07,983 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:07:08,289 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 21:07:08,470 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:07:08,475 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:07:08,945 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 21:07:09,089 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:07:09,094 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:07:09,565 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:07:09,565 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:07:09,566 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:07:09,566 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 21:07:09,566 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 21:07:09,721 [main:67] - randomType = Byte
2021-03-11 21:07:09,856 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:07:09,893 [main:106] - GETTING Continuation<Unit> from Function1<Int, Int>
2021-03-11 21:07:09,903 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 21:07:09,920 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 21:07:09,921 [main:106] - GETTING Continuation<Unit> from Kla0
2021-03-11 21:07:09,929 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 21:07:09,962 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 21:07:09,963 [main:106] - GETTING Continuation<Unit> from R
2021-03-11 21:07:09,968 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 21:07:09,969 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 21:07:09,970 [main:106] - GETTING Continuation<Unit> from R
2021-03-11 21:07:09,970 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-11 21:07:09,970 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 21:07:09,970 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 21:07:09,970 [main:54] - Getting value of type String
2021-03-11 21:07:10,104 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:07:10,107 [main:58] - GENERATED VALUE OF TYPE String = "gdpry"
2021-03-11 21:07:10,107 [main:61] - GENERATED IS CALL =false
2021-03-11 21:07:10,428 [main:67] - randomType = ULong?
2021-03-11 21:07:10,566 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 21:07:10,602 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@173ae72e]
2021-03-11 21:07:10,602 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294bdbbe]
2021-03-11 21:07:10,736 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:07:10,739 [main:78] - Generated call from random type = (1444842498663821617.toULong())?.toLong().toString(305718919)
2021-03-11 21:07:10,739 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (1444842498663821617.toULong())?.toLong().toString(305718919)
2021-03-11 21:07:10,872 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:07:10,872 [main:66] - Compilation checking started
2021-03-11 21:07:11,620 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                prope3.fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(((R("OK")).test()).length.minus(57))
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { it?.methodName?.startsWith(method) == ((R("OK"))).test().startsWith("nlyaq", false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error((1444842498663821617.toULong())?.toLong().toString(305718919))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:07:11,624 [main:107] - replacing (prope3, Kla6)
2021-03-11 21:07:11,625 [main:50] - replacing prope3 Kla6
2021-03-11 21:07:11,625 [main:54] - Getting value of type Kla6
2021-03-11 21:07:11,772 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 21:07:11,776 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error((1444842498663821617.toULong())?.toLong().toString(305718919))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:07:11,776 [main:58] - GENERATED VALUE OF TYPE Kla6 = Kla6()
2021-03-11 21:07:11,776 [main:61] - GENERATED IS CALL =true
2021-03-11 21:07:11,943 [main:67] - randomType = Short
2021-03-11 21:07:12,084 [main:302] - generating value of type = Short true depth = 0
2021-03-11 21:07:12,121 [main:106] - GETTING Kla6 from Kla0
2021-03-11 21:07:12,129 [main:106] - GETTING Kla6 from Int
2021-03-11 21:07:12,161 [main:106] - GETTING Kla6 from String
2021-03-11 21:07:12,178 [main:106] - GETTING Kla6 from Function1<Int, Int>
2021-03-11 21:07:12,188 [main:106] - GETTING Kla6 from Int
2021-03-11 21:07:12,189 [main:106] - GETTING Kla6 from R
2021-03-11 21:07:12,193 [main:106] - GETTING Kla6 from String
2021-03-11 21:07:12,194 [main:106] - GETTING Kla6 from String
2021-03-11 21:07:12,195 [main:106] - GETTING Kla6 from R
2021-03-11 21:07:12,195 [main:106] - GETTING Kla6 from Int
2021-03-11 21:07:12,195 [main:114] - replacement of prope3 of type Kla6 is Kla6()
2021-03-11 21:07:12,343 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:07:12,343 [main:66] - Compilation checking started
2021-03-11 21:07:13,016 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
Kla6().fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(((R("OK")).test()).length.minus(57))
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { it?.methodName?.startsWith(method) == ((R("OK"))).test().startsWith("nlyaq", false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error((1444842498663821617.toULong())?.toLong().toString(305718919))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:07:13,021 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 21:07:13,021 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 21:07:13,021 [main:54] - Getting value of type Function0<Unit>
2021-03-11 21:07:13,187 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 21:07:13,190 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:07:13,335 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:07:13,340 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:07:13,654 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 21:07:13,658 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 21:07:13,803 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:07:13,808 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:07:14,115 [main:95] - GENERATED = println(null)
2021-03-11 21:07:14,115 [main:95] - GENERATED = contract({ println(null)})
2021-03-11 21:07:14,115 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println(null)})}
2021-03-11 21:07:14,115 [main:61] - GENERATED IS CALL =false
2021-03-11 21:07:14,701 [main:67] - randomType = Triple<Kla3?, Kla2, Kla5>?
2021-03-11 21:07:14,837 [main:302] - generating value of type = Triple<Kla3?, Kla2, Kla5> false depth = 0
2021-03-11 21:07:14,982 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla3?, second: Kla2, third: Kla5): Triple<Kla3?, Kla2, Kla5> = TODO()
2021-03-11 21:07:14,987 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla3?, second: Kla2, third: Kla5): Triple<Kla3?, Kla2, Kla5> = TODO()
2021-03-11 21:07:15,136 [main:302] - generating value of type = Kla3 false depth = 3
2021-03-11 21:07:15,140 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 21:07:15,140 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 21:07:15,144 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 21:07:15,285 [main:194] - Type params = []
2021-03-11 21:07:15,421 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-11 21:07:15,574 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:07:15,579 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:07:15,899 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-11 21:07:16,051 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:07:16,056 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:07:16,560 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:07:16,560 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:07:16,561 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-11 21:07:16,564 [main:112] - generating klass Kla5 text = class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { it?.methodName?.startsWith(method) == ((R("OK"))).test().startsWith("nlyaq", false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824))
    }
}
2021-03-11 21:07:16,565 [main:95] - GENERATED = Triple<Kla3?, Kla2, Kla5>(Kla3(), Kla2(), Kla5())
2021-03-11 21:07:16,586 [main:106] - GETTING Function0<Unit> from Function1<Int, Int>
2021-03-11 21:07:16,599 [main:106] - GETTING Function0<Unit> from String
2021-03-11 21:07:16,625 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-11 21:07:16,635 [main:106] - GETTING Function0<Unit> from String
2021-03-11 21:07:16,636 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 21:07:16,679 [main:106] - GETTING Function0<Unit> from R
2021-03-11 21:07:16,686 [main:106] - GETTING Function0<Unit> from String
2021-03-11 21:07:16,687 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 21:07:16,689 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 21:07:16,690 [main:106] - GETTING Function0<Unit> from R
2021-03-11 21:07:16,690 [main:114] - replacement of prope8 of type Function0<Unit> is { contract({ println(null)})}
2021-03-11 21:07:16,838 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 21:07:16,839 [main:66] - Compilation checking started
2021-03-11 21:07:17,292 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
Kla6().fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(((R("OK")).test()).length.minus(57))
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { it?.methodName?.startsWith(method) == ((R("OK"))).test().startsWith("nlyaq", false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error((1444842498663821617.toULong())?.toLong().toString(305718919))
        { contract({ println(null)})}()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:07:17,297 [main:107] - replacing (prope6, Int)
2021-03-11 21:07:17,297 [main:50] - replacing prope6 Int
2021-03-11 21:07:17,297 [main:54] - Getting value of type Int
2021-03-11 21:07:17,463 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:07:17,467 [main:58] - GENERATED VALUE OF TYPE Int = 286923491
2021-03-11 21:07:17,467 [main:61] - GENERATED IS CALL =false
2021-03-11 21:07:17,683 [main:67] - randomType = Kla4<Int>
2021-03-11 21:07:17,824 [main:302] - generating value of type = Kla4<Int> false depth = 0
2021-03-11 21:07:17,828 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 21:07:18,480 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-11 21:07:18,484 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:07:18,498 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@40ed8598]
2021-03-11 21:07:18,636 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:07:18,636 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3f8d1391]
2021-03-11 21:07:18,776 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:07:18,780 [main:78] - Generated call from random type = (Kla7).equals("mzmtn").compareTo(false)
2021-03-11 21:07:18,781 [main:106] - GETTING Int from String
2021-03-11 21:07:18,798 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6047fd63]]
2021-03-11 21:07:18,798 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@729cefb5]
2021-03-11 21:07:18,798 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6047fd63]
2021-03-11 21:07:18,938 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:07:18,943 [main:117] - GENERATED CALL = ((R("OK")).test()).get(Kla0(1037863339, {a: Int -> 1609665518}).fu0()).minus('唂')
2021-03-11 21:07:18,943 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1db5ad28]]
2021-03-11 21:07:18,943 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1db5ad28]
2021-03-11 21:07:18,943 [main:117] - GENERATED CALL = ((R("OK")).test()).length.countOneBits()
2021-03-11 21:07:18,943 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35d5f8ab]]
2021-03-11 21:07:18,943 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:07:18,943 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35d5f8ab]
2021-03-11 21:07:19,089 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:07:19,239 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:07:19,392 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:07:19,396 [main:117] - GENERATED CALL = ((R("OK")).test()).subSequence(prope0.fu0(), Kla0(1037863339, {a: Int -> 1609665518}).fu0()).lastIndexOf('䣌', 1930801917, true)
2021-03-11 21:07:19,396 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@7e992987]]
2021-03-11 21:07:19,396 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982]
2021-03-11 21:07:19,396 [main:117] - GENERATED CALL = ((R("OK")).test()).compareTo((R("OK")).test()).sign
2021-03-11 21:07:19,396 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@4e3fd320]]
2021-03-11 21:07:19,397 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:07:19,397 [main:117] - GENERATED CALL = ((R("OK")).test()).subSequence(Kla0(1037863339, {a: Int -> 1609665518}).state, prope0.fu0()).lastIndex
2021-03-11 21:07:19,397 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25d168d8]]
2021-03-11 21:07:19,397 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3766b982]
2021-03-11 21:07:19,542 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:07:19,546 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25d168d8]
2021-03-11 21:07:19,546 [main:117] - GENERATED CALL = ((R("OK")).test()).compareTo("nkjcg").toInt()
2021-03-11 21:07:19,546 [main:113] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32a7a271]]
2021-03-11 21:07:19,546 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32a7a271]
2021-03-11 21:07:19,692 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 21:07:19,696 [main:302] - generating value of type = Int true depth = 1
2021-03-11 21:07:19,700 [main:117] - GENERATED CALL = ((R("OK")).test()).sumBy({a: Char -> 312436962})
2021-03-11 21:07:19,700 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3cea2750]]
2021-03-11 21:07:19,700 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3cea2750]
2021-03-11 21:07:19,701 [main:117] - GENERATED CALL = ((R("OK")).test()).length.coerceAtMost(Kla0(1037863339, {a: Int -> 1609665518}).fu0())
2021-03-11 21:07:19,701 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e8a7d8c]]
2021-03-11 21:07:19,701 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e8a7d8c]
2021-03-11 21:07:19,850 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 21:07:19,854 [main:302] - generating value of type = Int true depth = 1
2021-03-11 21:07:19,858 [main:117] - GENERATED CALL = ((R("OK")).test()).sumOf({a: Char -> 1814074749})
2021-03-11 21:07:19,858 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@5a683fd6], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-11 21:07:19,858 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-11 21:07:20,000 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:07:20,004 [main:117] - GENERATED CALL = ((R("OK")).test()).length.times(-114)
2021-03-11 21:07:20,004 [main:114] - replacement of prope6 of type Int is ((R("OK")).test()).subSequence(Kla0(1037863339, {a: Int -> 1609665518}).state, prope0.fu0()).lastIndex
2021-03-11 21:07:20,141 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:07:20,141 [main:66] - Compilation checking started
2021-03-11 21:07:20,776 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
Kla6().fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(((R("OK")).test()).length.minus(57))
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { it?.methodName?.startsWith(method) == ((R("OK"))).test().startsWith("nlyaq", false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + ((R("OK")).test()).subSequence(Kla0(1037863339, {a: Int -> 1609665518}).state, prope0.fu0()).lastIndex)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error((1444842498663821617.toULong())?.toLong().toString(305718919))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:07:20,779 [main:107] - replacing ({
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-11 21:07:20,779 [main:50] - replacing {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    } Unit?
2021-03-11 21:07:20,779 [main:54] - Getting value of type Unit?
2021-03-11 21:07:20,953 [main:58] - GENERATED VALUE OF TYPE Unit? = null
2021-03-11 21:07:20,953 [main:61] - GENERATED IS CALL =false
2021-03-11 21:07:21,296 [main:67] - randomType = Collection<Byte>
2021-03-11 21:07:21,297 [main:106] - GETTING Unit? from String
2021-03-11 21:07:21,318 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36d08f]]
2021-03-11 21:07:21,318 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:07:21,460 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:07:21,464 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36d08f]
2021-03-11 21:07:21,605 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 21:07:21,609 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:07:21,617 [main:117] - GENERATED CALL = (ArrayDeque<LinkedHashSet<String>>(hashSetOf<LinkedHashSet<String>>(LinkedHashSet<String>(918098948, 0.44874734f))).runExt<ArrayDeque<LinkedHashSet<String>>>({ "tebos"}))?.subSequence(1665534996, Kla0(1037863339, {a: Int -> 1609665518}).fu0()).forEachIndexed({a: Int, b: Char -> println()})
2021-03-11 21:07:21,617 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36d08f]]
2021-03-11 21:07:21,617 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36d08f]
2021-03-11 21:07:21,756 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 21:07:21,760 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:07:21,907 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:07:21,913 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:07:22,391 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 21:07:22,395 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 21:07:22,399 [main:302] - generating value of type = Any false depth = 5
2021-03-11 21:07:22,399 [main:95] - GENERATED = check(false, { "xstyy"})
2021-03-11 21:07:22,399 [main:117] - GENERATED CALL = (ArrayDeque<LinkedHashSet<String>>(hashSetOf<LinkedHashSet<String>>(LinkedHashSet<String>(918098948, 0.44874734f))).runExt<ArrayDeque<LinkedHashSet<String>>>({ "tebos"}))?.forEachIndexed({a: Int, b: Char -> check(false, { "xstyy"})})
2021-03-11 21:07:22,400 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb9fbbe]]
2021-03-11 21:07:22,400 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb9fbbe]
2021-03-11 21:07:22,539 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 21:07:22,543 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:07:22,691 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:07:22,696 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:07:23,013 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:07:23,014 [main:95] - GENERATED = print("iipbo")
2021-03-11 21:07:23,014 [main:117] - GENERATED CALL = (ArrayDeque<LinkedHashSet<String>>(hashSetOf<LinkedHashSet<String>>(LinkedHashSet<String>(918098948, 0.44874734f))).runExt<ArrayDeque<LinkedHashSet<String>>>({ "tebos"}))?.forEach({a: Char -> print("iipbo")})
2021-03-11 21:07:23,014 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb9fbbe]]
2021-03-11 21:07:23,014 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@371d663a]
2021-03-11 21:07:23,014 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb9fbbe]
2021-03-11 21:07:23,155 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 21:07:23,159 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:07:23,304 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:07:23,310 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:07:23,619 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:07:23,619 [main:95] - GENERATED = println("tajpp")
2021-03-11 21:07:23,619 [main:117] - GENERATED CALL = (ArrayDeque<LinkedHashSet<String>>(hashSetOf<LinkedHashSet<String>>(LinkedHashSet<String>(918098948, 0.44874734f))).runExt<ArrayDeque<LinkedHashSet<String>>>({ "tebos"}))?.subSequence(prope0.fu0(), prope0.fu0()).forEach({a: Char -> println("tajpp")})
2021-03-11 21:07:23,619 [main:114] - replacement of {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    } of type Unit? is (ArrayDeque<LinkedHashSet<String>>(hashSetOf<LinkedHashSet<String>>(LinkedHashSet<String>(918098948, 0.44874734f))).runExt<ArrayDeque<LinkedHashSet<String>>>({ "tebos"}))?.subSequence(1665534996, Kla0(1037863339, {a: Int -> 1609665518}).fu0()).forEachIndexed({a: Int, b: Char -> println()})
2021-03-11 21:07:23,758 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:07:23,758 [main:66] - Compilation checking started
2021-03-11 21:07:23,765 [main:71] - Wrong syntax or breaks conditions
2021-03-11 21:07:23,766 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
Kla6().fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(((R("OK")).test()).length.minus(57))
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) (ArrayDeque<LinkedHashSet<String>>(hashSetOf<LinkedHashSet<String>>(LinkedHashSet<String>(918098948, 0.44874734f))).runExt<ArrayDeque<LinkedHashSet<String>>>({ "tebos"}))?.subSequence(1665534996, Kla0(1037863339, {a: Int -> 1609665518}).fu0()).forEachIndexed({a: Int, b: Char -> println()})
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { it?.methodName?.startsWith(method) == ((R("OK"))).test().startsWith("nlyaq", false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + ((R("OK")).test()).subSequence(Kla0(1037863339, {a: Int -> 1609665518}).state, prope0.fu0()).lastIndex)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error((1444842498663821617.toULong())?.toLong().toString(305718919))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:07:23,769 [main:107] - replacing (prope4.getOrThrow(), Any?)
2021-03-11 21:07:23,769 [main:50] - replacing prope4.getOrThrow() Any?
2021-03-11 21:07:23,769 [main:54] - Getting value of type Any?
2021-03-11 21:07:23,950 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:07:23,951 [main:58] - GENERATED VALUE OF TYPE Any? = "axrmq"
2021-03-11 21:07:23,951 [main:61] - GENERATED IS CALL =false
2021-03-11 21:07:23,959 [main:67] - randomType = String
2021-03-11 21:07:24,098 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:07:24,120 [main:106] - GETTING Any? from R
2021-03-11 21:07:24,125 [main:106] - GETTING Any? from R
2021-03-11 21:07:24,126 [main:106] - GETTING Any? from Function1<Int, Int>
2021-03-11 21:07:24,137 [main:106] - GETTING Any? from String
2021-03-11 21:07:24,154 [main:106] - GETTING Any? from Int
2021-03-11 21:07:24,184 [main:106] - GETTING Any? from String
2021-03-11 21:07:24,185 [main:106] - GETTING Any? from String
2021-03-11 21:07:24,186 [main:106] - GETTING Any? from Kla0
2021-03-11 21:07:24,195 [main:106] - GETTING Any? from Int
2021-03-11 21:07:24,196 [main:106] - GETTING Any? from Int
2021-03-11 21:07:24,196 [main:114] - replacement of prope4.getOrThrow() of type Any? is "axrmq"
2021-03-11 21:07:24,336 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 21:07:24,336 [main:66] - Compilation checking started
2021-03-11 21:07:25,027 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
Kla6().fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(((R("OK")).test()).length.minus(57))
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
this.prope4 = "axrmq"
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { it?.methodName?.startsWith(method) == ((R("OK"))).test().startsWith("nlyaq", false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + ((R("OK")).test()).subSequence(Kla0(1037863339, {a: Int -> 1609665518}).state, prope0.fu0()).lastIndex)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error((1444842498663821617.toULong())?.toLong().toString(305718919))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:07:25,032 [main:107] - replacing (Kla5(), Kla5)
2021-03-11 21:07:25,032 [main:50] - replacing Kla5() Kla5
2021-03-11 21:07:25,032 [main:54] - Getting value of type Kla5
2021-03-11 21:07:25,193 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 21:07:25,198 [main:112] - generating klass Kla5 text = class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { it?.methodName?.startsWith(method) == ((R("OK"))).test().startsWith("nlyaq", false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824))
    }
}
2021-03-11 21:07:25,198 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 21:07:25,198 [main:61] - GENERATED IS CALL =true
2021-03-11 21:07:25,379 [main:67] - randomType = Collection<Kla7>
2021-03-11 21:07:25,380 [main:106] - GETTING Kla5 from String
2021-03-11 21:07:25,398 [main:106] - GETTING Kla5 from Function1<Int, Int>
2021-03-11 21:07:25,408 [main:106] - GETTING Kla5 from String
2021-03-11 21:07:25,409 [main:106] - GETTING Kla5 from String
2021-03-11 21:07:25,409 [main:106] - GETTING Kla5 from Int
2021-03-11 21:07:25,439 [main:106] - GETTING Kla5 from Int
2021-03-11 21:07:25,440 [main:106] - GETTING Kla5 from Int
2021-03-11 21:07:25,440 [main:106] - GETTING Kla5 from R
2021-03-11 21:07:25,445 [main:106] - GETTING Kla5 from R
2021-03-11 21:07:25,446 [main:106] - GETTING Kla5 from Kla0
2021-03-11 21:07:25,454 [main:114] - replacement of Kla5() of type Kla5 is Kla5()
2021-03-11 21:07:25,598 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:07:25,601 [main:107] - replacing (this, Kla3)
2021-03-11 21:07:25,601 [main:50] - replacing this Kla3
2021-03-11 21:07:25,601 [main:54] - Getting value of type Kla3
2021-03-11 21:07:25,742 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 21:07:25,746 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
this.prope4 = "axrmq"
    }

    var prope4: Any? = null
}
2021-03-11 21:07:25,746 [main:58] - GENERATED VALUE OF TYPE Kla3 = Kla3()
2021-03-11 21:07:25,746 [main:61] - GENERATED IS CALL =true
2021-03-11 21:07:25,919 [main:67] - randomType = Short
2021-03-11 21:07:26,058 [main:302] - generating value of type = Short true depth = 0
2021-03-11 21:07:26,093 [main:106] - GETTING Kla3 from Int
2021-03-11 21:07:26,122 [main:106] - GETTING Kla3 from String
2021-03-11 21:07:26,139 [main:106] - GETTING Kla3 from Kla0
2021-03-11 21:07:26,146 [main:106] - GETTING Kla3 from Int
2021-03-11 21:07:26,147 [main:106] - GETTING Kla3 from String
2021-03-11 21:07:26,147 [main:106] - GETTING Kla3 from Function1<Int, Int>
2021-03-11 21:07:26,157 [main:106] - GETTING Kla3 from Int
2021-03-11 21:07:26,158 [main:106] - GETTING Kla3 from String
2021-03-11 21:07:26,158 [main:106] - GETTING Kla3 from R
2021-03-11 21:07:26,163 [main:106] - GETTING Kla3 from R
2021-03-11 21:07:26,163 [main:114] - replacement of this of type Kla3 is Kla3()
2021-03-11 21:07:26,302 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:07:26,302 [main:66] - Compilation checking started
2021-03-11 21:07:26,950 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T> T.runExt(fn: T.() -> String) = fn()

inline class R(private val r: String) {
    fun test() = runExt { r }
}

fun box() = R("OK").test()

class Kla0(
        var state : Int,
        val prope0 : (Int) -> Int){

    fun fu0() : Int {
        val prope1 = {a: Int -> {a: Int -> 911380316}((R("OK")).test().toInt())}((R("OK")).test().toInt())
        state = prope1
        return (R("OK")).equals("qhrnz").compareTo((R("OK")).equals("qhrnz"))
    }
}

fun box320(): String {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
    return if (prope0.fu0() == (R("OK")).test().length) (R("OK")).test().takeLastWhile({a: Char -> false}) else "slmva"
}

interface Kla1 {
    suspend fun fu6()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

inline suspend fun fu2(crossinline c1: suspend () -> Unit) {
    val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
object : Kla1 {
        override suspend fun fu6() {
            c1()
        }
    }.fu6()

    prope3.fu14((prope0.fu0()).div(0.42405195806910856).compareTo(13))
    prope3.fu12()

    fu1 {
        object : Kla1 {
            override suspend fun fu6() {
                val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
Kla6().fu13()
                prope3.fu13()
            }
        }.fu6()

        prope3.fu14(((R("OK")).test()).length.minus(57))
    }
}

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box962(): String {
    fu3 {
        fu2 {
            prope3.fu13()
            prope3.fu13()
        }
    }
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
x(prope4.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
Kla3().prope4 = "axrmq"
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(ClassCastException("bnyra")!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
if (c !is CoroutineStackFrame) error((prope0.fu0()).toString(Kla0(1037863339, {a: Int -> 1609665518}).state) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { it?.methodName?.startsWith(method) == ((R("OK"))).test().startsWith("nlyaq", false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope5.find { false} ?: error((Kla0(1037863339, {a: Int -> 1609665518}).prope0).invoke(Kla0(1037863339, {a: Int -> 1609665518}).state).toString(1460199824))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((R("kcltn").test()).reversed() + i + ", got " + ((R("OK")).test()).subSequence(Kla0(1037863339, {a: Int -> 1609665518}).state, prope0.fu0()).lastIndex)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla0(1037863339, {a: Int -> 1609665518}).state).toInt().shr(1379814029))
        if (prope7) error((1444842498663821617.toULong())?.toLong().toString(305718919))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = Kla0((R("OK")).test().length, {a: Int -> (R("OK")).test().length})
prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:07:26,955 [main:107] - replacing (true, Boolean)
2021-03-11 21:07:26,956 [main:50] - replacing true Boolean
2021-03-11 21:07:26,956 [main:54] - Getting value of type Boolean
