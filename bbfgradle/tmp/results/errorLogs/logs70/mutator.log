2021-03-12 03:10:34,706 [main:66] - Compilation checking started
2021-03-12 03:10:37,044 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:10:37,048 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 03:10:37,062 [main:66] - Compilation checking started
2021-03-12 03:10:38,038 [main:53] - Result = true
Text:
open class C(val grandParentProp: String = "wrejo")
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}
2021-03-12 03:10:38,039 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:10:38,040 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 03:10:38,041 [main:66] - Compilation checking started
2021-03-12 03:10:38,870 [main:53] - Result = true
Text:
open class C(val grandParentProp: String = "wrejo")
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int = 2013993078): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}
2021-03-12 03:10:38,871 [main:50] - replacing arg1: Int Int
2021-03-12 03:10:38,871 [main:54] - Getting value of type Int
2021-03-12 03:10:39,138 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:10:39,139 [main:58] - GENERATED VALUE OF TYPE Int = -2139791834
2021-03-12 03:10:39,139 [main:61] - GENERATED IS CALL =false
2021-03-12 03:10:39,854 [main:67] - randomType = UShort
2021-03-12 03:10:40,111 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 03:10:40,283 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5804ae46]
2021-03-12 03:10:40,284 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72b6c5b4]
2021-03-12 03:10:40,286 [main:78] - Generated call from random type = (12227.toUShort()).toShort().countOneBits()
2021-03-12 03:10:40,302 [main:106] - GETTING Int from String
2021-03-12 03:10:40,385 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7cead524]]
2021-03-12 03:10:40,385 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:10:40,386 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7cead524]
2021-03-12 03:10:40,387 [main:117] - GENERATED CALL = (grandParentProp).compareTo(grandParentProp).takeLowestOneBit()
2021-03-12 03:10:40,387 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]]
2021-03-12 03:10:40,388 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:10:40,388 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]
2021-03-12 03:10:40,667 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:10:40,670 [main:117] - GENERATED CALL = (grandParentProp).compareTo(grandParentProp).div(55)
2021-03-12 03:10:40,670 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@63b93fba]]
2021-03-12 03:10:40,670 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:10:40,671 [main:117] - GENERATED CALL = (grandParentProp).compareTo(grandParentProp).sign
2021-03-12 03:10:40,672 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@67ebce31]]
2021-03-12 03:10:40,672 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:10:40,672 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@67ebce31]
2021-03-12 03:10:40,673 [main:117] - GENERATED CALL = (grandParentProp).compareTo(grandParentProp).coerceAtMost(arg)
2021-03-12 03:10:40,674 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7fda62b9]]
2021-03-12 03:10:40,674 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:10:40,674 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7fda62b9]
2021-03-12 03:10:40,919 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:10:40,921 [main:117] - GENERATED CALL = (grandParentProp).get(arg).compareTo('䅬')
2021-03-12 03:10:40,921 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d302fac]]
2021-03-12 03:10:40,921 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:10:40,922 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d302fac]
2021-03-12 03:10:41,129 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:10:41,131 [main:117] - GENERATED CALL = (grandParentProp).compareTo(grandParentProp).times(-31)
2021-03-12 03:10:41,131 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4bc1bcb8]]
2021-03-12 03:10:41,131 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:10:41,132 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4bc1bcb8]
2021-03-12 03:10:41,133 [main:117] - GENERATED CALL = (grandParentProp).compareTo(grandParentProp).ushr(arg)
2021-03-12 03:10:41,133 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]]
2021-03-12 03:10:41,133 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:10:41,344 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:10:41,346 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]
2021-03-12 03:10:41,582 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:10:41,584 [main:117] - GENERATED CALL = (grandParentProp).compareTo("ahvvy").rem(-47)
2021-03-12 03:10:41,584 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]]
2021-03-12 03:10:41,585 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]
2021-03-12 03:10:41,758 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:10:41,759 [main:117] - GENERATED CALL = (grandParentProp).length.rem(-96)
2021-03-12 03:10:41,760 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31946dd4]]
2021-03-12 03:10:41,760 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31946dd4]
2021-03-12 03:10:41,761 [main:117] - GENERATED CALL = (grandParentProp).length.and(arg)
2021-03-12 03:10:41,761 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 03:10:41,762 [main:66] - Compilation checking started
2021-03-12 03:10:42,255 [main:49] - Result = false
Text:
open class C(val grandParentProp: String = "wrejo")
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int = 2013993078): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int = (grandParentProp).compareTo(grandParentProp).div(55), arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}
2021-03-12 03:10:42,256 [main:50] - replacing arg2: Int Int
2021-03-12 03:10:42,256 [main:54] - Getting value of type Int
2021-03-12 03:10:42,440 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:10:42,441 [main:58] - GENERATED VALUE OF TYPE Int = 1127782144
2021-03-12 03:10:42,441 [main:61] - GENERATED IS CALL =false
2021-03-12 03:10:43,069 [main:67] - randomType = Sequence<LinkedHashMap<C?, C>>
2021-03-12 03:10:43,069 [main:106] - GETTING Int from Int
2021-03-12 03:10:43,150 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@227e568f]]
2021-03-12 03:10:43,150 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:10:43,151 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@227e568f]
2021-03-12 03:10:43,152 [main:117] - GENERATED CALL = (arg1).compareTo(arg).countTrailingZeroBits()
2021-03-12 03:10:43,152 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c58db5b], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@af82513]]
2021-03-12 03:10:43,152 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c58db5b]
2021-03-12 03:10:43,362 [main:302] - generating value of type = Float true depth = 0
2021-03-12 03:10:43,365 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@af82513]
2021-03-12 03:10:43,367 [main:117] - GENERATED CALL = (arg1).div(0.7900653f).toRawBits()
2021-03-12 03:10:43,367 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e61ded]]
2021-03-12 03:10:43,367 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:10:43,368 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e61ded]
2021-03-12 03:10:43,369 [main:117] - GENERATED CALL = (arg1).compareTo(arg).toInt()
2021-03-12 03:10:43,369 [main:113] - Case = [public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47c33908]]
2021-03-12 03:10:43,369 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47c33908]
2021-03-12 03:10:43,529 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:10:43,531 [main:117] - GENERATED CALL = (arg1).minus(71)
2021-03-12 03:10:43,531 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@a8aa579]]
2021-03-12 03:10:43,531 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:10:43,532 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@a8aa579]
2021-03-12 03:10:43,533 [main:117] - GENERATED CALL = (arg1).toLong().toInt()
2021-03-12 03:10:43,533 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d8892f9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@bfb4d80]]
2021-03-12 03:10:43,533 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d8892f9]
2021-03-12 03:10:43,534 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@bfb4d80]
2021-03-12 03:10:43,535 [main:117] - GENERATED CALL = (arg1).toFloat().roundToInt()
2021-03-12 03:10:43,535 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e246b2]]
2021-03-12 03:10:43,535 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:10:43,535 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e246b2]
2021-03-12 03:10:43,723 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:10:43,725 [main:117] - GENERATED CALL = (arg1).toInt().plus(87)
2021-03-12 03:10:43,726 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]]
2021-03-12 03:10:43,726 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]
2021-03-12 03:10:43,897 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:10:43,899 [main:117] - GENERATED CALL = (arg1).rem(11)
2021-03-12 03:10:43,899 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@308ea334]]
2021-03-12 03:10:43,899 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:10:43,900 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@308ea334]
2021-03-12 03:10:44,124 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:10:44,125 [main:117] - GENERATED CALL = (arg1).compareTo(arg1).compareTo(-89)
2021-03-12 03:10:44,125 [main:113] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4bc1bcb8]]
2021-03-12 03:10:44,125 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4bc1bcb8]
2021-03-12 03:10:44,126 [main:117] - GENERATED CALL = (arg1).ushr(arg1)
2021-03-12 03:10:44,127 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 03:10:44,127 [main:66] - Compilation checking started
2021-03-12 03:10:44,810 [main:53] - Result = true
Text:
open class C(val grandParentProp: String = "wrejo")
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int = 2013993078): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int = (arg1).compareTo(arg1).compareTo(-89)): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}
2021-03-12 03:10:44,811 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:10:44,812 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 03:10:44,813 [main:66] - Compilation checking started
2021-03-12 03:10:45,376 [main:53] - Result = true
Text:
open class C(val grandParentProp: String = "wrejo")
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int = 2013993078): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int = (arg1).compareTo(arg1).compareTo(-89)): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int = 212301609, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}
2021-03-12 03:10:45,377 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:10:45,378 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 03:10:45,378 [main:66] - Compilation checking started
2021-03-12 03:10:45,938 [main:53] - Result = true
Text:
open class C(val grandParentProp: String = "wrejo")
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int = 2013993078): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int = (arg1).compareTo(arg1).compareTo(-89)): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int = 212301609, x2: Int = 1441014731): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}
2021-03-12 03:10:45,938 [main:50] - replacing x: Int Int
2021-03-12 03:10:45,938 [main:54] - Getting value of type Int
2021-03-12 03:10:46,090 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:10:46,091 [main:58] - GENERATED VALUE OF TYPE Int = -1870297012
2021-03-12 03:10:46,092 [main:61] - GENERATED IS CALL =false
2021-03-12 03:10:46,411 [main:67] - randomType = MutableMap<Float, C>
2021-03-12 03:10:46,411 [main:106] - GETTING Int from Int
2021-03-12 03:10:46,485 [main:113] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d5ea941]]
2021-03-12 03:10:46,485 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d5ea941]
2021-03-12 03:10:46,487 [main:117] - GENERATED CALL = (arg2).shr(x2)
2021-03-12 03:10:46,487 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@193176e9]]
2021-03-12 03:10:46,487 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:10:46,487 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@193176e9]
2021-03-12 03:10:46,488 [main:117] - GENERATED CALL = (arg2).compareTo(arg2).inc()
2021-03-12 03:10:46,488 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2e7edda3]]
2021-03-12 03:10:46,488 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2e7edda3]
2021-03-12 03:10:46,489 [main:117] - GENERATED CALL = (arg2).countOneBits()
2021-03-12 03:10:46,489 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@208ad0ed], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@79f49d9d]]
2021-03-12 03:10:46,489 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@208ad0ed]
2021-03-12 03:10:46,638 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:10:46,639 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@79f49d9d]
2021-03-12 03:10:46,772 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:10:46,773 [main:117] - GENERATED CALL = (arg2).div(0.6333797380233224).compareTo(-36)
2021-03-12 03:10:46,773 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e246b2]]
2021-03-12 03:10:46,773 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:10:46,774 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e246b2]
2021-03-12 03:10:46,900 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:10:46,901 [main:117] - GENERATED CALL = (arg2).compareTo(arg).plus(-38)
2021-03-12 03:10:46,901 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@227e568f]]
2021-03-12 03:10:46,901 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@227e568f]
2021-03-12 03:10:46,901 [main:117] - GENERATED CALL = (arg2).countTrailingZeroBits()
2021-03-12 03:10:46,902 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29e61e82]]
2021-03-12 03:10:46,902 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:10:47,046 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:10:47,047 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29e61e82]
2021-03-12 03:10:47,048 [main:117] - GENERATED CALL = (arg2).div(6634789322925829022).countOneBits()
2021-03-12 03:10:47,048 [main:113] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d302fac]]
2021-03-12 03:10:47,048 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d302fac]
2021-03-12 03:10:47,174 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:10:47,175 [main:117] - GENERATED CALL = (arg2).times(40)
2021-03-12 03:10:47,176 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ddf7857]]
2021-03-12 03:10:47,176 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:10:47,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ddf7857]
2021-03-12 03:10:47,177 [main:117] - GENERATED CALL = (arg2).toInt().countLeadingZeroBits()
2021-03-12 03:10:47,177 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943680c]]
2021-03-12 03:10:47,177 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:10:47,178 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943680c]
2021-03-12 03:10:47,178 [main:117] - GENERATED CALL = (arg2).compareTo(arg1).unaryPlus()
2021-03-12 03:10:47,178 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 03:10:47,179 [main:66] - Compilation checking started
2021-03-12 03:10:47,612 [main:49] - Result = false
Text:
open class C(val grandParentProp: String = "wrejo")
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int = 2013993078): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int = (arg1).compareTo(arg1).compareTo(-89)): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int = 212301609, x2: Int = 1441014731): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int = (arg2).compareTo(arg).plus(-38)): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}
2021-03-12 03:10:47,940 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:10:48,082 [main:194] - Type params = []
2021-03-12 03:10:48,219 [main:302] - generating value of type = String true depth = 1
2021-03-12 03:10:48,221 [main:112] - generating klass B text = abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }
2021-03-12 03:10:48,222 [main:112] - generating klass A text = class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }
2021-03-12 03:10:48,558 [main:45] - Trying to change 122 nodes
2021-03-12 03:10:48,562 [main:53] - replacing ("", String)
2021-03-12 03:10:48,563 [main:50] - replacing "" String
2021-03-12 03:10:48,563 [main:54] - Getting value of type String
2021-03-12 03:10:48,706 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:10:48,707 [main:58] - GENERATED VALUE OF TYPE String = "ptnqx"
2021-03-12 03:10:48,707 [main:61] - GENERATED IS CALL =false
2021-03-12 03:10:48,710 [main:67] - randomType = C
2021-03-12 03:10:48,882 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:10:48,882 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:10:49,020 [main:194] - Type params = []
2021-03-12 03:10:49,145 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:10:49,153 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]
2021-03-12 03:10:49,330 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:10:49,332 [main:78] - Generated call from random type = (C("prxyd")).grandParentProp.dropLast(-1960183608)
2021-03-12 03:10:49,332 [main:61] - replacement of "" of type String is (C("prxyd")).grandParentProp.dropLast(-1960183608)
2021-03-12 03:10:49,473 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:10:49,474 [main:66] - Compilation checking started
2021-03-12 03:10:50,003 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}
2021-03-12 03:10:50,007 [main:53] - replacing (parentSideEffects, String)
2021-03-12 03:10:50,008 [main:50] - replacing parentSideEffects String
2021-03-12 03:10:50,008 [main:54] - Getting value of type String
2021-03-12 03:10:50,150 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:10:50,151 [main:58] - GENERATED VALUE OF TYPE String = "szgcz"
2021-03-12 03:10:50,151 [main:61] - GENERATED IS CALL =false
2021-03-12 03:10:50,586 [main:67] - randomType = ArrayDeque<UShort>
2021-03-12 03:10:50,801 [main:302] - generating value of type = ArrayDeque<UShort> false depth = 0
2021-03-12 03:10:50,965 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UShort>): ArrayDeque<UShort> = TODO()
2021-03-12 03:10:50,969 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UShort>): ArrayDeque<UShort> = TODO()
2021-03-12 03:10:51,261 [main:302] - generating value of type = Collection<UShort> false depth = 3
2021-03-12 03:10:51,459 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: UShort): Collection<UShort> = TODO()
2021-03-12 03:10:51,463 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: UShort): Collection<UShort> = TODO()
2021-03-12 03:10:51,649 [main:302] - generating value of type = UShort true depth = 6
2021-03-12 03:10:51,650 [main:95] - GENERATED = listOfNotNull<UShort>(14546.toUShort())
2021-03-12 03:10:51,650 [main:95] - GENERATED = ArrayDeque<UShort>(listOfNotNull<UShort>(14546.toUShort()))
2021-03-12 03:10:52,037 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@4c116630]
2021-03-12 03:10:52,038 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e29ec7]
2021-03-12 03:10:52,188 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:10:52,333 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:10:52,472 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:10:52,475 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:10:52,859 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:10:52,866 [main:95] - GENERATED = StringBuilder("yrloz")
2021-03-12 03:10:53,039 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:10:53,179 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:10:53,328 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 03:10:53,329 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:10:53,469 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:10:53,473 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:10:53,849 [main:302] - generating value of type = String true depth = 4
2021-03-12 03:10:53,850 [main:95] - GENERATED = StringBuilder("ycnkn")
2021-03-12 03:10:53,853 [main:78] - Generated call from random type = (ArrayDeque<UShort>(listOfNotNull<UShort>(14546.toUShort()))).toArray().joinToString("uimxa", StringBuilder("yrloz"), "jlsne", justForUsageInClosure, "firek", {a: T -> StringBuilder("ycnkn")})
2021-03-12 03:10:53,853 [main:106] - GETTING String from String
2021-03-12 03:10:53,896 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]]
2021-03-12 03:10:53,897 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]
2021-03-12 03:10:53,897 [main:117] - GENERATED CALL = (sideEffects).capitalize()
2021-03-12 03:10:53,897 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]]
2021-03-12 03:10:53,898 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]
2021-03-12 03:10:53,898 [main:117] - GENERATED CALL = (sideEffects).trimStart()
2021-03-12 03:10:53,898 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]]
2021-03-12 03:10:53,898 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]
2021-03-12 03:10:54,030 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:10:54,031 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:10:54,033 [main:117] - GENERATED CALL = (sideEffects).dropLastWhile({a: Char -> true})
2021-03-12 03:10:54,033 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]]
2021-03-12 03:10:54,033 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:10:54,161 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:10:54,162 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]
2021-03-12 03:10:54,281 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:10:54,421 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:10:54,422 [main:117] - GENERATED CALL = (sideEffects).subSequence(justForUsageInClosure, 1168159552).commonPrefixWith("sfrrg", false)
2021-03-12 03:10:54,423 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]]
2021-03-12 03:10:54,423 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]
2021-03-12 03:10:54,423 [main:117] - GENERATED CALL = (sideEffects).toUpperCase()
2021-03-12 03:10:54,423 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]]
2021-03-12 03:10:54,423 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]
2021-03-12 03:10:54,553 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:10:54,554 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:10:54,556 [main:117] - GENERATED CALL = (sideEffects).filterIndexed({a: Int, b: Char -> false})
2021-03-12 03:10:54,556 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:10:54,556 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:10:54,707 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:10:54,708 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:10:54,834 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:10:54,835 [main:117] - GENERATED CALL = (sideEffects).get(1926042125).plus("twlhj")
2021-03-12 03:10:54,835 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:10:54,835 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:10:54,967 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:10:54,972 [main:117] - GENERATED CALL = (sideEffects).removePrefix("wzttv")
2021-03-12 03:10:54,972 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]]
2021-03-12 03:10:54,972 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]
2021-03-12 03:10:55,132 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:10:55,133 [main:117] - GENERATED CALL = (sideEffects).substringAfter('', justForUsageInParentClosure)
2021-03-12 03:10:55,134 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]]
2021-03-12 03:10:55,134 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]
2021-03-12 03:10:55,292 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:10:55,409 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:10:55,411 [main:117] - GENERATED CALL = (sideEffects).replaceBefore('팶', C("fqowo").grandParentProp, "jibsm")
2021-03-12 03:10:55,411 [main:61] - replacement of parentSideEffects of type String is (ArrayDeque<UShort>(listOfNotNull<UShort>(14546.toUShort()))).toArray().joinToString("uimxa", StringBuilder("yrloz"), "jlsne", justForUsageInClosure, "firek", {a: T -> StringBuilder("ycnkn")})
2021-03-12 03:10:55,521 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:10:55,522 [main:66] - Compilation checking started
2021-03-12 03:10:56,146 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if ((ArrayDeque<UShort>(listOfNotNull<UShort>(14546.toUShort()))).toArray().joinToString("uimxa", StringBuilder("yrloz"), "jlsne", justForUsageInClosure, "firek", {a: T -> StringBuilder("ycnkn")}) != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:10:56,149 [main:53] - replacing (sideEffects, String)
2021-03-12 03:10:56,150 [main:50] - replacing sideEffects String
2021-03-12 03:10:56,150 [main:54] - Getting value of type String
2021-03-12 03:10:56,319 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:10:56,320 [main:58] - GENERATED VALUE OF TYPE String = "uefgb"
2021-03-12 03:10:56,321 [main:61] - GENERATED IS CALL =false
2021-03-12 03:10:56,817 [main:67] - randomType = LinkedHashMap<C, UInt?>
2021-03-12 03:10:56,963 [main:302] - generating value of type = LinkedHashMap<C, UInt?> false depth = 0
2021-03-12 03:10:57,115 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<C, UInt?>): LkedHashMap<C, UInt?> = TODO()
2021-03-12 03:10:57,117 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<C, UInt?>): LkedHashMap<C, UInt?> = TODO()
2021-03-12 03:10:57,337 [main:302] - generating value of type = Pair<C, UInt?> false depth = 3
2021-03-12 03:10:57,492 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: C, second: UInt?): Pair<C, UInt?> = TODO()
2021-03-12 03:10:57,495 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: C, second: UInt?): Pair<C, UInt?> = TODO()
2021-03-12 03:10:57,635 [main:302] - generating value of type = C false depth = 6
2021-03-12 03:10:57,636 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:10:57,771 [main:194] - Type params = []
2021-03-12 03:10:57,906 [main:302] - generating value of type = String true depth = 8
2021-03-12 03:10:57,907 [main:302] - generating value of type = UInt true depth = 6
2021-03-12 03:10:57,908 [main:95] - GENERATED = Pair<C, UInt?>(C("vypka"), 1653331582.toUInt())
2021-03-12 03:10:57,909 [main:95] - GENERATED = linkedMapOf<C, UInt?>(Pair<C, UInt?>(C("vypka"), 1653331582.toUInt()))
2021-03-12 03:10:58,113 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:10:58,114 [main:78] - Generated call from random type = (linkedMapOf<C, UInt?>(Pair<C, UInt?>(C("vypka"), 1653331582.toUInt()))).size.toString(justForUsageInClosure)
2021-03-12 03:10:58,114 [main:106] - GETTING String from String
2021-03-12 03:10:58,150 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]]
2021-03-12 03:10:58,150 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]
2021-03-12 03:10:58,315 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:10:58,316 [main:117] - GENERATED CALL = (justForUsageInParentClosure).removeRange(1751991549, justForUsageInClosure)
2021-03-12 03:10:58,316 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@739964f]]
2021-03-12 03:10:58,316 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@739964f]
2021-03-12 03:10:58,457 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:10:58,600 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:10:58,736 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:10:58,737 [main:117] - GENERATED CALL = (justForUsageInParentClosure).replaceFirst('둍', '遾', false)
2021-03-12 03:10:58,737 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]]
2021-03-12 03:10:58,737 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]
2021-03-12 03:10:58,737 [main:117] - GENERATED CALL = (justForUsageInParentClosure).repeat(justForUsageInClosure)
2021-03-12 03:10:58,738 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]]
2021-03-12 03:10:58,738 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]
2021-03-12 03:10:58,738 [main:117] - GENERATED CALL = (justForUsageInParentClosure).replaceIndentByMargin(parentProp, parentProp)
2021-03-12 03:10:58,738 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]]
2021-03-12 03:10:58,738 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]
2021-03-12 03:10:58,869 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:10:59,000 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:10:59,002 [main:117] - GENERATED CALL = (justForUsageInParentClosure).replaceAfter('唳', "jzruo", C("fqowo").grandParentProp)
2021-03-12 03:10:59,002 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]]
2021-03-12 03:10:59,002 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]
2021-03-12 03:10:59,003 [main:117] - GENERATED CALL = (justForUsageInParentClosure).toLowerCase()
2021-03-12 03:10:59,003 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]]
2021-03-12 03:10:59,003 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]
2021-03-12 03:10:59,003 [main:117] - GENERATED CALL = (justForUsageInParentClosure).trimMargin(prop)
2021-03-12 03:10:59,004 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]]
2021-03-12 03:10:59,004 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]
2021-03-12 03:10:59,176 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:10:59,309 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 03:10:59,311 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 03:10:59,443 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:10:59,444 [main:95] - GENERATED = hashSetOf<Int>(1360724572)
2021-03-12 03:10:59,445 [main:117] - GENERATED CALL = (justForUsageInParentClosure).slice(hashSetOf<Int>(1360724572))
2021-03-12 03:10:59,445 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:10:59,445 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:10:59,445 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:10:59,446 [main:117] - GENERATED CALL = (justForUsageInParentClosure).compareTo(C("fqowo").grandParentProp).toString(justForUsageInClosure)
2021-03-12 03:10:59,446 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:10:59,446 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:10:59,446 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:10:59,447 [main:117] - GENERATED CALL = (justForUsageInParentClosure).get(justForUsageInClosure).plus(sideEffects)
2021-03-12 03:10:59,447 [main:61] - replacement of sideEffects of type String is (justForUsageInParentClosure).compareTo(C("fqowo").grandParentProp).toString(justForUsageInClosure)
2021-03-12 03:10:59,565 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:10:59,566 [main:66] - Compilation checking started
2021-03-12 03:10:59,954 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            (justForUsageInParentClosure).compareTo(C("fqowo").grandParentProp).toString(justForUsageInClosure) += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:10:59,957 [main:53] - replacing (parentProp, String)
2021-03-12 03:10:59,958 [main:50] - replacing parentProp String
2021-03-12 03:10:59,958 [main:54] - Getting value of type String
2021-03-12 03:11:00,091 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:00,092 [main:58] - GENERATED VALUE OF TYPE String = "whbqb"
2021-03-12 03:11:00,092 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:00,094 [main:67] - randomType = C
2021-03-12 03:11:00,209 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:11:00,210 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:11:00,327 [main:194] - Type params = []
2021-03-12 03:11:00,440 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:11:00,448 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]
2021-03-12 03:11:00,448 [main:78] - Generated call from random type = (C("pgqtf")).grandParentProp.capitalize()
2021-03-12 03:11:00,448 [main:106] - GETTING String from String
2021-03-12 03:11:00,475 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]]
2021-03-12 03:11:00,475 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]
2021-03-12 03:11:00,599 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:00,720 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:00,721 [main:117] - GENERATED CALL = (parentSideEffects).commonSuffixWith(StringBuilder(), true)
2021-03-12 03:11:00,721 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:11:00,721 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:11:00,846 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:00,847 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:11:00,847 [main:117] - GENERATED CALL = (parentSideEffects).get(-1893569209).lowercase()
2021-03-12 03:11:00,847 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]]
2021-03-12 03:11:00,847 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]
2021-03-12 03:11:00,848 [main:117] - GENERATED CALL = (parentSideEffects).trimStart()
2021-03-12 03:11:00,848 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]]
2021-03-12 03:11:00,848 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]
2021-03-12 03:11:00,848 [main:117] - GENERATED CALL = (parentSideEffects).takeLast(arg1)
2021-03-12 03:11:00,848 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]]
2021-03-12 03:11:00,848 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]
2021-03-12 03:11:01,010 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:11:01,142 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Iterable<Int> = TODO()
2021-03-12 03:11:01,144 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Iterable<Int> = TODO()
2021-03-12 03:11:01,273 [main:95] - GENERATED = linkedSetOf<Int>()
2021-03-12 03:11:01,274 [main:117] - GENERATED CALL = (parentSideEffects).slice(linkedSetOf<Int>())
2021-03-12 03:11:01,274 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]]
2021-03-12 03:11:01,274 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]
2021-03-12 03:11:01,402 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:01,534 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:01,536 [main:117] - GENERATED CALL = (parentSideEffects).substringAfter('㬄', "wffxp")
2021-03-12 03:11:01,536 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]]
2021-03-12 03:11:01,536 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]
2021-03-12 03:11:01,661 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:01,662 [main:117] - GENERATED CALL = (parentSideEffects).replaceBefore('ਙ', C("fqowo").grandParentProp, sideEffects)
2021-03-12 03:11:01,662 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]]
2021-03-12 03:11:01,662 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]
2021-03-12 03:11:01,816 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:01,817 [main:117] - GENERATED CALL = (parentSideEffects).removeRange(1073369522, arg1)
2021-03-12 03:11:01,817 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]]
2021-03-12 03:11:01,818 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]
2021-03-12 03:11:01,818 [main:117] - GENERATED CALL = (parentSideEffects).replaceIndentByMargin(parentProp, parentSideEffects)
2021-03-12 03:11:01,818 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]]
2021-03-12 03:11:01,818 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]
2021-03-12 03:11:01,946 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:01,947 [main:117] - GENERATED CALL = (parentSideEffects).substringBeforeLast('ᖫ', C("fqowo").grandParentProp)
2021-03-12 03:11:01,947 [main:61] - replacement of parentProp of type String is (parentSideEffects).slice(linkedSetOf<Int>())
2021-03-12 03:11:02,057 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:02,058 [main:66] - Compilation checking started
2021-03-12 03:11:02,384 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            (parentSideEffects).slice(linkedSetOf<Int>()) = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:11:02,386 [main:53] - replacing (justForUsageInClosure, Int)
2021-03-12 03:11:02,387 [main:50] - replacing justForUsageInClosure Int
2021-03-12 03:11:02,387 [main:54] - Getting value of type Int
2021-03-12 03:11:02,506 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:02,506 [main:58] - GENERATED VALUE OF TYPE Int = -1978767147
2021-03-12 03:11:02,507 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:02,788 [main:67] - randomType = Set<Collection<C>>
2021-03-12 03:11:02,789 [main:106] - GETTING Int from String
2021-03-12 03:11:02,821 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5797f91]]
2021-03-12 03:11:02,821 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5797f91]
2021-03-12 03:11:02,938 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:02,939 [main:117] - GENERATED CALL = (parentSideEffects).length.or(341591337)
2021-03-12 03:11:02,940 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d6fd95]]
2021-03-12 03:11:02,940 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d6fd95]
2021-03-12 03:11:03,061 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:03,185 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:03,186 [main:117] - GENERATED CALL = (parentSideEffects).lastIndexOf('', justForUsageInClosure, true)
2021-03-12 03:11:03,186 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7cead524]]
2021-03-12 03:11:03,186 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7cead524]
2021-03-12 03:11:03,186 [main:117] - GENERATED CALL = (parentSideEffects).length.takeLowestOneBit()
2021-03-12 03:11:03,187 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61a456ce]]
2021-03-12 03:11:03,187 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:03,187 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61a456ce]
2021-03-12 03:11:03,187 [main:117] - GENERATED CALL = (parentSideEffects).compareTo(prop).rotateRight(justForUsageInClosure)
2021-03-12 03:11:03,188 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67079661]]
2021-03-12 03:11:03,188 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67079661]
2021-03-12 03:11:03,313 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 03:11:03,314 [main:302] - generating value of type = Int true depth = 1
2021-03-12 03:11:03,316 [main:117] - GENERATED CALL = (parentSideEffects).sumOf({a: Char -> 969682301})
2021-03-12 03:11:03,316 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]]
2021-03-12 03:11:03,316 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]
2021-03-12 03:11:03,438 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:11:03,439 [main:117] - GENERATED CALL = (parentSideEffects).length.rem(27)
2021-03-12 03:11:03,440 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]]
2021-03-12 03:11:03,440 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]
2021-03-12 03:11:03,602 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:11:03,603 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]
2021-03-12 03:11:03,743 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:03,744 [main:117] - GENERATED CALL = (parentSideEffects).equals("iuiwy").compareTo(false)
2021-03-12 03:11:03,744 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a7909db]]
2021-03-12 03:11:03,745 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a7909db]
2021-03-12 03:11:03,745 [main:117] - GENERATED CALL = (parentSideEffects).length.unaryMinus()
2021-03-12 03:11:03,745 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74414a78]]
2021-03-12 03:11:03,745 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:03,881 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:03,882 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74414a78]
2021-03-12 03:11:03,882 [main:117] - GENERATED CALL = (parentSideEffects).compareTo("fvecx").coerceAtLeast(justForUsageInClosure)
2021-03-12 03:11:03,882 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d302fac]]
2021-03-12 03:11:03,882 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:03,883 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d302fac]
2021-03-12 03:11:04,008 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:11:04,009 [main:117] - GENERATED CALL = (parentSideEffects).compareTo(null.toString()).times(16)
2021-03-12 03:11:04,009 [main:61] - replacement of justForUsageInClosure of type Int is (parentSideEffects).length.rem(27)
2021-03-12 03:11:04,123 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:04,124 [main:66] - Compilation checking started
2021-03-12 03:11:04,613 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:11:04,616 [main:53] - replacing (parentSideEffects, String)
2021-03-12 03:11:04,617 [main:50] - replacing parentSideEffects String
2021-03-12 03:11:04,617 [main:54] - Getting value of type String
2021-03-12 03:11:04,734 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:04,735 [main:58] - GENERATED VALUE OF TYPE String = "ejebj"
2021-03-12 03:11:04,735 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:04,737 [main:67] - randomType = C
2021-03-12 03:11:04,863 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:11:04,864 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:11:04,997 [main:194] - Type params = []
2021-03-12 03:11:05,118 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:11:05,127 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]
2021-03-12 03:11:05,242 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:05,244 [main:78] - Generated call from random type = (C("kqyjp")).grandParentProp.replaceAfter('', C("fqowo").grandParentProp, sideEffects)
2021-03-12 03:11:05,244 [main:106] - GETTING String from String
2021-03-12 03:11:05,275 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]]
2021-03-12 03:11:05,275 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]
2021-03-12 03:11:05,276 [main:117] - GENERATED CALL = (parentProp).replaceIndentByMargin(justForUsageInParentClosure, sideEffects)
2021-03-12 03:11:05,276 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:11:05,276 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:11:05,389 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:05,390 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:11:05,390 [main:117] - GENERATED CALL = (parentProp).get(942226327).titlecase()
2021-03-12 03:11:05,390 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]]
2021-03-12 03:11:05,390 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]
2021-03-12 03:11:05,391 [main:117] - GENERATED CALL = (parentProp).trimStart()
2021-03-12 03:11:05,391 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]]
2021-03-12 03:11:05,391 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]
2021-03-12 03:11:05,515 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:05,516 [main:117] - GENERATED CALL = (parentProp).takeLast(-636480829)
2021-03-12 03:11:05,517 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:11:05,517 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:11:05,517 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:11:05,517 [main:117] - GENERATED CALL = (parentProp).get(arg1).uppercase()
2021-03-12 03:11:05,518 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]]
2021-03-12 03:11:05,518 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]
2021-03-12 03:11:05,633 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:05,635 [main:117] - GENERATED CALL = (parentProp).removeRange(justForUsageInClosure, -1692497390)
2021-03-12 03:11:05,635 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]]
2021-03-12 03:11:05,635 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]
2021-03-12 03:11:05,750 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:11:05,751 [main:117] - GENERATED CALL = (parentProp).plus("evnqt")
2021-03-12 03:11:05,751 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]]
2021-03-12 03:11:05,751 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]
2021-03-12 03:11:05,862 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:11:06,484 [main:43] - GENERATING CALL OF fun <E> ArrayList(): Iterable<Int> = TODO()
2021-03-12 03:11:06,486 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): Iterable<Int> = TODO()
2021-03-12 03:11:06,603 [main:95] - GENERATED = ArrayList<Triple<UShort, UInt, Long>>()
2021-03-12 03:11:06,604 [main:117] - GENERATED CALL = (parentProp).slice(ArrayList<Triple<UShort, UInt, Long>>())
2021-03-12 03:11:06,604 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]]
2021-03-12 03:11:06,604 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]
2021-03-12 03:11:06,604 [main:117] - GENERATED CALL = (parentProp).dropLast(justForUsageInClosure)
2021-03-12 03:11:06,604 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]]
2021-03-12 03:11:06,604 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]
2021-03-12 03:11:06,713 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:06,714 [main:117] - GENERATED CALL = (parentProp).substringBefore('쯭', null.toString())
2021-03-12 03:11:06,714 [main:61] - replacement of parentSideEffects of type String is (parentProp).removeRange(justForUsageInClosure, -1692497390)
2021-03-12 03:11:06,823 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:06,823 [main:66] - Compilation checking started
2021-03-12 03:11:07,113 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            (parentProp).removeRange(justForUsageInClosure, -1692497390) += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:11:07,116 [main:53] - replacing (parentSideEffects, String)
2021-03-12 03:11:07,116 [main:50] - replacing parentSideEffects String
2021-03-12 03:11:07,116 [main:54] - Getting value of type String
2021-03-12 03:11:07,246 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:07,247 [main:58] - GENERATED VALUE OF TYPE String = "xlwne"
2021-03-12 03:11:07,247 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:07,251 [main:67] - randomType = C
2021-03-12 03:11:07,392 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:11:07,393 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:11:07,502 [main:194] - Type params = []
2021-03-12 03:11:07,611 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:11:07,618 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]
2021-03-12 03:11:07,619 [main:78] - Generated call from random type = (C("ytasz")).grandParentProp.replaceIndentByMargin(parentSideEffects, null.toString())
2021-03-12 03:11:07,620 [main:106] - GETTING String from Int
2021-03-12 03:11:07,688 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:11:07,688 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:07,688 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:11:07,689 [main:117] - GENERATED CALL = (arg).toChar().uppercase()
2021-03-12 03:11:07,689 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:11:07,689 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:11:07,689 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:11:07,689 [main:117] - GENERATED CALL = (arg).toLong().toString(justForUsageInClosure)
2021-03-12 03:11:07,689 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:11:07,689 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:07,690 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:11:07,800 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:07,801 [main:117] - GENERATED CALL = (arg).toChar().plus("hnfol")
2021-03-12 03:11:07,802 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:11:07,802 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:07,802 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:11:07,802 [main:117] - GENERATED CALL = (arg).toChar().titlecase()
2021-03-12 03:11:07,802 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:07,802 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:07,912 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:07,913 [main:117] - GENERATED CALL = (arg).toString(999997796)
2021-03-12 03:11:07,913 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:11:07,913 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:11:08,024 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:11:08,024 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:11:08,135 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:08,136 [main:117] - GENERATED CALL = (arg).div(1889726640452233061).toString(-1765834611)
2021-03-12 03:11:08,136 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:08,137 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:11:08,137 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:08,137 [main:117] - GENERATED CALL = (arg).compareTo(justForUsageInClosure).toString(arg)
2021-03-12 03:11:08,137 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:08,137 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:11:08,137 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:08,138 [main:117] - GENERATED CALL = (arg).toInt().toString(arg)
2021-03-12 03:11:08,138 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:11:08,138 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:11:08,138 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:11:08,138 [main:117] - GENERATED CALL = (arg).toShort().toString(justForUsageInClosure)
2021-03-12 03:11:08,138 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:11:08,138 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:11:08,138 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:11:08,139 [main:117] - GENERATED CALL = (arg).toByte().toString(justForUsageInClosure)
2021-03-12 03:11:08,139 [main:61] - replacement of parentSideEffects of type String is (arg).toChar().uppercase()
2021-03-12 03:11:08,266 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:08,266 [main:66] - Compilation checking started
2021-03-12 03:11:08,537 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            (arg).toChar().uppercase() += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:11:08,540 [main:53] - replacing (parentSideEffects != "1#4#parentCaptured", Boolean)
2021-03-12 03:11:08,541 [main:50] - replacing parentSideEffects != "1#4#parentCaptured" Boolean
2021-03-12 03:11:08,541 [main:54] - Getting value of type Boolean
2021-03-12 03:11:08,650 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:08,650 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 03:11:08,651 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:08,882 [main:67] - randomType = UInt?
2021-03-12 03:11:08,995 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 03:11:09,042 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@639500c2]
2021-03-12 03:11:09,042 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@29179d87]
2021-03-12 03:11:09,043 [main:78] - Generated call from random type = (274916704.toUInt())?.toFloat().isFinite()
2021-03-12 03:11:09,045 [main:106] - GETTING Boolean from String
2021-03-12 03:11:09,081 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@136d0a86]]
2021-03-12 03:11:09,081 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:09,224 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:09,225 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@136d0a86]
2021-03-12 03:11:09,226 [main:117] - GENERATED CALL = (null.toString()).subSequence(justForUsageInClosure, 327814303).none()
2021-03-12 03:11:09,226 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45dcf9e0]]
2021-03-12 03:11:09,226 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:09,226 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45dcf9e0]
2021-03-12 03:11:09,227 [main:117] - GENERATED CALL = (null.toString()).subSequence(justForUsageInClosure, justForUsageInClosure).isEmpty()
2021-03-12 03:11:09,227 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]]
2021-03-12 03:11:09,227 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]
2021-03-12 03:11:09,339 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:11:09,340 [main:117] - GENERATED CALL = (null.toString()).length.equals("xpsqm")
2021-03-12 03:11:09,340 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@6e85002b]]
2021-03-12 03:11:09,340 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:09,452 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:09,577 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:09,578 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@6e85002b]
2021-03-12 03:11:09,688 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:11:09,689 [main:117] - GENERATED CALL = (null.toString()).subSequence(-669051455, 251364144).equals("yfeyt")
2021-03-12 03:11:09,689 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45dcf9e0]]
2021-03-12 03:11:09,689 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45dcf9e0]
2021-03-12 03:11:09,689 [main:117] - GENERATED CALL = (null.toString()).isEmpty()
2021-03-12 03:11:09,689 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23ba3826]]
2021-03-12 03:11:09,690 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23ba3826]
2021-03-12 03:11:09,690 [main:117] - GENERATED CALL = (null.toString()).isNotEmpty()
2021-03-12 03:11:09,690 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3887f]]
2021-03-12 03:11:09,690 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:11:09,691 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3887f]
2021-03-12 03:11:09,811 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:09,931 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:09,932 [main:117] - GENERATED CALL = (null.toString()).get(justForUsageInClosure).equals('害', false)
2021-03-12 03:11:09,933 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@723ed9dd]]
2021-03-12 03:11:09,933 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:11:10,049 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:10,050 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@723ed9dd]
2021-03-12 03:11:10,051 [main:117] - GENERATED CALL = (null.toString()).get(2070928059).isUpperCase()
2021-03-12 03:11:10,051 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]]
2021-03-12 03:11:10,051 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:10,051 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]
2021-03-12 03:11:10,178 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:11:10,178 [main:117] - GENERATED CALL = (null.toString()).compareTo(parentSideEffects).equals("hrgew")
2021-03-12 03:11:10,178 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7e2acf]]
2021-03-12 03:11:10,179 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:10,179 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7e2acf]
2021-03-12 03:11:10,290 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:10,408 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:10,530 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:11:10,532 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:11:10,773 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:11:10,890 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:11:10,892 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:11:11,147 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 03:11:11,296 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:11:11,298 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:11:11,525 [main:302] - generating value of type = Int true depth = 9
2021-03-12 03:11:11,526 [main:95] - GENERATED = StringBuilder(-31559985)
2021-03-12 03:11:11,527 [main:95] - GENERATED = StringBuilder(StringBuilder(-31559985))
2021-03-12 03:11:11,527 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder(-31559985)))
2021-03-12 03:11:11,637 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:11,638 [main:117] - GENERATED CALL = (null.toString()).subSequence(justForUsageInClosure, justForUsageInClosure).regionMatches(-1270692140, StringBuilder(StringBuilder(StringBuilder(-31559985))), justForUsageInClosure, justForUsageInClosure, true)
2021-03-12 03:11:11,638 [main:61] - replacement of parentSideEffects != "1#4#parentCaptured" of type Boolean is (null.toString()).get(justForUsageInClosure).equals('害', false)
2021-03-12 03:11:11,748 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:11,748 [main:66] - Compilation checking started
2021-03-12 03:11:12,164 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:11:12,168 [main:53] - replacing (sideEffects, String)
2021-03-12 03:11:12,169 [main:50] - replacing sideEffects String
2021-03-12 03:11:12,169 [main:54] - Getting value of type String
2021-03-12 03:11:12,288 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:12,288 [main:58] - GENERATED VALUE OF TYPE String = "azhfk"
2021-03-12 03:11:12,289 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:12,805 [main:67] - randomType = Collection<List<Int?>?>
2021-03-12 03:11:12,807 [main:106] - GETTING String from Int
2021-03-12 03:11:12,862 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:11:12,862 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:11:12,862 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:11:12,863 [main:117] - GENERATED CALL = (arg).toLong().toString(arg)
2021-03-12 03:11:12,863 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:11:12,863 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:12,863 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:11:12,863 [main:117] - GENERATED CALL = (arg).toChar().plus(C("fqowo").grandParentProp)
2021-03-12 03:11:12,863 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:11:12,864 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:12,864 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:11:12,864 [main:117] - GENERATED CALL = (arg).toChar().uppercase()
2021-03-12 03:11:12,864 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:11:12,864 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:12,864 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:11:12,864 [main:117] - GENERATED CALL = (arg).toChar().titlecase()
2021-03-12 03:11:12,864 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:11:12,864 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:11:12,865 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:11:12,865 [main:117] - GENERATED CALL = (arg).toByte().toString(justForUsageInClosure)
2021-03-12 03:11:12,865 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:11:12,865 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:11:12,865 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:11:12,865 [main:117] - GENERATED CALL = (arg).toShort().toString(arg)
2021-03-12 03:11:12,865 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:11:12,865 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:12,866 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:11:12,866 [main:117] - GENERATED CALL = (arg).toChar().lowercase()
2021-03-12 03:11:12,866 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:12,866 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:11:12,866 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:12,977 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:12,978 [main:117] - GENERATED CALL = (arg).compareTo(justForUsageInClosure).toString(714893873)
2021-03-12 03:11:12,979 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:11:12,979 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:11:13,095 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:11:13,096 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:11:13,096 [main:117] - GENERATED CALL = (arg).div(-449696342479598121).toString(arg)
2021-03-12 03:11:13,096 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:13,096 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:13,096 [main:117] - GENERATED CALL = (arg).toString(arg)
2021-03-12 03:11:13,096 [main:61] - replacement of sideEffects of type String is (arg).toChar().plus(C("fqowo").grandParentProp)
2021-03-12 03:11:13,205 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:13,205 [main:66] - Compilation checking started
2021-03-12 03:11:13,529 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            (arg).toChar().plus(C("fqowo").grandParentProp) += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:11:13,531 [main:53] - replacing ("fail3: ${parentSideEffects}", String)
2021-03-12 03:11:13,532 [main:50] - replacing "fail3: ${parentSideEffects}" String
2021-03-12 03:11:13,532 [main:54] - Getting value of type String
2021-03-12 03:11:13,649 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:13,649 [main:58] - GENERATED VALUE OF TYPE String = "oadjh"
2021-03-12 03:11:13,650 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:13,651 [main:67] - randomType = Boolean
2021-03-12 03:11:13,772 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:13,785 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]
2021-03-12 03:11:13,894 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:13,895 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:13,895 [main:78] - Generated call from random type = (false).compareTo(false).toString(justForUsageInClosure)
2021-03-12 03:11:13,895 [main:106] - GETTING String from String
2021-03-12 03:11:13,920 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]]
2021-03-12 03:11:13,920 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]
2021-03-12 03:11:14,033 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:14,038 [main:117] - GENERATED CALL = (prop).removeSurrounding("wlxwa")
2021-03-12 03:11:14,038 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:11:14,038 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:11:14,150 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:14,265 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:11:14,268 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:11:14,506 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:11:14,507 [main:95] - GENERATED = StringBuilder("ddkcf")
2021-03-12 03:11:14,507 [main:117] - GENERATED CALL = (prop).removePrefix(StringBuilder("ddkcf"))
2021-03-12 03:11:14,507 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]]
2021-03-12 03:11:14,507 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]
2021-03-12 03:11:14,508 [main:117] - GENERATED CALL = (prop).concat(parentSideEffects)
2021-03-12 03:11:14,508 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]]
2021-03-12 03:11:14,508 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]
2021-03-12 03:11:14,508 [main:117] - GENERATED CALL = (prop).decapitalize()
2021-03-12 03:11:14,508 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]]
2021-03-12 03:11:14,508 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]
2021-03-12 03:11:14,617 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:14,618 [main:117] - GENERATED CALL = (prop).substringAfterLast('鱨', sideEffects)
2021-03-12 03:11:14,618 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]]
2021-03-12 03:11:14,618 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]
2021-03-12 03:11:14,618 [main:117] - GENERATED CALL = (prop).trimIndent()
2021-03-12 03:11:14,619 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]]
2021-03-12 03:11:14,619 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]
2021-03-12 03:11:14,730 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:14,856 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:14,967 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:14,968 [main:117] - GENERATED CALL = (prop).replaceAfterLast('櫒', "jrdbo", "gdhwx")
2021-03-12 03:11:14,968 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]]
2021-03-12 03:11:14,968 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]
2021-03-12 03:11:14,968 [main:117] - GENERATED CALL = (prop).removeRange(justForUsageInClosure, justForUsageInClosure)
2021-03-12 03:11:14,968 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]]
2021-03-12 03:11:14,968 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]
2021-03-12 03:11:15,078 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:15,079 [main:117] - GENERATED CALL = (prop).replaceBeforeLast('㨹', parentProp, null.toString())
2021-03-12 03:11:15,080 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f4acca]]
2021-03-12 03:11:15,080 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f4acca]
2021-03-12 03:11:15,080 [main:117] - GENERATED CALL = (prop).trim()
2021-03-12 03:11:15,080 [main:61] - replacement of "fail3: ${parentSideEffects}" of type String is (prop).substringAfterLast('鱨', sideEffects)
2021-03-12 03:11:15,193 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:15,193 [main:66] - Compilation checking started
2021-03-12 03:11:15,473 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return (prop).substringAfterLast('鱨', sideEffects)

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:11:15,475 [main:53] - replacing (5, Int)
2021-03-12 03:11:15,476 [main:50] - replacing 5 Int
2021-03-12 03:11:15,476 [main:54] - Getting value of type Int
2021-03-12 03:11:15,601 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:15,601 [main:58] - GENERATED VALUE OF TYPE Int = -440137530
2021-03-12 03:11:15,601 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:15,604 [main:67] - randomType = C
2021-03-12 03:11:15,727 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:11:15,728 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:11:15,845 [main:194] - Type params = []
2021-03-12 03:11:15,970 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:11:15,978 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@48037190]
2021-03-12 03:11:16,085 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:11:16,085 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]
2021-03-12 03:11:16,197 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:16,198 [main:78] - Generated call from random type = (C("lqjwc")).equals("ymvio").compareTo(false)
2021-03-12 03:11:16,199 [main:106] - GETTING Int from String
2021-03-12 03:11:16,226 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a7909db]]
2021-03-12 03:11:16,226 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a7909db]
2021-03-12 03:11:16,226 [main:117] - GENERATED CALL = (parentProp).length.unaryMinus()
2021-03-12 03:11:16,226 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@193176e9]]
2021-03-12 03:11:16,226 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:16,226 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@193176e9]
2021-03-12 03:11:16,227 [main:117] - GENERATED CALL = (parentProp).compareTo(C("fqowo").grandParentProp).inc()
2021-03-12 03:11:16,227 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5797f91]]
2021-03-12 03:11:16,227 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5797f91]
2021-03-12 03:11:16,227 [main:117] - GENERATED CALL = (parentProp).length.or(justForUsageInClosure)
2021-03-12 03:11:16,227 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e61ded]]
2021-03-12 03:11:16,227 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e61ded]
2021-03-12 03:11:16,227 [main:117] - GENERATED CALL = (parentProp).length.toInt()
2021-03-12 03:11:16,227 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@5b5f4a37]]
2021-03-12 03:11:16,228 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:11:16,345 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:16,346 [main:117] - GENERATED CALL = (parentProp).get(-2032954632).code
2021-03-12 03:11:16,346 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@227e568f]]
2021-03-12 03:11:16,346 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:16,346 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@227e568f]
2021-03-12 03:11:16,347 [main:117] - GENERATED CALL = (parentProp).compareTo(parentSideEffects).countTrailingZeroBits()
2021-03-12 03:11:16,347 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@7f07ca2b]]
2021-03-12 03:11:16,347 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:16,347 [main:117] - GENERATED CALL = (parentProp).subSequence(justForUsageInClosure, justForUsageInClosure).length
2021-03-12 03:11:16,347 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12032e95]]
2021-03-12 03:11:16,347 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12032e95]
2021-03-12 03:11:16,347 [main:117] - GENERATED CALL = (parentProp).length.xor(justForUsageInClosure)
2021-03-12 03:11:16,347 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@2a030c0b]]
2021-03-12 03:11:16,348 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:16,348 [main:117] - GENERATED CALL = (parentProp).subSequence(justForUsageInClosure, justForUsageInClosure).lastIndex
2021-03-12 03:11:16,348 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]]
2021-03-12 03:11:16,348 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:16,456 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:16,457 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]
2021-03-12 03:11:16,565 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:11:16,566 [main:117] - GENERATED CALL = (parentProp).compareTo("emlgm").rem(5)
2021-03-12 03:11:16,570 [main:61] - replacement of 5 of type Int is (parentProp).length.unaryMinus()
2021-03-12 03:11:16,679 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:16,679 [main:66] - Compilation checking started
2021-03-12 03:11:16,954 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A((parentProp).length.unaryMinus(), 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:11:16,957 [main:53] - replacing (parentProp, String)
2021-03-12 03:11:16,957 [main:50] - replacing parentProp String
2021-03-12 03:11:16,957 [main:54] - Getting value of type String
2021-03-12 03:11:17,068 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:17,068 [main:58] - GENERATED VALUE OF TYPE String = "seutj"
2021-03-12 03:11:17,069 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:17,449 [main:67] - randomType = ArrayList<Double?>
2021-03-12 03:11:17,557 [main:302] - generating value of type = ArrayList<Double?> false depth = 0
2021-03-12 03:11:17,670 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Double?): ArrayList<Double?> = TODO()
2021-03-12 03:11:17,672 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Double?): ArrayList<Double?> = TODO()
2021-03-12 03:11:17,786 [main:302] - generating value of type = Double true depth = 3
2021-03-12 03:11:17,787 [main:95] - GENERATED = arrayListOf<Double?>(0.6339735245324344)
2021-03-12 03:11:17,987 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:18,102 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:18,103 [main:78] - Generated call from random type = (arrayListOf<Double?>(0.6339735245324344)).size.toString(-1873917396)
2021-03-12 03:11:18,104 [main:106] - GETTING String from String
2021-03-12 03:11:18,136 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]]
2021-03-12 03:11:18,136 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]
2021-03-12 03:11:18,250 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:18,380 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:18,381 [main:117] - GENERATED CALL = (null.toString()).substringBefore('룔', "dbxpe")
2021-03-12 03:11:18,382 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]]
2021-03-12 03:11:18,382 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]
2021-03-12 03:11:18,510 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:11:18,511 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:18,512 [main:117] - GENERATED CALL = (null.toString()).dropLastWhile({a: Char -> false})
2021-03-12 03:11:18,512 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]]
2021-03-12 03:11:18,512 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]
2021-03-12 03:11:18,617 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:11:18,618 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:18,619 [main:117] - GENERATED CALL = (null.toString()).filter({a: Char -> true})
2021-03-12 03:11:18,619 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]]
2021-03-12 03:11:18,619 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]
2021-03-12 03:11:18,724 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:18,725 [main:117] - GENERATED CALL = (null.toString()).padEnd(arg, '邆')
2021-03-12 03:11:18,726 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34632d00]]
2021-03-12 03:11:18,726 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34632d00]
2021-03-12 03:11:18,836 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:11:18,836 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:18,837 [main:117] - GENERATED CALL = (null.toString()).takeWhile({a: Char -> false})
2021-03-12 03:11:18,838 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]]
2021-03-12 03:11:18,838 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]
2021-03-12 03:11:18,949 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:18,950 [main:117] - GENERATED CALL = (null.toString()).substringBeforeLast('誉', parentProp)
2021-03-12 03:11:18,950 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:11:18,950 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:11:19,056 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:19,061 [main:117] - GENERATED CALL = (null.toString()).removePrefix(StringBuilder())
2021-03-12 03:11:19,061 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]]
2021-03-12 03:11:19,062 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]
2021-03-12 03:11:19,062 [main:117] - GENERATED CALL = (null.toString()).trimEnd()
2021-03-12 03:11:19,062 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:11:19,062 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:11:19,062 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:11:19,062 [main:117] - GENERATED CALL = (null.toString()).get(arg).plus(C("fqowo").grandParentProp)
2021-03-12 03:11:19,062 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]]
2021-03-12 03:11:19,062 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]
2021-03-12 03:11:19,063 [main:117] - GENERATED CALL = (null.toString()).removeRange(justForUsageInClosure, arg)
2021-03-12 03:11:19,063 [main:61] - replacement of parentProp of type String is (null.toString()).removePrefix(StringBuilder())
2021-03-12 03:11:19,175 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:19,176 [main:66] - Compilation checking started
2021-03-12 03:11:19,478 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            (null.toString()).removePrefix(StringBuilder()) = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:11:19,481 [main:53] - replacing (a2 != "123#int#130#parentCaptured", Boolean)
2021-03-12 03:11:19,481 [main:50] - replacing a2 != "123#int#130#parentCaptured" Boolean
2021-03-12 03:11:19,482 [main:54] - Getting value of type Boolean
2021-03-12 03:11:19,596 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:19,597 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 03:11:19,597 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:19,973 [main:67] - randomType = Function2<Short, C, Short>
2021-03-12 03:11:19,974 [main:106] - GETTING Boolean from String
2021-03-12 03:11:19,998 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23ba3826]]
2021-03-12 03:11:19,998 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23ba3826]
2021-03-12 03:11:19,999 [main:117] - GENERATED CALL = (prop).isNotEmpty()
2021-03-12 03:11:19,999 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f09514]]
2021-03-12 03:11:19,999 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:20,107 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:20,108 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f09514]
2021-03-12 03:11:20,218 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:11:20,327 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:11:20,329 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:11:20,686 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:11:20,688 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 03:11:20,693 [main:95] - GENERATED = Regex("lbclv", kotlin.text.RegexOption.MULTILINE)
2021-03-12 03:11:20,694 [main:117] - GENERATED CALL = (prop).subSequence(617658360, justForUsageInClosure).matches(Regex("lbclv", kotlin.text.RegexOption.MULTILINE))
2021-03-12 03:11:20,695 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@549a1bdb]]
2021-03-12 03:11:20,695 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@549a1bdb]
2021-03-12 03:11:20,811 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:20,812 [main:117] - GENERATED CALL = (prop).startsWith(a2, true)
2021-03-12 03:11:20,812 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339ebad1]]
2021-03-12 03:11:20,812 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:20,946 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:20,947 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339ebad1]
2021-03-12 03:11:21,055 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:21,164 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:21,166 [main:117] - GENERATED CALL = (prop).subSequence(justForUsageInClosure, 1621301370).contains('៙', true)
2021-03-12 03:11:21,166 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7e2acf]]
2021-03-12 03:11:21,166 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7e2acf]
2021-03-12 03:11:21,275 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:21,386 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:21,387 [main:117] - GENERATED CALL = (prop).regionMatches(justForUsageInClosure, "eqbup", justForUsageInClosure, justForUsageInClosure, true)
2021-03-12 03:11:21,387 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339ebad1]]
2021-03-12 03:11:21,387 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339ebad1]
2021-03-12 03:11:21,497 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:21,606 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:21,607 [main:117] - GENERATED CALL = (prop).contains('⥯', false)
2021-03-12 03:11:21,768 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70251935]]
2021-03-12 03:11:21,768 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:21,875 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:21,876 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70251935]
2021-03-12 03:11:21,983 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:22,092 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:22,093 [main:117] - GENERATED CALL = (prop).subSequence(justForUsageInClosure, 1095918882).startsWith('颓', false)
2021-03-12 03:11:22,093 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5682849]]
2021-03-12 03:11:22,093 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]
2021-03-12 03:11:22,200 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:11:22,201 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5682849]
2021-03-12 03:11:22,330 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:22,331 [main:117] - GENERATED CALL = (prop).equals("wytyt").and(false)
2021-03-12 03:11:22,331 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45dcf9e0]]
2021-03-12 03:11:22,331 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45dcf9e0]
2021-03-12 03:11:22,332 [main:117] - GENERATED CALL = (prop).isEmpty()
2021-03-12 03:11:22,332 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff62665]]
2021-03-12 03:11:22,332 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:22,448 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:22,449 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff62665]
2021-03-12 03:11:22,556 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:22,664 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:22,666 [main:117] - GENERATED CALL = (prop).subSequence(1089363105, justForUsageInClosure).endsWith('⺭', false)
2021-03-12 03:11:22,666 [main:61] - replacement of a2 != "123#int#130#parentCaptured" of type Boolean is (prop).equals("wytyt").and(false)
2021-03-12 03:11:22,779 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:22,779 [main:66] - Compilation checking started
2021-03-12 03:11:23,052 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if ((prop).equals("wytyt").and(false)) return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:11:23,054 [main:53] - replacing (sideEffects, String)
2021-03-12 03:11:23,055 [main:50] - replacing sideEffects String
2021-03-12 03:11:23,055 [main:54] - Getting value of type String
2021-03-12 03:11:23,171 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:23,172 [main:58] - GENERATED VALUE OF TYPE String = "bbwcm"
2021-03-12 03:11:23,172 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:23,175 [main:67] - randomType = C
2021-03-12 03:11:23,288 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:11:23,288 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:11:23,398 [main:194] - Type params = []
2021-03-12 03:11:23,505 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:11:23,511 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8bf2623]
2021-03-12 03:11:23,638 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:11:23,638 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:23,640 [main:78] - Generated call from random type = (C("joics")).grandParentProp.takeLastWhile({a: Char -> false})
2021-03-12 03:11:23,640 [main:106] - GETTING String from String
2021-03-12 03:11:23,663 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a5950b]]
2021-03-12 03:11:23,663 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:23,772 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:23,773 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a5950b]
2021-03-12 03:11:23,882 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:11:23,993 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 03:11:23,995 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 03:11:24,337 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:11:24,338 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 03:11:24,447 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): Set<RegexOption> = TODO()
2021-03-12 03:11:24,450 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): Set<RegexOption> = TODO()
2021-03-12 03:11:24,560 [main:95] - GENERATED = hashSetOf<RegexOption>()
2021-03-12 03:11:24,560 [main:95] - GENERATED = Regex("chgwx", hashSetOf<RegexOption>())
2021-03-12 03:11:24,668 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:24,669 [main:117] - GENERATED CALL = (parentProp).subSequence(justForUsageInClosure, 1172219539).replaceFirst(Regex("chgwx", hashSetOf<RegexOption>()), "zwyfg")
2021-03-12 03:11:24,669 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]]
2021-03-12 03:11:24,669 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]
2021-03-12 03:11:24,774 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:24,779 [main:117] - GENERATED CALL = (parentProp).removeSurrounding("vwuib")
2021-03-12 03:11:24,779 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]]
2021-03-12 03:11:24,779 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:24,908 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:24,909 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]
2021-03-12 03:11:25,017 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:25,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:25,123 [main:117] - GENERATED CALL = (parentProp).subSequence(-787265406, justForUsageInClosure).substring(-1725957222, -1697560490)
2021-03-12 03:11:25,123 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:11:25,123 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:11:25,123 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:11:25,124 [main:117] - GENERATED CALL = (parentProp).get(arg).uppercase()
2021-03-12 03:11:25,124 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]]
2021-03-12 03:11:25,124 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]
2021-03-12 03:11:25,124 [main:117] - GENERATED CALL = (parentProp).toUpperCase()
2021-03-12 03:11:25,124 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]]
2021-03-12 03:11:25,124 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]
2021-03-12 03:11:25,231 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:25,232 [main:117] - GENERATED CALL = (parentProp).padStart(arg, '')
2021-03-12 03:11:25,232 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]]
2021-03-12 03:11:25,232 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]
2021-03-12 03:11:25,340 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:25,341 [main:117] - GENERATED CALL = (parentProp).padEnd(arg, '㝋')
2021-03-12 03:11:25,341 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]]
2021-03-12 03:11:25,342 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]
2021-03-12 03:11:25,447 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:11:25,447 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:25,449 [main:117] - GENERATED CALL = (parentProp).dropLastWhile({a: Char -> true})
2021-03-12 03:11:25,449 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]]
2021-03-12 03:11:25,449 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]
2021-03-12 03:11:25,449 [main:117] - GENERATED CALL = (parentProp).trimEnd()
2021-03-12 03:11:25,449 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f4acca]]
2021-03-12 03:11:25,449 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f4acca]
2021-03-12 03:11:25,449 [main:117] - GENERATED CALL = (parentProp).trim()
2021-03-12 03:11:25,449 [main:61] - replacement of sideEffects of type String is (parentProp).padStart(arg, '')
2021-03-12 03:11:25,556 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:25,556 [main:66] - Compilation checking started
2021-03-12 03:11:25,824 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            (parentProp).padStart(arg, '') += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:11:25,827 [main:53] - replacing (parentProp, String)
2021-03-12 03:11:25,828 [main:50] - replacing parentProp String
2021-03-12 03:11:25,828 [main:54] - Getting value of type String
2021-03-12 03:11:25,939 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:25,940 [main:58] - GENERATED VALUE OF TYPE String = "rkaog"
2021-03-12 03:11:25,940 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:26,639 [main:67] - randomType = Pair<Short?, Long?>?
2021-03-12 03:11:26,746 [main:302] - generating value of type = Pair<Short?, Long?> false depth = 0
2021-03-12 03:11:26,857 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Short?, second: Long?): Pair<Short?, Long?> = TODO()
2021-03-12 03:11:26,859 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Short?, second: Long?): Pair<Short?, Long?> = TODO()
2021-03-12 03:11:26,972 [main:302] - generating value of type = Short true depth = 3
2021-03-12 03:11:26,973 [main:302] - generating value of type = Long true depth = 3
2021-03-12 03:11:26,973 [main:95] - GENERATED = Pair<Short?, Long?>(16855, -4443052372913977535)
2021-03-12 03:11:26,995 [main:106] - GETTING String from Int
2021-03-12 03:11:27,051 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:11:27,052 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:11:27,052 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:11:27,052 [main:117] - GENERATED CALL = (arg2).toByte().toString(arg2)
2021-03-12 03:11:27,052 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:27,052 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:27,161 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:27,162 [main:117] - GENERATED CALL = (arg2).toString(-1681799611)
2021-03-12 03:11:27,162 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:11:27,162 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:27,162 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:11:27,268 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:27,269 [main:117] - GENERATED CALL = (arg2).toChar().plus("znsdm")
2021-03-12 03:11:27,270 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:11:27,270 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:27,270 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:11:27,270 [main:117] - GENERATED CALL = (arg2).toChar().titlecase()
2021-03-12 03:11:27,270 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:11:27,270 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:11:27,375 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:11:27,376 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:11:27,376 [main:117] - GENERATED CALL = (arg2).div(-3241683736770006479).toString(justForUsageInClosure)
2021-03-12 03:11:27,376 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:11:27,376 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:27,376 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:11:27,377 [main:117] - GENERATED CALL = (arg2).toChar().uppercase()
2021-03-12 03:11:27,377 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:11:27,377 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:27,377 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:11:27,377 [main:117] - GENERATED CALL = (arg2).toChar().lowercase()
2021-03-12 03:11:27,377 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:27,377 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:11:27,377 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:27,378 [main:117] - GENERATED CALL = (arg2).compareTo(arg2).toString(justForUsageInClosure)
2021-03-12 03:11:27,378 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:27,378 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:11:27,378 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:27,378 [main:117] - GENERATED CALL = (arg2).toInt().toString(arg2)
2021-03-12 03:11:27,378 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:11:27,378 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:11:27,378 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:11:27,378 [main:117] - GENERATED CALL = (arg2).toLong().toString(arg1)
2021-03-12 03:11:27,379 [main:61] - replacement of parentProp of type String is "rkaog"
2021-03-12 03:11:27,485 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 03:11:27,485 [main:66] - Compilation checking started
2021-03-12 03:11:27,764 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            "rkaog" = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:11:27,765 [main:53] - replacing (parentSideEffects, String)
2021-03-12 03:11:27,765 [main:50] - replacing parentSideEffects String
2021-03-12 03:11:27,765 [main:54] - Getting value of type String
2021-03-12 03:11:27,872 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:27,873 [main:58] - GENERATED VALUE OF TYPE String = "oggnk"
2021-03-12 03:11:27,873 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:27,875 [main:67] - randomType = C
2021-03-12 03:11:27,979 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:11:27,980 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:11:28,086 [main:194] - Type params = []
2021-03-12 03:11:28,195 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:11:28,203 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]
2021-03-12 03:11:28,312 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:11:28,312 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:11:28,314 [main:78] - Generated call from random type = (C("fetpr")).grandParentProp.replaceFirstChar({a: Char -> ''})
2021-03-12 03:11:28,314 [main:106] - GETTING String from String
2021-03-12 03:11:28,341 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]]
2021-03-12 03:11:28,341 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]
2021-03-12 03:11:28,342 [main:117] - GENERATED CALL = (null.toString()).lowercase()
2021-03-12 03:11:28,342 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]]
2021-03-12 03:11:28,342 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]
2021-03-12 03:11:28,448 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:28,558 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:28,559 [main:117] - GENERATED CALL = (null.toString()).padStart(1648382762, '媆')
2021-03-12 03:11:28,559 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]]
2021-03-12 03:11:28,559 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:28,669 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:28,783 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:28,784 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]
2021-03-12 03:11:28,890 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:28,998 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:28,999 [main:117] - GENERATED CALL = (null.toString()).subSequence(42297553, -809120846).commonSuffixWith("vihou", true)
2021-03-12 03:11:28,999 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]]
2021-03-12 03:11:28,999 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]
2021-03-12 03:11:28,999 [main:117] - GENERATED CALL = (null.toString()).trimMargin(C("fqowo").grandParentProp)
2021-03-12 03:11:28,999 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]]
2021-03-12 03:11:28,999 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]
2021-03-12 03:11:29,128 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:29,236 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:29,237 [main:117] - GENERATED CALL = (null.toString()).substringBefore('?', "xsddy")
2021-03-12 03:11:29,237 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:29,237 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:29,345 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:29,346 [main:117] - GENERATED CALL = (null.toString()).length.toString(597747495)
2021-03-12 03:11:29,346 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:29,346 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:29,452 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:29,453 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:29,563 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:29,564 [main:117] - GENERATED CALL = (null.toString()).compareTo("cwwuq").toString(855253469)
2021-03-12 03:11:29,564 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]]
2021-03-12 03:11:29,564 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]
2021-03-12 03:11:29,670 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:29,777 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:29,778 [main:117] - GENERATED CALL = (null.toString()).removeRange(1802440577, -2029602847)
2021-03-12 03:11:29,778 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:11:29,778 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:11:29,883 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:29,887 [main:117] - GENERATED CALL = (null.toString()).removePrefix("vatdu")
2021-03-12 03:11:29,887 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@739964f]]
2021-03-12 03:11:29,887 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@739964f]
2021-03-12 03:11:29,995 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:30,104 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:30,210 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:30,211 [main:117] - GENERATED CALL = (null.toString()).replaceFirst('ᰁ', 'ࡢ', true)
2021-03-12 03:11:30,212 [main:61] - replacement of parentSideEffects of type String is null.toString()
2021-03-12 03:11:30,320 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:30,323 [main:53] - replacing (justForUsageInParentClosure, String)
2021-03-12 03:11:30,324 [main:50] - replacing justForUsageInParentClosure String
2021-03-12 03:11:30,324 [main:54] - Getting value of type String
2021-03-12 03:11:30,428 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:30,429 [main:58] - GENERATED VALUE OF TYPE String = "ogshm"
2021-03-12 03:11:30,429 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:30,790 [main:67] - randomType = Function2<C, Char?, Long>
2021-03-12 03:11:30,790 [main:106] - GETTING String from String
2021-03-12 03:11:30,807 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]]
2021-03-12 03:11:30,808 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]
2021-03-12 03:11:30,911 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:11:30,912 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:30,913 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).dropWhile({a: Char -> true})
2021-03-12 03:11:30,914 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]]
2021-03-12 03:11:30,914 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]
2021-03-12 03:11:31,019 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:31,124 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:31,125 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).padEnd(-1754635125, '')
2021-03-12 03:11:31,125 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f4acca]]
2021-03-12 03:11:31,126 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f4acca]
2021-03-12 03:11:31,126 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).trim()
2021-03-12 03:11:31,126 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]]
2021-03-12 03:11:31,126 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]
2021-03-12 03:11:31,230 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:11:31,343 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 03:11:31,344 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 03:11:31,454 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:11:31,455 [main:95] - GENERATED = mutableListOf<Int>(-1521105822)
2021-03-12 03:11:31,455 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).slice(mutableListOf<Int>(-1521105822))
2021-03-12 03:11:31,455 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@80e1a7b]]
2021-03-12 03:11:31,455 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@80e1a7b]
2021-03-12 03:11:31,573 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:31,574 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).take(660432550)
2021-03-12 03:11:31,575 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7c9ff9]]
2021-03-12 03:11:31,575 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7c9ff9]
2021-03-12 03:11:31,681 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:31,685 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).removeSuffix("byyln")
2021-03-12 03:11:31,842 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]]
2021-03-12 03:11:31,842 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]
2021-03-12 03:11:31,949 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:11:31,950 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:31,951 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).filterNot({a: Char -> false})
2021-03-12 03:11:31,951 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:11:31,951 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:11:31,951 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:11:31,952 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
2021-03-12 03:11:31,952 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]]
2021-03-12 03:11:31,952 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]
2021-03-12 03:11:32,059 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:32,194 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:32,301 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:32,302 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceBeforeLast('ﭚ', "vgjwj", "iqnmz")
2021-03-12 03:11:32,302 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]]
2021-03-12 03:11:32,303 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]
2021-03-12 03:11:32,408 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:32,409 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceAfterLast('䖴', null.toString(), parentProp)
2021-03-12 03:11:32,409 [main:61] - replacement of justForUsageInParentClosure of type String is (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
2021-03-12 03:11:32,519 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:32,520 [main:66] - Compilation checking started
2021-03-12 03:11:32,988 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "fail8: ${parentSideEffects}"

    return "OK"
}


2021-03-12 03:11:32,993 [main:53] - replacing ("fail8: ${parentSideEffects}", String)
2021-03-12 03:11:32,994 [main:50] - replacing "fail8: ${parentSideEffects}" String
2021-03-12 03:11:32,994 [main:54] - Getting value of type String
2021-03-12 03:11:33,120 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:33,121 [main:58] - GENERATED VALUE OF TYPE String = "kdcfk"
2021-03-12 03:11:33,121 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:33,245 [main:67] - randomType = Double
2021-03-12 03:11:33,368 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:11:33,409 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1e8559bd]
2021-03-12 03:11:33,409 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:11:33,526 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:33,527 [main:78] - Generated call from random type = (0.6742589543517248).toShort().toString(163997214)
2021-03-12 03:11:33,527 [main:106] - GETTING String from String
2021-03-12 03:11:33,557 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]]
2021-03-12 03:11:33,557 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:33,557 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]
2021-03-12 03:11:33,558 [main:117] - GENERATED CALL = (parentProp).subSequence(justForUsageInClosure, justForUsageInClosure).substring(justForUsageInClosure, justForUsageInClosure)
2021-03-12 03:11:33,558 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a5950b]]
2021-03-12 03:11:33,558 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:33,677 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:33,678 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a5950b]
2021-03-12 03:11:33,786 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:11:33,901 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 03:11:33,903 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 03:11:34,276 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:11:34,277 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 03:11:34,391 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-12 03:11:34,393 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-12 03:11:34,629 [main:302] - generating value of type = Int true depth = 6
2021-03-12 03:11:34,630 [main:95] - GENERATED = HashSet<RegexOption>(-743922182)
2021-03-12 03:11:34,630 [main:95] - GENERATED = Regex("rkspm", HashSet<RegexOption>(-743922182))
2021-03-12 03:11:34,740 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:34,741 [main:117] - GENERATED CALL = (parentProp).subSequence(justForUsageInClosure, -734022762).replaceFirst(Regex("rkspm", HashSet<RegexOption>(-743922182)), "odlvj")
2021-03-12 03:11:34,742 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]]
2021-03-12 03:11:34,742 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]
2021-03-12 03:11:34,742 [main:117] - GENERATED CALL = (parentProp).toUpperCase()
2021-03-12 03:11:34,742 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]]
2021-03-12 03:11:34,742 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]
2021-03-12 03:11:34,851 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:34,962 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:34,964 [main:117] - GENERATED CALL = (parentProp).padStart(301917843, '?')
2021-03-12 03:11:34,964 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]]
2021-03-12 03:11:34,965 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]
2021-03-12 03:11:34,965 [main:117] - GENERATED CALL = (parentProp).replaceIndentByMargin(prop, a3)
2021-03-12 03:11:34,965 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]]
2021-03-12 03:11:34,965 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]
2021-03-12 03:11:34,965 [main:117] - GENERATED CALL = (parentProp).dropLast(justForUsageInClosure)
2021-03-12 03:11:34,966 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]]
2021-03-12 03:11:34,966 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]
2021-03-12 03:11:34,966 [main:117] - GENERATED CALL = (parentProp).lowercase()
2021-03-12 03:11:34,966 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]]
2021-03-12 03:11:34,966 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]
2021-03-12 03:11:34,966 [main:117] - GENERATED CALL = (parentProp).drop(justForUsageInClosure)
2021-03-12 03:11:34,966 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]]
2021-03-12 03:11:34,967 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]
2021-03-12 03:11:35,095 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:35,206 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:35,207 [main:117] - GENERATED CALL = (parentProp).replaceAfterLast('讶', parentSideEffects, "kmdao")
2021-03-12 03:11:35,207 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:11:35,207 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:11:35,207 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:11:35,207 [main:117] - GENERATED CALL = (parentProp).get(justForUsageInClosure).titlecase()
2021-03-12 03:11:35,208 [main:61] - replacement of "fail8: ${parentSideEffects}" of type String is "kdcfk"
2021-03-12 03:11:35,319 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 03:11:35,320 [main:66] - Compilation checking started
2021-03-12 03:11:35,713 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:11:35,716 [main:53] - replacing (prop + "first", String)
2021-03-12 03:11:35,717 [main:50] - replacing prop + "first" String
2021-03-12 03:11:35,717 [main:54] - Getting value of type String
2021-03-12 03:11:35,829 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:35,830 [main:58] - GENERATED VALUE OF TYPE String = "luaer"
2021-03-12 03:11:35,830 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:35,831 [main:67] - randomType = Boolean
2021-03-12 03:11:35,939 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:35,951 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]
2021-03-12 03:11:36,058 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:36,059 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:36,165 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:36,166 [main:78] - Generated call from random type = (false).compareTo(false).toString(588819777)
2021-03-12 03:11:36,166 [main:106] - GETTING String from String
2021-03-12 03:11:36,186 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:11:36,186 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:11:36,294 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:36,411 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:11:36,412 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:11:36,639 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:11:36,640 [main:95] - GENERATED = StringBuilder("ciukg")
2021-03-12 03:11:36,641 [main:117] - GENERATED CALL = (parentProp).removePrefix(StringBuilder("ciukg"))
2021-03-12 03:11:36,641 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]]
2021-03-12 03:11:36,641 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]
2021-03-12 03:11:36,641 [main:117] - GENERATED CALL = (parentProp).drop(justForUsageInClosure)
2021-03-12 03:11:36,641 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]]
2021-03-12 03:11:36,641 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]
2021-03-12 03:11:36,641 [main:117] - GENERATED CALL = (parentProp).decapitalize()
2021-03-12 03:11:36,641 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]]
2021-03-12 03:11:36,641 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]
2021-03-12 03:11:36,641 [main:117] - GENERATED CALL = (parentProp).prependIndent(C("fqowo").grandParentProp)
2021-03-12 03:11:36,642 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]]
2021-03-12 03:11:36,642 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]
2021-03-12 03:11:36,749 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:11:36,863 [main:43] - GENERATING CALL OF fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 03:11:36,865 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 03:11:37,094 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Int>, Unit> false depth = 3
2021-03-12 03:11:37,095 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 03:11:37,228 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:11:37,231 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:11:37,660 [main:302] - generating value of type = Boolean true depth = 7
2021-03-12 03:11:37,661 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-12 03:11:37,662 [main:302] - generating value of type = Any false depth = 8
2021-03-12 03:11:37,662 [main:95] - GENERATED = check(true, { "miics"})
2021-03-12 03:11:37,663 [main:95] - GENERATED = buildSet<Int>({ check(true, { "miics"})})
2021-03-12 03:11:37,664 [main:117] - GENERATED CALL = (parentProp).slice(buildSet<Int>({ check(true, { "miics"})}))
2021-03-12 03:11:37,664 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]]
2021-03-12 03:11:37,664 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]
2021-03-12 03:11:37,774 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:37,882 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:37,883 [main:117] - GENERATED CALL = (parentProp).substringAfterLast('ꠤ', "fenwc")
2021-03-12 03:11:37,883 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]]
2021-03-12 03:11:37,883 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]
2021-03-12 03:11:37,991 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:11:37,992 [main:117] - GENERATED CALL = (parentProp).plus("sjysb")
2021-03-12 03:11:37,992 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45c0d5dc]]
2021-03-12 03:11:37,992 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45c0d5dc]
2021-03-12 03:11:38,098 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:38,100 [main:117] - GENERATED CALL = (parentProp).substring(1988033683)
2021-03-12 03:11:38,100 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]]
2021-03-12 03:11:38,100 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]
2021-03-12 03:11:38,206 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:38,320 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:38,321 [main:117] - GENERATED CALL = (parentProp).substringBeforeLast('筏', "sfgxv")
2021-03-12 03:11:38,321 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]]
2021-03-12 03:11:38,322 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]
2021-03-12 03:11:38,430 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:11:38,431 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:11:38,432 [main:117] - GENERATED CALL = (parentProp).replaceFirstChar({a: Char -> '齿'})
2021-03-12 03:11:38,432 [main:61] - replacement of prop + "first" of type String is (parentProp).decapitalize()
2021-03-12 03:11:38,543 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:38,544 [main:66] - Compilation checking started
2021-03-12 03:11:38,927 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((parentSideEffects).length.rem(27) + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:11:38,930 [main:53] - replacing ((parentSideEffects).length.rem(27) + x, Int)
2021-03-12 03:11:38,932 [main:50] - replacing (parentSideEffects).length.rem(27) + x Int
2021-03-12 03:11:38,932 [main:54] - Getting value of type Int
2021-03-12 03:11:39,043 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:39,044 [main:58] - GENERATED VALUE OF TYPE Int = 966840508
2021-03-12 03:11:39,044 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:39,296 [main:67] - randomType = UInt?
2021-03-12 03:11:39,406 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 03:11:39,447 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@509acb01]
2021-03-12 03:11:39,448 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4432cd28]
2021-03-12 03:11:39,448 [main:78] - Generated call from random type = (1346504488.toUInt())?.toByte().unaryMinus()
2021-03-12 03:11:39,449 [main:106] - GETTING Int from String
2021-03-12 03:11:39,468 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@617efc0e]]
2021-03-12 03:11:39,468 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:39,469 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@617efc0e]
2021-03-12 03:11:39,576 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:11:39,576 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:39,578 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).subSequence(x, justForUsageInClosure).indexOfFirst({a: Char -> true})
2021-03-12 03:11:39,578 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]]
2021-03-12 03:11:39,578 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:39,578 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]
2021-03-12 03:11:39,688 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:11:39,689 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).compareTo(null.toString()).div(43)
2021-03-12 03:11:39,689 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e33cff5]]
2021-03-12 03:11:39,689 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e33cff5]
2021-03-12 03:11:39,690 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).count()
2021-03-12 03:11:39,690 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4bc1bcb8]]
2021-03-12 03:11:39,690 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4bc1bcb8]
2021-03-12 03:11:39,690 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)
2021-03-12 03:11:39,690 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@63b93fba]]
2021-03-12 03:11:39,690 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).length.sign
2021-03-12 03:11:39,690 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@643c7e7b]]
2021-03-12 03:11:39,690 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@643c7e7b]
2021-03-12 03:11:39,800 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:39,912 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:39,913 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).indexOf('酴', x, false)
2021-03-12 03:11:39,913 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7155f488]]
2021-03-12 03:11:39,913 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7155f488]
2021-03-12 03:11:39,913 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).length.dec()
2021-03-12 03:11:39,913 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12032e95]]
2021-03-12 03:11:39,913 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:39,913 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12032e95]
2021-03-12 03:11:40,022 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:40,023 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).compareTo(parentSideEffects).xor(1097964055)
2021-03-12 03:11:40,023 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@7677697a]]
2021-03-12 03:11:40,023 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:40,135 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:40,136 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).compareTo("hkdsf").absoluteValue
2021-03-12 03:11:40,136 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4819fa0c]]
2021-03-12 03:11:40,136 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:11:40,136 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4819fa0c]
2021-03-12 03:11:40,137 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).get(x).digitToInt()
2021-03-12 03:11:40,137 [main:61] - replacement of (parentSideEffects).length.rem(27) + x of type Int is (C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)
2021-03-12 03:11:40,247 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:40,248 [main:66] - Compilation checking started
2021-03-12 03:11:40,641 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:11:40,643 [main:53] - replacing (sideEffects, String)
2021-03-12 03:11:40,644 [main:50] - replacing sideEffects String
2021-03-12 03:11:40,644 [main:54] - Getting value of type String
2021-03-12 03:11:40,757 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:40,758 [main:58] - GENERATED VALUE OF TYPE String = "moemi"
2021-03-12 03:11:40,758 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:41,006 [main:67] - randomType = Float?
2021-03-12 03:11:41,111 [main:302] - generating value of type = Float true depth = 0
2021-03-12 03:11:41,152 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@77cbdc54]
2021-03-12 03:11:41,152 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:11:41,152 [main:78] - Generated call from random type = (0.5590634f)?.toChar().lowercase()
2021-03-12 03:11:41,152 [main:106] - GETTING String from String
2021-03-12 03:11:41,177 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]]
2021-03-12 03:11:41,178 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]
2021-03-12 03:11:41,287 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:11:41,287 [main:117] - GENERATED CALL = (parentProp).plus("acazf")
2021-03-12 03:11:41,288 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]]
2021-03-12 03:11:41,288 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]
2021-03-12 03:11:41,393 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:41,501 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:41,502 [main:117] - GENERATED CALL = (parentProp).replaceAfterLast('뻓', "yyzfa", sideEffects)
2021-03-12 03:11:41,502 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]]
2021-03-12 03:11:41,502 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]
2021-03-12 03:11:41,609 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:41,720 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:41,721 [main:117] - GENERATED CALL = (parentProp).commonPrefixWith("tbnat", true)
2021-03-12 03:11:41,721 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]]
2021-03-12 03:11:41,721 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]
2021-03-12 03:11:41,721 [main:117] - GENERATED CALL = (parentProp).lowercase()
2021-03-12 03:11:41,721 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]]
2021-03-12 03:11:41,721 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]
2021-03-12 03:11:41,722 [main:117] - GENERATED CALL = (parentProp).toLowerCase()
2021-03-12 03:11:41,722 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]]
2021-03-12 03:11:41,722 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]
2021-03-12 03:11:41,827 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:11:41,828 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:41,832 [main:117] - GENERATED CALL = (parentProp).filterIndexed({a: Int, b: Char -> true})
2021-03-12 03:11:41,832 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]]
2021-03-12 03:11:41,832 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]
2021-03-12 03:11:41,943 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:41,944 [main:117] - GENERATED CALL = (parentProp).replaceBefore('꿣', parentSideEffects, prop)
2021-03-12 03:11:41,944 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:41,944 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:41,944 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:42,055 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:42,057 [main:117] - GENERATED CALL = (parentProp).compareTo(justForUsageInParentClosure).toString(2031936751)
2021-03-12 03:11:42,057 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5434e4f7]]
2021-03-12 03:11:42,057 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5434e4f7]
2021-03-12 03:11:42,169 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:42,275 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:42,383 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:42,384 [main:117] - GENERATED CALL = (parentProp).replace('', '솼', true)
2021-03-12 03:11:42,384 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]]
2021-03-12 03:11:42,384 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]
2021-03-12 03:11:42,496 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:11:42,497 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:42,498 [main:117] - GENERATED CALL = (parentProp).filter({a: Char -> false})
2021-03-12 03:11:42,498 [main:61] - replacement of sideEffects of type String is (parentProp).replaceBefore('꿣', parentSideEffects, prop)
2021-03-12 03:11:42,626 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:42,626 [main:66] - Compilation checking started
2021-03-12 03:11:42,903 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((parentProp).replaceBefore('꿣', parentSideEffects, prop) != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:11:42,906 [main:53] - replacing (prop, String)
2021-03-12 03:11:42,906 [main:50] - replacing prop String
2021-03-12 03:11:42,906 [main:54] - Getting value of type String
2021-03-12 03:11:43,015 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:43,016 [main:58] - GENERATED VALUE OF TYPE String = "pqbhy"
2021-03-12 03:11:43,016 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:43,130 [main:67] - randomType = Double
2021-03-12 03:11:43,239 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:11:43,282 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@59356ccc]
2021-03-12 03:11:43,282 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:11:43,282 [main:78] - Generated call from random type = (0.7159218155076156).toChar().lowercase()
2021-03-12 03:11:43,283 [main:106] - GETTING String from Int
2021-03-12 03:11:43,325 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:43,325 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:11:43,433 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:43,433 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:43,545 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:43,546 [main:117] - GENERATED CALL = (x1).compareTo(-339996735).toString(981799474)
2021-03-12 03:11:43,546 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:11:43,546 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:43,546 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:11:43,546 [main:117] - GENERATED CALL = (x1).toChar().lowercase()
2021-03-12 03:11:43,547 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:43,547 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:11:43,547 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:43,547 [main:117] - GENERATED CALL = (x1).toInt().toString(x2)
2021-03-12 03:11:43,547 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:11:43,547 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:43,547 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:11:43,547 [main:117] - GENERATED CALL = (x1).toChar().uppercase()
2021-03-12 03:11:43,547 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:11:43,547 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:11:43,547 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:11:43,548 [main:117] - GENERATED CALL = (x1).toByte().toString(justForUsageInClosure)
2021-03-12 03:11:43,548 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:11:43,548 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:11:43,548 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:11:43,548 [main:117] - GENERATED CALL = (x1).toLong().toString(x1)
2021-03-12 03:11:43,548 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:11:43,548 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:11:43,658 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:11:43,659 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:11:43,660 [main:117] - GENERATED CALL = (x1).div(-2579306457118224985).toString(x1)
2021-03-12 03:11:43,660 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:11:43,660 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:11:43,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:11:43,660 [main:117] - GENERATED CALL = (x1).toShort().toString(justForUsageInClosure)
2021-03-12 03:11:43,660 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:43,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:43,661 [main:117] - GENERATED CALL = (x1).toString(justForUsageInClosure)
2021-03-12 03:11:43,661 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:11:43,661 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:43,661 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:11:43,661 [main:117] - GENERATED CALL = (x1).toChar().titlecase()
2021-03-12 03:11:43,661 [main:61] - replacement of prop of type String is "pqbhy"
2021-03-12 03:11:43,770 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 03:11:43,771 [main:66] - Compilation checking started
2021-03-12 03:11:44,042 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            "pqbhy" = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:11:44,045 [main:53] - replacing ("fail1: $a1", String)
2021-03-12 03:11:44,046 [main:50] - replacing "fail1: $a1" String
2021-03-12 03:11:44,046 [main:54] - Getting value of type String
2021-03-12 03:11:44,161 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:44,162 [main:58] - GENERATED VALUE OF TYPE String = "ldbhw"
2021-03-12 03:11:44,162 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:44,308 [main:67] - randomType = Map<C, Boolean>
2021-03-12 03:11:44,309 [main:106] - GETTING String from String
2021-03-12 03:11:44,328 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]]
2021-03-12 03:11:44,328 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]
2021-03-12 03:11:44,328 [main:117] - GENERATED CALL = (sideEffects).trimEnd()
2021-03-12 03:11:44,328 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:11:44,328 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:11:44,437 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:44,440 [main:117] - GENERATED CALL = (sideEffects).removePrefix("xdont")
2021-03-12 03:11:44,441 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]]
2021-03-12 03:11:44,441 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:44,548 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:44,549 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]
2021-03-12 03:11:44,549 [main:117] - GENERATED CALL = (sideEffects).subSequence(justForUsageInClosure, -931933617).repeat(justForUsageInClosure)
2021-03-12 03:11:44,549 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]]
2021-03-12 03:11:44,549 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]
2021-03-12 03:11:44,550 [main:117] - GENERATED CALL = (sideEffects).capitalize()
2021-03-12 03:11:44,550 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]]
2021-03-12 03:11:44,550 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]
2021-03-12 03:11:44,657 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:44,658 [main:117] - GENERATED CALL = (sideEffects).replaceAfterLast('繪', sideEffects, justForUsageInParentClosure)
2021-03-12 03:11:44,658 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]]
2021-03-12 03:11:44,658 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]
2021-03-12 03:11:44,658 [main:117] - GENERATED CALL = (sideEffects).takeLast(justForUsageInClosure)
2021-03-12 03:11:44,658 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]]
2021-03-12 03:11:44,658 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]
2021-03-12 03:11:44,767 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:44,768 [main:117] - GENERATED CALL = (sideEffects).dropLast(-459989420)
2021-03-12 03:11:44,768 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]]
2021-03-12 03:11:44,768 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]
2021-03-12 03:11:44,874 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:44,984 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:44,985 [main:117] - GENERATED CALL = (sideEffects).padEnd(-2093741977, 'ꊓ')
2021-03-12 03:11:44,985 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]]
2021-03-12 03:11:44,985 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]
2021-03-12 03:11:45,095 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:45,213 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:45,214 [main:117] - GENERATED CALL = (sideEffects).replaceAfter('?', "zogcz", justForUsageInParentClosure)
2021-03-12 03:11:45,214 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]]
2021-03-12 03:11:45,214 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]
2021-03-12 03:11:45,214 [main:117] - GENERATED CALL = (sideEffects).trimIndent()
2021-03-12 03:11:45,214 [main:61] - replacement of "fail1: $a1" of type String is (sideEffects).trimEnd()
2021-03-12 03:11:45,321 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:45,321 [main:66] - Compilation checking started
2021-03-12 03:11:45,704 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:11:45,705 [main:53] - replacing (prop, String)
2021-03-12 03:11:45,705 [main:50] - replacing prop String
2021-03-12 03:11:45,705 [main:54] - Getting value of type String
2021-03-12 03:11:45,817 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:45,818 [main:58] - GENERATED VALUE OF TYPE String = "ykfix"
2021-03-12 03:11:45,818 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:46,048 [main:67] - randomType = ULong?
2021-03-12 03:11:46,179 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 03:11:46,209 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4bf741b4]
2021-03-12 03:11:46,210 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:11:46,317 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:46,318 [main:78] - Generated call from random type = (3799564380577324176.toULong())?.toShort().toString(-1522566202)
2021-03-12 03:11:46,319 [main:106] - GETTING String from String
2021-03-12 03:11:46,339 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]]
2021-03-12 03:11:46,339 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]
2021-03-12 03:11:46,339 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceIndent(C("fqowo").grandParentProp)
2021-03-12 03:11:46,339 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]]
2021-03-12 03:11:46,339 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]
2021-03-12 03:11:46,448 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:11:46,566 [main:43] - GENERATING CALL OF fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): Iterable<Int> = TODO()
2021-03-12 03:11:46,567 [main:61] - WITHOUT TYPE PARAMS = fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): Iterable<Int> = TODO()
2021-03-12 03:11:46,910 [main:302] - generating value of type = Char true depth = 3
2021-03-12 03:11:46,911 [main:302] - generating value of type = Char true depth = 3
2021-03-12 03:11:46,912 [main:95] - GENERATED = CharRange('슁', '䮝')
2021-03-12 03:11:46,912 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).slice(CharRange('슁', '䮝'))
2021-03-12 03:11:46,912 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]]
2021-03-12 03:11:46,913 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]
2021-03-12 03:11:47,022 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:11:47,023 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:47,024 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).dropWhile({a: Char -> true})
2021-03-12 03:11:47,024 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]]
2021-03-12 03:11:47,024 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]
2021-03-12 03:11:47,131 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:47,242 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:47,243 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceAfterLast('', C("fqowo").grandParentProp, "wthla")
2021-03-12 03:11:47,243 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@739964f]]
2021-03-12 03:11:47,243 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@739964f]
2021-03-12 03:11:47,351 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:47,461 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:47,570 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:47,571 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceFirst('', '辌', false)
2021-03-12 03:11:47,571 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]]
2021-03-12 03:11:47,571 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]
2021-03-12 03:11:47,682 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:47,686 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).removeSurrounding("thuim")
2021-03-12 03:11:47,687 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]]
2021-03-12 03:11:47,687 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]
2021-03-12 03:11:47,687 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).reversed()
2021-03-12 03:11:47,687 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]]
2021-03-12 03:11:47,687 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]
2021-03-12 03:11:47,794 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:47,931 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:47,932 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).commonSuffixWith("ghdgr", false)
2021-03-12 03:11:47,932 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]]
2021-03-12 03:11:47,932 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]
2021-03-12 03:11:47,932 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).trimStart()
2021-03-12 03:11:47,932 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:47,932 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:48,039 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:48,040 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).length.toString(-1301677874)
2021-03-12 03:11:48,040 [main:61] - replacement of prop of type String is (C("fqowo").grandParentProp).dropWhile({a: Char -> true})
2021-03-12 03:11:48,147 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:48,149 [main:53] - replacing (parentSideEffects, String)
2021-03-12 03:11:48,150 [main:50] - replacing parentSideEffects String
2021-03-12 03:11:48,150 [main:54] - Getting value of type String
2021-03-12 03:11:48,258 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:48,259 [main:58] - GENERATED VALUE OF TYPE String = "unmdd"
2021-03-12 03:11:48,259 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:48,374 [main:67] - randomType = UShort
2021-03-12 03:11:48,479 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 03:11:48,512 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@344a095c]
2021-03-12 03:11:48,512 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:11:48,513 [main:78] - Generated call from random type = (7541.toUShort()).toByte().toString(justForUsageInClosure)
2021-03-12 03:11:48,513 [main:61] - replacement of parentSideEffects of type String is (7541.toUShort()).toByte().toString(justForUsageInClosure)
2021-03-12 03:11:48,619 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:48,619 [main:66] - Compilation checking started
2021-03-12 03:11:48,891 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            (7541.toUShort()).toByte().toString(justForUsageInClosure) += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:11:48,893 [main:53] - replacing (123, Int)
2021-03-12 03:11:48,894 [main:50] - replacing 123 Int
2021-03-12 03:11:48,894 [main:54] - Getting value of type Int
2021-03-12 03:11:49,000 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:49,000 [main:58] - GENERATED VALUE OF TYPE Int = 942827890
2021-03-12 03:11:49,001 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:49,002 [main:67] - randomType = Char
2021-03-12 03:11:49,108 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:49,129 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@65a669c3]
2021-03-12 03:11:49,129 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@41ecef55]
2021-03-12 03:11:49,129 [main:78] - Generated call from random type = ('ꓻ').toShort().unaryMinus()
2021-03-12 03:11:49,130 [main:106] - GETTING Int from String
2021-03-12 03:11:49,150 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1f0db41a]]
2021-03-12 03:11:49,150 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:49,259 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:49,260 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1f0db41a]
2021-03-12 03:11:49,260 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).compareTo("wwwra").coerceIn(justForUsageInClosure, justForUsageInClosure)
2021-03-12 03:11:49,260 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2e7edda3]]
2021-03-12 03:11:49,260 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:49,367 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:49,368 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2e7edda3]
2021-03-12 03:11:49,368 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).compareTo("xpxdb").countOneBits()
2021-03-12 03:11:49,369 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3d55f1]]
2021-03-12 03:11:49,369 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3d55f1]
2021-03-12 03:11:49,477 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:11:49,478 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:49,479 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).indexOfLast({a: Char -> true})
2021-03-12 03:11:49,479 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943680c]]
2021-03-12 03:11:49,479 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943680c]
2021-03-12 03:11:49,479 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).length.unaryPlus()
2021-03-12 03:11:49,479 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67079661]]
2021-03-12 03:11:49,479 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:49,480 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67079661]
2021-03-12 03:11:49,593 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 03:11:49,594 [main:302] - generating value of type = Int true depth = 1
2021-03-12 03:11:49,595 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).subSequence(justForUsageInClosure, justForUsageInClosure).sumOf({a: Char -> 1445954682})
2021-03-12 03:11:49,595 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d6fd95]]
2021-03-12 03:11:49,596 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:49,733 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:49,734 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d6fd95]
2021-03-12 03:11:49,842 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:49,947 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:49,948 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).subSequence(justForUsageInClosure, 422823027).lastIndexOf('䬝', justForUsageInClosure, true)
2021-03-12 03:11:49,949 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7155f488]]
2021-03-12 03:11:49,949 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:50,055 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:50,056 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7155f488]
2021-03-12 03:11:50,056 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).compareTo("ixxox").dec()
2021-03-12 03:11:50,056 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@2a030c0b]]
2021-03-12 03:11:50,056 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:50,163 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:50,164 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).subSequence(justForUsageInClosure, -143957137).lastIndex
2021-03-12 03:11:50,164 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61a456ce]]
2021-03-12 03:11:50,164 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61a456ce]
2021-03-12 03:11:50,164 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).length.rotateRight(justForUsageInClosure)
2021-03-12 03:11:50,164 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@193176e9]]
2021-03-12 03:11:50,164 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@193176e9]
2021-03-12 03:11:50,164 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).length.inc()
2021-03-12 03:11:50,165 [main:61] - replacement of 123 of type Int is (C("fqowo").grandParentProp).indexOfLast({a: Char -> true})
2021-03-12 03:11:50,269 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:50,269 [main:66] - Compilation checking started
2021-03-12 03:11:50,699 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:11:50,703 [main:53] - replacing (x2, Int)
2021-03-12 03:11:50,704 [main:50] - replacing x2 Int
2021-03-12 03:11:50,704 [main:54] - Getting value of type Int
2021-03-12 03:11:50,851 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:50,852 [main:58] - GENERATED VALUE OF TYPE Int = -813350909
2021-03-12 03:11:50,852 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:50,854 [main:67] - randomType = Int
2021-03-12 03:11:50,973 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:51,030 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:11:51,031 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@227e568f]
2021-03-12 03:11:51,031 [main:78] - Generated call from random type = (-587259363).toInt().countTrailingZeroBits()
2021-03-12 03:11:51,032 [main:106] - GETTING Int from String
2021-03-12 03:11:51,056 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]]
2021-03-12 03:11:51,056 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:51,057 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]
2021-03-12 03:11:51,168 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:11:51,169 [main:117] - GENERATED CALL = (parentProp).compareTo(parentProp).div(7)
2021-03-12 03:11:51,169 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@238f4e05]]
2021-03-12 03:11:51,170 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:51,290 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:51,291 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@238f4e05]
2021-03-12 03:11:51,400 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 03:11:51,514 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-12 03:11:51,517 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-12 03:11:51,892 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:11:51,893 [main:302] - generating value of type = Function1<Int, Char> false depth = 3
2021-03-12 03:11:51,894 [main:302] - generating value of type = Char true depth = 4
2021-03-12 03:11:51,895 [main:95] - GENERATED = CharArray(-1387261328, {a: Int -> '奣'})
2021-03-12 03:11:52,010 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:52,011 [main:117] - GENERATED CALL = (parentProp).subSequence(455782265, x1).indexOfAny(CharArray(-1387261328, {a: Int -> '奣'}), justForUsageInClosure, false)
2021-03-12 03:11:52,014 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]]
2021-03-12 03:11:52,014 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]
2021-03-12 03:11:52,128 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:11:52,128 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]
2021-03-12 03:11:52,241 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:52,243 [main:117] - GENERATED CALL = (parentProp).equals("aiydh").compareTo(true)
2021-03-12 03:11:52,243 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]]
2021-03-12 03:11:52,243 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]
2021-03-12 03:11:52,352 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:52,462 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:52,463 [main:117] - GENERATED CALL = (parentProp).compareTo("qipim", false)
2021-03-12 03:11:52,463 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31fe20d0]]
2021-03-12 03:11:52,463 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:52,463 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31fe20d0]
2021-03-12 03:11:52,463 [main:117] - GENERATED CALL = (parentProp).compareTo(parentProp).inv()
2021-03-12 03:11:52,463 [main:113] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@238f4e05]]
2021-03-12 03:11:52,463 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@238f4e05]
2021-03-12 03:11:52,570 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 03:11:52,685 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 03:11:52,686 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 03:11:52,808 [main:302] - generating value of type = Char true depth = 3
2021-03-12 03:11:52,809 [main:95] - GENERATED = charArrayOf('찚')
2021-03-12 03:11:52,919 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:52,921 [main:117] - GENERATED CALL = (parentProp).indexOfAny(charArrayOf('찚'), x1, true)
2021-03-12 03:11:52,921 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31946dd4]]
2021-03-12 03:11:52,921 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:11:52,921 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31946dd4]
2021-03-12 03:11:52,921 [main:117] - GENERATED CALL = (parentProp).compareTo(parentProp).and(justForUsageInClosure)
2021-03-12 03:11:52,921 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@193176e9]]
2021-03-12 03:11:52,921 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@193176e9]
2021-03-12 03:11:52,921 [main:117] - GENERATED CALL = (parentProp).length.inc()
2021-03-12 03:11:52,921 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61a456ce]]
2021-03-12 03:11:52,921 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61a456ce]
2021-03-12 03:11:52,922 [main:117] - GENERATED CALL = (parentProp).length.rotateRight(x2)
2021-03-12 03:11:52,922 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b85727c]]
2021-03-12 03:11:52,922 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b85727c]
2021-03-12 03:11:52,922 [main:117] - GENERATED CALL = (parentProp).length.rotateLeft(x2)
2021-03-12 03:11:52,922 [main:61] - replacement of x2 of type Int is (parentProp).length.rotateLeft(x2)
2021-03-12 03:11:53,032 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:53,033 [main:66] - Compilation checking started
2021-03-12 03:11:53,309 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, (parentProp).length.rotateLeft(x2)) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:11:53,311 [main:53] - replacing (prop, String)
2021-03-12 03:11:53,312 [main:50] - replacing prop String
2021-03-12 03:11:53,312 [main:54] - Getting value of type String
2021-03-12 03:11:53,421 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:53,422 [main:58] - GENERATED VALUE OF TYPE String = "cesyg"
2021-03-12 03:11:53,422 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:53,812 [main:67] - randomType = MutableMap<Array<String>, Function1<C, Int>>
2021-03-12 03:11:53,813 [main:106] - GETTING String from String
2021-03-12 03:11:53,831 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]]
2021-03-12 03:11:53,831 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]
2021-03-12 03:11:53,941 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:11:53,941 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).plus("retxr")
2021-03-12 03:11:53,941 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]]
2021-03-12 03:11:53,941 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]
2021-03-12 03:11:53,942 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).drop(justForUsageInClosure)
2021-03-12 03:11:53,942 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]]
2021-03-12 03:11:53,942 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]
2021-03-12 03:11:54,050 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:54,052 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).padEnd(justForUsageInClosure, '橂')
2021-03-12 03:11:54,052 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]]
2021-03-12 03:11:54,052 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]
2021-03-12 03:11:54,162 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:11:54,275 [main:43] - GENERATING CALL OF fun <T> setOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 03:11:54,277 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 03:11:54,399 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:11:54,400 [main:95] - GENERATED = setOf<Int>(-148415168)
2021-03-12 03:11:54,401 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).slice(setOf<Int>(-148415168))
2021-03-12 03:11:54,401 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]]
2021-03-12 03:11:54,401 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]
2021-03-12 03:11:54,514 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:54,518 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).removeSurrounding("ddjqn")
2021-03-12 03:11:54,519 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]]
2021-03-12 03:11:54,519 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]
2021-03-12 03:11:54,628 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:54,738 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:11:54,740 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:11:54,970 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:11:54,975 [main:95] - GENERATED = StringBuilder("hbigb")
2021-03-12 03:11:55,086 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:11:55,087 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).commonSuffixWith(StringBuilder("hbigb"), true)
2021-03-12 03:11:55,087 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]]
2021-03-12 03:11:55,087 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]
2021-03-12 03:11:55,198 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:11:55,198 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:55,200 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).filter({a: Char -> true})
2021-03-12 03:11:55,200 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:11:55,200 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:11:55,200 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:11:55,200 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
2021-03-12 03:11:55,200 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]]
2021-03-12 03:11:55,200 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]
2021-03-12 03:11:55,310 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:11:55,311 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:11:55,312 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).filterIndexed({a: Int, b: Char -> true})
2021-03-12 03:11:55,312 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]]
2021-03-12 03:11:55,312 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]
2021-03-12 03:11:55,449 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:55,557 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:11:55,561 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceRange(justForUsageInClosure, -1921470486, "eltgo")
2021-03-12 03:11:55,561 [main:61] - replacement of prop of type String is (C("fqowo").grandParentProp).drop(justForUsageInClosure)
2021-03-12 03:11:55,673 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:55,673 [main:66] - Compilation checking started
2021-03-12 03:11:56,077 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:11:56,079 [main:53] - replacing (sideEffects, String)
2021-03-12 03:11:56,080 [main:50] - replacing sideEffects String
2021-03-12 03:11:56,080 [main:54] - Getting value of type String
2021-03-12 03:11:56,196 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:56,197 [main:58] - GENERATED VALUE OF TYPE String = "zkdxl"
2021-03-12 03:11:56,197 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:56,318 [main:67] - randomType = Short
2021-03-12 03:11:56,430 [main:302] - generating value of type = Short true depth = 0
2021-03-12 03:11:56,462 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:11:56,463 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:56,463 [main:78] - Generated call from random type = (-17154).toInt().toString(justForUsageInClosure)
2021-03-12 03:11:56,463 [main:106] - GETTING String from String
2021-03-12 03:11:56,479 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]]
2021-03-12 03:11:56,479 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]
2021-03-12 03:11:56,479 [main:117] - GENERATED CALL = (justForUsageInParentClosure).trimStart()
2021-03-12 03:11:56,479 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]]
2021-03-12 03:11:56,479 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]
2021-03-12 03:11:56,589 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:56,590 [main:117] - GENERATED CALL = (justForUsageInParentClosure).prependIndent("jqebb")
2021-03-12 03:11:56,590 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]]
2021-03-12 03:11:56,590 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]
2021-03-12 03:11:56,590 [main:117] - GENERATED CALL = (justForUsageInParentClosure).trimIndent()
2021-03-12 03:11:56,590 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45c0d5dc]]
2021-03-12 03:11:56,590 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45c0d5dc]
2021-03-12 03:11:56,590 [main:117] - GENERATED CALL = (justForUsageInParentClosure).substring(justForUsageInClosure)
2021-03-12 03:11:56,590 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a5950b]]
2021-03-12 03:11:56,590 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:11:56,702 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:56,703 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a5950b]
2021-03-12 03:11:56,813 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:11:56,927 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:11:56,929 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:11:57,279 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:11:57,280 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 03:11:57,281 [main:95] - GENERATED = Regex("nqsph", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 03:11:57,420 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:57,421 [main:117] - GENERATED CALL = (justForUsageInParentClosure).subSequence(-1945087515, justForUsageInClosure).replaceFirst(Regex("nqsph", kotlin.text.RegexOption.IGNORE_CASE), "nbvsa")
2021-03-12 03:11:57,421 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]]
2021-03-12 03:11:57,421 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]
2021-03-12 03:11:57,421 [main:117] - GENERATED CALL = (justForUsageInParentClosure).takeLast(justForUsageInClosure)
2021-03-12 03:11:57,422 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:57,422 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:57,422 [main:117] - GENERATED CALL = (justForUsageInParentClosure).length.toString(justForUsageInClosure)
2021-03-12 03:11:57,422 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]]
2021-03-12 03:11:57,422 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]
2021-03-12 03:11:57,422 [main:117] - GENERATED CALL = (justForUsageInParentClosure).toLowerCase()
2021-03-12 03:11:57,422 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e03b28]]
2021-03-12 03:11:57,422 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e03b28]
2021-03-12 03:11:57,422 [main:117] - GENERATED CALL = (justForUsageInParentClosure).uppercase()
2021-03-12 03:11:57,422 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]]
2021-03-12 03:11:57,422 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]
2021-03-12 03:11:57,531 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:11:57,643 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:57,644 [main:117] - GENERATED CALL = (justForUsageInParentClosure).replaceAfter('吝', C("fqowo").grandParentProp, "ihvid")
2021-03-12 03:11:57,644 [main:61] - replacement of sideEffects of type String is (justForUsageInParentClosure).trimIndent()
2021-03-12 03:11:57,758 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:57,758 [main:66] - Compilation checking started
2021-03-12 03:11:58,072 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    (justForUsageInParentClosure).trimIndent() = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:11:58,075 [main:53] - replacing (sideEffects, String)
2021-03-12 03:11:58,075 [main:50] - replacing sideEffects String
2021-03-12 03:11:58,075 [main:54] - Getting value of type String
2021-03-12 03:11:58,191 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:58,192 [main:58] - GENERATED VALUE OF TYPE String = "aekcf"
2021-03-12 03:11:58,192 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:58,195 [main:67] - randomType = C
2021-03-12 03:11:58,309 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:11:58,310 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:11:58,425 [main:194] - Type params = []
2021-03-12 03:11:58,542 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:11:58,550 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@80e1a7b]
2021-03-12 03:11:58,550 [main:78] - Generated call from random type = (C("tyhev")).grandParentProp.take(justForUsageInClosure)
2021-03-12 03:11:58,551 [main:106] - GETTING String from Int
2021-03-12 03:11:58,599 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:58,599 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:11:58,599 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:58,599 [main:117] - GENERATED CALL = (justForUsageInClosure).toInt().toString(justForUsageInClosure)
2021-03-12 03:11:58,600 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:11:58,600 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:58,600 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:11:58,600 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().titlecase()
2021-03-12 03:11:58,600 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:11:58,600 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:11:58,600 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:11:58,600 [main:117] - GENERATED CALL = (justForUsageInClosure).toShort().toString(justForUsageInClosure)
2021-03-12 03:11:58,600 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:11:58,600 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:58,600 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:11:58,601 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().lowercase()
2021-03-12 03:11:58,601 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:11:58,601 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:11:58,601 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:11:58,714 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:58,715 [main:117] - GENERATED CALL = (justForUsageInClosure).toLong().toString(944813053)
2021-03-12 03:11:58,715 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:11:58,715 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:11:58,715 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:11:58,716 [main:117] - GENERATED CALL = (justForUsageInClosure).toByte().toString(justForUsageInClosure)
2021-03-12 03:11:58,716 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:58,716 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:11:58,828 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:58,829 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:58,945 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:11:58,947 [main:117] - GENERATED CALL = (justForUsageInClosure).compareTo(-307268698).toString(91443979)
2021-03-12 03:11:58,948 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:11:58,948 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:11:58,948 [main:117] - GENERATED CALL = (justForUsageInClosure).toString(justForUsageInClosure)
2021-03-12 03:11:58,948 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:11:58,948 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:11:58,948 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:11:58,948 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().uppercase()
2021-03-12 03:11:58,948 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:11:58,949 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:11:59,067 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:11:59,068 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:11:59,068 [main:117] - GENERATED CALL = (justForUsageInClosure).div(-4251792146862352264).toString(justForUsageInClosure)
2021-03-12 03:11:59,068 [main:61] - replacement of sideEffects of type String is (justForUsageInClosure).toLong().toString(944813053)
2021-03-12 03:11:59,181 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:11:59,181 [main:66] - Compilation checking started
2021-03-12 03:11:59,596 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:11:59,599 [main:53] - replacing ("7#int#14#parentCaptured", String)
2021-03-12 03:11:59,599 [main:50] - replacing "7#int#14#parentCaptured" String
2021-03-12 03:11:59,599 [main:54] - Getting value of type String
2021-03-12 03:11:59,725 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:11:59,726 [main:58] - GENERATED VALUE OF TYPE String = "lpafp"
2021-03-12 03:11:59,726 [main:61] - GENERATED IS CALL =false
2021-03-12 03:11:59,852 [main:67] - randomType = UInt
2021-03-12 03:11:59,964 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 03:11:59,993 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@89336af]
2021-03-12 03:11:59,993 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b1aba]
2021-03-12 03:11:59,993 [main:78] - Generated call from random type = (697768935.toUInt()).toUShort().toString(justForUsageInClosure)
2021-03-12 03:11:59,993 [main:106] - GETTING String from String
2021-03-12 03:12:00,011 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]]
2021-03-12 03:12:00,012 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]
2021-03-12 03:12:00,121 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:00,122 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:00,123 [main:117] - GENERATED CALL = (justForUsageInParentClosure).dropLastWhile({a: Char -> false})
2021-03-12 03:12:00,124 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]]
2021-03-12 03:12:00,124 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]
2021-03-12 03:12:00,237 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:00,238 [main:117] - GENERATED CALL = (justForUsageInParentClosure).concat("xluqf")
2021-03-12 03:12:00,238 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]]
2021-03-12 03:12:00,238 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]
2021-03-12 03:12:00,355 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:00,468 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:00,469 [main:117] - GENERATED CALL = (justForUsageInParentClosure).padStart(-1223987188, '')
2021-03-12 03:12:00,469 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]]
2021-03-12 03:12:00,469 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]
2021-03-12 03:12:00,580 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:12:00,581 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:12:00,582 [main:117] - GENERATED CALL = (justForUsageInParentClosure).replaceFirstChar({a: Char -> '⃀'})
2021-03-12 03:12:00,582 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]]
2021-03-12 03:12:00,582 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]
2021-03-12 03:12:00,692 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:00,693 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:00,694 [main:117] - GENERATED CALL = (justForUsageInParentClosure).dropWhile({a: Char -> false})
2021-03-12 03:12:00,694 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]]
2021-03-12 03:12:00,694 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]
2021-03-12 03:12:00,694 [main:117] - GENERATED CALL = (justForUsageInParentClosure).takeLast(justForUsageInClosure)
2021-03-12 03:12:00,694 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e03b28]]
2021-03-12 03:12:00,694 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e03b28]
2021-03-12 03:12:00,694 [main:117] - GENERATED CALL = (justForUsageInParentClosure).uppercase()
2021-03-12 03:12:00,694 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]]
2021-03-12 03:12:00,695 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]
2021-03-12 03:12:00,695 [main:117] - GENERATED CALL = (justForUsageInParentClosure).prependIndent(sideEffects)
2021-03-12 03:12:00,695 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:12:00,695 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:12:00,805 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:00,809 [main:117] - GENERATED CALL = (justForUsageInParentClosure).removePrefix("oljrn")
2021-03-12 03:12:00,810 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]]
2021-03-12 03:12:00,810 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]
2021-03-12 03:12:00,923 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:00,925 [main:117] - GENERATED CALL = (justForUsageInParentClosure).substringBefore('ⶥ', null.toString())
2021-03-12 03:12:00,925 [main:61] - replacement of "7#int#14#parentCaptured" of type String is (justForUsageInParentClosure).replaceFirstChar({a: Char -> '⃀'})
2021-03-12 03:12:01,036 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:01,036 [main:66] - Compilation checking started
2021-03-12 03:12:01,548 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != (justForUsageInParentClosure).replaceFirstChar({a: Char -> '⃀'})) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:12:01,549 [main:53] - replacing (x, Int)
2021-03-12 03:12:01,549 [main:50] - replacing x Int
2021-03-12 03:12:01,549 [main:54] - Getting value of type Int
2021-03-12 03:12:01,704 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:01,706 [main:58] - GENERATED VALUE OF TYPE Int = -695924513
2021-03-12 03:12:01,706 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:02,107 [main:67] - randomType = ArrayList<LinkedHashSet<UInt>>
2021-03-12 03:12:02,223 [main:302] - generating value of type = ArrayList<LinkedHashSet<UInt>> false depth = 0
2021-03-12 03:12:02,347 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: LinkedHashSet<UInt>): ArrayList<LkedHashSet<UInt>> = TODO()
2021-03-12 03:12:02,349 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: LinkedHashSet<UInt>): ArrayList<LkedHashSet<UInt>> = TODO()
2021-03-12 03:12:02,477 [main:302] - generating value of type = LinkedHashSet<UInt> false depth = 3
2021-03-12 03:12:02,611 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<UInt> = TODO()
2021-03-12 03:12:02,612 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<UInt> = TODO()
2021-03-12 03:12:02,729 [main:95] - GENERATED = linkedSetOf<UInt>()
2021-03-12 03:12:02,729 [main:95] - GENERATED = arrayListOf<LinkedHashSet<UInt>>(linkedSetOf<UInt>())
2021-03-12 03:12:02,897 [main:78] - Generated call from random type = (arrayListOf<LinkedHashSet<UInt>>(linkedSetOf<UInt>())).modCount
2021-03-12 03:12:02,898 [main:106] - GETTING Int from String
2021-03-12 03:12:02,914 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@67ebce31]]
2021-03-12 03:12:02,915 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@67ebce31]
2021-03-12 03:12:03,029 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:03,030 [main:117] - GENERATED CALL = (null.toString()).length.coerceAtMost(1719159323)
2021-03-12 03:12:03,030 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@5b5f4a37]]
2021-03-12 03:12:03,030 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:12:03,147 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:03,148 [main:117] - GENERATED CALL = (null.toString()).get(-1623942580).code
2021-03-12 03:12:03,148 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47c33908]]
2021-03-12 03:12:03,148 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:03,267 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:03,268 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47c33908]
2021-03-12 03:12:03,382 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:12:03,383 [main:117] - GENERATED CALL = (null.toString()).compareTo("qbzmz").minus(-64)
2021-03-12 03:12:03,383 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@193176e9]]
2021-03-12 03:12:03,383 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:03,524 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:03,525 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@193176e9]
2021-03-12 03:12:03,526 [main:117] - GENERATED CALL = (null.toString()).compareTo("itcfo").inc()
2021-03-12 03:12:03,526 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ddf7857]]
2021-03-12 03:12:03,526 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:03,526 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ddf7857]
2021-03-12 03:12:03,526 [main:117] - GENERATED CALL = (null.toString()).compareTo(C("fqowo").grandParentProp).countLeadingZeroBits()
2021-03-12 03:12:03,526 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1f0db41a]]
2021-03-12 03:12:03,526 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:03,641 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:03,642 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1f0db41a]
2021-03-12 03:12:03,755 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:03,868 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:03,870 [main:117] - GENERATED CALL = (null.toString()).compareTo("dcmki").coerceIn(422381289, 823997148)
2021-03-12 03:12:03,870 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@308ea334]]
2021-03-12 03:12:03,870 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:03,870 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@308ea334]
2021-03-12 03:12:03,983 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:12:03,984 [main:117] - GENERATED CALL = (null.toString()).compareTo(C("fqowo").grandParentProp).compareTo(64)
2021-03-12 03:12:03,984 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12032e95]]
2021-03-12 03:12:03,984 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12032e95]
2021-03-12 03:12:04,095 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:04,096 [main:117] - GENERATED CALL = (null.toString()).length.xor(1508632458)
2021-03-12 03:12:04,096 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7cead524]]
2021-03-12 03:12:04,096 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:04,096 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7cead524]
2021-03-12 03:12:04,096 [main:117] - GENERATED CALL = (null.toString()).compareTo(null.toString()).takeLowestOneBit()
2021-03-12 03:12:04,097 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d302fac]]
2021-03-12 03:12:04,097 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:04,097 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d302fac]
2021-03-12 03:12:04,210 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:12:04,211 [main:117] - GENERATED CALL = (null.toString()).compareTo(null.toString()).times(-57)
2021-03-12 03:12:04,211 [main:61] - replacement of x of type Int is (null.toString()).compareTo("qbzmz").minus(-64)
2021-03-12 03:12:04,324 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:04,326 [main:53] - replacing ((arg1 + arg2).toString(), String)
2021-03-12 03:12:04,327 [main:50] - replacing (arg1 + arg2).toString() String
2021-03-12 03:12:04,327 [main:54] - Getting value of type String
2021-03-12 03:12:04,437 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:04,438 [main:58] - GENERATED VALUE OF TYPE String = "qljcj"
2021-03-12 03:12:04,438 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:04,441 [main:67] - randomType = C
2021-03-12 03:12:04,553 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:12:04,554 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:12:04,668 [main:194] - Type params = []
2021-03-12 03:12:04,786 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:12:04,793 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]
2021-03-12 03:12:04,907 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:05,024 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:05,028 [main:78] - Generated call from random type = (C("ledgt")).grandParentProp.replaceRange(-2071273311, arg2, "fpeut")
2021-03-12 03:12:05,028 [main:106] - GETTING String from String
2021-03-12 03:12:05,048 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]]
2021-03-12 03:12:05,048 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]
2021-03-12 03:12:05,164 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:05,165 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).removeRange(-561770878, arg1)
2021-03-12 03:12:05,165 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]]
2021-03-12 03:12:05,165 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]
2021-03-12 03:12:05,282 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:05,283 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).trimMargin("plsbr")
2021-03-12 03:12:05,283 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]]
2021-03-12 03:12:05,284 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]
2021-03-12 03:12:05,284 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).trimEnd()
2021-03-12 03:12:05,284 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]]
2021-03-12 03:12:05,284 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]
2021-03-12 03:12:05,438 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:05,439 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceBeforeLast('㺹', null.toString(), justForUsageInParentClosure)
2021-03-12 03:12:05,439 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]]
2021-03-12 03:12:05,439 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]
2021-03-12 03:12:05,554 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:05,670 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:05,672 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceBefore('宛', "upbxf", parentProp)
2021-03-12 03:12:05,672 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:12:05,672 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:12:05,672 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:12:05,672 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).get(arg2).lowercase()
2021-03-12 03:12:05,672 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]]
2021-03-12 03:12:05,672 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]
2021-03-12 03:12:05,786 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:12:05,786 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).plus("eenmn")
2021-03-12 03:12:05,787 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]]
2021-03-12 03:12:05,787 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]
2021-03-12 03:12:05,787 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).trimStart()
2021-03-12 03:12:05,787 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]]
2021-03-12 03:12:05,787 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]
2021-03-12 03:12:05,903 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:05,905 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceAfter('ᦙ', sideEffects, justForUsageInParentClosure)
2021-03-12 03:12:05,905 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]]
2021-03-12 03:12:05,905 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]
2021-03-12 03:12:05,905 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).toUpperCase()
2021-03-12 03:12:05,905 [main:61] - replacement of (arg1 + arg2).toString() of type String is (C("fqowo").grandParentProp).trimMargin("plsbr")
2021-03-12 03:12:06,016 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:06,016 [main:66] - Compilation checking started
2021-03-12 03:12:06,429 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != (justForUsageInParentClosure).replaceFirstChar({a: Char -> '⃀'})) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:12:06,431 [main:53] - replacing ("${x}#int", String)
2021-03-12 03:12:06,432 [main:50] - replacing "${x}#int" String
2021-03-12 03:12:06,432 [main:54] - Getting value of type String
2021-03-12 03:12:06,558 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:06,559 [main:58] - GENERATED VALUE OF TYPE String = "fxbug"
2021-03-12 03:12:06,559 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:06,562 [main:67] - randomType = C
2021-03-12 03:12:06,684 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:12:06,685 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:12:06,807 [main:194] - Type params = []
2021-03-12 03:12:06,923 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:12:06,930 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]
2021-03-12 03:12:07,044 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:07,046 [main:78] - Generated call from random type = (C("ktaof")).grandParentProp.replaceAfter('?', parentProp, null.toString())
2021-03-12 03:12:07,046 [main:106] - GETTING String from String
2021-03-12 03:12:07,068 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]]
2021-03-12 03:12:07,068 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]
2021-03-12 03:12:07,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:07,296 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:07,410 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:07,414 [main:117] - GENERATED CALL = (null.toString()).replaceRange(184854825, -970081977, "pflqn")
2021-03-12 03:12:07,414 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]]
2021-03-12 03:12:07,414 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]
2021-03-12 03:12:07,414 [main:117] - GENERATED CALL = (null.toString()).drop(justForUsageInClosure)
2021-03-12 03:12:07,414 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]]
2021-03-12 03:12:07,415 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]
2021-03-12 03:12:07,526 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:07,527 [main:117] - GENERATED CALL = (null.toString()).repeat(-993021174)
2021-03-12 03:12:07,531 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]]
2021-03-12 03:12:07,531 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]
2021-03-12 03:12:07,668 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:12:07,668 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:12:07,670 [main:117] - GENERATED CALL = (null.toString()).replaceFirstChar({a: Char -> '圢'})
2021-03-12 03:12:07,670 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]]
2021-03-12 03:12:07,670 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:12:07,785 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:07,786 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]
2021-03-12 03:12:07,786 [main:117] - GENERATED CALL = (null.toString()).subSequence(-442801941, x).repeat(x)
2021-03-12 03:12:07,786 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]]
2021-03-12 03:12:07,786 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]
2021-03-12 03:12:07,786 [main:117] - GENERATED CALL = (null.toString()).replaceIndent(sideEffects)
2021-03-12 03:12:07,786 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:07,786 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:07,787 [main:117] - GENERATED CALL = (null.toString()).length.toString(justForUsageInClosure)
2021-03-12 03:12:07,787 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]]
2021-03-12 03:12:07,787 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]
2021-03-12 03:12:07,787 [main:117] - GENERATED CALL = (null.toString()).trimIndent()
2021-03-12 03:12:07,787 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:12:07,787 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:12:07,787 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:12:07,787 [main:117] - GENERATED CALL = (null.toString()).get(x).plus(parentSideEffects)
2021-03-12 03:12:07,787 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]]
2021-03-12 03:12:07,787 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]
2021-03-12 03:12:07,788 [main:117] - GENERATED CALL = (null.toString()).reversed()
2021-03-12 03:12:07,788 [main:61] - replacement of "${x}#int" of type String is (null.toString()).reversed()
2021-03-12 03:12:07,904 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:07,905 [main:66] - Compilation checking started
2021-03-12 03:12:08,335 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != (justForUsageInParentClosure).replaceFirstChar({a: Char -> '⃀'})) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:12:08,339 [main:53] - replacing (a3 != (justForUsageInParentClosure).replaceFirstChar({a: Char -> '⃀'}), Boolean)
2021-03-12 03:12:08,340 [main:50] - replacing a3 != (justForUsageInParentClosure).replaceFirstChar({a: Char -> '⃀'}) Boolean
2021-03-12 03:12:08,340 [main:54] - Getting value of type Boolean
2021-03-12 03:12:08,464 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:08,465 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 03:12:08,465 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:08,590 [main:67] - randomType = C?
2021-03-12 03:12:08,708 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:12:08,709 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:12:08,827 [main:194] - Type params = []
2021-03-12 03:12:08,943 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:12:08,950 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@355e303]
2021-03-12 03:12:08,951 [main:78] - Generated call from random type = (C("kpwas"))?.grandParentProp.toBoolean()
2021-03-12 03:12:08,952 [main:106] - GETTING Boolean from String
2021-03-12 03:12:08,978 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@723ed9dd]]
2021-03-12 03:12:08,978 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:12:08,978 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@723ed9dd]
2021-03-12 03:12:08,978 [main:117] - GENERATED CALL = (parentSideEffects).get(justForUsageInClosure).isUpperCase()
2021-03-12 03:12:08,979 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23ba3826]]
2021-03-12 03:12:08,979 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23ba3826]
2021-03-12 03:12:08,979 [main:117] - GENERATED CALL = (parentSideEffects).isNotEmpty()
2021-03-12 03:12:08,979 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26c80cf1]]
2021-03-12 03:12:08,979 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:12:09,099 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:09,100 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26c80cf1]
2021-03-12 03:12:09,100 [main:117] - GENERATED CALL = (parentSideEffects).get(1031510846).isLowSurrogate()
2021-03-12 03:12:09,100 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@549a1bdb]]
2021-03-12 03:12:09,100 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@549a1bdb]
2021-03-12 03:12:09,213 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:09,214 [main:117] - GENERATED CALL = (parentSideEffects).startsWith(parentProp, false)
2021-03-12 03:12:09,214 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45dcf9e0]]
2021-03-12 03:12:09,214 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45dcf9e0]
2021-03-12 03:12:09,214 [main:117] - GENERATED CALL = (parentSideEffects).isEmpty()
2021-03-12 03:12:09,214 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7e2acf]]
2021-03-12 03:12:09,214 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:12:09,329 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:09,330 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7e2acf]
2021-03-12 03:12:09,449 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:09,571 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:12:09,573 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:12:09,854 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:12:09,855 [main:95] - GENERATED = StringBuilder(-1845962920)
2021-03-12 03:12:09,970 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:10,086 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:10,201 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:10,202 [main:117] - GENERATED CALL = (parentSideEffects).subSequence(justForUsageInClosure, 1031117667).regionMatches(justForUsageInClosure, StringBuilder(-1845962920), 2041138718, -1408481928, false)
2021-03-12 03:12:10,202 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c5d3392]]
2021-03-12 03:12:10,202 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:12:10,202 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c5d3392]
2021-03-12 03:12:10,202 [main:117] - GENERATED CALL = (parentSideEffects).get(justForUsageInClosure).isTitleCase()
2021-03-12 03:12:10,202 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbc86d9]]
2021-03-12 03:12:10,202 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbc86d9]
2021-03-12 03:12:10,315 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:10,316 [main:117] - GENERATED CALL = (parentSideEffects).endsWith(parentSideEffects, true)
2021-03-12 03:12:10,316 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]]
2021-03-12 03:12:10,316 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]
2021-03-12 03:12:10,427 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:12:10,427 [main:117] - GENERATED CALL = (parentSideEffects).equals("sicwm")
2021-03-12 03:12:10,427 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@355e303]]
2021-03-12 03:12:10,427 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@355e303]
2021-03-12 03:12:10,427 [main:117] - GENERATED CALL = (parentSideEffects).toBoolean()
2021-03-12 03:12:10,428 [main:61] - replacement of a3 != (justForUsageInParentClosure).replaceFirstChar({a: Char -> '⃀'}) of type Boolean is (parentSideEffects).isEmpty()
2021-03-12 03:12:10,541 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:10,541 [main:66] - Compilation checking started
2021-03-12 03:12:10,935 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:12:10,938 [main:53] - replacing (justForUsageInClosure, Int)
2021-03-12 03:12:10,939 [main:50] - replacing justForUsageInClosure Int
2021-03-12 03:12:10,939 [main:54] - Getting value of type Int
2021-03-12 03:12:11,056 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:11,057 [main:58] - GENERATED VALUE OF TYPE Int = 1377324985
2021-03-12 03:12:11,057 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:11,060 [main:67] - randomType = C
2021-03-12 03:12:11,172 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:12:11,173 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:12:11,287 [main:194] - Type params = []
2021-03-12 03:12:11,400 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:12:11,405 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]
2021-03-12 03:12:11,523 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:11,639 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:11,640 [main:78] - Generated call from random type = (C("gtlnn")).grandParentProp.compareTo("lkdsn", true)
2021-03-12 03:12:11,640 [main:106] - GETTING Int from Int
2021-03-12 03:12:11,683 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@5b5f4a37]]
2021-03-12 03:12:11,683 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:11,683 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().code
2021-03-12 03:12:11,683 [main:113] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31946dd4]]
2021-03-12 03:12:11,683 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31946dd4]
2021-03-12 03:12:11,684 [main:117] - GENERATED CALL = (justForUsageInClosure).and(justForUsageInClosure)
2021-03-12 03:12:11,684 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@579a39f3]]
2021-03-12 03:12:11,684 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:12:11,797 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:12:11,798 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@579a39f3]
2021-03-12 03:12:11,798 [main:117] - GENERATED CALL = (justForUsageInClosure).div(-8619677929139747462).countLeadingZeroBits()
2021-03-12 03:12:11,798 [main:113] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e246b2]]
2021-03-12 03:12:11,798 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e246b2]
2021-03-12 03:12:11,941 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:12:11,942 [main:117] - GENERATED CALL = (justForUsageInClosure).plus(-98)
2021-03-12 03:12:11,942 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]]
2021-03-12 03:12:11,942 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]
2021-03-12 03:12:12,057 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:12:12,058 [main:117] - GENERATED CALL = (justForUsageInClosure).rem(127)
2021-03-12 03:12:12,058 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4c55a5a9]]
2021-03-12 03:12:12,058 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:12:12,058 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4c55a5a9]
2021-03-12 03:12:12,173 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:12:12,174 [main:117] - GENERATED CALL = (justForUsageInClosure).toShort().div(106)
2021-03-12 03:12:12,174 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@319363e]]
2021-03-12 03:12:12,174 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:12:12,174 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@319363e]
2021-03-12 03:12:12,288 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:12:12,289 [main:117] - GENERATED CALL = (justForUsageInClosure).toByte().div(117)
2021-03-12 03:12:12,289 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@14ac020b]]
2021-03-12 03:12:12,289 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:12:12,290 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@14ac020b]
2021-03-12 03:12:12,401 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:12:12,402 [main:117] - GENERATED CALL = (justForUsageInClosure).toShort().compareTo(-92)
2021-03-12 03:12:12,403 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6d3cd502]]
2021-03-12 03:12:12,403 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:12:12,403 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6d3cd502]
2021-03-12 03:12:12,403 [main:117] - GENERATED CALL = (justForUsageInClosure).toByte().toInt()
2021-03-12 03:12:12,403 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a7909db]]
2021-03-12 03:12:12,403 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:12:12,517 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:12,518 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a7909db]
2021-03-12 03:12:12,518 [main:117] - GENERATED CALL = (justForUsageInClosure).compareTo(1311432167).unaryMinus()
2021-03-12 03:12:12,519 [main:61] - replacement of justForUsageInClosure of type Int is (justForUsageInClosure).toChar().code
2021-03-12 03:12:12,633 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:12,634 [main:66] - Compilation checking started
2021-03-12 03:12:13,043 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return "OK"
}


2021-03-12 03:12:13,045 [main:53] - replacing ("OK", String)
2021-03-12 03:12:13,046 [main:50] - replacing "OK" String
2021-03-12 03:12:13,046 [main:54] - Getting value of type String
2021-03-12 03:12:13,177 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:13,178 [main:58] - GENERATED VALUE OF TYPE String = "abvyn"
2021-03-12 03:12:13,178 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:13,301 [main:67] - randomType = UInt
2021-03-12 03:12:13,419 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 03:12:13,454 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@59a29423]
2021-03-12 03:12:13,454 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:12:13,454 [main:78] - Generated call from random type = (750928393.toUInt()).toShort().toString(justForUsageInClosure)
2021-03-12 03:12:13,454 [main:106] - GETTING String from String
2021-03-12 03:12:13,478 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7c9ff9]]
2021-03-12 03:12:13,478 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7c9ff9]
2021-03-12 03:12:13,593 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:13,713 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:12:13,715 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:12:13,955 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:12:13,956 [main:95] - GENERATED = StringBuilder(-431756102)
2021-03-12 03:12:13,956 [main:117] - GENERATED CALL = (null.toString()).removeSuffix(StringBuilder(-431756102))
2021-03-12 03:12:13,956 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]]
2021-03-12 03:12:13,956 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]
2021-03-12 03:12:14,095 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:14,212 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:14,213 [main:117] - GENERATED CALL = (null.toString()).commonSuffixWith("kvips", false)
2021-03-12 03:12:14,214 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]]
2021-03-12 03:12:14,214 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]
2021-03-12 03:12:14,329 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:14,445 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:14,447 [main:117] - GENERATED CALL = (null.toString()).substringBefore('?', "zrklf")
2021-03-12 03:12:14,447 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:12:14,447 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:12:14,563 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:14,564 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:12:14,676 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:14,677 [main:117] - GENERATED CALL = (null.toString()).get(-688516120).plus("eibto")
2021-03-12 03:12:14,677 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]]
2021-03-12 03:12:14,677 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:12:14,793 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:14,794 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]
2021-03-12 03:12:14,907 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:15,025 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:12:15,027 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:12:15,266 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:12:15,267 [main:95] - GENERATED = StringBuilder("obizz")
2021-03-12 03:12:15,383 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:15,384 [main:117] - GENERATED CALL = (null.toString()).subSequence(justForUsageInClosure, 1137727294).commonPrefixWith(StringBuilder("obizz"), true)
2021-03-12 03:12:15,385 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:12:15,385 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:12:15,385 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:12:15,385 [main:117] - GENERATED CALL = (null.toString()).get(justForUsageInClosure).uppercase()
2021-03-12 03:12:15,385 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]]
2021-03-12 03:12:15,385 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:12:15,501 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:15,502 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]
2021-03-12 03:12:15,617 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:15,618 [main:117] - GENERATED CALL = (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
2021-03-12 03:12:15,618 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45c0d5dc]]
2021-03-12 03:12:15,618 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45c0d5dc]
2021-03-12 03:12:15,619 [main:117] - GENERATED CALL = (null.toString()).substring(justForUsageInClosure)
2021-03-12 03:12:15,619 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]]
2021-03-12 03:12:15,619 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]
2021-03-12 03:12:15,737 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:15,738 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:15,739 [main:117] - GENERATED CALL = (null.toString()).dropWhile({a: Char -> true})
2021-03-12 03:12:15,739 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]]
2021-03-12 03:12:15,739 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]
2021-03-12 03:12:15,855 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:15,856 [main:117] - GENERATED CALL = (null.toString()).substringAfterLast('촸', a3)
2021-03-12 03:12:15,856 [main:61] - replacement of "OK" of type String is (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
2021-03-12 03:12:15,971 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:15,972 [main:66] - Compilation checking started
2021-03-12 03:12:16,439 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:16,441 [main:53] - replacing (arg, Int)
2021-03-12 03:12:16,442 [main:50] - replacing arg Int
2021-03-12 03:12:16,442 [main:54] - Getting value of type Int
2021-03-12 03:12:16,558 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:16,559 [main:58] - GENERATED VALUE OF TYPE Int = -70109638
2021-03-12 03:12:16,559 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:16,933 [main:67] - randomType = MutableMap<Double, C?>
2021-03-12 03:12:16,934 [main:106] - GETTING Int from String
2021-03-12 03:12:16,952 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31946dd4]]
2021-03-12 03:12:16,952 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31946dd4]
2021-03-12 03:12:16,953 [main:117] - GENERATED CALL = (null.toString()).length.and(justForUsageInClosure)
2021-03-12 03:12:16,953 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61a456ce]]
2021-03-12 03:12:16,953 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61a456ce]
2021-03-12 03:12:17,067 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:17,069 [main:117] - GENERATED CALL = (null.toString()).length.rotateRight(-253608338)
2021-03-12 03:12:17,069 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3d55f1]]
2021-03-12 03:12:17,069 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3d55f1]
2021-03-12 03:12:17,184 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:17,185 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:17,186 [main:117] - GENERATED CALL = (null.toString()).indexOfLast({a: Char -> false})
2021-03-12 03:12:17,186 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d5ea941]]
2021-03-12 03:12:17,186 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:17,186 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d5ea941]
2021-03-12 03:12:17,187 [main:117] - GENERATED CALL = (null.toString()).compareTo(parentSideEffects).shr(arg)
2021-03-12 03:12:17,187 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2e7edda3]]
2021-03-12 03:12:17,187 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2e7edda3]
2021-03-12 03:12:17,187 [main:117] - GENERATED CALL = (null.toString()).length.countOneBits()
2021-03-12 03:12:17,187 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7cead524]]
2021-03-12 03:12:17,187 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:17,300 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:17,301 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7cead524]
2021-03-12 03:12:17,301 [main:117] - GENERATED CALL = (null.toString()).compareTo("rhpsw").takeLowestOneBit()
2021-03-12 03:12:17,301 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]]
2021-03-12 03:12:17,301 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:17,414 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:17,415 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]
2021-03-12 03:12:17,528 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:12:17,529 [main:117] - GENERATED CALL = (null.toString()).compareTo("srmkl").rem(-79)
2021-03-12 03:12:17,529 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]]
2021-03-12 03:12:17,529 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]
2021-03-12 03:12:17,643 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:17,644 [main:117] - GENERATED CALL = (null.toString()).compareTo(justForUsageInParentClosure, true)
2021-03-12 03:12:17,644 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d6fd95]]
2021-03-12 03:12:17,644 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:12:17,758 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:17,760 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d6fd95]
2021-03-12 03:12:17,875 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:17,991 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:17,992 [main:117] - GENERATED CALL = (null.toString()).subSequence(justForUsageInClosure, -27499770).lastIndexOf('싈', arg, false)
2021-03-12 03:12:17,993 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ddf7857]]
2021-03-12 03:12:17,993 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:17,993 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ddf7857]
2021-03-12 03:12:17,993 [main:117] - GENERATED CALL = (null.toString()).compareTo(null.toString()).countLeadingZeroBits()
2021-03-12 03:12:17,993 [main:61] - replacement of arg of type Int is (null.toString()).length.countOneBits()
2021-03-12 03:12:18,106 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:18,106 [main:66] - Compilation checking started
2021-03-12 03:12:18,552 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:18,553 [main:53] - replacing ("", String)
2021-03-12 03:12:18,553 [main:50] - replacing "" String
2021-03-12 03:12:18,553 [main:54] - Getting value of type String
2021-03-12 03:12:18,671 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:18,672 [main:58] - GENERATED VALUE OF TYPE String = "nykve"
2021-03-12 03:12:18,672 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:18,796 [main:67] - randomType = UInt
2021-03-12 03:12:18,913 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 03:12:18,947 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5a2c84c9]
2021-03-12 03:12:18,947 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@200d585b]
2021-03-12 03:12:19,067 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:19,068 [main:78] - Generated call from random type = (592288295.toUInt()).toUByte().toString(-675230350)
2021-03-12 03:12:19,069 [main:106] - GETTING String from String
2021-03-12 03:12:19,094 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]]
2021-03-12 03:12:19,095 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:12:19,216 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:19,332 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:19,334 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]
2021-03-12 03:12:19,452 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:19,602 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:12:19,604 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:12:19,853 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:12:19,858 [main:95] - GENERATED = StringBuilder("zvkqu")
2021-03-12 03:12:19,986 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:19,988 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).subSequence(415140875, 2041089028).commonPrefixWith(StringBuilder("zvkqu"), true)
2021-03-12 03:12:19,988 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]]
2021-03-12 03:12:19,988 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]
2021-03-12 03:12:19,988 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).trimIndent()
2021-03-12 03:12:19,988 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]]
2021-03-12 03:12:19,988 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]
2021-03-12 03:12:20,113 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:20,115 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).substringBefore('狪', C("fqowo").grandParentProp)
2021-03-12 03:12:20,115 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]]
2021-03-12 03:12:20,115 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]
2021-03-12 03:12:20,115 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).prependIndent(C("fqowo").grandParentProp)
2021-03-12 03:12:20,115 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]]
2021-03-12 03:12:20,115 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:12:20,234 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:20,353 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:20,354 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]
2021-03-12 03:12:20,469 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:20,591 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:20,592 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).subSequence(1291169712, 1956198886).commonSuffixWith(StringBuilder(), true)
2021-03-12 03:12:20,592 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]]
2021-03-12 03:12:20,592 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]
2021-03-12 03:12:20,592 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceIndent(null.toString())
2021-03-12 03:12:20,593 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]]
2021-03-12 03:12:20,593 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]
2021-03-12 03:12:20,593 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).toUpperCase()
2021-03-12 03:12:20,593 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@80e1a7b]]
2021-03-12 03:12:20,593 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@80e1a7b]
2021-03-12 03:12:20,740 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:20,741 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).take(-1816837296)
2021-03-12 03:12:20,741 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]]
2021-03-12 03:12:20,741 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]
2021-03-12 03:12:20,858 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:20,859 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).substringAfter('욮', C("fqowo").grandParentProp)
2021-03-12 03:12:20,860 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]]
2021-03-12 03:12:20,860 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]
2021-03-12 03:12:20,973 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:21,089 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:21,090 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).padEnd(-567907567, '')
2021-03-12 03:12:21,090 [main:61] - replacement of "" of type String is (C("fqowo").grandParentProp).replaceIndent(null.toString())
2021-03-12 03:12:21,206 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:21,209 [main:53] - replacing (parentProp, String)
2021-03-12 03:12:21,209 [main:50] - replacing parentProp String
2021-03-12 03:12:21,209 [main:54] - Getting value of type String
2021-03-12 03:12:21,324 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:21,325 [main:58] - GENERATED VALUE OF TYPE String = "jcdxv"
2021-03-12 03:12:21,325 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:21,328 [main:67] - randomType = C
2021-03-12 03:12:21,451 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:12:21,452 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:12:21,569 [main:194] - Type params = []
2021-03-12 03:12:21,692 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:12:21,701 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e03b28]
2021-03-12 03:12:21,701 [main:78] - Generated call from random type = (C("ykajp")).grandParentProp.uppercase()
2021-03-12 03:12:21,702 [main:106] - GETTING String from Int
2021-03-12 03:12:21,738 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:12:21,738 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:12:21,738 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:12:21,738 [main:117] - GENERATED CALL = (justForUsageInClosure).toLong().toString(arg2)
2021-03-12 03:12:21,738 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:12:21,738 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:12:21,738 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:12:21,739 [main:117] - GENERATED CALL = (justForUsageInClosure).toShort().toString(arg2)
2021-03-12 03:12:21,739 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:12:21,739 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:21,739 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:12:21,739 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().plus(sideEffects)
2021-03-12 03:12:21,739 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:12:21,739 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:21,739 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:12:21,739 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().lowercase()
2021-03-12 03:12:21,739 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:12:21,739 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:21,739 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:12:21,740 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().uppercase()
2021-03-12 03:12:21,740 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:12:21,740 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:21,740 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:12:21,740 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().titlecase()
2021-03-12 03:12:21,740 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:21,740 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:12:21,740 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:21,857 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:21,858 [main:117] - GENERATED CALL = (justForUsageInClosure).toInt().toString(-1320693653)
2021-03-12 03:12:21,858 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:21,858 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:12:21,976 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:21,978 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:21,978 [main:117] - GENERATED CALL = (justForUsageInClosure).compareTo(1904988234).toString(arg2)
2021-03-12 03:12:21,978 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:21,978 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:21,978 [main:117] - GENERATED CALL = (justForUsageInClosure).toString(arg2)
2021-03-12 03:12:21,978 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:12:21,978 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:12:22,096 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:12:22,097 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:12:22,215 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:22,217 [main:117] - GENERATED CALL = (justForUsageInClosure).div(-3444737685363568767).toString(-662595158)
2021-03-12 03:12:22,217 [main:61] - replacement of parentProp of type String is (justForUsageInClosure).toString(arg2)
2021-03-12 03:12:22,332 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:22,332 [main:66] - Compilation checking started
2021-03-12 03:12:22,645 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            (justForUsageInClosure).toString(arg2) = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:22,647 [main:53] - replacing ("minus-one#zero#0.5#first#second#fourth", String)
2021-03-12 03:12:22,648 [main:50] - replacing "minus-one#zero#0.5#first#second#fourth" String
2021-03-12 03:12:22,648 [main:54] - Getting value of type String
2021-03-12 03:12:22,766 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:22,767 [main:58] - GENERATED VALUE OF TYPE String = "dscud"
2021-03-12 03:12:22,767 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:22,769 [main:67] - randomType = Char
2021-03-12 03:12:22,911 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:22,946 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:12:22,947 [main:78] - Generated call from random type = ('妚').lowercase()
2021-03-12 03:12:22,948 [main:106] - GETTING String from Int
2021-03-12 03:12:22,982 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:22,982 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:22,983 [main:117] - GENERATED CALL = (justForUsageInClosure).toString(justForUsageInClosure)
2021-03-12 03:12:22,983 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:12:22,983 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:22,983 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:12:22,983 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().titlecase()
2021-03-12 03:12:22,983 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:12:22,983 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:12:22,983 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:12:22,984 [main:117] - GENERATED CALL = (justForUsageInClosure).toShort().toString(justForUsageInClosure)
2021-03-12 03:12:22,984 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:12:22,984 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:22,984 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:12:22,984 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().uppercase()
2021-03-12 03:12:22,984 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:12:22,984 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:22,984 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:12:22,984 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().lowercase()
2021-03-12 03:12:22,984 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:22,984 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:12:23,102 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:23,103 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:23,103 [main:117] - GENERATED CALL = (justForUsageInClosure).compareTo(1110579338).toString(justForUsageInClosure)
2021-03-12 03:12:23,104 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:12:23,104 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:23,104 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:12:23,104 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().plus(prop)
2021-03-12 03:12:23,104 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:12:23,104 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:12:23,104 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:12:23,104 [main:117] - GENERATED CALL = (justForUsageInClosure).toLong().toString(justForUsageInClosure)
2021-03-12 03:12:23,104 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:23,104 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:12:23,104 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:23,105 [main:117] - GENERATED CALL = (justForUsageInClosure).toInt().toString(justForUsageInClosure)
2021-03-12 03:12:23,105 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:12:23,105 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:12:23,105 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:12:23,105 [main:117] - GENERATED CALL = (justForUsageInClosure).toByte().toString(justForUsageInClosure)
2021-03-12 03:12:23,105 [main:61] - replacement of "minus-one#zero#0.5#first#second#fourth" of type String is "dscud"
2021-03-12 03:12:23,228 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 03:12:23,229 [main:66] - Compilation checking started
2021-03-12 03:12:23,649 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:23,653 [main:53] - replacing ("#third", String)
2021-03-12 03:12:23,654 [main:50] - replacing "#third" String
2021-03-12 03:12:23,654 [main:54] - Getting value of type String
2021-03-12 03:12:23,807 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:23,808 [main:58] - GENERATED VALUE OF TYPE String = "ctzrd"
2021-03-12 03:12:23,809 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:23,810 [main:67] - randomType = Int
2021-03-12 03:12:23,927 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:23,960 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:23,960 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:12:23,960 [main:78] - Generated call from random type = (942270954).toChar().uppercase()
2021-03-12 03:12:23,961 [main:106] - GETTING String from String
2021-03-12 03:12:23,978 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]]
2021-03-12 03:12:23,978 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]
2021-03-12 03:12:24,093 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:24,212 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:24,213 [main:117] - GENERATED CALL = (parentProp).commonPrefixWith("ybjis", false)
2021-03-12 03:12:24,213 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]]
2021-03-12 03:12:24,213 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]
2021-03-12 03:12:24,214 [main:117] - GENERATED CALL = (parentProp).capitalize()
2021-03-12 03:12:24,214 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]]
2021-03-12 03:12:24,214 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]
2021-03-12 03:12:24,214 [main:117] - GENERATED CALL = (parentProp).prependIndent(justForUsageInParentClosure)
2021-03-12 03:12:24,214 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]]
2021-03-12 03:12:24,214 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]
2021-03-12 03:12:24,327 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:24,331 [main:117] - GENERATED CALL = (parentProp).removeSurrounding("jajku")
2021-03-12 03:12:24,332 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]]
2021-03-12 03:12:24,332 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]
2021-03-12 03:12:24,332 [main:117] - GENERATED CALL = (parentProp).dropLast(x1)
2021-03-12 03:12:24,332 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]]
2021-03-12 03:12:24,332 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]
2021-03-12 03:12:24,332 [main:117] - GENERATED CALL = (parentProp).toLowerCase()
2021-03-12 03:12:24,332 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@80e1a7b]]
2021-03-12 03:12:24,332 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@80e1a7b]
2021-03-12 03:12:24,332 [main:117] - GENERATED CALL = (parentProp).take(x2)
2021-03-12 03:12:24,332 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:12:24,333 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:12:24,450 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:24,567 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:12:24,569 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:12:24,806 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:12:24,810 [main:95] - GENERATED = StringBuilder("npoca")
2021-03-12 03:12:24,811 [main:117] - GENERATED CALL = (parentProp).removePrefix(StringBuilder("npoca"))
2021-03-12 03:12:24,811 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]]
2021-03-12 03:12:24,811 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]
2021-03-12 03:12:24,811 [main:117] - GENERATED CALL = (parentProp).concat(parentProp)
2021-03-12 03:12:24,811 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]]
2021-03-12 03:12:24,811 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]
2021-03-12 03:12:24,811 [main:117] - GENERATED CALL = (parentProp).trimStart()
2021-03-12 03:12:24,811 [main:61] - replacement of "#third" of type String is (parentProp).removePrefix(StringBuilder("npoca"))
2021-03-12 03:12:24,928 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:24,929 [main:66] - Compilation checking started
2021-03-12 03:12:25,430 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:25,431 [main:53] - replacing ("parentCaptured", String)
2021-03-12 03:12:25,432 [main:50] - replacing "parentCaptured" String
2021-03-12 03:12:25,432 [main:54] - Getting value of type String
2021-03-12 03:12:25,560 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:25,561 [main:58] - GENERATED VALUE OF TYPE String = "lnozd"
2021-03-12 03:12:25,561 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:25,564 [main:67] - randomType = C
2021-03-12 03:12:25,681 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:12:25,681 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:12:25,800 [main:194] - Type params = []
2021-03-12 03:12:25,919 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:12:25,927 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34632d00]
2021-03-12 03:12:26,045 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:26,046 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:26,047 [main:78] - Generated call from random type = (C("szzjp")).grandParentProp.takeWhile({a: Char -> true})
2021-03-12 03:12:26,048 [main:106] - GETTING String from String
2021-03-12 03:12:26,072 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]]
2021-03-12 03:12:26,072 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]
2021-03-12 03:12:26,072 [main:117] - GENERATED CALL = (sideEffects).trimMargin(C("fqowo").grandParentProp)
2021-03-12 03:12:26,072 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]]
2021-03-12 03:12:26,072 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]
2021-03-12 03:12:26,188 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:26,189 [main:117] - GENERATED CALL = (sideEffects).prependIndent("lpvwn")
2021-03-12 03:12:26,189 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]]
2021-03-12 03:12:26,189 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]
2021-03-12 03:12:26,189 [main:117] - GENERATED CALL = (sideEffects).trimIndent()
2021-03-12 03:12:26,189 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]]
2021-03-12 03:12:26,189 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]
2021-03-12 03:12:26,307 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:26,308 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:26,310 [main:117] - GENERATED CALL = (sideEffects).filter({a: Char -> false})
2021-03-12 03:12:26,310 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]]
2021-03-12 03:12:26,310 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:12:26,427 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:26,428 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]
2021-03-12 03:12:26,545 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:12:26,665 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:12:26,667 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:12:27,034 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:12:27,035 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 03:12:27,036 [main:95] - GENERATED = Regex("gbggb", kotlin.text.RegexOption.MULTILINE)
2021-03-12 03:12:27,152 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 03:12:27,153 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:12:27,158 [main:117] - GENERATED CALL = (sideEffects).subSequence(justForUsageInClosure, 467730436).replace(Regex("gbggb", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> "zbljk"})
2021-03-12 03:12:27,158 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:27,158 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:27,274 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:27,275 [main:117] - GENERATED CALL = (sideEffects).length.toString(1711716380)
2021-03-12 03:12:27,276 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]]
2021-03-12 03:12:27,276 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]
2021-03-12 03:12:27,398 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:27,400 [main:117] - GENERATED CALL = (sideEffects).replaceAfter('', justForUsageInParentClosure, justForUsageInParentClosure)
2021-03-12 03:12:27,400 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]]
2021-03-12 03:12:27,400 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]
2021-03-12 03:12:27,400 [main:117] - GENERATED CALL = (sideEffects).drop(justForUsageInClosure)
2021-03-12 03:12:27,400 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]]
2021-03-12 03:12:27,400 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]
2021-03-12 03:12:27,530 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:27,531 [main:117] - GENERATED CALL = (sideEffects).replaceBeforeLast('兩', justForUsageInParentClosure, sideEffects)
2021-03-12 03:12:27,531 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:27,531 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:27,531 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:27,678 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:27,679 [main:117] - GENERATED CALL = (sideEffects).compareTo(null.toString()).toString(650624118)
2021-03-12 03:12:27,679 [main:61] - replacement of "parentCaptured" of type String is (sideEffects).filter({a: Char -> false})
2021-03-12 03:12:27,796 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:27,796 [main:66] - Compilation checking started
2021-03-12 03:12:28,290 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:28,293 [main:53] - replacing (a1, String)
2021-03-12 03:12:28,295 [main:50] - replacing a1 String
2021-03-12 03:12:28,295 [main:54] - Getting value of type String
2021-03-12 03:12:28,447 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:28,447 [main:58] - GENERATED VALUE OF TYPE String = "itmkg"
2021-03-12 03:12:28,448 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:28,589 [main:67] - randomType = Set<C>
2021-03-12 03:12:28,589 [main:106] - GETTING String from String
2021-03-12 03:12:28,614 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45c0d5dc]]
2021-03-12 03:12:28,614 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45c0d5dc]
2021-03-12 03:12:28,614 [main:117] - GENERATED CALL = (prop).substring(justForUsageInClosure)
2021-03-12 03:12:28,614 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]]
2021-03-12 03:12:28,614 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]
2021-03-12 03:12:28,739 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:28,743 [main:117] - GENERATED CALL = (prop).removeSurrounding("arwgl")
2021-03-12 03:12:28,743 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34632d00]]
2021-03-12 03:12:28,744 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34632d00]
2021-03-12 03:12:28,863 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:28,864 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:28,865 [main:117] - GENERATED CALL = (prop).takeWhile({a: Char -> true})
2021-03-12 03:12:28,865 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]]
2021-03-12 03:12:28,865 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]
2021-03-12 03:12:28,985 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:28,986 [main:117] - GENERATED CALL = (prop).replaceAfter('鰫', prop, parentSideEffects)
2021-03-12 03:12:28,986 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:12:28,986 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:12:29,105 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:29,109 [main:117] - GENERATED CALL = (prop).removePrefix("fskkb")
2021-03-12 03:12:29,109 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5434e4f7]]
2021-03-12 03:12:29,109 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5434e4f7]
2021-03-12 03:12:29,228 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:29,348 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:29,469 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:29,470 [main:117] - GENERATED CALL = (prop).replace('⥂', '黚', true)
2021-03-12 03:12:29,470 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]]
2021-03-12 03:12:29,470 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]
2021-03-12 03:12:29,588 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:12:29,589 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:12:29,590 [main:117] - GENERATED CALL = (prop).replaceFirstChar({a: Char -> '剥'})
2021-03-12 03:12:29,590 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]]
2021-03-12 03:12:29,590 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]
2021-03-12 03:12:29,590 [main:117] - GENERATED CALL = (prop).reversed()
2021-03-12 03:12:29,590 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]]
2021-03-12 03:12:29,590 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]
2021-03-12 03:12:29,591 [main:117] - GENERATED CALL = (prop).lowercase()
2021-03-12 03:12:29,591 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:12:29,591 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:12:29,591 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:12:29,591 [main:117] - GENERATED CALL = (prop).get(justForUsageInClosure).uppercase()
2021-03-12 03:12:29,591 [main:61] - replacement of a1 of type String is (prop).reversed()
2021-03-12 03:12:29,711 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:29,712 [main:66] - Compilation checking started
2021-03-12 03:12:30,038 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if ((prop).reversed() != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:30,038 [main:53] - replacing ((parentSideEffects).length.rem(27) + (null.toString()).compareTo("qbzmz").minus(-64), Int)
2021-03-12 03:12:30,038 [main:50] - replacing (parentSideEffects).length.rem(27) + (null.toString()).compareTo("qbzmz").minus(-64) Int
2021-03-12 03:12:30,038 [main:54] - Getting value of type Int
2021-03-12 03:12:30,187 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:30,188 [main:58] - GENERATED VALUE OF TYPE Int = 1236545468
2021-03-12 03:12:30,189 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:30,319 [main:67] - randomType = UShort
2021-03-12 03:12:30,440 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 03:12:30,475 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@53d5be59]
2021-03-12 03:12:30,476 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@319363e]
2021-03-12 03:12:30,596 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:12:30,598 [main:78] - Generated call from random type = (10241.toUShort()).toByte().div(-5)
2021-03-12 03:12:30,598 [main:61] - replacement of (parentSideEffects).length.rem(27) + (null.toString()).compareTo("qbzmz").minus(-64) of type Int is (10241.toUShort()).toByte().div(-5)
2021-03-12 03:12:30,718 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:30,720 [main:53] - replacing ("fail2: ${sideEffects}", String)
2021-03-12 03:12:30,721 [main:50] - replacing "fail2: ${sideEffects}" String
2021-03-12 03:12:30,721 [main:54] - Getting value of type String
2021-03-12 03:12:30,842 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:30,843 [main:58] - GENERATED VALUE OF TYPE String = "ointn"
2021-03-12 03:12:30,843 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:30,845 [main:67] - randomType = Boolean
2021-03-12 03:12:30,967 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:30,980 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]
2021-03-12 03:12:31,100 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:31,101 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:31,102 [main:78] - Generated call from random type = (true).compareTo(false).toString(justForUsageInClosure)
2021-03-12 03:12:31,103 [main:106] - GETTING String from Int
2021-03-12 03:12:31,133 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:12:31,133 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:31,133 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:12:31,133 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().titlecase()
2021-03-12 03:12:31,133 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:12:31,133 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:12:31,134 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:12:31,134 [main:117] - GENERATED CALL = (justForUsageInClosure).toByte().toString(justForUsageInClosure)
2021-03-12 03:12:31,134 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:31,134 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:12:31,134 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:31,252 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:31,253 [main:117] - GENERATED CALL = (justForUsageInClosure).compareTo(justForUsageInClosure).toString(1348039926)
2021-03-12 03:12:31,254 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:12:31,254 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:31,254 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:12:31,254 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().uppercase()
2021-03-12 03:12:31,254 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:12:31,254 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:12:31,254 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:12:31,375 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:31,376 [main:117] - GENERATED CALL = (justForUsageInClosure).toLong().toString(220778112)
2021-03-12 03:12:31,376 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:12:31,376 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:31,376 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:12:31,500 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:31,501 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().plus("hgxaa")
2021-03-12 03:12:31,501 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:12:31,501 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:31,501 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:12:31,502 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().lowercase()
2021-03-12 03:12:31,502 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:12:31,502 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:12:31,502 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:12:31,502 [main:117] - GENERATED CALL = (justForUsageInClosure).toShort().toString(justForUsageInClosure)
2021-03-12 03:12:31,502 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:12:31,502 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:12:31,621 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:12:31,622 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:12:31,622 [main:117] - GENERATED CALL = (justForUsageInClosure).div(7877527928072057342).toString(justForUsageInClosure)
2021-03-12 03:12:31,623 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:31,623 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:31,623 [main:117] - GENERATED CALL = (justForUsageInClosure).toString(justForUsageInClosure)
2021-03-12 03:12:31,623 [main:61] - replacement of "fail2: ${sideEffects}" of type String is (justForUsageInClosure).toShort().toString(justForUsageInClosure)
2021-03-12 03:12:31,740 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:31,740 [main:66] - Compilation checking started
2021-03-12 03:12:32,232 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:32,235 [main:53] - replacing ("$prop#$parentProp#$grandParentProp", String)
2021-03-12 03:12:32,235 [main:50] - replacing "$prop#$parentProp#$grandParentProp" String
2021-03-12 03:12:32,235 [main:54] - Getting value of type String
2021-03-12 03:12:32,373 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:32,373 [main:58] - GENERATED VALUE OF TYPE String = "tglmv"
2021-03-12 03:12:32,374 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:32,377 [main:67] - randomType = C
2021-03-12 03:12:32,498 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:12:32,499 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:12:32,646 [main:194] - Type params = []
2021-03-12 03:12:32,763 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:12:32,769 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]
2021-03-12 03:12:32,889 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:32,890 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:32,891 [main:78] - Generated call from random type = (C("lahzt")).grandParentProp.dropWhile({a: Char -> false})
2021-03-12 03:12:32,891 [main:106] - GETTING String from String
2021-03-12 03:12:32,911 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]]
2021-03-12 03:12:32,911 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:12:32,911 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]
2021-03-12 03:12:33,036 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:33,037 [main:117] - GENERATED CALL = (sideEffects).subSequence(justForUsageInClosure, justForUsageInClosure).repeat(-5305867)
2021-03-12 03:12:33,037 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]]
2021-03-12 03:12:33,037 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]
2021-03-12 03:12:33,157 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:33,279 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:33,281 [main:117] - GENERATED CALL = (sideEffects).replaceAfter('뾺', parentSideEffects, "wjqaw")
2021-03-12 03:12:33,281 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]]
2021-03-12 03:12:33,281 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]
2021-03-12 03:12:33,400 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:33,405 [main:117] - GENERATED CALL = (sideEffects).replaceRange(justForUsageInClosure, justForUsageInClosure, "vkhte")
2021-03-12 03:12:33,405 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:12:33,405 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:12:33,405 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:12:33,405 [main:117] - GENERATED CALL = (sideEffects).get(justForUsageInClosure).plus(null.toString())
2021-03-12 03:12:33,405 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]]
2021-03-12 03:12:33,405 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:12:33,405 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]
2021-03-12 03:12:33,525 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:33,649 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:12:33,651 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:12:33,903 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:12:33,908 [main:95] - GENERATED = StringBuilder("cfpkv")
2021-03-12 03:12:34,028 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:34,029 [main:117] - GENERATED CALL = (sideEffects).subSequence(justForUsageInClosure, justForUsageInClosure).commonPrefixWith(StringBuilder("cfpkv"), true)
2021-03-12 03:12:34,030 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]]
2021-03-12 03:12:34,030 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]
2021-03-12 03:12:34,030 [main:117] - GENERATED CALL = (sideEffects).trimIndent()
2021-03-12 03:12:34,030 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]]
2021-03-12 03:12:34,030 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]
2021-03-12 03:12:34,149 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:34,154 [main:117] - GENERATED CALL = (sideEffects).removeSurrounding("xcefs")
2021-03-12 03:12:34,154 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]]
2021-03-12 03:12:34,154 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]
2021-03-12 03:12:34,154 [main:117] - GENERATED CALL = (sideEffects).repeat(justForUsageInClosure)
2021-03-12 03:12:34,154 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]]
2021-03-12 03:12:34,154 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]
2021-03-12 03:12:34,273 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:34,274 [main:117] - GENERATED CALL = (sideEffects).padEnd(justForUsageInClosure, 'か')
2021-03-12 03:12:34,274 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@80e1a7b]]
2021-03-12 03:12:34,274 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@80e1a7b]
2021-03-12 03:12:34,274 [main:117] - GENERATED CALL = (sideEffects).take(justForUsageInClosure)
2021-03-12 03:12:34,274 [main:61] - replacement of "$prop#$parentProp#$grandParentProp" of type String is sideEffects
2021-03-12 03:12:34,394 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(REFERENCE_EXPRESSION)
2021-03-12 03:12:34,395 [main:66] - Compilation checking started
2021-03-12 03:12:34,851 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:34,852 [main:53] - replacing ("fail1: $a1", String)
2021-03-12 03:12:34,852 [main:50] - replacing "fail1: $a1" String
2021-03-12 03:12:34,852 [main:54] - Getting value of type String
2021-03-12 03:12:34,981 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:34,982 [main:58] - GENERATED VALUE OF TYPE String = "iwpit"
2021-03-12 03:12:34,982 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:36,059 [main:67] - randomType = HashMap<Function2<C, C, Long?>, Function2<C, Function1<Char, Boolean?>, Byte?>>
2021-03-12 03:12:36,185 [main:302] - generating value of type = HashMap<Function2<C, C, Long?>, Function2<C, Function1<Char, Boolean?>, Byte?>> false depth = 0
2021-03-12 03:12:36,316 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Function2<C, C, Long?>, Function2<C, Function1<Char, Boolean?>, Byte?>> = TODO()
2021-03-12 03:12:36,318 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Function2<C, C, Long?>, Function2<C, Function1<Char, Boolean?>, Byte?>> = TODO()
2021-03-12 03:12:36,442 [main:95] - GENERATED = linkedMapOf<Function2<C, C, Long?>, Function2<C, Function1<Char, Boolean?>, Byte?>>()
2021-03-12 03:12:36,670 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:36,798 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:36,799 [main:78] - Generated call from random type = (linkedMapOf<Function2<C, C, Long?>, Function2<C, Function1<Char, Boolean?>, Byte?>>()).size.toString(1503852166)
2021-03-12 03:12:36,799 [main:106] - GETTING String from String
2021-03-12 03:12:36,825 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5434e4f7]]
2021-03-12 03:12:36,825 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5434e4f7]
2021-03-12 03:12:36,947 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:37,074 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:37,194 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:37,195 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replace('', '꛿', false)
2021-03-12 03:12:37,196 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]]
2021-03-12 03:12:37,196 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]
2021-03-12 03:12:37,346 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:37,347 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).dropLast(1667527257)
2021-03-12 03:12:37,348 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]]
2021-03-12 03:12:37,348 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]
2021-03-12 03:12:37,348 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).reversed()
2021-03-12 03:12:37,348 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:12:37,348 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:12:37,468 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:37,469 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:12:37,469 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).get(629354601).lowercase()
2021-03-12 03:12:37,469 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]]
2021-03-12 03:12:37,469 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]
2021-03-12 03:12:37,470 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).prependIndent(C("fqowo").grandParentProp)
2021-03-12 03:12:37,470 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]]
2021-03-12 03:12:37,470 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]
2021-03-12 03:12:37,470 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceIndentByMargin(C("fqowo").grandParentProp, C("fqowo").grandParentProp)
2021-03-12 03:12:37,470 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]]
2021-03-12 03:12:37,470 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]
2021-03-12 03:12:37,590 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:37,711 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:37,712 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceAfterLast('䞅', C("fqowo").grandParentProp, "bxfkp")
2021-03-12 03:12:37,712 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]]
2021-03-12 03:12:37,712 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]
2021-03-12 03:12:37,832 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:37,953 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:37,995 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).commonSuffixWith("rspxw", false)
2021-03-12 03:12:37,995 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:12:37,996 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:12:38,125 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:38,250 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:12:38,251 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:12:38,502 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:12:38,506 [main:95] - GENERATED = StringBuilder("nsucd")
2021-03-12 03:12:38,506 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).removePrefix(StringBuilder("nsucd"))
2021-03-12 03:12:38,506 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]]
2021-03-12 03:12:38,506 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]
2021-03-12 03:12:38,623 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:38,623 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:38,625 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).dropLastWhile({a: Char -> false})
2021-03-12 03:12:38,625 [main:61] - replacement of "fail1: $a1" of type String is (C("fqowo").grandParentProp).dropLastWhile({a: Char -> false})
2021-03-12 03:12:38,741 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:38,742 [main:53] - replacing ("", String)
2021-03-12 03:12:38,742 [main:50] - replacing "" String
2021-03-12 03:12:38,742 [main:54] - Getting value of type String
2021-03-12 03:12:38,864 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:38,865 [main:58] - GENERATED VALUE OF TYPE String = "lstrk"
2021-03-12 03:12:38,865 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:38,996 [main:67] - randomType = Float
2021-03-12 03:12:39,113 [main:302] - generating value of type = Float true depth = 0
2021-03-12 03:12:39,143 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@77cbdc54]
2021-03-12 03:12:39,143 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:12:39,144 [main:78] - Generated call from random type = (0.61142445f).toChar().plus(null.toString())
2021-03-12 03:12:39,144 [main:106] - GETTING String from String
2021-03-12 03:12:39,159 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]]
2021-03-12 03:12:39,159 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]
2021-03-12 03:12:39,278 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:12:39,279 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:39,280 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).filterIndexed({a: Int, b: Char -> true})
2021-03-12 03:12:39,280 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]]
2021-03-12 03:12:39,280 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]
2021-03-12 03:12:39,399 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:12:39,400 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:12:39,401 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceFirstChar({a: Char -> '俱'})
2021-03-12 03:12:39,401 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7c9ff9]]
2021-03-12 03:12:39,401 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7c9ff9]
2021-03-12 03:12:39,519 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:39,524 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).removeSuffix("zdujq")
2021-03-12 03:12:39,524 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45c0d5dc]]
2021-03-12 03:12:39,524 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45c0d5dc]
2021-03-12 03:12:39,677 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:39,679 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).substring(1987184896)
2021-03-12 03:12:39,679 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]]
2021-03-12 03:12:39,679 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]
2021-03-12 03:12:39,679 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).prependIndent(C("fqowo").grandParentProp)
2021-03-12 03:12:39,679 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]]
2021-03-12 03:12:39,679 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]
2021-03-12 03:12:39,798 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:39,799 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).substringAfter('?', C("fqowo").grandParentProp)
2021-03-12 03:12:39,799 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]]
2021-03-12 03:12:39,799 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:12:39,925 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:40,044 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:40,045 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]
2021-03-12 03:12:40,163 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:40,285 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:40,286 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).subSequence(-1940859203, 1292433814).substring(-1624714211, -488165454)
2021-03-12 03:12:40,286 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:12:40,286 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:12:40,405 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:40,532 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:12:40,534 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:12:40,784 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:12:40,785 [main:95] - GENERATED = StringBuilder(226266108)
2021-03-12 03:12:40,785 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).removePrefix(StringBuilder(226266108))
2021-03-12 03:12:40,785 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]]
2021-03-12 03:12:40,785 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]
2021-03-12 03:12:40,907 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:41,030 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:41,032 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).commonSuffixWith("sxcls", false)
2021-03-12 03:12:41,032 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]]
2021-03-12 03:12:41,032 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]
2021-03-12 03:12:41,152 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:41,272 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:41,273 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).removeRange(-1535363426, 1251776935)
2021-03-12 03:12:41,273 [main:61] - replacement of "" of type String is (C("fqowo").grandParentProp).substringAfter('?', C("fqowo").grandParentProp)
2021-03-12 03:12:41,390 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:41,392 [main:53] - replacing ("", String)
2021-03-12 03:12:41,393 [main:50] - replacing "" String
2021-03-12 03:12:41,393 [main:54] - Getting value of type String
2021-03-12 03:12:41,512 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:41,513 [main:58] - GENERATED VALUE OF TYPE String = "ddops"
2021-03-12 03:12:41,513 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:41,516 [main:67] - randomType = C
2021-03-12 03:12:41,634 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:12:41,635 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:12:41,757 [main:194] - Type params = []
2021-03-12 03:12:41,875 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:12:41,884 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7c9ff9]
2021-03-12 03:12:42,036 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:42,041 [main:78] - Generated call from random type = (C("euqrt")).grandParentProp.removeSuffix("kyakq")
2021-03-12 03:12:42,041 [main:106] - GETTING String from String
2021-03-12 03:12:42,061 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]]
2021-03-12 03:12:42,061 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]
2021-03-12 03:12:42,062 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).concat(a1)
2021-03-12 03:12:42,062 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]]
2021-03-12 03:12:42,062 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]
2021-03-12 03:12:42,062 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).reversed()
2021-03-12 03:12:42,062 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]]
2021-03-12 03:12:42,062 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]
2021-03-12 03:12:42,062 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).trimIndent()
2021-03-12 03:12:42,062 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:12:42,062 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:12:42,062 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:12:42,062 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).get(justForUsageInClosure).lowercase()
2021-03-12 03:12:42,062 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]]
2021-03-12 03:12:42,062 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]
2021-03-12 03:12:42,180 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:42,181 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceBefore('⟦', null.toString(), C("fqowo").grandParentProp)
2021-03-12 03:12:42,181 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]]
2021-03-12 03:12:42,181 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]
2021-03-12 03:12:42,182 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).decapitalize()
2021-03-12 03:12:42,182 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]]
2021-03-12 03:12:42,182 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]
2021-03-12 03:12:42,300 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:42,301 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:42,302 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).dropWhile({a: Char -> true})
2021-03-12 03:12:42,303 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]]
2021-03-12 03:12:42,303 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]
2021-03-12 03:12:42,303 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).trimEnd()
2021-03-12 03:12:42,303 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]]
2021-03-12 03:12:42,303 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]
2021-03-12 03:12:42,424 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:12:42,425 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:12:42,426 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceFirstChar({a: Char -> ''})
2021-03-12 03:12:42,426 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]]
2021-03-12 03:12:42,426 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]
2021-03-12 03:12:42,426 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).dropLast(justForUsageInClosure)
2021-03-12 03:12:42,426 [main:61] - replacement of "" of type String is (C("fqowo").grandParentProp).reversed()
2021-03-12 03:12:42,543 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:42,543 [main:66] - Compilation checking started
2021-03-12 03:12:42,975 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:42,978 [main:53] - replacing (sideEffects != "minus-one#zero#0.7#first#second#third", Boolean)
2021-03-12 03:12:42,980 [main:50] - replacing sideEffects != "minus-one#zero#0.7#first#second#third" Boolean
2021-03-12 03:12:42,980 [main:54] - Getting value of type Boolean
2021-03-12 03:12:43,118 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:43,119 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 03:12:43,119 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:43,248 [main:67] - randomType = Double
2021-03-12 03:12:43,367 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:12:43,397 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5aa76e11]
2021-03-12 03:12:43,514 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:12:43,514 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@662f0405]
2021-03-12 03:12:43,633 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:12:43,633 [main:78] - Generated call from random type = (0.910821210492119).equals("dgbnk").equals("vvcuh")
2021-03-12 03:12:43,633 [main:61] - replacement of sideEffects != "minus-one#zero#0.7#first#second#third" of type Boolean is (0.910821210492119).equals("dgbnk").equals("vvcuh")
2021-03-12 03:12:43,752 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:43,752 [main:66] - Compilation checking started
2021-03-12 03:12:44,250 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:44,253 [main:53] - replacing (5, Int)
2021-03-12 03:12:44,254 [main:50] - replacing 5 Int
2021-03-12 03:12:44,254 [main:54] - Getting value of type Int
2021-03-12 03:12:44,391 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:44,392 [main:58] - GENERATED VALUE OF TYPE Int = -240358323
2021-03-12 03:12:44,392 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:44,529 [main:67] - randomType = Short?
2021-03-12 03:12:44,649 [main:302] - generating value of type = Short true depth = 0
2021-03-12 03:12:44,698 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1fc3db01]
2021-03-12 03:12:44,698 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4c55a5a9]
2021-03-12 03:12:44,845 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:12:44,847 [main:78] - Generated call from random type = (11626)?.toShort().div(-71)
2021-03-12 03:12:44,848 [main:106] - GETTING Int from String
2021-03-12 03:12:44,866 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b85727c]]
2021-03-12 03:12:44,866 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b85727c]
2021-03-12 03:12:44,991 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:44,992 [main:117] - GENERATED CALL = (a1).length.rotateLeft(585110904)
2021-03-12 03:12:44,992 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@227e568f]]
2021-03-12 03:12:44,992 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:44,992 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@227e568f]
2021-03-12 03:12:44,993 [main:117] - GENERATED CALL = (a1).compareTo(a1).countTrailingZeroBits()
2021-03-12 03:12:44,993 [main:113] - Case = [public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@2a030c0b]]
2021-03-12 03:12:44,993 [main:117] - GENERATED CALL = (a1).lastIndex
2021-03-12 03:12:44,993 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ddf7857]]
2021-03-12 03:12:44,993 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:44,993 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ddf7857]
2021-03-12 03:12:44,993 [main:117] - GENERATED CALL = (a1).compareTo(sideEffects).countLeadingZeroBits()
2021-03-12 03:12:44,993 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7155f488]]
2021-03-12 03:12:44,993 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7155f488]
2021-03-12 03:12:44,993 [main:117] - GENERATED CALL = (a1).length.dec()
2021-03-12 03:12:44,993 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@643c7e7b]]
2021-03-12 03:12:44,993 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@643c7e7b]
2021-03-12 03:12:45,117 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:45,240 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:45,241 [main:117] - GENERATED CALL = (a1).indexOf('퓻', justForUsageInClosure, true)
2021-03-12 03:12:45,241 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74414a78]]
2021-03-12 03:12:45,241 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:45,242 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74414a78]
2021-03-12 03:12:45,242 [main:117] - GENERATED CALL = (a1).compareTo(parentSideEffects).coerceAtLeast(justForUsageInClosure)
2021-03-12 03:12:45,242 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5797f91]]
2021-03-12 03:12:45,242 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5797f91]
2021-03-12 03:12:45,242 [main:117] - GENERATED CALL = (a1).length.or(justForUsageInClosure)
2021-03-12 03:12:45,242 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31946dd4]]
2021-03-12 03:12:45,242 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31946dd4]
2021-03-12 03:12:45,242 [main:117] - GENERATED CALL = (a1).length.and(justForUsageInClosure)
2021-03-12 03:12:45,242 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1f0db41a]]
2021-03-12 03:12:45,242 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:12:45,242 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1f0db41a]
2021-03-12 03:12:45,362 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:45,363 [main:117] - GENERATED CALL = (a1).compareTo(parentSideEffects).coerceIn(justForUsageInClosure, 755208427)
2021-03-12 03:12:45,364 [main:61] - replacement of 5 of type Int is (a1).length.or(justForUsageInClosure)
2021-03-12 03:12:45,498 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:45,499 [main:66] - Compilation checking started
2021-03-12 03:12:45,837 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A((a1).length.or(justForUsageInClosure), 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:45,839 [main:53] - replacing (a1, String)
2021-03-12 03:12:45,840 [main:50] - replacing a1 String
2021-03-12 03:12:45,840 [main:54] - Getting value of type String
2021-03-12 03:12:45,963 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:45,964 [main:58] - GENERATED VALUE OF TYPE String = "srppm"
2021-03-12 03:12:45,964 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:46,097 [main:67] - randomType = C?
2021-03-12 03:12:46,216 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:12:46,217 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:12:46,339 [main:194] - Type params = []
2021-03-12 03:12:46,462 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:12:46,469 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45c0d5dc]
2021-03-12 03:12:46,470 [main:78] - Generated call from random type = (C("qrsno"))?.grandParentProp.substring(justForUsageInClosure)
2021-03-12 03:12:46,470 [main:106] - GETTING String from String
2021-03-12 03:12:46,495 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]]
2021-03-12 03:12:46,495 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]
2021-03-12 03:12:46,629 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:46,631 [main:117] - GENERATED CALL = (parentProp).padEnd(justForUsageInClosure, '쭊')
2021-03-12 03:12:46,631 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]]
2021-03-12 03:12:46,631 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:12:46,749 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:46,750 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]
2021-03-12 03:12:46,871 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:12:46,999 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 03:12:47,001 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 03:12:47,263 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:12:47,265 [main:95] - GENERATED = Regex("tmobe")
2021-03-12 03:12:47,414 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 03:12:47,415 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:12:47,419 [main:117] - GENERATED CALL = (parentProp).subSequence(-185241098, justForUsageInClosure).replace(Regex("tmobe"), {a: MatchResult -> "aqrnu"})
2021-03-12 03:12:47,419 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]]
2021-03-12 03:12:47,419 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]
2021-03-12 03:12:47,539 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:47,540 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:47,541 [main:117] - GENERATED CALL = (parentProp).dropLastWhile({a: Char -> false})
2021-03-12 03:12:47,541 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]]
2021-03-12 03:12:47,541 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]
2021-03-12 03:12:47,662 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:47,781 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:47,903 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:47,905 [main:117] - GENERATED CALL = (parentProp).replaceBefore('㇏', "rjkid", "bgfku")
2021-03-12 03:12:47,905 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]]
2021-03-12 03:12:47,905 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]
2021-03-12 03:12:48,024 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:48,144 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:48,145 [main:117] - GENERATED CALL = (parentProp).commonSuffixWith("qbdkv", false)
2021-03-12 03:12:48,145 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]]
2021-03-12 03:12:48,145 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]
2021-03-12 03:12:48,265 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:12:48,390 [main:43] - GENERATING CALL OF fun UIntArray(size: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 03:12:48,392 [main:61] - WITHOUT TYPE PARAMS = fun UIntArray(size: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 03:12:48,636 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:12:48,637 [main:95] - GENERATED = UIntArray(-245434581)
2021-03-12 03:12:48,637 [main:117] - GENERATED CALL = (parentProp).slice(UIntArray(-245434581))
2021-03-12 03:12:48,637 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]]
2021-03-12 03:12:48,638 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]
2021-03-12 03:12:48,755 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:48,756 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:48,757 [main:117] - GENERATED CALL = (parentProp).filter({a: Char -> true})
2021-03-12 03:12:48,757 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]]
2021-03-12 03:12:48,757 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]
2021-03-12 03:12:48,879 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:12:48,880 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:12:48,881 [main:117] - GENERATED CALL = (parentProp).replaceFirstChar({a: Char -> ''})
2021-03-12 03:12:48,881 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]]
2021-03-12 03:12:48,881 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]
2021-03-12 03:12:49,001 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:49,122 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:49,247 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:12:49,249 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:12:49,498 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:12:49,499 [main:95] - GENERATED = StringBuilder(-1160904183)
2021-03-12 03:12:49,500 [main:117] - GENERATED CALL = (parentProp).replaceRange(-706166043, justForUsageInClosure, StringBuilder(-1160904183))
2021-03-12 03:12:49,500 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]]
2021-03-12 03:12:49,500 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]
2021-03-12 03:12:49,621 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:49,622 [main:117] - GENERATED CALL = (parentProp).drop(-1533827638)
2021-03-12 03:12:49,623 [main:61] - replacement of a1 of type String is (parentProp).replaceFirstChar({a: Char -> ''})
2021-03-12 03:12:49,770 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:49,770 [main:66] - Compilation checking started
2021-03-12 03:12:50,091 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second"
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if ((parentProp).replaceFirstChar({a: Char -> ''}) != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:50,093 [main:53] - replacing ((C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second", String)
2021-03-12 03:12:50,093 [main:50] - replacing (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second" String
2021-03-12 03:12:50,093 [main:54] - Getting value of type String
2021-03-12 03:12:50,217 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:50,218 [main:58] - GENERATED VALUE OF TYPE String = "uasye"
2021-03-12 03:12:50,219 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:50,357 [main:67] - randomType = Boolean?
2021-03-12 03:12:50,477 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:50,493 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]
2021-03-12 03:12:50,614 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:50,616 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:50,616 [main:78] - Generated call from random type = (false)?.compareTo(true).toString(justForUsageInClosure)
2021-03-12 03:12:50,616 [main:106] - GETTING String from String
2021-03-12 03:12:50,638 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]]
2021-03-12 03:12:50,639 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]
2021-03-12 03:12:50,639 [main:117] - GENERATED CALL = (parentProp).toLowerCase()
2021-03-12 03:12:50,639 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]]
2021-03-12 03:12:50,639 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]
2021-03-12 03:12:50,757 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:50,758 [main:117] - GENERATED CALL = (parentProp).replaceAfterLast('긟', null.toString(), parentSideEffects)
2021-03-12 03:12:50,758 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]]
2021-03-12 03:12:50,758 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]
2021-03-12 03:12:50,758 [main:117] - GENERATED CALL = (parentProp).decapitalize()
2021-03-12 03:12:50,758 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]]
2021-03-12 03:12:50,758 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]
2021-03-12 03:12:50,876 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:50,878 [main:117] - GENERATED CALL = (parentProp).concat("svjhy")
2021-03-12 03:12:50,878 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8bf2623]]
2021-03-12 03:12:50,878 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8bf2623]
2021-03-12 03:12:50,997 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:50,997 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:50,999 [main:117] - GENERATED CALL = (parentProp).takeLastWhile({a: Char -> false})
2021-03-12 03:12:50,999 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]]
2021-03-12 03:12:50,999 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]
2021-03-12 03:12:50,999 [main:117] - GENERATED CALL = (parentProp).replaceIndentByMargin(sideEffects, parentSideEffects)
2021-03-12 03:12:50,999 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]]
2021-03-12 03:12:50,999 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]
2021-03-12 03:12:50,999 [main:117] - GENERATED CALL = (parentProp).trimEnd()
2021-03-12 03:12:50,999 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]]
2021-03-12 03:12:50,999 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]
2021-03-12 03:12:51,118 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:51,119 [main:117] - GENERATED CALL = (parentProp).substringAfterLast('殛', null.toString())
2021-03-12 03:12:51,119 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]]
2021-03-12 03:12:51,119 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]
2021-03-12 03:12:51,119 [main:117] - GENERATED CALL = (parentProp).lowercase()
2021-03-12 03:12:51,119 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]]
2021-03-12 03:12:51,119 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]
2021-03-12 03:12:51,238 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:12:51,239 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:51,240 [main:117] - GENERATED CALL = (parentProp).filterIndexed({a: Int, b: Char -> true})
2021-03-12 03:12:51,241 [main:61] - replacement of (C("fqowo").grandParentProp).drop(justForUsageInClosure) + "#second" of type String is (parentProp).lowercase()
2021-03-12 03:12:51,358 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:51,358 [main:66] - Compilation checking started
2021-03-12 03:12:51,794 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:51,795 [main:53] - replacing (a1, String)
2021-03-12 03:12:51,795 [main:50] - replacing a1 String
2021-03-12 03:12:51,795 [main:54] - Getting value of type String
2021-03-12 03:12:51,940 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:51,941 [main:58] - GENERATED VALUE OF TYPE String = "yuuuj"
2021-03-12 03:12:51,942 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:52,067 [main:67] - randomType = Double?
2021-03-12 03:12:52,184 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:12:52,217 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:12:52,217 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:52,373 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:52,374 [main:78] - Generated call from random type = (0.2640026687380791)?.toInt().toString(-2035386765)
2021-03-12 03:12:52,374 [main:106] - GETTING String from String
2021-03-12 03:12:52,397 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]]
2021-03-12 03:12:52,397 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]
2021-03-12 03:12:52,512 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:52,513 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceBeforeLast('', C("fqowo").grandParentProp, null.toString())
2021-03-12 03:12:52,513 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]]
2021-03-12 03:12:52,513 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]
2021-03-12 03:12:52,630 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:52,631 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:52,632 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).filter({a: Char -> true})
2021-03-12 03:12:52,632 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5434e4f7]]
2021-03-12 03:12:52,632 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5434e4f7]
2021-03-12 03:12:52,771 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:52,888 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:53,009 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:53,010 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replace('稜', 'ೳ', true)
2021-03-12 03:12:53,010 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:12:53,010 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:12:53,139 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:53,141 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:12:53,141 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).get(316673553).titlecase()
2021-03-12 03:12:53,141 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]]
2021-03-12 03:12:53,141 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]
2021-03-12 03:12:53,258 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:53,260 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).substringBefore('珓', null.toString())
2021-03-12 03:12:53,260 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]]
2021-03-12 03:12:53,260 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]
2021-03-12 03:12:53,376 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:53,377 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:53,378 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).filterNot({a: Char -> false})
2021-03-12 03:12:53,378 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:12:53,378 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:12:53,497 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:53,501 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).removePrefix("tysae")
2021-03-12 03:12:53,501 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]]
2021-03-12 03:12:53,501 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]
2021-03-12 03:12:53,501 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).toUpperCase()
2021-03-12 03:12:53,501 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]]
2021-03-12 03:12:53,501 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]
2021-03-12 03:12:53,619 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:53,620 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).takeLast(-1439330308)
2021-03-12 03:12:53,620 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]]
2021-03-12 03:12:53,620 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:12:53,739 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:53,857 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:53,858 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]
2021-03-12 03:12:53,977 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:54,095 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:54,096 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).subSequence(1331528875, 1734799605).substring(1122479839, -1274738999)
2021-03-12 03:12:54,096 [main:61] - replacement of a1 of type String is C("fqowo").grandParentProp
2021-03-12 03:12:54,215 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:54,215 [main:53] - replacing (sideEffects, String)
2021-03-12 03:12:54,215 [main:50] - replacing sideEffects String
2021-03-12 03:12:54,215 [main:54] - Getting value of type String
2021-03-12 03:12:54,331 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:54,332 [main:58] - GENERATED VALUE OF TYPE String = "uivtw"
2021-03-12 03:12:54,333 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:54,596 [main:67] - randomType = HashSet<UByte>
2021-03-12 03:12:54,713 [main:302] - generating value of type = HashSet<UByte> false depth = 0
2021-03-12 03:12:54,869 [main:43] - GENERATING CALL OF fun <E> HashSet(elements: kotlin.collections.Collection<UByte>): HashSet<UByte> = TODO()
2021-03-12 03:12:54,871 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(elements: kotlin.collections.Collection<UByte>): HashSet<UByte> = TODO()
2021-03-12 03:12:55,117 [main:302] - generating value of type = Collection<UByte> false depth = 3
2021-03-12 03:12:55,238 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: UByte): Collection<UByte> = TODO()
2021-03-12 03:12:55,239 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: UByte): Collection<UByte> = TODO()
2021-03-12 03:12:55,360 [main:302] - generating value of type = UByte true depth = 6
2021-03-12 03:12:55,361 [main:95] - GENERATED = mutableListOf<UByte>(77.toUByte())
2021-03-12 03:12:55,361 [main:95] - GENERATED = HashSet<UByte>(mutableListOf<UByte>(77.toUByte()))
2021-03-12 03:12:55,460 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@3a288579]
2021-03-12 03:12:55,460 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e29ec7]
2021-03-12 03:12:55,579 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:55,700 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:55,821 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:55,944 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:56,064 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:12:56,188 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 03:12:56,189 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:12:56,193 [main:78] - Generated call from random type = (HashSet<UByte>(mutableListOf<UByte>(77.toUByte()))).toArray().joinToString("bdpui", "kuice", "cwkqf", -338045435, "kretc", {a: T -> "wonnw"})
2021-03-12 03:12:56,193 [main:106] - GETTING String from String
2021-03-12 03:12:56,210 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]]
2021-03-12 03:12:56,210 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]
2021-03-12 03:12:56,328 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:56,329 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).takeLast(-442842411)
2021-03-12 03:12:56,329 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@739964f]]
2021-03-12 03:12:56,330 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@739964f]
2021-03-12 03:12:56,445 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:56,563 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:56,683 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:56,684 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceFirst('鍼', '归', true)
2021-03-12 03:12:56,684 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]]
2021-03-12 03:12:56,684 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]
2021-03-12 03:12:56,684 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).decapitalize()
2021-03-12 03:12:56,685 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5434e4f7]]
2021-03-12 03:12:56,685 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5434e4f7]
2021-03-12 03:12:56,802 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:56,919 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:57,038 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:12:57,039 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replace('뼧', '靌', true)
2021-03-12 03:12:57,039 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]]
2021-03-12 03:12:57,039 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]
2021-03-12 03:12:57,154 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:57,270 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:57,271 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).padEnd(1547876452, '岸')
2021-03-12 03:12:57,271 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]]
2021-03-12 03:12:57,271 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]
2021-03-12 03:12:57,272 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).trimEnd()
2021-03-12 03:12:57,272 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8bf2623]]
2021-03-12 03:12:57,272 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8bf2623]
2021-03-12 03:12:57,422 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:12:57,423 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:12:57,425 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).takeLastWhile({a: Char -> true})
2021-03-12 03:12:57,425 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]]
2021-03-12 03:12:57,425 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]
2021-03-12 03:12:57,425 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).reversed()
2021-03-12 03:12:57,425 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]]
2021-03-12 03:12:57,425 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]
2021-03-12 03:12:57,542 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:57,662 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:12:57,663 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).padStart(-555919914, '魢')
2021-03-12 03:12:57,663 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]]
2021-03-12 03:12:57,663 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]
2021-03-12 03:12:57,663 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).lowercase()
2021-03-12 03:12:57,664 [main:61] - replacement of sideEffects of type String is (C("fqowo").grandParentProp).lowercase()
2021-03-12 03:12:57,782 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:57,784 [main:53] - replacing (justForUsageInParentClosure, String)
2021-03-12 03:12:57,785 [main:50] - replacing justForUsageInParentClosure String
2021-03-12 03:12:57,785 [main:54] - Getting value of type String
2021-03-12 03:12:57,904 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:57,905 [main:58] - GENERATED VALUE OF TYPE String = "ampxw"
2021-03-12 03:12:57,905 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:57,909 [main:67] - randomType = C
2021-03-12 03:12:58,027 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:12:58,028 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:12:58,146 [main:194] - Type params = []
2021-03-12 03:12:58,264 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:12:58,317 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45c0d5dc]
2021-03-12 03:12:58,317 [main:78] - Generated call from random type = (C("xsekr")).grandParentProp.substring(arg)
2021-03-12 03:12:58,318 [main:106] - GETTING String from Int
2021-03-12 03:12:58,352 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:12:58,352 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:12:58,352 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:12:58,353 [main:117] - GENERATED CALL = (arg).toByte().toString(arg)
2021-03-12 03:12:58,353 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:58,353 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:58,353 [main:117] - GENERATED CALL = (arg).toString(justForUsageInClosure)
2021-03-12 03:12:58,353 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:58,353 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:12:58,353 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:58,353 [main:117] - GENERATED CALL = (arg).compareTo(arg).toString(justForUsageInClosure)
2021-03-12 03:12:58,353 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:12:58,353 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:12:58,353 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:12:58,353 [main:117] - GENERATED CALL = (arg).toLong().toString(arg)
2021-03-12 03:12:58,353 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:12:58,354 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:58,354 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:12:58,354 [main:117] - GENERATED CALL = (arg).toChar().lowercase()
2021-03-12 03:12:58,354 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:12:58,354 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:58,354 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:12:58,354 [main:117] - GENERATED CALL = (arg).toChar().uppercase()
2021-03-12 03:12:58,354 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:12:58,354 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:12:58,354 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:12:58,354 [main:117] - GENERATED CALL = (arg).toChar().titlecase()
2021-03-12 03:12:58,354 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:12:58,354 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:12:58,354 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:12:58,472 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:58,474 [main:117] - GENERATED CALL = (arg).toInt().toString(1241124531)
2021-03-12 03:12:58,474 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:12:58,474 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:12:58,474 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:12:58,474 [main:117] - GENERATED CALL = (arg).toShort().toString(justForUsageInClosure)
2021-03-12 03:12:58,474 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:12:58,474 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:12:58,594 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:12:58,595 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:12:58,714 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:12:58,715 [main:117] - GENERATED CALL = (arg).div(564032630756803210).toString(-707952481)
2021-03-12 03:12:58,715 [main:61] - replacement of justForUsageInParentClosure of type String is (C("xsekr")).grandParentProp.substring(arg)
2021-03-12 03:12:58,831 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:12:58,831 [main:66] - Compilation checking started
2021-03-12 03:12:59,302 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:12:59,302 [main:53] - replacing ("", String)
2021-03-12 03:12:59,302 [main:50] - replacing "" String
2021-03-12 03:12:59,302 [main:54] - Getting value of type String
2021-03-12 03:12:59,428 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:12:59,429 [main:58] - GENERATED VALUE OF TYPE String = "olqfk"
2021-03-12 03:12:59,430 [main:61] - GENERATED IS CALL =false
2021-03-12 03:12:59,820 [main:67] - randomType = Triple<UInt, C, Byte>
2021-03-12 03:12:59,940 [main:302] - generating value of type = Triple<UInt, C, Byte> false depth = 0
2021-03-12 03:13:00,062 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UInt, second: C, third: Byte): Triple<UInt, C, Byte> = TODO()
2021-03-12 03:13:00,064 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UInt, second: C, third: Byte): Triple<UInt, C, Byte> = TODO()
2021-03-12 03:13:00,224 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 03:13:00,226 [main:302] - generating value of type = C false depth = 3
2021-03-12 03:13:00,227 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:13:00,344 [main:194] - Type params = []
2021-03-12 03:13:00,463 [main:302] - generating value of type = String true depth = 5
2021-03-12 03:13:00,464 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 03:13:00,465 [main:95] - GENERATED = Triple<UInt, C, Byte>(1641080246.toUInt(), C("hcwil"), 51)
2021-03-12 03:13:00,478 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36e0516f]
2021-03-12 03:13:00,598 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:00,599 [main:78] - Generated call from random type = (Triple<UInt, C, Byte>(1641080246.toUInt(), C("hcwil"), 51)).first.toString(2137632001)
2021-03-12 03:13:00,599 [main:106] - GETTING String from String
2021-03-12 03:13:00,622 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]]
2021-03-12 03:13:00,622 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]
2021-03-12 03:13:00,738 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:00,863 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:00,865 [main:117] - GENERATED CALL = (null.toString()).substringAfter('꧍', "dznia")
2021-03-12 03:13:00,865 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]]
2021-03-12 03:13:00,865 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]
2021-03-12 03:13:00,865 [main:117] - GENERATED CALL = (null.toString()).reversed()
2021-03-12 03:13:00,865 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]]
2021-03-12 03:13:00,865 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]
2021-03-12 03:13:00,986 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:00,987 [main:117] - GENERATED CALL = (null.toString()).dropLast(815309415)
2021-03-12 03:13:00,987 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]]
2021-03-12 03:13:00,987 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]
2021-03-12 03:13:00,987 [main:117] - GENERATED CALL = (null.toString()).toUpperCase()
2021-03-12 03:13:00,987 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]]
2021-03-12 03:13:00,987 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]
2021-03-12 03:13:01,105 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:01,106 [main:117] - GENERATED CALL = (null.toString()).replaceIndentByMargin("xkikg", C("fqowo").grandParentProp)
2021-03-12 03:13:01,106 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:13:01,106 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:01,223 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:01,224 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:13:01,225 [main:117] - GENERATED CALL = (null.toString()).get(-2080611511).titlecase()
2021-03-12 03:13:01,225 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:13:01,225 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:13:01,344 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:01,345 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:13:01,464 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:01,465 [main:117] - GENERATED CALL = (null.toString()).compareTo("zheyq").toString(-648432182)
2021-03-12 03:13:01,465 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]]
2021-03-12 03:13:01,465 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:01,590 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:01,709 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:01,710 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]
2021-03-12 03:13:01,829 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:01,947 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:01,948 [main:117] - GENERATED CALL = (null.toString()).subSequence(2070876331, -994709347).substring(-1046291802, 1177308189)
2021-03-12 03:13:01,948 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]]
2021-03-12 03:13:01,948 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]
2021-03-12 03:13:02,065 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:02,066 [main:117] - GENERATED CALL = (null.toString()).substringBeforeLast('ㅭ', null.toString())
2021-03-12 03:13:02,067 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:13:02,067 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:02,185 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:02,186 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:13:02,305 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:02,306 [main:117] - GENERATED CALL = (null.toString()).get(-1122517402).plus("cezvy")
2021-03-12 03:13:02,306 [main:61] - replacement of "" of type String is (null.toString()).get(-2080611511).titlecase()
2021-03-12 03:13:02,427 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:02,427 [main:53] - replacing ("first", String)
2021-03-12 03:13:02,428 [main:50] - replacing "first" String
2021-03-12 03:13:02,428 [main:54] - Getting value of type String
2021-03-12 03:13:02,547 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:02,548 [main:58] - GENERATED VALUE OF TYPE String = "qvepq"
2021-03-12 03:13:02,548 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:02,807 [main:67] - randomType = Sequence<C>
2021-03-12 03:13:02,807 [main:106] - GETTING String from String
2021-03-12 03:13:02,862 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]]
2021-03-12 03:13:02,862 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]
2021-03-12 03:13:02,979 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:02,980 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:02,981 [main:117] - GENERATED CALL = (null.toString()).filter({a: Char -> true})
2021-03-12 03:13:02,981 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8bf2623]]
2021-03-12 03:13:02,981 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8bf2623]
2021-03-12 03:13:03,099 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:03,100 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:03,101 [main:117] - GENERATED CALL = (null.toString()).takeLastWhile({a: Char -> true})
2021-03-12 03:13:03,101 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e03b28]]
2021-03-12 03:13:03,101 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e03b28]
2021-03-12 03:13:03,101 [main:117] - GENERATED CALL = (null.toString()).uppercase()
2021-03-12 03:13:03,102 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]]
2021-03-12 03:13:03,102 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]
2021-03-12 03:13:03,220 [main:117] - GENERATED CALL = (null.toString()).plus(null)
2021-03-12 03:13:03,220 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]]
2021-03-12 03:13:03,384 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]
2021-03-12 03:13:03,502 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:03,503 [main:117] - GENERATED CALL = (null.toString()).replaceAfter('뀗', C("fqowo").grandParentProp, C("fqowo").grandParentProp)
2021-03-12 03:13:03,503 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]]
2021-03-12 03:13:03,503 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]
2021-03-12 03:13:03,620 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:03,740 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:03,741 [main:117] - GENERATED CALL = (null.toString()).commonSuffixWith(StringBuilder(), false)
2021-03-12 03:13:03,741 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]]
2021-03-12 03:13:03,741 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]
2021-03-12 03:13:03,859 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:03,976 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:04,094 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:04,099 [main:117] - GENERATED CALL = (null.toString()).replaceRange(-693007575, -1594436345, StringBuilder())
2021-03-12 03:13:04,099 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]]
2021-03-12 03:13:04,099 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]
2021-03-12 03:13:04,099 [main:117] - GENERATED CALL = (null.toString()).toLowerCase()
2021-03-12 03:13:04,099 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]]
2021-03-12 03:13:04,099 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:04,216 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:04,336 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:04,337 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]
2021-03-12 03:13:04,455 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:13:04,577 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:13:04,579 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:13:04,953 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:13:04,954 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 03:13:04,956 [main:95] - GENERATED = Regex("lggcy", kotlin.text.RegexOption.MULTILINE)
2021-03-12 03:13:05,076 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 03:13:05,077 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:13:05,207 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:13:05,209 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:13:05,453 [main:302] - generating value of type = Int true depth = 4
2021-03-12 03:13:05,454 [main:95] - GENERATED = StringBuilder(-1003175543)
2021-03-12 03:13:05,454 [main:117] - GENERATED CALL = (null.toString()).subSequence(1768044643, 1354152842).replace(Regex("lggcy", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> StringBuilder(-1003175543)})
2021-03-12 03:13:05,455 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]]
2021-03-12 03:13:05,455 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]
2021-03-12 03:13:05,570 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:05,572 [main:117] - GENERATED CALL = (null.toString()).substringBefore('冖', C("fqowo").grandParentProp)
2021-03-12 03:13:05,572 [main:61] - replacement of "first" of type String is (null.toString()).toLowerCase()
2021-03-12 03:13:05,688 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:05,690 [main:53] - replacing (parentProp, String)
2021-03-12 03:13:05,691 [main:50] - replacing parentProp String
2021-03-12 03:13:05,691 [main:54] - Getting value of type String
2021-03-12 03:13:05,844 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:05,845 [main:58] - GENERATED VALUE OF TYPE String = "gjaob"
2021-03-12 03:13:05,845 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:05,847 [main:67] - randomType = Long
2021-03-12 03:13:05,964 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:13:05,996 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72943338]
2021-03-12 03:13:05,997 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:13:05,997 [main:78] - Generated call from random type = (-7328001477361444860).toByte().toString(justForUsageInClosure)
2021-03-12 03:13:05,998 [main:106] - GETTING String from Int
2021-03-12 03:13:06,028 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:13:06,028 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:13:06,028 [main:117] - GENERATED CALL = (arg).toString(arg)
2021-03-12 03:13:06,028 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:13:06,029 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:13:06,029 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:13:06,150 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:06,151 [main:117] - GENERATED CALL = (arg).toShort().toString(769816452)
2021-03-12 03:13:06,151 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:13:06,151 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:13:06,151 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:13:06,151 [main:117] - GENERATED CALL = (arg).toChar().lowercase()
2021-03-12 03:13:06,151 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:13:06,151 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:13:06,151 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:13:06,270 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:06,271 [main:117] - GENERATED CALL = (arg).toInt().toString(2032824437)
2021-03-12 03:13:06,271 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:13:06,271 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:13:06,271 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:13:06,272 [main:117] - GENERATED CALL = (arg).toLong().toString(arg)
2021-03-12 03:13:06,272 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:13:06,272 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:13:06,272 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:13:06,272 [main:117] - GENERATED CALL = (arg).compareTo(arg).toString(arg)
2021-03-12 03:13:06,272 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:13:06,272 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:13:06,272 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:13:06,272 [main:117] - GENERATED CALL = (arg).toChar().titlecase()
2021-03-12 03:13:06,272 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:13:06,272 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:13:06,273 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:13:06,273 [main:117] - GENERATED CALL = (arg).toChar().plus(null.toString())
2021-03-12 03:13:06,273 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:13:06,273 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:13:06,389 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:13:06,390 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:13:06,391 [main:117] - GENERATED CALL = (arg).div(-8473663293662288395).toString(justForUsageInClosure)
2021-03-12 03:13:06,391 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:13:06,391 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:13:06,391 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:13:06,391 [main:117] - GENERATED CALL = (arg).toChar().uppercase()
2021-03-12 03:13:06,391 [main:61] - replacement of parentProp of type String is (arg).div(-8473663293662288395).toString(justForUsageInClosure)
2021-03-12 03:13:06,507 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:06,508 [main:66] - Compilation checking started
2021-03-12 03:13:06,822 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            (arg).div(-8473663293662288395).toString(justForUsageInClosure) = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:06,824 [main:53] - replacing (parentSideEffects, String)
2021-03-12 03:13:06,825 [main:50] - replacing parentSideEffects String
2021-03-12 03:13:06,825 [main:54] - Getting value of type String
2021-03-12 03:13:06,941 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:06,941 [main:58] - GENERATED VALUE OF TYPE String = "wvnms"
2021-03-12 03:13:06,942 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:06,945 [main:67] - randomType = C
2021-03-12 03:13:07,072 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:13:07,073 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:13:07,193 [main:194] - Type params = []
2021-03-12 03:13:07,312 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:13:07,318 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]
2021-03-12 03:13:07,448 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:07,449 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:07,450 [main:78] - Generated call from random type = (C("dmape")).grandParentProp.filterNot({a: Char -> false})
2021-03-12 03:13:07,451 [main:106] - GETTING String from Int
2021-03-12 03:13:07,482 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:13:07,482 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:13:07,482 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:13:07,482 [main:117] - GENERATED CALL = (justForUsageInClosure).toInt().toString(arg)
2021-03-12 03:13:07,482 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:13:07,482 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:13:07,482 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:13:07,482 [main:117] - GENERATED CALL = (justForUsageInClosure).toLong().toString(justForUsageInClosure)
2021-03-12 03:13:07,483 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:13:07,483 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:13:07,483 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:13:07,483 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().uppercase()
2021-03-12 03:13:07,483 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:13:07,483 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:13:07,483 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:13:07,483 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().titlecase()
2021-03-12 03:13:07,483 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:13:07,483 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:13:07,483 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:13:07,483 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().lowercase()
2021-03-12 03:13:07,483 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:13:07,483 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:13:07,484 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:13:07,484 [main:117] - GENERATED CALL = (justForUsageInClosure).toChar().plus(sideEffects)
2021-03-12 03:13:07,484 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:13:07,484 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:13:07,609 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:13:07,610 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:13:07,610 [main:117] - GENERATED CALL = (justForUsageInClosure).div(4957764931941249715).toString(arg)
2021-03-12 03:13:07,610 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:13:07,610 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:13:07,611 [main:117] - GENERATED CALL = (justForUsageInClosure).toString(justForUsageInClosure)
2021-03-12 03:13:07,611 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:13:07,611 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:13:07,611 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:13:07,611 [main:117] - GENERATED CALL = (justForUsageInClosure).toShort().toString(justForUsageInClosure)
2021-03-12 03:13:07,611 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:13:07,611 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:13:07,611 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:13:07,611 [main:117] - GENERATED CALL = (justForUsageInClosure).toByte().toString(justForUsageInClosure)
2021-03-12 03:13:07,611 [main:61] - replacement of parentSideEffects of type String is (justForUsageInClosure).toLong().toString(justForUsageInClosure)
2021-03-12 03:13:07,725 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:07,726 [main:66] - Compilation checking started
2021-03-12 03:13:08,048 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            (justForUsageInClosure).toLong().toString(justForUsageInClosure) += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:08,050 [main:53] - replacing (A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString(), String)
2021-03-12 03:13:08,051 [main:50] - replacing A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString() String
2021-03-12 03:13:08,051 [main:54] - Getting value of type String
2021-03-12 03:13:08,171 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:08,172 [main:58] - GENERATED VALUE OF TYPE String = "xbazl"
2021-03-12 03:13:08,172 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:08,433 [main:67] - randomType = Collection<C?>
2021-03-12 03:13:08,433 [main:106] - GETTING String from String
2021-03-12 03:13:08,454 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]]
2021-03-12 03:13:08,454 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]
2021-03-12 03:13:08,621 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:08,744 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:08,746 [main:117] - GENERATED CALL = (prop).commonPrefixWith("dmunm", true)
2021-03-12 03:13:08,746 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:13:08,746 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:08,864 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:08,865 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:13:08,865 [main:117] - GENERATED CALL = (prop).get(682441070).plus(C("fqowo").grandParentProp)
2021-03-12 03:13:08,865 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]]
2021-03-12 03:13:08,865 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:08,866 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]
2021-03-12 03:13:08,983 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:13:09,109 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:13:09,111 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:13:09,489 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:13:09,490 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 03:13:09,491 [main:95] - GENERATED = Regex("rpzul", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 03:13:09,607 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 03:13:09,608 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:13:09,729 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:13:09,730 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:13:09,974 [main:302] - generating value of type = String true depth = 4
2021-03-12 03:13:09,976 [main:95] - GENERATED = StringBuilder("snwpv")
2021-03-12 03:13:09,976 [main:117] - GENERATED CALL = (prop).subSequence(justForUsageInClosure, justForUsageInClosure).replace(Regex("rpzul", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> StringBuilder("snwpv")})
2021-03-12 03:13:09,976 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]]
2021-03-12 03:13:09,976 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]
2021-03-12 03:13:09,976 [main:117] - GENERATED CALL = (prop).trimStart()
2021-03-12 03:13:09,976 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]]
2021-03-12 03:13:09,976 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]
2021-03-12 03:13:10,092 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:13:10,093 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:13:10,094 [main:117] - GENERATED CALL = (prop).replaceFirstChar({a: Char -> '謁'})
2021-03-12 03:13:10,095 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]]
2021-03-12 03:13:10,095 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]
2021-03-12 03:13:10,095 [main:117] - GENERATED CALL = (prop).trimEnd()
2021-03-12 03:13:10,095 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]]
2021-03-12 03:13:10,095 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]
2021-03-12 03:13:10,211 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:10,215 [main:117] - GENERATED CALL = (prop).removeSurrounding("ulhum")
2021-03-12 03:13:10,215 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]]
2021-03-12 03:13:10,215 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]
2021-03-12 03:13:10,334 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:10,335 [main:117] - GENERATED CALL = (prop).padEnd(justForUsageInClosure, '釀')
2021-03-12 03:13:10,335 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:13:10,335 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:10,335 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:13:10,335 [main:117] - GENERATED CALL = (prop).get(justForUsageInClosure).uppercase()
2021-03-12 03:13:10,335 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]]
2021-03-12 03:13:10,335 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:10,335 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]
2021-03-12 03:13:10,451 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:10,572 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:13:10,574 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:13:10,822 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:13:10,823 [main:95] - GENERATED = StringBuilder(-1891914212)
2021-03-12 03:13:10,943 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:10,944 [main:117] - GENERATED CALL = (prop).subSequence(justForUsageInClosure, justForUsageInClosure).commonPrefixWith(StringBuilder(-1891914212), true)
2021-03-12 03:13:10,944 [main:61] - replacement of A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString() of type String is (prop).padEnd(justForUsageInClosure, '釀')
2021-03-12 03:13:11,062 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:11,062 [main:66] - Compilation checking started
2021-03-12 03:13:11,369 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = (prop).padEnd(justForUsageInClosure, '釀')
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:11,371 [main:53] - replacing (sideEffects, String)
2021-03-12 03:13:11,372 [main:50] - replacing sideEffects String
2021-03-12 03:13:11,372 [main:54] - Getting value of type String
2021-03-12 03:13:11,527 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:11,528 [main:58] - GENERATED VALUE OF TYPE String = "ihkpx"
2021-03-12 03:13:11,528 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:11,655 [main:67] - randomType = Float
2021-03-12 03:13:11,773 [main:302] - generating value of type = Float true depth = 0
2021-03-12 03:13:11,808 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:13:11,809 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:13:11,809 [main:78] - Generated call from random type = (0.21140069f).toInt().toString(justForUsageInClosure)
2021-03-12 03:13:11,809 [main:106] - GETTING String from String
2021-03-12 03:13:11,825 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]]
2021-03-12 03:13:11,825 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]
2021-03-12 03:13:11,941 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:11,942 [main:117] - GENERATED CALL = (null.toString()).replaceIndent("ezgde")
2021-03-12 03:13:11,942 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]]
2021-03-12 03:13:11,942 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]
2021-03-12 03:13:11,942 [main:117] - GENERATED CALL = (null.toString()).toLowerCase()
2021-03-12 03:13:11,942 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f4acca]]
2021-03-12 03:13:11,942 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f4acca]
2021-03-12 03:13:11,943 [main:117] - GENERATED CALL = (null.toString()).trim()
2021-03-12 03:13:11,943 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]]
2021-03-12 03:13:11,943 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]
2021-03-12 03:13:12,061 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:12,180 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:12,181 [main:117] - GENERATED CALL = (null.toString()).replaceAfterLast('', parentSideEffects, "euakd")
2021-03-12 03:13:12,181 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]]
2021-03-12 03:13:12,181 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]
2021-03-12 03:13:12,299 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:12,300 [main:117] - GENERATED CALL = (null.toString()).concat("xaqbx")
2021-03-12 03:13:12,300 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]]
2021-03-12 03:13:12,300 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]
2021-03-12 03:13:12,416 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:13:12,417 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:12,418 [main:117] - GENERATED CALL = (null.toString()).filterIndexed({a: Int, b: Char -> true})
2021-03-12 03:13:12,418 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]]
2021-03-12 03:13:12,418 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]
2021-03-12 03:13:12,536 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:12,537 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:12,538 [main:117] - GENERATED CALL = (null.toString()).dropWhile({a: Char -> true})
2021-03-12 03:13:12,538 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]]
2021-03-12 03:13:12,538 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]
2021-03-12 03:13:12,657 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:12,658 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:12,659 [main:117] - GENERATED CALL = (null.toString()).dropLastWhile({a: Char -> true})
2021-03-12 03:13:12,660 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]]
2021-03-12 03:13:12,660 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]
2021-03-12 03:13:12,778 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:12,779 [main:117] - GENERATED CALL = (null.toString()).substringAfterLast('㰄', sideEffects)
2021-03-12 03:13:12,779 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]]
2021-03-12 03:13:12,779 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]
2021-03-12 03:13:12,901 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:12,902 [main:117] - GENERATED CALL = (null.toString()).replaceBeforeLast('鏁', sideEffects, sideEffects)
2021-03-12 03:13:12,902 [main:61] - replacement of sideEffects of type String is (null.toString()).replaceAfterLast('', parentSideEffects, "euakd")
2021-03-12 03:13:13,024 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:13,025 [main:66] - Compilation checking started
2021-03-12 03:13:13,350 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            (null.toString()).replaceAfterLast('', parentSideEffects, "euakd") += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:13,353 [main:53] - replacing (sideEffects, String)
2021-03-12 03:13:13,354 [main:50] - replacing sideEffects String
2021-03-12 03:13:13,354 [main:54] - Getting value of type String
2021-03-12 03:13:13,475 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:13,476 [main:58] - GENERATED VALUE OF TYPE String = "ozuqd"
2021-03-12 03:13:13,477 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:13,480 [main:67] - randomType = C
2021-03-12 03:13:13,604 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:13:13,605 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:13:13,723 [main:194] - Type params = []
2021-03-12 03:13:13,841 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:13:13,847 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]
2021-03-12 03:13:13,847 [main:78] - Generated call from random type = (C("nhxte")).grandParentProp.trimIndent()
2021-03-12 03:13:13,847 [main:61] - replacement of sideEffects of type String is (C("nhxte")).grandParentProp.trimIndent()
2021-03-12 03:13:13,963 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:13,964 [main:66] - Compilation checking started
2021-03-12 03:13:14,277 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = ((null.toString()).length.countOneBits()).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            (C("nhxte")).grandParentProp.trimIndent() += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:14,278 [main:53] - replacing (a3 != (justForUsageInParentClosure).replaceFirstChar({a: Char -> '⃀'}), Boolean)
2021-03-12 03:13:14,278 [main:50] - replacing a3 != (justForUsageInParentClosure).replaceFirstChar({a: Char -> '⃀'}) Boolean
2021-03-12 03:13:14,278 [main:54] - Getting value of type Boolean
2021-03-12 03:13:14,431 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:14,432 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 03:13:14,432 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:14,560 [main:67] - randomType = UByte
2021-03-12 03:13:14,682 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:13:14,717 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5c28d26c]
2021-03-12 03:13:14,839 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:13:14,839 [main:78] - Generated call from random type = (98.toUByte()).equals("ygmjt")
2021-03-12 03:13:14,840 [main:106] - GETTING Boolean from String
2021-03-12 03:13:14,864 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@662f0405]]
2021-03-12 03:13:14,864 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]
2021-03-12 03:13:14,981 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:13:14,982 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@662f0405]
2021-03-12 03:13:15,101 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:13:15,101 [main:117] - GENERATED CALL = (null.toString()).equals("vxrua").equals("mhegd")
2021-03-12 03:13:15,101 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7e2acf]]
2021-03-12 03:13:15,101 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7e2acf]
2021-03-12 03:13:15,220 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:15,338 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:15,460 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:13:15,461 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:13:15,709 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:13:15,833 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:13:15,835 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:13:16,080 [main:302] - generating value of type = String true depth = 6
2021-03-12 03:13:16,081 [main:95] - GENERATED = StringBuilder("bfbtk")
2021-03-12 03:13:16,081 [main:95] - GENERATED = StringBuilder(StringBuilder("bfbtk"))
2021-03-12 03:13:16,201 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:16,327 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:16,447 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:16,448 [main:117] - GENERATED CALL = (null.toString()).regionMatches(-563443212, StringBuilder(StringBuilder("bfbtk")), 553894082, -2004935329, false)
2021-03-12 03:13:16,448 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2c799403]]
2021-03-12 03:13:16,448 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]
2021-03-12 03:13:16,573 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:13:16,574 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2c799403]
2021-03-12 03:13:16,574 [main:117] - GENERATED CALL = (null.toString()).equals("ndpfk").not()
2021-03-12 03:13:16,574 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5682849]]
2021-03-12 03:13:16,574 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]
2021-03-12 03:13:16,693 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:13:16,693 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5682849]
2021-03-12 03:13:16,810 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:16,811 [main:117] - GENERATED CALL = (null.toString()).equals("lsurd").and(false)
2021-03-12 03:13:16,811 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3143a772]]
2021-03-12 03:13:16,811 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:16,931 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:17,050 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:17,051 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3143a772]
2021-03-12 03:13:17,167 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:17,168 [main:117] - GENERATED CALL = (null.toString()).subSequence(-242634291, 730604818).hasSurrogatePairAt(615629484)
2021-03-12 03:13:17,168 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70251935]]
2021-03-12 03:13:17,168 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:17,330 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:17,452 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:17,453 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70251935]
2021-03-12 03:13:17,571 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:17,690 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:17,691 [main:117] - GENERATED CALL = (null.toString()).subSequence(-296267990, -1795697712).startsWith('', true)
2021-03-12 03:13:17,691 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@355e303]]
2021-03-12 03:13:17,691 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@355e303]
2021-03-12 03:13:17,691 [main:117] - GENERATED CALL = (null.toString()).toBoolean()
2021-03-12 03:13:17,692 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1010d71a]]
2021-03-12 03:13:17,692 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:17,811 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:17,933 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:17,934 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1010d71a]
2021-03-12 03:13:17,935 [main:117] - GENERATED CALL = (null.toString()).subSequence(605118123, -247240473).isNotBlank()
2021-03-12 03:13:17,935 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a77729]]
2021-03-12 03:13:17,935 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a77729]
2021-03-12 03:13:17,935 [main:117] - GENERATED CALL = (null.toString()).isBlank()
2021-03-12 03:13:17,935 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@6e85002b]]
2021-03-12 03:13:17,935 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:18,055 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:18,177 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:18,178 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@6e85002b]
2021-03-12 03:13:18,297 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:13:18,297 [main:117] - GENERATED CALL = (null.toString()).subSequence(-1597472667, 559180833).equals("esrms")
2021-03-12 03:13:18,297 [main:61] - replacement of a3 != (justForUsageInParentClosure).replaceFirstChar({a: Char -> '⃀'}) of type Boolean is (null.toString()).isBlank()
2021-03-12 03:13:18,416 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:18,417 [main:53] - replacing (null.toString() != "1#4#parentCaptured", Boolean)
2021-03-12 03:13:18,417 [main:50] - replacing null.toString() != "1#4#parentCaptured" Boolean
2021-03-12 03:13:18,417 [main:54] - Getting value of type Boolean
2021-03-12 03:13:18,536 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:18,537 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 03:13:18,699 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:18,970 [main:67] - randomType = List<C>
2021-03-12 03:13:18,971 [main:106] - GETTING Boolean from String
2021-03-12 03:13:18,990 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c37e05c]]
2021-03-12 03:13:18,990 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:19,112 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:19,113 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c37e05c]
2021-03-12 03:13:19,113 [main:117] - GENERATED CALL = (null.toString()).get(-521180189).isLetterOrDigit()
2021-03-12 03:13:19,113 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]]
2021-03-12 03:13:19,113 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]
2021-03-12 03:13:19,231 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:13:19,231 [main:117] - GENERATED CALL = (null.toString()).equals("kfpay")
2021-03-12 03:13:19,231 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@723ed9dd]]
2021-03-12 03:13:19,232 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:19,348 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:19,349 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@723ed9dd]
2021-03-12 03:13:19,349 [main:117] - GENERATED CALL = (null.toString()).get(-782437263).isUpperCase()
2021-03-12 03:13:19,350 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f286914]]
2021-03-12 03:13:19,350 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:19,466 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:19,467 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f286914]
2021-03-12 03:13:19,467 [main:117] - GENERATED CALL = (null.toString()).get(-1060833502).isISOControl()
2021-03-12 03:13:19,467 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@316768ff]]
2021-03-12 03:13:19,467 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:19,585 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:19,586 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@316768ff]
2021-03-12 03:13:19,586 [main:117] - GENERATED CALL = (null.toString()).get(-506946544).isSurrogate()
2021-03-12 03:13:19,586 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@355e303]]
2021-03-12 03:13:19,586 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@355e303]
2021-03-12 03:13:19,586 [main:117] - GENERATED CALL = (null.toString()).toBoolean()
2021-03-12 03:13:19,587 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff62665]]
2021-03-12 03:13:19,587 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:19,705 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:19,822 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:19,823 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff62665]
2021-03-12 03:13:19,944 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:20,065 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:20,067 [main:117] - GENERATED CALL = (null.toString()).subSequence(-1655995446, -348088437).endsWith('', true)
2021-03-12 03:13:20,067 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3fdc9]]
2021-03-12 03:13:20,067 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:20,184 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:20,186 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3fdc9]
2021-03-12 03:13:20,186 [main:117] - GENERATED CALL = (null.toString()).get(1935438408).isDefined()
2021-03-12 03:13:20,186 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23ba3826]]
2021-03-12 03:13:20,186 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23ba3826]
2021-03-12 03:13:20,186 [main:117] - GENERATED CALL = (null.toString()).isNotEmpty()
2021-03-12 03:13:20,186 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@156087f]]
2021-03-12 03:13:20,186 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]
2021-03-12 03:13:20,304 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:13:20,304 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@156087f]
2021-03-12 03:13:20,468 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:20,469 [main:117] - GENERATED CALL = (null.toString()).equals("cgddb").or(true)
2021-03-12 03:13:20,469 [main:61] - replacement of null.toString() != "1#4#parentCaptured" of type Boolean is (null.toString()).equals("cgddb").or(true)
2021-03-12 03:13:20,588 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:20,590 [main:53] - replacing (((null.toString()).length.countOneBits()).toString(), String)
2021-03-12 03:13:20,591 [main:50] - replacing ((null.toString()).length.countOneBits()).toString() String
2021-03-12 03:13:20,591 [main:54] - Getting value of type String
2021-03-12 03:13:20,708 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:20,709 [main:58] - GENERATED VALUE OF TYPE String = "mnzey"
2021-03-12 03:13:20,709 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:20,711 [main:67] - randomType = Double
2021-03-12 03:13:20,829 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:13:20,868 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:13:20,869 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:13:20,869 [main:78] - Generated call from random type = (0.9130134229477629).toInt().toString(arg)
2021-03-12 03:13:20,869 [main:61] - replacement of ((null.toString()).length.countOneBits()).toString() of type String is (0.9130134229477629).toInt().toString(arg)
2021-03-12 03:13:20,988 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:20,988 [main:66] - Compilation checking started
2021-03-12 03:13:21,410 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:21,411 [main:53] - replacing ("", String)
2021-03-12 03:13:21,411 [main:50] - replacing "" String
2021-03-12 03:13:21,411 [main:54] - Getting value of type String
2021-03-12 03:13:21,554 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:21,555 [main:58] - GENERATED VALUE OF TYPE String = "lszct"
2021-03-12 03:13:21,555 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:21,825 [main:67] - randomType = LinkedHashSet<C>
2021-03-12 03:13:21,943 [main:302] - generating value of type = LinkedHashSet<C> false depth = 0
2021-03-12 03:13:22,067 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: C): LkedHashSet<C> = TODO()
2021-03-12 03:13:22,069 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: C): LkedHashSet<C> = TODO()
2021-03-12 03:13:22,188 [main:302] - generating value of type = C false depth = 3
2021-03-12 03:13:22,189 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:13:22,308 [main:194] - Type params = []
2021-03-12 03:13:22,427 [main:302] - generating value of type = String true depth = 5
2021-03-12 03:13:22,428 [main:95] - GENERATED = linkedSetOf<C>(C("dyeuo"))
2021-03-12 03:13:22,549 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@50cc747e]
2021-03-12 03:13:22,550 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46c1ef9e]
2021-03-12 03:13:22,550 [main:78] - Generated call from random type = (linkedSetOf<C>(C("dyeuo"))).toArray().contentDeepToString()
2021-03-12 03:13:22,550 [main:106] - GETTING String from String
2021-03-12 03:13:22,568 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]]
2021-03-12 03:13:22,568 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]
2021-03-12 03:13:22,685 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:13:22,686 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:13:22,687 [main:117] - GENERATED CALL = (null.toString()).replaceFirstChar({a: Char -> '늍'})
2021-03-12 03:13:22,687 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]]
2021-03-12 03:13:22,687 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]
2021-03-12 03:13:22,807 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:22,808 [main:117] - GENERATED CALL = (null.toString()).replaceAfter('쥉', null.toString(), null.toString())
2021-03-12 03:13:22,808 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]]
2021-03-12 03:13:22,808 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]
2021-03-12 03:13:22,808 [main:117] - GENERATED CALL = (null.toString()).concat(C("fqowo").grandParentProp)
2021-03-12 03:13:22,808 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]]
2021-03-12 03:13:22,808 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]
2021-03-12 03:13:22,925 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:22,926 [main:117] - GENERATED CALL = (null.toString()).replaceBeforeLast('縬', C("fqowo").grandParentProp, C("fqowo").grandParentProp)
2021-03-12 03:13:22,926 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]]
2021-03-12 03:13:22,926 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:23,044 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:23,161 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:23,162 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]
2021-03-12 03:13:23,281 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:23,282 [main:117] - GENERATED CALL = (null.toString()).subSequence(615266025, -1532142967).repeat(-415209956)
2021-03-12 03:13:23,282 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]]
2021-03-12 03:13:23,282 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]
2021-03-12 03:13:23,401 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:23,402 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:23,403 [main:117] - GENERATED CALL = (null.toString()).dropWhile({a: Char -> true})
2021-03-12 03:13:23,403 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]]
2021-03-12 03:13:23,403 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:23,559 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:23,679 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:23,680 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]
2021-03-12 03:13:23,801 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:23,921 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:23,922 [main:117] - GENERATED CALL = (null.toString()).subSequence(-1985986673, 1993904675).substring(-719996031, 440542735)
2021-03-12 03:13:23,922 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]]
2021-03-12 03:13:23,923 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]
2021-03-12 03:13:24,039 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:24,040 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:24,041 [main:117] - GENERATED CALL = (null.toString()).filterNot({a: Char -> false})
2021-03-12 03:13:24,041 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a5950b]]
2021-03-12 03:13:24,041 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:24,160 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:24,277 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:24,278 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a5950b]
2021-03-12 03:13:24,393 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:13:24,513 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 03:13:24,515 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 03:13:24,890 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:13:24,891 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 03:13:25,010 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Set<RegexOption> = TODO()
2021-03-12 03:13:25,012 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Set<RegexOption> = TODO()
2021-03-12 03:13:25,382 [main:302] - generating value of type = Int true depth = 6
2021-03-12 03:13:25,383 [main:302] - generating value of type = Float true depth = 6
2021-03-12 03:13:25,384 [main:95] - GENERATED = LinkedHashSet<RegexOption>(-1824850484, 0.5299719f)
2021-03-12 03:13:25,384 [main:95] - GENERATED = Regex("amsjx", LinkedHashSet<RegexOption>(-1824850484, 0.5299719f))
2021-03-12 03:13:25,384 [main:117] - GENERATED CALL = (null.toString()).subSequence(-950134580, 1570018986).replaceFirst(Regex("amsjx", LinkedHashSet<RegexOption>(-1824850484, 0.5299719f)), null.toString())
2021-03-12 03:13:25,384 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]]
2021-03-12 03:13:25,385 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]
2021-03-12 03:13:25,385 [main:117] - GENERATED CALL = (null.toString()).replaceIndent(null.toString())
2021-03-12 03:13:25,385 [main:61] - replacement of "" of type String is (null.toString()).replaceIndent(null.toString())
2021-03-12 03:13:25,503 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:25,505 [main:53] - replacing (sideEffects, String)
2021-03-12 03:13:25,506 [main:50] - replacing sideEffects String
2021-03-12 03:13:25,506 [main:54] - Getting value of type String
2021-03-12 03:13:25,624 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:25,625 [main:58] - GENERATED VALUE OF TYPE String = "koyqt"
2021-03-12 03:13:25,625 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:25,751 [main:67] - randomType = C?
2021-03-12 03:13:25,872 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:13:25,873 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:13:25,991 [main:194] - Type params = []
2021-03-12 03:13:26,109 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:13:26,117 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]
2021-03-12 03:13:26,235 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:13:26,236 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:26,237 [main:78] - Generated call from random type = (C("eahzt"))?.grandParentProp.filterIndexed({a: Int, b: Char -> false})
2021-03-12 03:13:26,237 [main:106] - GETTING String from String
2021-03-12 03:13:26,255 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]]
2021-03-12 03:13:26,255 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]
2021-03-12 03:13:26,255 [main:117] - GENERATED CALL = (parentProp).trimEnd()
2021-03-12 03:13:26,255 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]]
2021-03-12 03:13:26,256 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]
2021-03-12 03:13:26,372 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:26,373 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:26,374 [main:117] - GENERATED CALL = (parentProp).filter({a: Char -> true})
2021-03-12 03:13:26,374 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:13:26,374 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:26,493 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:26,494 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:13:26,494 [main:117] - GENERATED CALL = (parentProp).get(-1362762672).plus(parentSideEffects)
2021-03-12 03:13:26,494 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]]
2021-03-12 03:13:26,494 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]
2021-03-12 03:13:26,654 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:26,656 [main:117] - GENERATED CALL = (parentProp).replaceAfterLast('감', parentProp, prop)
2021-03-12 03:13:26,656 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]]
2021-03-12 03:13:26,656 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]
2021-03-12 03:13:26,656 [main:117] - GENERATED CALL = (parentProp).decapitalize()
2021-03-12 03:13:26,656 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:13:26,656 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:13:26,775 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:26,777 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:13:26,777 [main:117] - GENERATED CALL = (parentProp).compareTo("gwjwa").toString(justForUsageInClosure)
2021-03-12 03:13:26,777 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a5950b]]
2021-03-12 03:13:26,777 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:26,895 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:26,896 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a5950b]
2021-03-12 03:13:27,015 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:13:27,138 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:13:27,140 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:13:27,512 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:13:27,513 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 03:13:27,514 [main:95] - GENERATED = Regex("hnzaf", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 03:13:27,514 [main:117] - GENERATED CALL = (parentProp).subSequence(-1559708835, justForUsageInClosure).replaceFirst(Regex("hnzaf", kotlin.text.RegexOption.IGNORE_CASE), parentSideEffects)
2021-03-12 03:13:27,514 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]]
2021-03-12 03:13:27,514 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]
2021-03-12 03:13:27,629 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:13:28,027 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): Iterable<Int> = TODO()
2021-03-12 03:13:28,029 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): Iterable<Int> = TODO()
2021-03-12 03:13:28,151 [main:95] - GENERATED = LinkedHashSet<Collection<MutableMap<C, Double>>>()
2021-03-12 03:13:28,151 [main:117] - GENERATED CALL = (parentProp).slice(LinkedHashSet<Collection<MutableMap<C, Double>>>())
2021-03-12 03:13:28,151 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]]
2021-03-12 03:13:28,152 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]
2021-03-12 03:13:28,152 [main:117] - GENERATED CALL = (parentProp).dropLast(justForUsageInClosure)
2021-03-12 03:13:28,152 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]]
2021-03-12 03:13:28,152 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]
2021-03-12 03:13:28,152 [main:117] - GENERATED CALL = (parentProp).toLowerCase()
2021-03-12 03:13:28,152 [main:61] - replacement of sideEffects of type String is (parentProp).filter({a: Char -> true})
2021-03-12 03:13:28,269 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:28,269 [main:66] - Compilation checking started
2021-03-12 03:13:28,622 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            (parentProp).filter({a: Char -> true}) += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:28,623 [main:53] - replacing ("fail1: $C("fqowo").grandParentProp", String)
2021-03-12 03:13:28,623 [main:50] - replacing "fail1: $C("fqowo").grandParentProp" String
2021-03-12 03:13:28,623 [main:54] - Getting value of type String
2021-03-12 03:13:28,740 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:28,741 [main:58] - GENERATED VALUE OF TYPE String = "swmgk"
2021-03-12 03:13:28,741 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:29,007 [main:67] - randomType = LinkedHashSet<LinkedHashSet<C>>
2021-03-12 03:13:29,124 [main:302] - generating value of type = LinkedHashSet<LinkedHashSet<C>> false depth = 0
2021-03-12 03:13:29,248 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: LinkedHashSet<C>): LkedHashSet<LkedHashSet<C>> = TODO()
2021-03-12 03:13:29,250 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: LinkedHashSet<C>): LkedHashSet<LkedHashSet<C>> = TODO()
2021-03-12 03:13:29,372 [main:302] - generating value of type = LinkedHashSet<C> false depth = 3
2021-03-12 03:13:29,494 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<C> = TODO()
2021-03-12 03:13:29,496 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<C> = TODO()
2021-03-12 03:13:29,617 [main:95] - GENERATED = linkedSetOf<C>()
2021-03-12 03:13:29,617 [main:95] - GENERATED = linkedSetOf<LinkedHashSet<C>>(linkedSetOf<C>())
2021-03-12 03:13:29,796 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@6d2ebdc2]
2021-03-12 03:13:29,797 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46c1ef9e]
2021-03-12 03:13:29,797 [main:78] - Generated call from random type = (linkedSetOf<LinkedHashSet<C>>(linkedSetOf<C>())).toArray().contentDeepToString()
2021-03-12 03:13:29,797 [main:106] - GETTING String from String
2021-03-12 03:13:29,815 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]]
2021-03-12 03:13:29,815 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]
2021-03-12 03:13:29,932 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:30,052 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:13:30,053 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:13:30,298 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:13:30,419 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:13:30,421 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:13:30,669 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 03:13:30,673 [main:95] - GENERATED = StringBuilder("ppraz")
2021-03-12 03:13:30,673 [main:95] - GENERATED = StringBuilder(StringBuilder("ppraz"))
2021-03-12 03:13:30,790 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:30,791 [main:117] - GENERATED CALL = (null.toString()).commonSuffixWith(StringBuilder(StringBuilder("ppraz")), true)
2021-03-12 03:13:30,791 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]]
2021-03-12 03:13:30,791 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]
2021-03-12 03:13:30,910 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:30,911 [main:117] - GENERATED CALL = (null.toString()).substringAfterLast('﹧', null.toString())
2021-03-12 03:13:30,912 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]]
2021-03-12 03:13:30,912 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:31,028 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:31,146 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:31,147 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]
2021-03-12 03:13:31,265 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:31,384 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:31,385 [main:117] - GENERATED CALL = (null.toString()).subSequence(1105408927, -2032285796).substring(1710478839, 1396338602)
2021-03-12 03:13:31,385 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]]
2021-03-12 03:13:31,385 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]
2021-03-12 03:13:31,502 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:31,621 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:31,622 [main:117] - GENERATED CALL = (null.toString()).substringAfter('槴', "rtniv")
2021-03-12 03:13:31,622 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f4acca]]
2021-03-12 03:13:31,622 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f4acca]
2021-03-12 03:13:31,622 [main:117] - GENERATED CALL = (null.toString()).trim()
2021-03-12 03:13:31,622 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]]
2021-03-12 03:13:31,622 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:31,739 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:31,856 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:31,857 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]
2021-03-12 03:13:31,973 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:31,974 [main:117] - GENERATED CALL = (null.toString()).subSequence(-921183353, -1329768853).repeat(1012277391)
2021-03-12 03:13:31,974 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:13:31,974 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:32,093 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:32,094 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:13:32,094 [main:117] - GENERATED CALL = (null.toString()).get(-1923795571).plus(null.toString())
2021-03-12 03:13:32,094 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]]
2021-03-12 03:13:32,094 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]
2021-03-12 03:13:32,210 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:32,330 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:32,331 [main:117] - GENERATED CALL = (null.toString()).padEnd(138264860, '겸')
2021-03-12 03:13:32,331 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]]
2021-03-12 03:13:32,331 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]
2021-03-12 03:13:32,331 [main:117] - GENERATED CALL = (null.toString()).toLowerCase()
2021-03-12 03:13:32,331 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]]
2021-03-12 03:13:32,331 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]
2021-03-12 03:13:32,451 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:32,452 [main:117] - GENERATED CALL = (null.toString()).substringBefore('⇙', null.toString())
2021-03-12 03:13:32,452 [main:61] - replacement of "fail1: $C("fqowo").grandParentProp" of type String is (null.toString()).substringAfterLast('﹧', null.toString())
2021-03-12 03:13:32,570 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:32,572 [main:53] - replacing (sideEffects, String)
2021-03-12 03:13:32,573 [main:50] - replacing sideEffects String
2021-03-12 03:13:32,573 [main:54] - Getting value of type String
2021-03-12 03:13:32,693 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:32,694 [main:58] - GENERATED VALUE OF TYPE String = "scael"
2021-03-12 03:13:32,694 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:32,834 [main:67] - randomType = List<C>
2021-03-12 03:13:32,835 [main:106] - GETTING String from String
2021-03-12 03:13:32,856 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]]
2021-03-12 03:13:32,856 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]
2021-03-12 03:13:33,022 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:33,144 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:33,145 [main:117] - GENERATED CALL = (parentProp).replaceBeforeLast('狐', "vnmog", C("fqowo").grandParentProp)
2021-03-12 03:13:33,145 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]]
2021-03-12 03:13:33,145 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]
2021-03-12 03:13:33,263 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:33,381 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:33,383 [main:117] - GENERATED CALL = (parentProp).substringAfter('?', "ybxlg")
2021-03-12 03:13:33,383 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]]
2021-03-12 03:13:33,383 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]
2021-03-12 03:13:33,502 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:13:33,624 [main:43] - GENERATING CALL OF fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): Iterable<Int> = TODO()
2021-03-12 03:13:33,626 [main:61] - WITHOUT TYPE PARAMS = fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): Iterable<Int> = TODO()
2021-03-12 03:13:34,000 [main:302] - generating value of type = Char true depth = 3
2021-03-12 03:13:34,001 [main:302] - generating value of type = Char true depth = 3
2021-03-12 03:13:34,002 [main:95] - GENERATED = CharRange('', '绩')
2021-03-12 03:13:34,002 [main:117] - GENERATED CALL = (parentProp).slice(CharRange('', '绩'))
2021-03-12 03:13:34,003 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]]
2021-03-12 03:13:34,003 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]
2021-03-12 03:13:34,003 [main:117] - GENERATED CALL = (parentProp).concat(null.toString())
2021-03-12 03:13:34,003 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8bf2623]]
2021-03-12 03:13:34,003 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8bf2623]
2021-03-12 03:13:34,120 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:34,121 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:34,122 [main:117] - GENERATED CALL = (parentProp).takeLastWhile({a: Char -> true})
2021-03-12 03:13:34,122 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]]
2021-03-12 03:13:34,122 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]
2021-03-12 03:13:34,240 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:34,242 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:34,243 [main:117] - GENERATED CALL = (parentProp).dropLastWhile({a: Char -> true})
2021-03-12 03:13:34,243 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]]
2021-03-12 03:13:34,243 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]
2021-03-12 03:13:34,244 [main:117] - GENERATED CALL = (parentProp).replaceIndent(sideEffects)
2021-03-12 03:13:34,244 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:13:34,244 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:13:34,362 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:34,366 [main:117] - GENERATED CALL = (parentProp).removePrefix(StringBuilder())
2021-03-12 03:13:34,367 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]]
2021-03-12 03:13:34,367 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]
2021-03-12 03:13:34,367 [main:117] - GENERATED CALL = (parentProp).takeLast(arg)
2021-03-12 03:13:34,367 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]]
2021-03-12 03:13:34,367 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]
2021-03-12 03:13:34,483 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:13:34,484 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:34,485 [main:117] - GENERATED CALL = (parentProp).filterIndexed({a: Int, b: Char -> true})
2021-03-12 03:13:34,485 [main:61] - replacement of sideEffects of type String is (parentProp).takeLastWhile({a: Char -> true})
2021-03-12 03:13:34,604 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:34,605 [main:66] - Compilation checking started
2021-03-12 03:13:34,932 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            (parentProp).takeLastWhile({a: Char -> true}) += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:34,933 [main:53] - replacing (sideEffects, String)
2021-03-12 03:13:34,933 [main:50] - replacing sideEffects String
2021-03-12 03:13:34,933 [main:54] - Getting value of type String
2021-03-12 03:13:35,057 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:35,058 [main:58] - GENERATED VALUE OF TYPE String = "uetxq"
2021-03-12 03:13:35,058 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:35,459 [main:67] - randomType = Collection<ArrayList<String>>?
2021-03-12 03:13:35,460 [main:106] - GETTING String from String
2021-03-12 03:13:35,479 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]]
2021-03-12 03:13:35,479 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:35,595 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:35,712 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:35,713 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]
2021-03-12 03:13:35,829 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:35,947 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:35,948 [main:117] - GENERATED CALL = (null.toString()).subSequence(2055387194, -1832912614).substring(-2060254136, -200165546)
2021-03-12 03:13:35,952 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:13:35,952 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:36,068 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:36,069 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:13:36,185 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:36,186 [main:117] - GENERATED CALL = (null.toString()).get(682499888).plus("nkxfo")
2021-03-12 03:13:36,186 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:13:36,186 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:36,339 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:36,341 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:13:36,341 [main:117] - GENERATED CALL = (null.toString()).get(1554103244).titlecase()
2021-03-12 03:13:36,341 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]]
2021-03-12 03:13:36,341 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]
2021-03-12 03:13:36,460 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:36,582 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:36,583 [main:117] - GENERATED CALL = (null.toString()).replaceAfterLast('鉔', "xqeoi", null.toString())
2021-03-12 03:13:36,583 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@739964f]]
2021-03-12 03:13:36,583 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@739964f]
2021-03-12 03:13:36,700 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:36,820 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:36,968 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:36,970 [main:117] - GENERATED CALL = (null.toString()).replaceFirst('ᖇ', '᫉', true)
2021-03-12 03:13:36,970 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]]
2021-03-12 03:13:36,970 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]
2021-03-12 03:13:36,970 [main:117] - GENERATED CALL = (null.toString()).lowercase()
2021-03-12 03:13:36,970 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e03b28]]
2021-03-12 03:13:36,970 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e03b28]
2021-03-12 03:13:36,970 [main:117] - GENERATED CALL = (null.toString()).uppercase()
2021-03-12 03:13:36,970 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]]
2021-03-12 03:13:36,970 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]
2021-03-12 03:13:36,970 [main:117] - GENERATED CALL = (null.toString()).concat(C("fqowo").grandParentProp)
2021-03-12 03:13:36,970 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:13:36,970 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:37,088 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:37,090 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:13:37,090 [main:117] - GENERATED CALL = (null.toString()).get(1893557294).lowercase()
2021-03-12 03:13:37,090 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]]
2021-03-12 03:13:37,090 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]
2021-03-12 03:13:37,208 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:37,209 [main:117] - GENERATED CALL = (null.toString()).dropLast(1617474388)
2021-03-12 03:13:37,209 [main:61] - replacement of sideEffects of type String is null.toString()
2021-03-12 03:13:37,328 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:37,328 [main:53] - replacing ("minus-one#zero#0.7#first#second#third", String)
2021-03-12 03:13:37,328 [main:50] - replacing "minus-one#zero#0.7#first#second#third" String
2021-03-12 03:13:37,328 [main:54] - Getting value of type String
2021-03-12 03:13:37,445 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:37,446 [main:58] - GENERATED VALUE OF TYPE String = "lebtr"
2021-03-12 03:13:37,446 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:37,450 [main:67] - randomType = C
2021-03-12 03:13:37,565 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:13:37,566 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:13:37,683 [main:194] - Type params = []
2021-03-12 03:13:37,800 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:13:37,808 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]
2021-03-12 03:13:37,808 [main:78] - Generated call from random type = (C("dmkgd")).grandParentProp.trimMargin(null.toString())
2021-03-12 03:13:37,808 [main:106] - GETTING String from String
2021-03-12 03:13:37,826 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]]
2021-03-12 03:13:37,826 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]
2021-03-12 03:13:37,944 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:37,945 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:37,946 [main:117] - GENERATED CALL = (null.toString()).dropLastWhile({a: Char -> true})
2021-03-12 03:13:37,946 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]]
2021-03-12 03:13:37,946 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]
2021-03-12 03:13:37,946 [main:117] - GENERATED CALL = (null.toString()).replaceIndent(C("fqowo").grandParentProp)
2021-03-12 03:13:37,946 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]]
2021-03-12 03:13:37,946 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]
2021-03-12 03:13:38,063 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:38,064 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:38,065 [main:117] - GENERATED CALL = (null.toString()).dropWhile({a: Char -> true})
2021-03-12 03:13:38,065 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]]
2021-03-12 03:13:38,066 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45eadb52]
2021-03-12 03:13:38,181 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:13:38,182 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:38,184 [main:117] - GENERATED CALL = (null.toString()).filterIndexed({a: Int, b: Char -> false})
2021-03-12 03:13:38,184 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]]
2021-03-12 03:13:38,184 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]
2021-03-12 03:13:38,301 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:38,421 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:38,422 [main:117] - GENERATED CALL = (null.toString()).removeRange(-1424775082, -271757252)
2021-03-12 03:13:38,423 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]]
2021-03-12 03:13:38,423 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]
2021-03-12 03:13:38,539 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:38,540 [main:117] - GENERATED CALL = (null.toString()).substringBefore('頋', null.toString())
2021-03-12 03:13:38,540 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]]
2021-03-12 03:13:38,540 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]
2021-03-12 03:13:38,660 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:38,784 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:38,785 [main:117] - GENERATED CALL = (null.toString()).replaceAfter('', "hyapo", null.toString())
2021-03-12 03:13:38,785 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]]
2021-03-12 03:13:38,785 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]
2021-03-12 03:13:38,904 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:38,905 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:38,906 [main:117] - GENERATED CALL = (null.toString()).filterNot({a: Char -> true})
2021-03-12 03:13:38,906 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]]
2021-03-12 03:13:38,906 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]
2021-03-12 03:13:39,024 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:39,144 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:39,146 [main:117] - GENERATED CALL = (null.toString()).substringAfterLast('䱛', "naxhx")
2021-03-12 03:13:39,146 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]]
2021-03-12 03:13:39,146 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]
2021-03-12 03:13:39,288 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:13:39,289 [main:117] - GENERATED CALL = (null.toString()).plus("wiclb")
2021-03-12 03:13:39,289 [main:61] - replacement of "minus-one#zero#0.7#first#second#third" of type String is (null.toString()).dropLastWhile({a: Char -> true})
2021-03-12 03:13:39,407 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:39,408 [main:53] - replacing (justForUsageInClosure, Int)
2021-03-12 03:13:39,408 [main:50] - replacing justForUsageInClosure Int
2021-03-12 03:13:39,408 [main:54] - Getting value of type Int
2021-03-12 03:13:39,528 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:39,529 [main:58] - GENERATED VALUE OF TYPE Int = 794836225
2021-03-12 03:13:39,529 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:40,215 [main:67] - randomType = Function2<Collection<C>, String?, C?>
2021-03-12 03:13:40,216 [main:106] - GETTING Int from String
2021-03-12 03:13:40,237 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74414a78]]
2021-03-12 03:13:40,237 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:13:40,354 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:40,355 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74414a78]
2021-03-12 03:13:40,472 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:40,473 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).compareTo("nmynr").coerceAtLeast(-1145929790)
2021-03-12 03:13:40,473 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@63b93fba]]
2021-03-12 03:13:40,474 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).length.sign
2021-03-12 03:13:40,474 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3d55f1]]
2021-03-12 03:13:40,474 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:40,587 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:40,707 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:40,709 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3d55f1]
2021-03-12 03:13:40,826 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:40,827 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:40,828 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).subSequence(1079345633, 2131687911).indexOfLast({a: Char -> true})
2021-03-12 03:13:40,828 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]]
2021-03-12 03:13:40,829 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]
2021-03-12 03:13:40,946 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:13:40,948 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).length.div(116)
2021-03-12 03:13:40,948 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4bc1bcb8]]
2021-03-12 03:13:40,948 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:13:41,065 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:41,066 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4bc1bcb8]
2021-03-12 03:13:41,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:41,184 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).compareTo("iqxci").ushr(-540534447)
2021-03-12 03:13:41,184 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ddf7857]]
2021-03-12 03:13:41,185 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:13:41,185 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ddf7857]
2021-03-12 03:13:41,185 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).compareTo(null.toString()).countLeadingZeroBits()
2021-03-12 03:13:41,185 [main:113] - Case = [public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@2a030c0b]]
2021-03-12 03:13:41,185 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).lastIndex
2021-03-12 03:13:41,185 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b15fbb5]]
2021-03-12 03:13:41,185 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:13:41,302 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:41,303 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b15fbb5]
2021-03-12 03:13:41,303 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).compareTo("tpiig").takeHighestOneBit()
2021-03-12 03:13:41,303 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2e7edda3]]
2021-03-12 03:13:41,303 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2e7edda3]
2021-03-12 03:13:41,303 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).length.countOneBits()
2021-03-12 03:13:41,303 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67079661]]
2021-03-12 03:13:41,304 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67079661]
2021-03-12 03:13:41,420 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 03:13:41,421 [main:302] - generating value of type = Int true depth = 1
2021-03-12 03:13:41,422 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).sumOf({a: Char -> 205835376})
2021-03-12 03:13:41,422 [main:61] - replacement of justForUsageInClosure of type Int is (C("fqowo").grandParentProp).sumOf({a: Char -> 205835376})
2021-03-12 03:13:41,538 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:41,540 [main:53] - replacing ("", String)
2021-03-12 03:13:41,541 [main:50] - replacing "" String
2021-03-12 03:13:41,541 [main:54] - Getting value of type String
2021-03-12 03:13:41,663 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:41,664 [main:58] - GENERATED VALUE OF TYPE String = "akmbe"
2021-03-12 03:13:41,664 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:41,799 [main:67] - randomType = C?
2021-03-12 03:13:41,916 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:13:41,917 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:13:42,035 [main:194] - Type params = []
2021-03-12 03:13:42,157 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:13:42,165 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]
2021-03-12 03:13:42,165 [main:78] - Generated call from random type = (C("avqtd"))?.grandParentProp.trimMargin(C("fqowo").grandParentProp)
2021-03-12 03:13:42,166 [main:106] - GETTING String from String
2021-03-12 03:13:42,185 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]]
2021-03-12 03:13:42,185 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]
2021-03-12 03:13:42,299 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:13:42,300 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:13:42,301 [main:117] - GENERATED CALL = (parentProp).replaceFirstChar({a: Char -> '徫'})
2021-03-12 03:13:42,301 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]]
2021-03-12 03:13:42,301 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]
2021-03-12 03:13:42,416 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:42,417 [main:117] - GENERATED CALL = (parentProp).replaceIndent("uxpav")
2021-03-12 03:13:42,417 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]]
2021-03-12 03:13:42,417 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]
2021-03-12 03:13:42,534 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:13:42,654 [main:43] - GENERATING CALL OF fun UIntArray(size: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 03:13:42,656 [main:61] - WITHOUT TYPE PARAMS = fun UIntArray(size: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 03:13:42,899 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:13:42,900 [main:95] - GENERATED = UIntArray(92440114)
2021-03-12 03:13:42,901 [main:117] - GENERATED CALL = (parentProp).slice(UIntArray(92440114))
2021-03-12 03:13:42,901 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]]
2021-03-12 03:13:42,901 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]
2021-03-12 03:13:43,059 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:13:43,060 [main:117] - GENERATED CALL = (parentProp).plus("uxgfa")
2021-03-12 03:13:43,060 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]]
2021-03-12 03:13:43,060 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]
2021-03-12 03:13:43,177 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:43,178 [main:117] - GENERATED CALL = (parentProp).repeat(659938978)
2021-03-12 03:13:43,178 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]]
2021-03-12 03:13:43,178 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]
2021-03-12 03:13:43,297 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:43,415 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:43,416 [main:117] - GENERATED CALL = (parentProp).substringBeforeLast('娛', "sziva")
2021-03-12 03:13:43,416 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]]
2021-03-12 03:13:43,416 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]
2021-03-12 03:13:43,533 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:43,651 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:43,653 [main:117] - GENERATED CALL = (parentProp).padStart(-1247841894, '摥')
2021-03-12 03:13:43,653 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]]
2021-03-12 03:13:43,653 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:43,770 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:43,771 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]
2021-03-12 03:13:43,887 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:13:44,007 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:13:44,009 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:13:44,377 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:13:44,378 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 03:13:44,379 [main:95] - GENERATED = Regex("zawlo", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 03:13:44,495 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 03:13:44,496 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:13:44,501 [main:117] - GENERATED CALL = (parentProp).subSequence(justForUsageInClosure, -1378880034).replace(Regex("zawlo", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> "uyptd"})
2021-03-12 03:13:44,501 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]]
2021-03-12 03:13:44,501 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]
2021-03-12 03:13:44,501 [main:117] - GENERATED CALL = (parentProp).decapitalize()
2021-03-12 03:13:44,501 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]]
2021-03-12 03:13:44,501 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]
2021-03-12 03:13:44,616 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:44,738 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:13:44,739 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:13:44,984 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:13:44,985 [main:95] - GENERATED = StringBuilder("jtiib")
2021-03-12 03:13:44,985 [main:117] - GENERATED CALL = (parentProp).removeSurrounding(StringBuilder("jtiib"))
2021-03-12 03:13:44,985 [main:61] - replacement of "" of type String is (parentProp).subSequence(justForUsageInClosure, -1378880034).replace(Regex("zawlo", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> "uyptd"})
2021-03-12 03:13:45,103 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:45,104 [main:66] - Compilation checking started
2021-03-12 03:13:45,444 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = (parentProp).subSequence(justForUsageInClosure, -1378880034).replace(Regex("zawlo", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> "uyptd"})
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:45,446 [main:53] - replacing (a1 != "5#15#parentCaptured", Boolean)
2021-03-12 03:13:45,447 [main:50] - replacing a1 != "5#15#parentCaptured" Boolean
2021-03-12 03:13:45,447 [main:54] - Getting value of type Boolean
2021-03-12 03:13:45,585 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:45,586 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 03:13:45,586 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:45,590 [main:67] - randomType = C
2021-03-12 03:13:45,711 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:13:45,712 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:13:45,831 [main:194] - Type params = []
2021-03-12 03:13:45,948 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:13:45,954 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@549a1bdb]
2021-03-12 03:13:46,073 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:46,074 [main:78] - Generated call from random type = (C("hxpnr")).grandParentProp.startsWith(C("fqowo").grandParentProp, true)
2021-03-12 03:13:46,075 [main:106] - GETTING Boolean from String
2021-03-12 03:13:46,091 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@723ed9dd]]
2021-03-12 03:13:46,091 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:46,091 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@723ed9dd]
2021-03-12 03:13:46,092 [main:117] - GENERATED CALL = (a1).get(justForUsageInClosure).isUpperCase()
2021-03-12 03:13:46,092 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@136d0a86]]
2021-03-12 03:13:46,092 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@136d0a86]
2021-03-12 03:13:46,092 [main:117] - GENERATED CALL = (a1).none()
2021-03-12 03:13:46,092 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26639d7b]]
2021-03-12 03:13:46,092 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26639d7b]
2021-03-12 03:13:46,092 [main:117] - GENERATED CALL = (a1).any()
2021-03-12 03:13:46,092 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed0a9c5]]
2021-03-12 03:13:46,092 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:46,092 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed0a9c5]
2021-03-12 03:13:46,092 [main:117] - GENERATED CALL = (a1).get(justForUsageInClosure).isWhitespace()
2021-03-12 03:13:46,092 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@316768ff]]
2021-03-12 03:13:46,092 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:46,210 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:46,211 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@316768ff]
2021-03-12 03:13:46,211 [main:117] - GENERATED CALL = (a1).get(-601420314).isSurrogate()
2021-03-12 03:13:46,211 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]]
2021-03-12 03:13:46,211 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]
2021-03-12 03:13:46,332 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:13:46,333 [main:117] - GENERATED CALL = (a1).equals("uddwm")
2021-03-12 03:13:46,333 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbc86d9]]
2021-03-12 03:13:46,333 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbc86d9]
2021-03-12 03:13:46,466 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:46,467 [main:117] - GENERATED CALL = (a1).endsWith(null.toString(), true)
2021-03-12 03:13:46,467 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2c799403]]
2021-03-12 03:13:46,467 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@a29670a]
2021-03-12 03:13:46,627 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:13:46,627 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2c799403]
2021-03-12 03:13:46,627 [main:117] - GENERATED CALL = (a1).equals("kyruy").not()
2021-03-12 03:13:46,628 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3143a772]]
2021-03-12 03:13:46,628 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:46,747 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:46,865 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:46,866 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3143a772]
2021-03-12 03:13:46,866 [main:117] - GENERATED CALL = (a1).subSequence(1800228686, 1910857591).hasSurrogatePairAt(justForUsageInClosure)
2021-03-12 03:13:46,867 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c37e05c]]
2021-03-12 03:13:46,867 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:46,985 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:46,986 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c37e05c]
2021-03-12 03:13:46,986 [main:117] - GENERATED CALL = (a1).get(608289736).isLetterOrDigit()
2021-03-12 03:13:46,986 [main:61] - replacement of a1 != "5#15#parentCaptured" of type Boolean is (a1).equals("uddwm")
2021-03-12 03:13:47,103 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:47,103 [main:66] - Compilation checking started
2021-03-12 03:13:47,530 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if ((a1).equals("uddwm")) return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:47,531 [main:53] - replacing ("1#4#parentCaptured", String)
2021-03-12 03:13:47,531 [main:50] - replacing "1#4#parentCaptured" String
2021-03-12 03:13:47,531 [main:54] - Getting value of type String
2021-03-12 03:13:47,653 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:47,654 [main:58] - GENERATED VALUE OF TYPE String = "bnxgw"
2021-03-12 03:13:47,655 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:47,917 [main:67] - randomType = Pair<Array<C>, Long>
2021-03-12 03:13:48,042 [main:302] - generating value of type = Pair<Array<C>, Long> false depth = 0
2021-03-12 03:13:48,165 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Array<C>, second: Long): Pair<Array<C>, Long> = TODO()
2021-03-12 03:13:48,167 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Array<C>, second: Long): Pair<Array<C>, Long> = TODO()
2021-03-12 03:13:48,293 [main:302] - generating value of type = Array<C> false depth = 3
2021-03-12 03:13:48,420 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<C> = TODO()
2021-03-12 03:13:48,421 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<C> = TODO()
2021-03-12 03:13:48,544 [main:95] - GENERATED = enumValues<C>()
2021-03-12 03:13:48,544 [main:302] - generating value of type = Long true depth = 3
2021-03-12 03:13:48,546 [main:95] - GENERATED = Pair<Array<C>, Long>(enumValues<C>(), 2116918277698591582)
2021-03-12 03:13:48,563 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e29ec7]
2021-03-12 03:13:48,683 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:48,803 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:48,927 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:13:48,929 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:13:49,172 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:13:49,176 [main:95] - GENERATED = StringBuilder("cgdtt")
2021-03-12 03:13:49,293 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:49,419 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:49,546 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:49,669 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 03:13:49,670 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:13:49,674 [main:78] - Generated call from random type = (Pair<Array<C>, Long>(enumValues<C>(), 2116918277698591582)).first.joinToString("dyyfh", StringBuilder("cgdtt"), "eiaoy", 1087546105, "mmjzb", {a: T -> "dusun"})
2021-03-12 03:13:49,674 [main:106] - GETTING String from String
2021-03-12 03:13:49,696 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]]
2021-03-12 03:13:49,697 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]
2021-03-12 03:13:49,815 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:49,816 [main:117] - GENERATED CALL = (null.toString()).substringAfterLast('?', C("fqowo").grandParentProp)
2021-03-12 03:13:49,816 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]]
2021-03-12 03:13:49,816 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]
2021-03-12 03:13:49,938 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:49,939 [main:117] - GENERATED CALL = (null.toString()).dropLast(285089311)
2021-03-12 03:13:49,939 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]]
2021-03-12 03:13:49,939 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]
2021-03-12 03:13:50,059 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:50,063 [main:117] - GENERATED CALL = (null.toString()).removeSurrounding("qmbrk")
2021-03-12 03:13:50,063 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]]
2021-03-12 03:13:50,063 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]
2021-03-12 03:13:50,180 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:50,340 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:50,341 [main:117] - GENERATED CALL = (null.toString()).replaceIndentByMargin("nioiz", "ngxwp")
2021-03-12 03:13:50,341 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]]
2021-03-12 03:13:50,341 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]
2021-03-12 03:13:50,460 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:13:50,583 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-12 03:13:50,584 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-12 03:13:50,705 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:13:50,706 [main:95] - GENERATED = listOfNotNull<Int>(-1956915222)
2021-03-12 03:13:50,706 [main:117] - GENERATED CALL = (null.toString()).slice(listOfNotNull<Int>(-1956915222))
2021-03-12 03:13:50,706 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]]
2021-03-12 03:13:50,706 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]
2021-03-12 03:13:50,824 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:50,944 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:50,945 [main:117] - GENERATED CALL = (null.toString()).padStart(115011144, '툓')
2021-03-12 03:13:50,945 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5434e4f7]]
2021-03-12 03:13:50,945 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5434e4f7]
2021-03-12 03:13:51,063 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:51,181 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:51,301 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:51,302 [main:117] - GENERATED CALL = (null.toString()).replace('硙', 'ⶲ', false)
2021-03-12 03:13:51,302 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]]
2021-03-12 03:13:51,302 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]
2021-03-12 03:13:51,419 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:51,420 [main:117] - GENERATED CALL = (null.toString()).drop(1430034203)
2021-03-12 03:13:51,420 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]]
2021-03-12 03:13:51,420 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]
2021-03-12 03:13:51,537 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:51,656 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:51,658 [main:117] - GENERATED CALL = (null.toString()).removeRange(-1812897684, -1470050301)
2021-03-12 03:13:51,658 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]]
2021-03-12 03:13:51,658 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]
2021-03-12 03:13:51,658 [main:117] - GENERATED CALL = (null.toString()).reversed()
2021-03-12 03:13:51,658 [main:61] - replacement of "1#4#parentCaptured" of type String is "bnxgw"
2021-03-12 03:13:51,775 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 03:13:51,775 [main:53] - replacing ("parentCaptured", String)
2021-03-12 03:13:51,775 [main:50] - replacing "parentCaptured" String
2021-03-12 03:13:51,775 [main:54] - Getting value of type String
2021-03-12 03:13:51,892 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:51,893 [main:58] - GENERATED VALUE OF TYPE String = "ihfev"
2021-03-12 03:13:51,893 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:51,896 [main:67] - randomType = C
2021-03-12 03:13:52,014 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:13:52,016 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:13:52,135 [main:194] - Type params = []
2021-03-12 03:13:52,251 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:13:52,258 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:13:52,377 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:52,381 [main:78] - Generated call from random type = (C("nnyvs")).grandParentProp.removePrefix("pejzu")
2021-03-12 03:13:52,381 [main:106] - GETTING String from String
2021-03-12 03:13:52,397 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]]
2021-03-12 03:13:52,397 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:52,515 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:52,634 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:52,636 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]
2021-03-12 03:13:52,755 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:13:52,877 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:13:52,878 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:13:53,122 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:13:53,123 [main:95] - GENERATED = StringBuilder("pgeay")
2021-03-12 03:13:53,241 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:13:53,242 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).subSequence(-1229450596, -1492069280).commonPrefixWith(StringBuilder("pgeay"), false)
2021-03-12 03:13:53,242 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]]
2021-03-12 03:13:53,243 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]
2021-03-12 03:13:53,243 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).prependIndent(null.toString())
2021-03-12 03:13:53,243 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]]
2021-03-12 03:13:53,243 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]
2021-03-12 03:13:53,243 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).trimEnd()
2021-03-12 03:13:53,243 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]]
2021-03-12 03:13:53,243 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]
2021-03-12 03:13:53,363 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:53,365 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).repeat(464964042)
2021-03-12 03:13:53,365 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e03b28]]
2021-03-12 03:13:53,365 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e03b28]
2021-03-12 03:13:53,365 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).uppercase()
2021-03-12 03:13:53,365 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]]
2021-03-12 03:13:53,365 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:53,481 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:53,598 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:53,599 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555ebdc1]
2021-03-12 03:13:53,719 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:53,878 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:53,879 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).subSequence(-277377600, -1490265002).substring(2076133446, -1509801925)
2021-03-12 03:13:53,880 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]]
2021-03-12 03:13:53,880 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]
2021-03-12 03:13:53,997 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:53,998 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).replaceIndentByMargin(null.toString(), "xdzco")
2021-03-12 03:13:53,998 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]]
2021-03-12 03:13:53,998 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]
2021-03-12 03:13:54,115 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:54,116 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:54,117 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).dropLastWhile({a: Char -> true})
2021-03-12 03:13:54,117 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]]
2021-03-12 03:13:54,117 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]
2021-03-12 03:13:54,118 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).trimStart()
2021-03-12 03:13:54,118 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]]
2021-03-12 03:13:54,118 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c0051]
2021-03-12 03:13:54,232 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:13:54,233 [main:117] - GENERATED CALL = (C("fqowo").grandParentProp).substringAfterLast('虼', null.toString())
2021-03-12 03:13:54,234 [main:61] - replacement of "parentCaptured" of type String is (C("fqowo").grandParentProp).repeat(464964042)
2021-03-12 03:13:54,352 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:54,353 [main:53] - replacing ((arg1 + arg2).toString(), String)
2021-03-12 03:13:54,353 [main:50] - replacing (arg1 + arg2).toString() String
2021-03-12 03:13:54,353 [main:54] - Getting value of type String
2021-03-12 03:13:54,471 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:13:54,472 [main:58] - GENERATED VALUE OF TYPE String = "gilcr"
2021-03-12 03:13:54,472 [main:61] - GENERATED IS CALL =false
2021-03-12 03:13:54,867 [main:67] - randomType = Function2<C, ArrayList<C>, Pair<C, Short>>
2021-03-12 03:13:54,868 [main:106] - GETTING String from String
2021-03-12 03:13:54,885 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]]
2021-03-12 03:13:54,885 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]
2021-03-12 03:13:54,885 [main:117] - GENERATED CALL = (null.toString()).prependIndent(C("fqowo").grandParentProp)
2021-03-12 03:13:54,885 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]]
2021-03-12 03:13:54,885 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]
2021-03-12 03:13:54,886 [main:117] - GENERATED CALL = (null.toString()).replaceIndentByMargin(C("fqowo").grandParentProp, C("fqowo").grandParentProp)
2021-03-12 03:13:54,886 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]]
2021-03-12 03:13:54,886 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]
2021-03-12 03:13:55,004 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:55,005 [main:117] - GENERATED CALL = (null.toString()).takeLast(1390216302)
2021-03-12 03:13:55,005 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]]
2021-03-12 03:13:55,005 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]
2021-03-12 03:13:55,006 [main:117] - GENERATED CALL = (null.toString()).toUpperCase()
2021-03-12 03:13:55,006 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]]
2021-03-12 03:13:55,006 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]
2021-03-12 03:13:55,006 [main:117] - GENERATED CALL = (null.toString()).decapitalize()
2021-03-12 03:13:55,006 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:13:55,006 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:13:55,125 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:55,126 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:13:55,126 [main:117] - GENERATED CALL = (null.toString()).get(796430140).uppercase()
2021-03-12 03:13:55,126 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]]
2021-03-12 03:13:55,126 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]
2021-03-12 03:13:55,126 [main:117] - GENERATED CALL = (null.toString()).lowercase()
2021-03-12 03:13:55,126 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]]
2021-03-12 03:13:55,126 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]
2021-03-12 03:13:55,247 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:13:55,248 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:13:55,249 [main:117] - GENERATED CALL = (null.toString()).dropWhile({a: Char -> true})
2021-03-12 03:13:55,249 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]]
2021-03-12 03:13:55,249 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:13:55,373 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:55,493 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:55,494 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]
2021-03-12 03:13:55,612 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:13:55,614 [main:117] - GENERATED CALL = (null.toString()).subSequence(2083415156, 1714951230).repeat(1493021577)
2021-03-12 03:13:55,614 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e03b28]]
2021-03-12 03:13:55,614 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e03b28]
2021-03-12 03:13:55,614 [main:117] - GENERATED CALL = (null.toString()).uppercase()
2021-03-12 03:13:55,614 [main:61] - replacement of (arg1 + arg2).toString() of type String is (null.toString()).takeLast(1390216302)
2021-03-12 03:13:55,730 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:13:55,852 [main:119] - TRYING TO REPLACE CONSTANT 1960183608
2021-03-12 03:13:55,971 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 03:13:55,971 [main:66] - Compilation checking started
2021-03-12 03:13:56,303 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(justForUsageInClosure)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if ((a1).equals("uddwm")) return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:56,303 [main:119] - TRYING TO REPLACE CONSTANT null
2021-03-12 03:13:56,422 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-12 03:13:56,423 [main:119] - TRYING TO REPLACE CONSTANT '害'
2021-03-12 03:13:56,542 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 03:13:56,543 [main:66] - Compilation checking started
2021-03-12 03:13:56,849 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if ((a1).equals("uddwm")) return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals(get(justForUsageInClosure), false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:56,849 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 03:13:56,970 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 03:13:56,970 [main:66] - Compilation checking started
2021-03-12 03:13:57,292 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if ((a1).equals("uddwm")) return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', isEmpty())) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:57,292 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 03:13:57,409 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 03:13:57,410 [main:66] - Compilation checking started
2021-03-12 03:13:57,775 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if ((a1).equals("uddwm")) return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> isEmpty()})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:57,775 [main:119] - TRYING TO REPLACE CONSTANT 944813053
2021-03-12 03:13:57,898 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 03:13:57,899 [main:66] - Compilation checking started
2021-03-12 03:13:58,215 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if ((a1).equals("uddwm")) return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(arg) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(1638181816, justForUsageInClosure)
}


2021-03-12 03:13:58,216 [main:119] - TRYING TO REPLACE CONSTANT null
2021-03-12 03:13:58,334 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-12 03:13:58,334 [main:66] - Compilation checking started
2021-03-12 03:13:58,754 [main:119] - TRYING TO REPLACE CONSTANT null
2021-03-12 03:13:58,875 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-12 03:13:58,875 [main:119] - TRYING TO REPLACE CONSTANT 1638181816
2021-03-12 03:13:58,993 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 03:13:58,994 [main:66] - Compilation checking started
2021-03-12 03:13:59,411 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if ((a1).equals("uddwm")) return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, -208126409).substring(5, justForUsageInClosure)
}


2021-03-12 03:13:59,412 [main:119] - TRYING TO REPLACE CONSTANT 208126409
2021-03-12 03:13:59,544 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-12 03:13:59,545 [main:66] - Compilation checking started
2021-03-12 03:13:59,955 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if ((a1).equals("uddwm")) return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, (justForUsageInClosure)).substring(5, justForUsageInClosure)
}


2021-03-12 03:13:59,955 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 03:14:00,073 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 03:14:00,074 [main:66] - Compilation checking started
2021-03-12 03:14:00,388 [main:49] - Result = false
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> equals("dgbnk")})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if ((a1).equals("uddwm")) return (sideEffects).trimEnd()
    if ((0.910821210492119).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, (justForUsageInClosure)).substring(5, justForUsageInClosure)
}


2021-03-12 03:14:00,389 [main:119] - TRYING TO REPLACE CONSTANT 0.910821210492119
2021-03-12 03:14:00,509 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 03:14:00,509 [main:66] - Compilation checking started
2021-03-12 03:14:00,905 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (0.9130134229477629).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if ((a1).equals("uddwm")) return (sideEffects).trimEnd()
    if (((0.9130134229477629)).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, (justForUsageInClosure)).substring(5, justForUsageInClosure)
}


2021-03-12 03:14:00,906 [main:119] - TRYING TO REPLACE CONSTANT 0.9130134229477629
2021-03-12 03:14:01,024 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 03:14:01,024 [main:66] - Compilation checking started
2021-03-12 03:14:01,452 [main:53] - Result = true
Text:
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = (C("prxyd")).grandParentProp.dropLast(-1960183608)
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = (sideEffects).filter({a: Char -> false})

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super((C("xsekr")).grandParentProp.substring(arg)) {
            parentProp = (((0.9130134229477629))).toInt().toString(arg)
            sideEffects += "0.5#"
            parentSideEffects += "#" + (C("fqowo").grandParentProp).get(justForUsageInClosure).uppercase()
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (C("fqowo").grandParentProp).trimMargin("plsbr")
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += (parentProp).decapitalize()
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += (parentProp).removePrefix(StringBuilder("npoca"))
        }

        init {
            sideEffects += (parentProp).lowercase()
        }

        constructor(x: Int): super((C("fqowo").grandParentProp).length.ushr(justForUsageInClosure)) {
            prop += (null.toString()).reversed()
            sideEffects += "#fourth"
        }

        constructor(): this((justForUsageInClosure).toChar().code) {
            sideEffects += "#fifth"
        }

        override fun toString() = sideEffects
    }

    val a1 = A(5, 10).toString()
    if ((a1).equals("uddwm")) return (sideEffects).trimEnd()
    if (((0.9130134229477629)).equals("dgbnk").equals("vvcuh")) return (justForUsageInClosure).toShort().toString(justForUsageInClosure)
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = (C("fqowo").grandParentProp).reversed()
    val a2 = A((C("fqowo").grandParentProp).indexOfLast({a: Char -> true})).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if ((justForUsageInClosure).toLong().toString(944813053) != "dscud") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if ((parentSideEffects).isEmpty()) return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if ((null.toString()).get(justForUsageInClosure).equals('害', false)) return "kdcfk"

    return (null.toString()).subSequence(justForUsageInClosure, (justForUsageInClosure)).substring(5, justForUsageInClosure)
}


2021-03-12 03:14:01,528 [main:41] - AFTER TRY 0 res = open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}
2021-03-12 03:14:01,728 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:14:01,828 [main:194] - Type params = []
2021-03-12 03:14:01,928 [main:302] - generating value of type = String true depth = 1
2021-03-12 03:14:01,929 [main:112] - generating klass B text = abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }
2021-03-12 03:14:01,929 [main:112] - generating klass A text = class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }
2021-03-12 03:14:02,143 [main:43] - Try №0
2021-03-12 03:14:15,083 [main:48] - Already checked
2021-03-12 03:14:15,301 [main:48] - Already checked
2021-03-12 03:14:19,297 [main:69] - Trying to insert suspend fun fu8() = fu7().s
2021-03-12 03:14:19,475 [main:66] - Compilation checking started
2021-03-12 03:14:20,778 [main:103] - Trying to change 217 nodes
2021-03-12 03:14:20,778 [main:107] - replacing (prope0.getOrThrow(), Ty0)
2021-03-12 03:14:20,782 [main:50] - replacing prope0.getOrThrow() Ty0
2021-03-12 03:14:20,782 [main:54] - Getting value of type Ty0
2021-03-12 03:14:20,960 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 03:14:20,967 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 03:14:21,391 [main:67] - randomType = Set<Double>
2021-03-12 03:14:21,392 [main:106] - GETTING Ty0 from String
2021-03-12 03:14:21,425 [main:106] - GETTING Ty0 from String
2021-03-12 03:14:21,426 [main:106] - GETTING Ty0 from A
2021-03-12 03:14:21,450 [main:106] - GETTING Ty0 from String
2021-03-12 03:14:21,451 [main:106] - GETTING Ty0 from Int
2021-03-12 03:14:21,511 [main:106] - GETTING Ty0 from Int
2021-03-12 03:14:21,512 [main:106] - GETTING Ty0 from String
2021-03-12 03:14:21,512 [main:106] - GETTING Ty0 from String
2021-03-12 03:14:21,513 [main:106] - GETTING Ty0 from Int
2021-03-12 03:14:21,514 [main:106] - GETTING Ty0 from Int
2021-03-12 03:14:21,514 [main:106] - GETTING Ty0 from A
2021-03-12 03:14:21,515 [main:106] - GETTING Ty0 from String
2021-03-12 03:14:21,516 [main:106] - GETTING Ty0 from String
2021-03-12 03:14:21,517 [main:106] - GETTING Ty0 from Int
2021-03-12 03:14:21,517 [main:106] - GETTING Ty0 from String
2021-03-12 03:14:21,518 [main:106] - GETTING Ty0 from String
2021-03-12 03:14:21,519 [main:106] - GETTING Ty0 from A
2021-03-12 03:14:21,519 [main:111] - Cant find and generate replacement for prope0.getOrThrow() type Ty0
2021-03-12 03:14:21,519 [main:107] - replacing (value, Kla0)
2021-03-12 03:14:21,519 [main:50] - replacing value Kla0
2021-03-12 03:14:21,519 [main:54] - Getting value of type Kla0
2021-03-12 03:14:21,687 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:14:21,690 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 03:14:21,919 [main:194] - Type params = []
2021-03-12 03:14:22,096 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:14:22,099 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("ljhgy")
2021-03-12 03:14:22,099 [main:61] - GENERATED IS CALL =true
2021-03-12 03:14:22,876 [main:67] - randomType = LinkedHashMap<Byte, ArrayDeque<Kla7>>
2021-03-12 03:14:23,038 [main:302] - generating value of type = LinkedHashMap<Byte, ArrayDeque<Kla7>> false depth = 0
2021-03-12 03:14:23,213 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Byte, ArrayDeque<Kla7>> = TODO()
2021-03-12 03:14:23,217 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Byte, ArrayDeque<Kla7>> = TODO()
2021-03-12 03:14:23,399 [main:95] - GENERATED = linkedMapOf<Byte, ArrayDeque<Kla7>>()
2021-03-12 03:14:23,567 [main:106] - GETTING Kla0 from Int
2021-03-12 03:14:23,598 [main:106] - GETTING Kla0 from A
2021-03-12 03:14:23,609 [main:106] - GETTING Kla0 from String
2021-03-12 03:14:23,626 [main:106] - GETTING Kla0 from String
2021-03-12 03:14:23,626 [main:106] - GETTING Kla0 from Int
2021-03-12 03:14:23,627 [main:106] - GETTING Kla0 from String
2021-03-12 03:14:23,628 [main:106] - GETTING Kla0 from A
2021-03-12 03:14:23,628 [main:106] - GETTING Kla0 from Int
2021-03-12 03:14:23,629 [main:106] - GETTING Kla0 from String
2021-03-12 03:14:23,629 [main:106] - GETTING Kla0 from String
2021-03-12 03:14:23,630 [main:106] - GETTING Kla0 from Int
2021-03-12 03:14:23,631 [main:106] - GETTING Kla0 from String
2021-03-12 03:14:23,631 [main:106] - GETTING Kla0 from A
2021-03-12 03:14:23,632 [main:106] - GETTING Kla0 from String
2021-03-12 03:14:23,632 [main:106] - GETTING Kla0 from String
2021-03-12 03:14:23,633 [main:106] - GETTING Kla0 from String
2021-03-12 03:14:23,634 [main:106] - GETTING Kla0 from Int
2021-03-12 03:14:23,634 [main:114] - replacement of value of type Kla0 is Kla0("ljhgy")
2021-03-12 03:14:23,794 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:14:23,795 [main:66] - Compilation checking started
2021-03-12 03:14:24,245 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = Kla0("ljhgy")

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:14:24,247 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-12 03:14:24,250 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-12 03:14:24,250 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 03:14:24,411 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 03:14:24,414 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:14:24,417 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-12 03:14:24,417 [main:61] - GENERATED IS CALL =false
2021-03-12 03:14:24,981 [main:67] - randomType = Sequence<HashSet<String>>?
2021-03-12 03:14:24,982 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 03:14:25,019 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 03:14:25,020 [main:106] - GETTING Function0<Boolean> from A
2021-03-12 03:14:25,032 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 03:14:25,049 [main:106] - GETTING Function0<Boolean> from A
2021-03-12 03:14:25,050 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 03:14:25,051 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 03:14:25,052 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 03:14:25,053 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 03:14:25,054 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 03:14:25,055 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 03:14:25,056 [main:106] - GETTING Function0<Boolean> from A
2021-03-12 03:14:25,056 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 03:14:25,057 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 03:14:25,058 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 03:14:25,059 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 03:14:25,060 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 03:14:25,060 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { false}
2021-03-12 03:14:25,220 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 03:14:25,220 [main:66] - Compilation checking started
2021-03-12 03:14:25,696 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:14:25,700 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-12 03:14:25,704 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-12 03:14:25,704 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 03:14:25,890 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 03:14:25,893 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:14:25,900 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> println()}
2021-03-12 03:14:25,900 [main:61] - GENERATED IS CALL =false
2021-03-12 03:14:26,087 [main:67] - randomType = Short
2021-03-12 03:14:26,246 [main:302] - generating value of type = Short true depth = 0
2021-03-12 03:14:26,280 [main:106] - GETTING Function1<Throwable, Unit> from A
2021-03-12 03:14:26,292 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:14:26,309 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:14:26,310 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 03:14:26,378 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 03:14:26,380 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:14:26,381 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:14:26,382 [main:106] - GETTING Function1<Throwable, Unit> from A
2021-03-12 03:14:26,383 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:14:26,384 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 03:14:26,385 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:14:26,386 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:14:26,388 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:14:26,389 [main:106] - GETTING Function1<Throwable, Unit> from A
2021-03-12 03:14:26,390 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 03:14:26,391 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:14:26,392 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 03:14:26,392 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> println()}
2021-03-12 03:14:26,548 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 03:14:26,548 [main:66] - Compilation checking started
2021-03-12 03:14:26,985 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:14:26,988 [main:107] - replacing (exception, Throwable)
2021-03-12 03:14:26,991 [main:50] - replacing exception Throwable
2021-03-12 03:14:26,991 [main:54] - Getting value of type Throwable
2021-03-12 03:14:27,160 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 03:14:27,327 [main:43] - GENERATING CALL OF fun Exception(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 03:14:27,331 [main:61] - WITHOUT TYPE PARAMS = fun Exception(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 03:14:27,692 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 03:14:27,698 [main:95] - GENERATED = Exception(NoWhenBranchMatchedException())
2021-03-12 03:14:27,698 [main:58] - GENERATED VALUE OF TYPE Throwable = Exception(NoWhenBranchMatchedException())
2021-03-12 03:14:27,698 [main:61] - GENERATED IS CALL =true
2021-03-12 03:14:27,903 [main:67] - randomType = Long
2021-03-12 03:14:28,076 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:14:28,116 [main:106] - GETTING Throwable from String
2021-03-12 03:14:28,132 [main:106] - GETTING Throwable from String
2021-03-12 03:14:28,133 [main:106] - GETTING Throwable from Int
2021-03-12 03:14:28,163 [main:106] - GETTING Throwable from Int
2021-03-12 03:14:28,164 [main:106] - GETTING Throwable from A
2021-03-12 03:14:28,175 [main:106] - GETTING Throwable from String
2021-03-12 03:14:28,176 [main:106] - GETTING Throwable from A
2021-03-12 03:14:28,177 [main:106] - GETTING Throwable from String
2021-03-12 03:14:28,177 [main:106] - GETTING Throwable from String
2021-03-12 03:14:28,178 [main:106] - GETTING Throwable from Int
2021-03-12 03:14:28,179 [main:106] - GETTING Throwable from Int
2021-03-12 03:14:28,180 [main:106] - GETTING Throwable from String
2021-03-12 03:14:28,180 [main:106] - GETTING Throwable from String
2021-03-12 03:14:28,181 [main:106] - GETTING Throwable from String
2021-03-12 03:14:28,182 [main:106] - GETTING Throwable from A
2021-03-12 03:14:28,182 [main:106] - GETTING Throwable from Int
2021-03-12 03:14:28,183 [main:106] - GETTING Throwable from String
2021-03-12 03:14:28,183 [main:114] - replacement of exception of type Throwable is Exception(NoWhenBranchMatchedException())
2021-03-12 03:14:28,348 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:14:28,348 [main:66] - Compilation checking started
2021-03-12 03:14:28,828 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw Exception(NoWhenBranchMatchedException())
    }
}


2021-03-12 03:14:28,831 [main:107] - replacing ("Continuation ", String)
2021-03-12 03:14:28,834 [main:50] - replacing "Continuation " String
2021-03-12 03:14:28,834 [main:54] - Getting value of type String
2021-03-12 03:14:29,000 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:29,003 [main:58] - GENERATED VALUE OF TYPE String = "whnde"
2021-03-12 03:14:29,004 [main:61] - GENERATED IS CALL =false
2021-03-12 03:14:29,017 [main:67] - randomType = Kla0
2021-03-12 03:14:29,181 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:14:29,184 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 03:14:29,343 [main:194] - Type params = []
2021-03-12 03:14:29,504 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:14:29,514 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]
2021-03-12 03:14:29,514 [main:78] - Generated call from random type = (Kla0("ojstj")).s.toLowerCase()
2021-03-12 03:14:29,515 [main:106] - GETTING String from String
2021-03-12 03:14:29,541 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f4acca]]
2021-03-12 03:14:29,541 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f4acca]
2021-03-12 03:14:29,542 [main:117] - GENERATED CALL = (null.toString()).trim()
2021-03-12 03:14:29,542 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]]
2021-03-12 03:14:29,542 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]
2021-03-12 03:14:29,542 [main:117] - GENERATED CALL = (null.toString()).toUpperCase()
2021-03-12 03:14:29,542 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]]
2021-03-12 03:14:29,542 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470f1092]
2021-03-12 03:14:29,703 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:14:29,707 [main:117] - GENERATED CALL = (null.toString()).padEnd((arg1 + arg2), 'ᓠ')
2021-03-12 03:14:29,707 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]]
2021-03-12 03:14:29,707 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a7e3da]
2021-03-12 03:14:29,707 [main:117] - GENERATED CALL = (null.toString()).decapitalize()
2021-03-12 03:14:29,707 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]]
2021-03-12 03:14:29,707 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26bed6f6]
2021-03-12 03:14:29,708 [main:117] - GENERATED CALL = (null.toString()).toLowerCase()
2021-03-12 03:14:29,708 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]]
2021-03-12 03:14:29,708 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2a94]
2021-03-12 03:14:29,708 [main:117] - GENERATED CALL = (null.toString()).concat(val parentProp: String
2021-03-12 03:14:29,708 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]]
2021-03-12 03:14:29,708 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559c22ce]
2021-03-12 03:14:29,709 [main:117] - GENERATED CALL = (null.toString()).replaceIndentByMargin(val parentProp: String
2021-03-12 03:14:29,709 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]]
2021-03-12 03:14:29,709 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6589f274]
2021-03-12 03:14:29,878 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:14:30,050 [main:43] - GENERATING CALL OF fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-12 03:14:30,055 [main:61] - WITHOUT TYPE PARAMS = fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-12 03:14:30,630 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:14:30,633 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, Int> false depth = 3
2021-03-12 03:14:30,637 [main:302] - generating value of type = Int true depth = 4
2021-03-12 03:14:30,641 [main:95] - GENERATED = MutableList<Int>(31145446, {a: Int -> 1026023445})
2021-03-12 03:14:30,641 [main:117] - GENERATED CALL = (null.toString()).slice(MutableList<Int>(31145446, {a: Int -> 1026023445}))
2021-03-12 03:14:30,641 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]]
2021-03-12 03:14:30,641 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]
2021-03-12 03:14:30,641 [main:117] - GENERATED CALL = (null.toString()).lowercase()
2021-03-12 03:14:30,642 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]]
2021-03-12 03:14:30,642 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]
2021-03-12 03:14:30,811 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:14:30,814 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:14:30,817 [main:117] - GENERATED CALL = (null.toString()).replaceFirstChar({a: Char -> 'ᓿ'})
2021-03-12 03:14:30,817 [main:114] - replacement of "Continuation " of type String is (null.toString()).slice(MutableList<Int>(31145446, {a: Int -> 1026023445}))
2021-03-12 03:14:30,983 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:14:30,983 [main:66] - Compilation checking started
2021-03-12 03:14:31,485 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error((null.toString()).slice(MutableList<Int>(31145446, {a: Int -> 1026023445})) + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:14:31,490 [main:107] - replacing (checkFinished && !prope6, Boolean)
2021-03-12 03:14:31,495 [main:50] - replacing checkFinished && !prope6 Boolean
2021-03-12 03:14:31,495 [main:54] - Getting value of type Boolean
2021-03-12 03:14:31,667 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:14:31,670 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 03:14:31,670 [main:61] - GENERATED IS CALL =false
2021-03-12 03:14:32,063 [main:67] - randomType = LinkedHashMap<Kla0, UInt>
2021-03-12 03:14:32,225 [main:302] - generating value of type = LinkedHashMap<Kla0, UInt> false depth = 0
2021-03-12 03:14:32,395 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla0, UInt>): LkedHashMap<Kla0, UInt> = TODO()
2021-03-12 03:14:32,399 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla0, UInt>): LkedHashMap<Kla0, UInt> = TODO()
2021-03-12 03:14:32,575 [main:302] - generating value of type = Pair<Kla0, UInt> false depth = 3
2021-03-12 03:14:32,739 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla0, second: UInt): Pair<Kla0, UInt> = TODO()
2021-03-12 03:14:32,744 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla0, second: UInt): Pair<Kla0, UInt> = TODO()
2021-03-12 03:14:32,911 [main:302] - generating value of type = Kla0 false depth = 6
2021-03-12 03:14:32,915 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 03:14:33,075 [main:194] - Type params = []
2021-03-12 03:14:33,235 [main:302] - generating value of type = String true depth = 8
2021-03-12 03:14:33,239 [main:302] - generating value of type = UInt true depth = 6
2021-03-12 03:14:33,242 [main:95] - GENERATED = Pair<Kla0, UInt>(Kla0("otqha"), 2141727839.toUInt())
2021-03-12 03:14:33,242 [main:95] - GENERATED = linkedMapOf<Kla0, UInt>(Pair<Kla0, UInt>(Kla0("otqha"), 2141727839.toUInt()))
2021-03-12 03:14:33,356 [main:149] - GENERATING call of type public abstract fun isEmpty(): kotlin.Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@2ad2d629]
2021-03-12 03:14:33,357 [main:78] - Generated call from random type = (linkedMapOf<Kla0, UInt>(Pair<Kla0, UInt>(Kla0("otqha"), 2141727839.toUInt()))).entries.isEmpty()
2021-03-12 03:14:33,357 [main:106] - GETTING Boolean from Int
2021-03-12 03:14:33,397 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]]
2021-03-12 03:14:33,397 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:14:33,397 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]
2021-03-12 03:14:33,563 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:14:33,563 [main:117] - GENERATED CALL = (arg1 + arg2).toInt().equals("svgcx")
2021-03-12 03:14:33,564 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26c80cf1]]
2021-03-12 03:14:33,564 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:14:33,564 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26c80cf1]
2021-03-12 03:14:33,564 [main:117] - GENERATED CALL = (arg1 + arg2).toChar().isLowSurrogate()
2021-03-12 03:14:33,564 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d8892f9], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@26a3f0ab]]
2021-03-12 03:14:33,564 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d8892f9]
2021-03-12 03:14:33,564 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@26a3f0ab]
2021-03-12 03:14:33,564 [main:117] - GENERATED CALL = (arg1 + arg2).toFloat().isInfinite()
2021-03-12 03:14:33,564 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@528e6647], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@48e0c143]]
2021-03-12 03:14:33,564 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@528e6647]
2021-03-12 03:14:33,564 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@48e0c143]
2021-03-12 03:14:33,564 [main:117] - GENERATED CALL = (arg1 + arg2).toDouble().isInfinite()
2021-03-12 03:14:33,564 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]]
2021-03-12 03:14:33,564 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]
2021-03-12 03:14:33,726 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:14:33,726 [main:117] - GENERATED CALL = (arg1 + arg2).equals("tdeyn")
2021-03-12 03:14:33,726 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19bc3a0c]]
2021-03-12 03:14:33,726 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:14:33,726 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19bc3a0c]
2021-03-12 03:14:33,727 [main:117] - GENERATED CALL = (arg1 + arg2).toChar().isHighSurrogate()
2021-03-12 03:14:33,727 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@528e6647], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5aa76e11]]
2021-03-12 03:14:33,727 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@528e6647]
2021-03-12 03:14:33,727 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5aa76e11]
2021-03-12 03:14:33,889 [main:117] - GENERATED CALL = (arg1 + arg2).toDouble().equals(null)
2021-03-12 03:14:33,889 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]]
2021-03-12 03:14:33,889 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:14:33,890 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]
2021-03-12 03:14:34,047 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:14:34,048 [main:117] - GENERATED CALL = (arg1 + arg2).compareTo(arg1).equals("vavou")
2021-03-12 03:14:34,048 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a2f20e], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@565e1ebe]]
2021-03-12 03:14:34,048 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a2f20e]
2021-03-12 03:14:34,208 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:14:34,212 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@565e1ebe]
2021-03-12 03:14:34,212 [main:117] - GENERATED CALL = (arg1 + arg2).rangeTo(-54).isEmpty()
2021-03-12 03:14:34,212 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@662f0405]]
2021-03-12 03:14:34,212 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]
2021-03-12 03:14:34,373 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:14:34,373 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@662f0405]
2021-03-12 03:14:34,531 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:14:34,532 [main:117] - GENERATED CALL = (arg1 + arg2).equals("hozbz").equals("qzmwg")
2021-03-12 03:14:34,532 [main:114] - replacement of checkFinished && !prope6 of type Boolean is (arg1 + arg2).toChar().isHighSurrogate()
2021-03-12 03:14:34,692 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:14:34,692 [main:66] - Compilation checking started
2021-03-12 03:14:35,139 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((arg1 + arg2).toChar().isHighSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:14:35,142 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 03:14:35,142 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 03:14:35,142 [main:54] - Getting value of type Boolean
2021-03-12 03:14:35,307 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:14:35,310 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 03:14:35,310 [main:61] - GENERATED IS CALL =false
2021-03-12 03:14:35,324 [main:67] - randomType = Kla7
2021-03-12 03:14:35,482 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 03:14:35,485 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 03:14:35,491 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla7[DeserializedSimpleFunctionDescriptor@76fe10e8]
2021-03-12 03:14:35,686 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:14:35,686 [main:78] - Generated call from random type = (Kla7()).equals("asiwa")
2021-03-12 03:14:35,687 [main:106] - GETTING Boolean from Int
2021-03-12 03:14:35,718 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c5d3392]]
2021-03-12 03:14:35,718 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:14:35,719 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c5d3392]
2021-03-12 03:14:35,719 [main:117] - GENERATED CALL = (arg1).toChar().isTitleCase()
2021-03-12 03:14:35,719 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@662f0405]]
2021-03-12 03:14:35,719 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]
2021-03-12 03:14:35,878 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:14:35,878 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@662f0405]
2021-03-12 03:14:36,036 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:14:36,036 [main:117] - GENERATED CALL = (arg1).equals("kzsrq").equals("fwfkb")
2021-03-12 03:14:36,036 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@723ed9dd]]
2021-03-12 03:14:36,036 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:14:36,036 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@723ed9dd]
2021-03-12 03:14:36,036 [main:117] - GENERATED CALL = (arg1).toChar().isUpperCase()
2021-03-12 03:14:36,036 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@528e6647], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@48e0c143]]
2021-03-12 03:14:36,036 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@528e6647]
2021-03-12 03:14:36,036 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@48e0c143]
2021-03-12 03:14:36,037 [main:117] - GENERATED CALL = (arg1).toDouble().isInfinite()
2021-03-12 03:14:36,037 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3c80be62]]
2021-03-12 03:14:36,037 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:14:36,037 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3c80be62]
2021-03-12 03:14:36,197 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:14:36,197 [main:117] - GENERATED CALL = (arg1).toByte().equals("pnrtc")
2021-03-12 03:14:36,197 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3fdc9]]
2021-03-12 03:14:36,197 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:14:36,197 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3fdc9]
2021-03-12 03:14:36,197 [main:117] - GENERATED CALL = (arg1).toChar().isDefined()
2021-03-12 03:14:36,198 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19bc3a0c]]
2021-03-12 03:14:36,198 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:14:36,198 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19bc3a0c]
2021-03-12 03:14:36,198 [main:117] - GENERATED CALL = (arg1).toChar().isHighSurrogate()
2021-03-12 03:14:36,198 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@23aca0d6]]
2021-03-12 03:14:36,198 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:14:36,198 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@23aca0d6]
2021-03-12 03:14:36,361 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:14:36,362 [main:117] - GENERATED CALL = (arg1).toLong().equals("slejc")
2021-03-12 03:14:36,362 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed0a9c5]]
2021-03-12 03:14:36,362 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:14:36,362 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed0a9c5]
2021-03-12 03:14:36,362 [main:117] - GENERATED CALL = (arg1).toChar().isWhitespace()
2021-03-12 03:14:36,362 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a2f20e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@10cf15c0]]
2021-03-12 03:14:36,362 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a2f20e]
2021-03-12 03:14:36,518 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:14:36,521 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@10cf15c0]
2021-03-12 03:14:36,681 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:14:36,685 [main:117] - GENERATED CALL = (arg1).rangeTo(-87).contains(1830775201)
2021-03-12 03:14:36,685 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (arg1).rangeTo(-87).contains(1830775201)
2021-03-12 03:14:36,858 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:14:36,858 [main:66] - Compilation checking started
2021-03-12 03:14:37,308 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { (arg1).rangeTo(-87).contains(1830775201) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:14:37,311 [main:107] - replacing (ss.s, String)
2021-03-12 03:14:37,311 [main:50] - replacing ss.s String
2021-03-12 03:14:37,311 [main:54] - Getting value of type String
2021-03-12 03:14:37,469 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:37,472 [main:58] - GENERATED VALUE OF TYPE String = "mvlos"
2021-03-12 03:14:37,473 [main:61] - GENERATED IS CALL =false
2021-03-12 03:14:37,664 [main:67] - randomType = Kla9
2021-03-12 03:14:37,824 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 03:14:37,827 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}
2021-03-12 03:14:37,846 [main:106] - GETTING String from Int
2021-03-12 03:14:37,876 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:14:37,876 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:14:38,035 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:14:38,038 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:14:38,039 [main:117] - GENERATED CALL = ((arg1 + arg2)).div(-826738509445991718).toString(arg1 + arg2)
2021-03-12 03:14:38,039 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:14:38,039 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:14:38,039 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:14:38,039 [main:117] - GENERATED CALL = ((arg1 + arg2)).toInt().toString((arg1 + arg2))
2021-03-12 03:14:38,039 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:14:38,039 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:14:38,039 [main:117] - GENERATED CALL = ((arg1 + arg2)).toString((arg))
2021-03-12 03:14:38,039 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:14:38,039 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:14:38,039 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:14:38,040 [main:117] - GENERATED CALL = ((arg1 + arg2)).toByte().toString(arg1 + arg2)
2021-03-12 03:14:38,040 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:14:38,040 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:14:38,040 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:14:38,040 [main:117] - GENERATED CALL = ((arg1 + arg2)).toChar().plus(val a2 = A(123).toString()
2021-03-12 03:14:38,040 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:14:38,040 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:14:38,040 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:14:38,040 [main:117] - GENERATED CALL = ((arg1 + arg2)).toChar().titlecase()
2021-03-12 03:14:38,040 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:14:38,040 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:14:38,040 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:14:38,041 [main:117] - GENERATED CALL = ((arg1 + arg2)).toShort().toString(arg1)
2021-03-12 03:14:38,041 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:14:38,041 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:14:38,202 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:14:38,206 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:14:38,206 [main:117] - GENERATED CALL = ((arg1 + arg2)).compareTo(-1118243727).toString((arg1 + arg2))
2021-03-12 03:14:38,206 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:14:38,206 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:14:38,206 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:14:38,206 [main:117] - GENERATED CALL = ((arg1 + arg2)).toChar().lowercase()
2021-03-12 03:14:38,207 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:14:38,207 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:14:38,207 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:14:38,369 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:14:38,373 [main:117] - GENERATED CALL = ((arg1 + arg2)).toLong().toString(-265998245)
2021-03-12 03:14:38,373 [main:114] - replacement of ss.s of type String is ((arg1 + arg2)).toChar().lowercase()
2021-03-12 03:14:38,531 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:14:38,531 [main:66] - Compilation checking started
2021-03-12 03:14:38,979 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(((arg1 + arg2)).toChar().lowercase())

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:14:38,983 [main:107] - replacing ("OK", String)
2021-03-12 03:14:38,987 [main:50] - replacing "OK" String
2021-03-12 03:14:38,987 [main:54] - Getting value of type String
2021-03-12 03:14:39,197 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:39,202 [main:58] - GENERATED VALUE OF TYPE String = "ayfdw"
2021-03-12 03:14:39,203 [main:61] - GENERATED IS CALL =false
2021-03-12 03:14:39,404 [main:67] - randomType = Char
2021-03-12 03:14:39,564 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:14:39,585 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@728ccd69]
2021-03-12 03:14:39,585 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:14:39,585 [main:78] - Generated call from random type = ('᪏').toLong().toString(arg1 + arg2)
2021-03-12 03:14:39,585 [main:106] - GETTING String from String
2021-03-12 03:14:39,602 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]]
2021-03-12 03:14:39,602 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]
2021-03-12 03:14:39,761 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:14:39,928 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:40,092 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:40,096 [main:117] - GENERATED CALL = (parentProp).replaceBefore('遰', "dkpby", "ijbar")
2021-03-12 03:14:40,096 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]]
2021-03-12 03:14:40,096 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:14:40,096 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]
2021-03-12 03:14:40,096 [main:117] - GENERATED CALL = (parentProp).subSequence(arg, val justForUsageInClosure =.repeat(arg1 + arg2)
2021-03-12 03:14:40,096 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]]
2021-03-12 03:14:40,096 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]
2021-03-12 03:14:40,097 [main:117] - GENERATED CALL = (parentProp).capitalize()
2021-03-12 03:14:40,097 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:14:40,097 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:14:40,097 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:14:40,097 [main:117] - GENERATED CALL = (parentProp).get(arg1 + arg2).titlecase()
2021-03-12 03:14:40,097 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]]
2021-03-12 03:14:40,097 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@509d7fb6]
2021-03-12 03:14:40,097 [main:117] - GENERATED CALL = (parentProp).toUpperCase()
2021-03-12 03:14:40,097 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:14:40,097 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:14:40,097 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:14:40,097 [main:117] - GENERATED CALL = (parentProp).get((arg1 + arg2)).uppercase()
2021-03-12 03:14:40,097 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]]
2021-03-12 03:14:40,098 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]
2021-03-12 03:14:40,299 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:40,303 [main:117] - GENERATED CALL = (parentProp).prependIndent("syjzw")
2021-03-12 03:14:40,303 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:14:40,303 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:14:40,303 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:14:40,304 [main:117] - GENERATED CALL = (parentProp).compareTo(val a1 = A(5.toString((arg1 + arg2))
2021-03-12 03:14:40,304 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]]
2021-03-12 03:14:40,304 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489b0a92]
2021-03-12 03:14:40,473 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:14:40,477 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:14:40,480 [main:117] - GENERATED CALL = (parentProp).replaceFirstChar({a: Char -> '惟'})
2021-03-12 03:14:40,481 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]]
2021-03-12 03:14:40,481 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]
2021-03-12 03:14:40,647 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:14:40,651 [main:117] - GENERATED CALL = (parentProp).substringBefore('﷫', a1)
2021-03-12 03:14:40,651 [main:114] - replacement of "OK" of type String is (parentProp).get(arg1 + arg2).titlecase()
2021-03-12 03:14:40,816 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:14:40,817 [main:66] - Compilation checking started
2021-03-12 03:14:41,275 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException((parentProp).get(arg1 + arg2).titlecase()))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:14:41,278 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 03:14:41,278 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 03:14:41,278 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 03:14:41,445 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 03:14:41,452 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 03:14:41,466 [main:67] - randomType = Kla4
2021-03-12 03:14:41,625 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 03:14:41,629 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}
2021-03-12 03:14:41,792 [main:194] - Type params = []
2021-03-12 03:14:41,952 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 03:14:42,126 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:14:42,131 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:14:42,508 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 03:14:42,680 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:14:42,685 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:14:43,244 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 03:14:43,418 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:14:43,423 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:14:43,991 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:14:43,991 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:14:43,991 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:14:44,005 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:14:44,038 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:14:44,055 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:14:44,056 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:14:44,057 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:14:44,057 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:14:44,058 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:14:44,059 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:14:44,059 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:14:44,060 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:14:44,060 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:14:44,061 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:14:44,062 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 03:14:44,074 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:14:44,075 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 03:14:44,076 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 03:14:44,076 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:14:44,076 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 03:14:44,076 [main:107] - replacing (prope5, Int)
2021-03-12 03:14:44,076 [main:50] - replacing prope5 Int
2021-03-12 03:14:44,076 [main:54] - Getting value of type Int
2021-03-12 03:14:44,239 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:14:44,242 [main:58] - GENERATED VALUE OF TYPE Int = -2147127963
2021-03-12 03:14:44,242 [main:61] - GENERATED IS CALL =false
2021-03-12 03:14:44,618 [main:67] - randomType = LinkedHashSet<Double>
2021-03-12 03:14:44,826 [main:302] - generating value of type = LinkedHashSet<Double> false depth = 0
2021-03-12 03:14:44,990 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Double> = TODO()
2021-03-12 03:14:44,995 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Double> = TODO()
2021-03-12 03:14:45,159 [main:95] - GENERATED = linkedSetOf<Double>()
2021-03-12 03:14:45,277 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62589edd]
2021-03-12 03:14:45,277 [main:78] - Generated call from random type = (linkedSetOf<Double>()).sum()
2021-03-12 03:14:45,278 [main:106] - GETTING Int from String
2021-03-12 03:14:45,296 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31fe20d0]]
2021-03-12 03:14:45,296 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:14:45,296 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31fe20d0]
2021-03-12 03:14:45,296 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp).compareTo(parentSideEffects).inv()
2021-03-12 03:14:45,296 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a31737b]]
2021-03-12 03:14:45,296 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a31737b]
2021-03-12 03:14:45,461 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:14:45,465 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp).length.shl(1523389897)
2021-03-12 03:14:45,465 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@617efc0e]]
2021-03-12 03:14:45,465 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:14:45,465 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@617efc0e]
2021-03-12 03:14:45,625 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:14:45,628 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:14:45,632 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp).subSequence(arg1, arg).indexOfFirst({a: Char -> false})
2021-03-12 03:14:45,632 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]]
2021-03-12 03:14:45,632 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:14:45,632 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]
2021-03-12 03:14:45,791 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:14:45,794 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp).compareTo(a1).rem(-25)
2021-03-12 03:14:45,795 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@7677697a]]
2021-03-12 03:14:45,795 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:14:45,961 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:45,965 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp).compareTo("uggsk").absoluteValue
2021-03-12 03:14:45,965 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61a456ce]]
2021-03-12 03:14:45,965 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:14:45,965 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61a456ce]
2021-03-12 03:14:45,965 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp).compareTo(var prop: String =.rotateRight(arg)
2021-03-12 03:14:45,965 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e246b2]]
2021-03-12 03:14:45,965 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:14:45,965 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e246b2]
2021-03-12 03:14:46,129 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:14:46,133 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp).compareTo(sideEffects).plus(46)
2021-03-12 03:14:46,133 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@460ed693]]
2021-03-12 03:14:46,133 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@460ed693]
2021-03-12 03:14:46,289 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 03:14:46,455 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 03:14:46,460 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 03:14:46,626 [main:302] - generating value of type = Char true depth = 3
2021-03-12 03:14:46,630 [main:95] - GENERATED = charArrayOf('ꐘ')
2021-03-12 03:14:46,791 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:14:46,955 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:14:46,958 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp).lastIndexOfAny(charArrayOf('ꐘ'), 1459558176, true)
2021-03-12 03:14:46,958 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943680c]]
2021-03-12 03:14:46,958 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943680c]
2021-03-12 03:14:46,959 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp).length.unaryPlus()
2021-03-12 03:14:46,959 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d5ea941]]
2021-03-12 03:14:46,959 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d5ea941]
2021-03-12 03:14:46,959 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp).length.shr(arg1 + arg2)
2021-03-12 03:14:46,959 [main:114] - replacement of prope5 of type Int is (C("lvmxc").grandParentProp).compareTo(sideEffects).plus(46)
2021-03-12 03:14:47,119 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:14:47,120 [main:66] - Compilation checking started
2021-03-12 03:14:47,574 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        (C("lvmxc").grandParentProp).compareTo(sideEffects).plus(46)++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:14:47,577 [main:107] - replacing (s, String)
2021-03-12 03:14:47,577 [main:50] - replacing s String
2021-03-12 03:14:47,577 [main:54] - Getting value of type String
2021-03-12 03:14:47,741 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:47,744 [main:58] - GENERATED VALUE OF TYPE String = "ifxmz"
2021-03-12 03:14:47,744 [main:61] - GENERATED IS CALL =false
2021-03-12 03:14:47,938 [main:67] - randomType = Byte
2021-03-12 03:14:48,111 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:14:48,146 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@141fede7]
2021-03-12 03:14:48,146 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:14:48,146 [main:78] - Generated call from random type = (-98).toChar().plus(val parentProp: String
2021-03-12 03:14:48,146 [main:106] - GETTING String from String
2021-03-12 03:14:48,162 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]]
2021-03-12 03:14:48,162 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:14:48,322 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:14:48,326 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fc4b363]
2021-03-12 03:14:48,486 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:14:48,489 [main:117] - GENERATED CALL = (a3).subSequence(arg, 2133865726).repeat(1035871862)
2021-03-12 03:14:48,489 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]]
2021-03-12 03:14:48,490 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]
2021-03-12 03:14:48,649 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:14:48,652 [main:117] - GENERATED CALL = (a3).padStart(arg1 + arg2, '쌼')
2021-03-12 03:14:48,652 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]]
2021-03-12 03:14:48,652 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12659229]
2021-03-12 03:14:48,652 [main:117] - GENERATED CALL = (a3).trimStart()
2021-03-12 03:14:48,652 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]]
2021-03-12 03:14:48,653 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]
2021-03-12 03:14:48,653 [main:117] - GENERATED CALL = (a3).dropLast(arg1 + arg2)
2021-03-12 03:14:48,653 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]]
2021-03-12 03:14:48,653 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]
2021-03-12 03:14:48,816 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:14:48,980 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:49,153 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:49,157 [main:117] - GENERATED CALL = (a3).replaceAfterLast('ꀘ', "bnnds", "zltuc")
2021-03-12 03:14:49,157 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]]
2021-03-12 03:14:49,157 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:14:49,361 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:14:49,365 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]
2021-03-12 03:14:49,522 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:14:49,688 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 03:14:49,692 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 03:14:50,038 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:14:50,041 [main:95] - GENERATED = Regex("ppqix")
2021-03-12 03:14:50,199 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 03:14:50,203 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:14:50,371 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:14:50,376 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:14:50,736 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-12 03:14:50,914 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:14:50,919 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:14:51,278 [main:302] - generating value of type = Int true depth = 7
2021-03-12 03:14:51,281 [main:95] - GENERATED = StringBuilder(-836861002)
2021-03-12 03:14:51,282 [main:95] - GENERATED = StringBuilder(StringBuilder(-836861002))
2021-03-12 03:14:51,282 [main:117] - GENERATED CALL = (a3).subSequence(val justForUsageInClosure =.replace(Regex("ppqix"), {a: MatchResult -> StringBuilder(StringBuilder(-836861002))})
2021-03-12 03:14:51,282 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]]
2021-03-12 03:14:51,282 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]
2021-03-12 03:14:51,441 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:51,445 [main:117] - GENERATED CALL = (a3).prependIndent("veqpf")
2021-03-12 03:14:51,445 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]]
2021-03-12 03:14:51,445 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]
2021-03-12 03:14:51,607 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:14:51,611 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:14:51,614 [main:117] - GENERATED CALL = (a3).filterNot({a: Char -> true})
2021-03-12 03:14:51,614 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]]
2021-03-12 03:14:51,614 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]
2021-03-12 03:14:51,615 [main:117] - GENERATED CALL = (a3).trimMargin(var sideEffects: String =
2021-03-12 03:14:51,615 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]]
2021-03-12 03:14:51,615 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]
2021-03-12 03:14:51,615 [main:117] - GENERATED CALL = (a3).takeLast((arg1 + arg2))
2021-03-12 03:14:51,615 [main:114] - replacement of s of type String is (a3).padStart(arg1 + arg2, '쌼')
2021-03-12 03:14:51,772 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:14:51,773 [main:66] - Compilation checking started
2021-03-12 03:14:52,222 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().(a3).padStart(arg1 + arg2, '쌼')
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:14:52,225 [main:107] - replacing (IllegalStateException("OK"), IllegalStateException)
2021-03-12 03:14:52,225 [main:50] - replacing IllegalStateException("OK") IllegalStateException
2021-03-12 03:14:52,225 [main:54] - Getting value of type IllegalStateException
2021-03-12 03:14:52,383 [main:302] - generating value of type = IllegalStateException false depth = 0
2021-03-12 03:14:52,390 [main:58] - GENERATED VALUE OF TYPE IllegalStateException = IllegalStateException()
2021-03-12 03:14:52,390 [main:61] - GENERATED IS CALL =true
2021-03-12 03:14:52,755 [main:67] - randomType = Double?
2021-03-12 03:14:52,913 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:14:52,956 [main:106] - GETTING IllegalStateException from Int
2021-03-12 03:14:52,988 [main:106] - GETTING IllegalStateException from String
2021-03-12 03:14:53,004 [main:106] - GETTING IllegalStateException from String
2021-03-12 03:14:53,005 [main:106] - GETTING IllegalStateException from Int
2021-03-12 03:14:53,006 [main:106] - GETTING IllegalStateException from Int
2021-03-12 03:14:53,007 [main:106] - GETTING IllegalStateException from A
2021-03-12 03:14:53,019 [main:106] - GETTING IllegalStateException from String
2021-03-12 03:14:53,020 [main:106] - GETTING IllegalStateException from String
2021-03-12 03:14:53,021 [main:106] - GETTING IllegalStateException from String
2021-03-12 03:14:53,022 [main:106] - GETTING IllegalStateException from String
2021-03-12 03:14:53,022 [main:106] - GETTING IllegalStateException from String
2021-03-12 03:14:53,023 [main:106] - GETTING IllegalStateException from A
2021-03-12 03:14:53,024 [main:106] - GETTING IllegalStateException from Int
2021-03-12 03:14:53,025 [main:106] - GETTING IllegalStateException from String
2021-03-12 03:14:53,026 [main:106] - GETTING IllegalStateException from A
2021-03-12 03:14:53,027 [main:106] - GETTING IllegalStateException from Int
2021-03-12 03:14:53,028 [main:106] - GETTING IllegalStateException from String
2021-03-12 03:14:53,028 [main:114] - replacement of IllegalStateException("OK") of type IllegalStateException is IllegalStateException()
2021-03-12 03:14:53,185 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:14:53,185 [main:66] - Compilation checking started
2021-03-12 03:14:53,639 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException())

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:14:53,642 [main:107] - replacing ("OK", String)
2021-03-12 03:14:53,642 [main:50] - replacing "OK" String
2021-03-12 03:14:53,642 [main:54] - Getting value of type String
2021-03-12 03:14:53,843 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:53,846 [main:58] - GENERATED VALUE OF TYPE String = "inoof"
2021-03-12 03:14:53,846 [main:61] - GENERATED IS CALL =false
2021-03-12 03:14:54,037 [main:67] - randomType = Long
2021-03-12 03:14:54,204 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:14:54,249 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@12c16090]
2021-03-12 03:14:54,250 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:14:54,411 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:54,415 [main:78] - Generated call from random type = (2395627041652219904).toChar().plus("qsaxp")
2021-03-12 03:14:54,415 [main:106] - GETTING String from String
2021-03-12 03:14:54,436 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]]
2021-03-12 03:14:54,436 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]
2021-03-12 03:14:54,595 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:14:54,598 [main:117] - GENERATED CALL = (parentProp).trimMargin("qtrmh")
2021-03-12 03:14:54,599 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]]
2021-03-12 03:14:54,599 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9dd063]
2021-03-12 03:14:54,758 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:14:54,924 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:14:54,927 [main:117] - GENERATED CALL = (parentProp).commonSuffixWith("jaitl", false)
2021-03-12 03:14:54,928 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]]
2021-03-12 03:14:54,928 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]
2021-03-12 03:14:55,090 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:14:55,093 [main:117] - GENERATED CALL = (parentProp).substringBeforeLast('䬓', a3)
2021-03-12 03:14:55,094 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]]
2021-03-12 03:14:55,094 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]
2021-03-12 03:14:55,094 [main:117] - GENERATED CALL = (parentProp).reversed()
2021-03-12 03:14:55,094 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]]
2021-03-12 03:14:55,094 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]
2021-03-12 03:14:55,251 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:14:55,257 [main:117] - GENERATED CALL = (parentProp).removeSurrounding("kayak")
2021-03-12 03:14:55,258 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:14:55,258 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:14:55,258 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:14:55,258 [main:117] - GENERATED CALL = (parentProp).get(val justForUsageInClosure =.uppercase()
2021-03-12 03:14:55,258 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:14:55,258 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:14:55,414 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:14:55,577 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:14:55,582 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:14:55,930 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:14:55,936 [main:95] - GENERATED = StringBuilder("whspc")
2021-03-12 03:14:55,937 [main:117] - GENERATED CALL = (parentProp).removePrefix(StringBuilder("whspc"))
2021-03-12 03:14:55,937 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]]
2021-03-12 03:14:55,937 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]
2021-03-12 03:14:56,095 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:14:56,255 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:14:56,262 [main:117] - GENERATED CALL = (parentProp).replaceRange(val justForUsageInClosure =
2021-03-12 03:14:56,262 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]]
2021-03-12 03:14:56,262 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]
2021-03-12 03:14:56,262 [main:117] - GENERATED CALL = (parentProp).removeRange((arg1 + arg2), arg)
2021-03-12 03:14:56,262 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]]
2021-03-12 03:14:56,262 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]
2021-03-12 03:14:56,417 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:14:56,421 [main:117] - GENERATED CALL = (parentProp).substringAfter('ﶹ', null.toString())
2021-03-12 03:14:56,421 [main:114] - replacement of "OK" of type String is (2395627041652219904).toChar().plus("qsaxp")
2021-03-12 03:14:56,576 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:14:56,576 [main:66] - Compilation checking started
2021-03-12 03:14:57,026 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException((2395627041652219904).toChar().plus("qsaxp")))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:14:57,029 [main:107] - replacing (checkFinished, Boolean)
2021-03-12 03:14:57,029 [main:50] - replacing checkFinished Boolean
2021-03-12 03:14:57,029 [main:54] - Getting value of type Boolean
2021-03-12 03:14:57,195 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:14:57,199 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 03:14:57,199 [main:61] - GENERATED IS CALL =false
2021-03-12 03:14:57,206 [main:67] - randomType = Int
2021-03-12 03:14:57,364 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:14:57,404 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:14:57,405 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c37e05c]
2021-03-12 03:14:57,405 [main:78] - Generated call from random type = (-787303073).toChar().isLetterOrDigit()
2021-03-12 03:14:57,405 [main:106] - GETTING Boolean from String
2021-03-12 03:14:57,421 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@549a1bdb]]
2021-03-12 03:14:57,421 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@549a1bdb]
2021-03-12 03:14:57,579 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:14:57,583 [main:117] - GENERATED CALL = (a2).startsWith(val a1 = A(5
2021-03-12 03:14:57,583 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@6e85002b]]
2021-03-12 03:14:57,583 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:14:57,583 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@6e85002b]
2021-03-12 03:14:57,740 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:14:57,740 [main:117] - GENERATED CALL = (a2).subSequence((arg1 + arg2), arg).equals("derbq")
2021-03-12 03:14:57,740 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@316768ff]]
2021-03-12 03:14:57,740 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:14:57,741 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@316768ff]
2021-03-12 03:14:57,741 [main:117] - GENERATED CALL = (a2).get((arg)).isSurrogate()
2021-03-12 03:14:57,741 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f286914]]
2021-03-12 03:14:57,741 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:14:57,899 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:14:57,903 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f286914]
2021-03-12 03:14:57,903 [main:117] - GENERATED CALL = (a2).get(1102929255).isISOControl()
2021-03-12 03:14:57,903 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@723ed9dd]]
2021-03-12 03:14:57,903 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:14:57,903 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@723ed9dd]
2021-03-12 03:14:57,903 [main:117] - GENERATED CALL = (a2).get((arg)).isUpperCase()
2021-03-12 03:14:57,904 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1010d71a]]
2021-03-12 03:14:57,904 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1010d71a]
2021-03-12 03:14:57,904 [main:117] - GENERATED CALL = (a2).isNotBlank()
2021-03-12 03:14:57,904 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72414c92]]
2021-03-12 03:14:57,904 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:14:57,904 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72414c92]
2021-03-12 03:14:57,904 [main:117] - GENERATED CALL = (a2).get((arg1 + arg2)).isLowerCase()
2021-03-12 03:14:57,904 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbc86d9]]
2021-03-12 03:14:57,904 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbc86d9]
2021-03-12 03:14:58,061 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:14:58,064 [main:117] - GENERATED CALL = (a2).endsWith(a1, false)
2021-03-12 03:14:58,064 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3887f]]
2021-03-12 03:14:58,064 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:14:58,258 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:14:58,261 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3887f]
2021-03-12 03:14:58,417 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:14:58,577 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:14:58,580 [main:117] - GENERATED CALL = (a2).get(139788473).equals('얱', false)
2021-03-12 03:14:58,580 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff62665]]
2021-03-12 03:14:58,580 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:14:58,581 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff62665]
2021-03-12 03:14:58,735 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:14:58,897 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:14:58,901 [main:117] - GENERATED CALL = (a2).subSequence(arg1 + arg2, arg1 + arg2).endsWith('짉', false)
2021-03-12 03:14:58,901 [main:114] - replacement of checkFinished of type Boolean is (a2).get((arg)).isUpperCase()
2021-03-12 03:14:59,055 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:14:59,055 [main:66] - Compilation checking started
2021-03-12 03:14:59,499 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((a2).get((arg)).isUpperCase() && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:14:59,502 [main:107] - replacing (prope8 != null, Boolean)
2021-03-12 03:14:59,503 [main:50] - replacing prope8 != null Boolean
2021-03-12 03:14:59,503 [main:54] - Getting value of type Boolean
2021-03-12 03:14:59,670 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:14:59,673 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 03:14:59,673 [main:61] - GENERATED IS CALL =false
2021-03-12 03:15:00,983 [main:67] - randomType = Function2<LinkedHashMap<Byte, List<Float>>, Byte, Float>
2021-03-12 03:15:00,984 [main:106] - GETTING Boolean from A
2021-03-12 03:15:00,995 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@549a1bdb]]
2021-03-12 03:15:00,995 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@549a1bdb]
2021-03-12 03:15:01,154 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:01,158 [main:117] - GENERATED CALL = (A(5, 10)).grandParentProp.startsWith(parentSideEffects, false)
2021-03-12 03:15:01,158 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in box.A[DeserializedSimpleFunctionDescriptor@65c16ba5], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5682849]]
2021-03-12 03:15:01,158 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in box.A[DeserializedSimpleFunctionDescriptor@65c16ba5]
2021-03-12 03:15:01,317 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:15:01,317 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5682849]
2021-03-12 03:15:01,473 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:01,477 [main:117] - GENERATED CALL = (A(5, 10)).equals("tdgzq").and(true)
2021-03-12 03:15:01,477 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@549a1bdb]]
2021-03-12 03:15:01,477 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@549a1bdb]
2021-03-12 03:15:01,633 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:01,636 [main:117] - GENERATED CALL = (A(5, 10)).prop.startsWith(null.toString(), false)
2021-03-12 03:15:01,636 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in box.A[DeserializedSimpleFunctionDescriptor@65c16ba5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@662f0405]]
2021-03-12 03:15:01,636 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in box.A[DeserializedSimpleFunctionDescriptor@65c16ba5]
2021-03-12 03:15:01,792 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:15:01,793 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@662f0405]
2021-03-12 03:15:01,950 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:15:01,950 [main:117] - GENERATED CALL = (A(5, 10)).equals("vonqd").equals("wzkbn")
2021-03-12 03:15:01,951 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbc86d9]]
2021-03-12 03:15:01,951 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbc86d9]
2021-03-12 03:15:02,105 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:15:02,266 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:02,270 [main:117] - GENERATED CALL = (A(5, 10)).grandParentProp.endsWith("amcxp", false)
2021-03-12 03:15:02,270 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@549a1bdb]]
2021-03-12 03:15:02,270 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@549a1bdb]
2021-03-12 03:15:02,430 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:02,433 [main:117] - GENERATED CALL = (A(5, 10)).parentProp.startsWith(C("lvmxc").grandParentProp, true)
2021-03-12 03:15:02,593 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbc86d9]]
2021-03-12 03:15:02,593 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbc86d9]
2021-03-12 03:15:02,752 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:02,756 [main:117] - GENERATED CALL = (A(5, 10)).parentProp.endsWith(a3, true)
2021-03-12 03:15:02,756 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbc86d9]]
2021-03-12 03:15:02,756 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbc86d9]
2021-03-12 03:15:02,954 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:15:03,115 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:03,119 [main:117] - GENERATED CALL = (A(5, 10)).prop.endsWith("tiyxj", true)
2021-03-12 03:15:03,119 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in box.A[DeserializedSimpleFunctionDescriptor@65c16ba5], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@156087f]]
2021-03-12 03:15:03,119 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in box.A[DeserializedSimpleFunctionDescriptor@65c16ba5]
2021-03-12 03:15:03,276 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:15:03,276 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@156087f]
2021-03-12 03:15:03,436 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:03,440 [main:117] - GENERATED CALL = (A(5, 10)).equals("nmgui").or(false)
2021-03-12 03:15:03,440 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@355e303]]
2021-03-12 03:15:03,440 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@355e303]
2021-03-12 03:15:03,440 [main:117] - GENERATED CALL = (A(5, 10)).grandParentProp.toBoolean()
2021-03-12 03:15:03,440 [main:114] - replacement of prope8 != null of type Boolean is (A(5, 10)).equals("vonqd").equals("wzkbn")
2021-03-12 03:15:03,599 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:15:03,600 [main:66] - Compilation checking started
2021-03-12 03:15:04,064 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while ((A(5, 10)).equals("vonqd").equals("wzkbn")) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:15:04,066 [main:107] - replacing (prope5, Int)
2021-03-12 03:15:04,067 [main:50] - replacing prope5 Int
2021-03-12 03:15:04,067 [main:54] - Getting value of type Int
2021-03-12 03:15:04,230 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:04,233 [main:58] - GENERATED VALUE OF TYPE Int = 1638847840
2021-03-12 03:15:04,234 [main:61] - GENERATED IS CALL =false
2021-03-12 03:15:04,440 [main:67] - randomType = Kla6<String?>
2021-03-12 03:15:04,601 [main:302] - generating value of type = Kla6<String?> false depth = 0
2021-03-12 03:15:04,605 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 03:15:05,504 [main:302] - generating value of type = Kla9 false depth = 2
2021-03-12 03:15:05,508 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}
2021-03-12 03:15:05,528 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@5d18e342]
2021-03-12 03:15:05,691 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:15:05,691 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]
2021-03-12 03:15:05,850 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:05,854 [main:78] - Generated call from random type = (Kla9).equals("kiulo").compareTo(true)
2021-03-12 03:15:05,855 [main:106] - GETTING Int from A
2021-03-12 03:15:05,870 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6083fddb]]
2021-03-12 03:15:05,870 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6083fddb]
2021-03-12 03:15:05,871 [main:117] - GENERATED CALL = (A(5, 10)).prop.toInt()
2021-03-12 03:15:05,871 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in box.A[DeserializedSimpleFunctionDescriptor@65c16ba5], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]]
2021-03-12 03:15:05,871 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in box.A[DeserializedSimpleFunctionDescriptor@65c16ba5]
2021-03-12 03:15:06,029 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:15:06,030 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]
2021-03-12 03:15:06,185 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:06,189 [main:117] - GENERATED CALL = (A(5, 10)).equals("jbvoq").compareTo(true)
2021-03-12 03:15:06,189 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6083fddb]]
2021-03-12 03:15:06,189 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6083fddb]
2021-03-12 03:15:06,190 [main:117] - GENERATED CALL = (A(5, 10)).parentProp.toInt()
2021-03-12 03:15:06,190 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d]]
2021-03-12 03:15:06,190 [main:117] - GENERATED CALL = (A(5, 10)).grandParentProp.length
2021-03-12 03:15:06,190 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]]
2021-03-12 03:15:06,190 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]
2021-03-12 03:15:06,345 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:06,348 [main:117] - GENERATED CALL = (A(5, 10)).grandParentProp.compareTo(null.toString(), true)
2021-03-12 03:15:06,348 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6083fddb]]
2021-03-12 03:15:06,348 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6083fddb]
2021-03-12 03:15:06,349 [main:117] - GENERATED CALL = (A(5, 10)).grandParentProp.toInt()
2021-03-12 03:15:06,349 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d]]
2021-03-12 03:15:06,349 [main:117] - GENERATED CALL = (A(5, 10)).parentProp.length
2021-03-12 03:15:06,349 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]]
2021-03-12 03:15:06,349 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]
2021-03-12 03:15:06,509 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:06,512 [main:117] - GENERATED CALL = (A(5, 10)).prop.compareTo(a3, false)
2021-03-12 03:15:06,512 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]]
2021-03-12 03:15:06,512 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]
2021-03-12 03:15:06,669 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:06,673 [main:117] - GENERATED CALL = (A(5, 10)).parentProp.compareTo(val a3 = A().toString()
2021-03-12 03:15:06,673 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d]]
2021-03-12 03:15:06,673 [main:117] - GENERATED CALL = (A(5, 10)).prop.length
2021-03-12 03:15:06,673 [main:114] - replacement of prope5 of type Int is (A(5, 10)).grandParentProp.length
2021-03-12 03:15:06,830 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:15:06,830 [main:66] - Compilation checking started
2021-03-12 03:15:07,265 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (A(5, 10)).grandParentProp.length)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:15:07,268 [main:107] - replacing ({
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 03:15:07,268 [main:50] - replacing {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 03:15:07,268 [main:54] - Getting value of type Unit?
2021-03-12 03:15:07,460 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 03:15:07,620 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:07,625 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:07,978 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 3
2021-03-12 03:15:07,981 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 03:15:08,148 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 03:15:08,153 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 03:15:08,500 [main:302] - generating value of type = Boolean true depth = 7
2021-03-12 03:15:08,504 [main:95] - GENERATED = check(true)
2021-03-12 03:15:08,504 [main:95] - GENERATED = contract({ check(true)})
2021-03-12 03:15:08,504 [main:58] - GENERATED VALUE OF TYPE Unit? = contract({ check(true)})
2021-03-12 03:15:08,504 [main:61] - GENERATED IS CALL =true
2021-03-12 03:15:08,518 [main:67] - randomType = Kla1
2021-03-12 03:15:08,676 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 03:15:08,680 [main:112] - generating klass Kla1 text = class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}
2021-03-12 03:15:08,836 [main:194] - Type params = []
2021-03-12 03:15:09,002 [main:106] - GETTING Unit? from Int
2021-03-12 03:15:09,038 [main:106] - GETTING Unit? from A
2021-03-12 03:15:09,052 [main:106] - GETTING Unit? from A
2021-03-12 03:15:09,053 [main:106] - GETTING Unit? from Int
2021-03-12 03:15:09,054 [main:106] - GETTING Unit? from A
2021-03-12 03:15:09,054 [main:106] - GETTING Unit? from String
2021-03-12 03:15:09,075 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d8b004a]]
2021-03-12 03:15:09,075 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:15:09,239 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:09,242 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d8b004a]
2021-03-12 03:15:09,404 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 03:15:09,408 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:15:09,570 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:09,575 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:10,105 [main:302] - generating value of type = Int true depth = 4
2021-03-12 03:15:10,109 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 03:15:10,112 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 03:15:10,276 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:10,281 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:10,809 [main:302] - generating value of type = Int true depth = 8
2021-03-12 03:15:10,813 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 03:15:10,816 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 03:15:10,980 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:15:10,985 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:15:11,513 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 03:15:11,516 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-12 03:15:11,520 [main:302] - generating value of type = Any false depth = 13
2021-03-12 03:15:11,520 [main:95] - GENERATED = require(true, { "jyclf"})
2021-03-12 03:15:11,520 [main:95] - GENERATED = repeat(1154879169, {a: Int -> require(true, { "jyclf"})})
2021-03-12 03:15:11,520 [main:95] - GENERATED = repeat(-1306799372, {a: Int -> repeat(1154879169, {a: Int -> require(true, { "jyclf"})})})
2021-03-12 03:15:11,521 [main:117] - GENERATED CALL = (a3)?.subSequence((arg), -408555477).forEach({a: Char -> repeat(-1306799372, {a: Int -> repeat(1154879169, {a: Int -> require(true, { "jyclf"})})})})
2021-03-12 03:15:11,521 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a51afb]]
2021-03-12 03:15:11,521 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:15:11,521 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a51afb]
2021-03-12 03:15:11,684 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 03:15:11,688 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:15:11,894 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:15:11,899 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:15:12,241 [main:302] - generating value of type = Any false depth = 4
2021-03-12 03:15:12,241 [main:95] - GENERATED = print("kqqdu")
2021-03-12 03:15:12,241 [main:117] - GENERATED CALL = (a3)?.subSequence(arg, arg).forEachIndexed({a: Int, b: Char -> print("kqqdu")})
2021-03-12 03:15:12,241 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d8b004a]]
2021-03-12 03:15:12,241 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d8b004a]
2021-03-12 03:15:12,398 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 03:15:12,402 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:15:12,564 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:15:12,569 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:15:12,912 [main:302] - generating value of type = Any false depth = 4
2021-03-12 03:15:12,912 [main:95] - GENERATED = println("zsugc")
2021-03-12 03:15:12,913 [main:117] - GENERATED CALL = (a3)?.forEach({a: Char -> println("zsugc")})
2021-03-12 03:15:12,913 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a51afb]]
2021-03-12 03:15:12,913 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a51afb]
2021-03-12 03:15:13,069 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 03:15:13,073 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:15:13,235 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:13,240 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:13,588 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 03:15:13,591 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 03:15:13,758 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:15:13,762 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:15:14,111 [main:302] - generating value of type = Any false depth = 8
2021-03-12 03:15:14,111 [main:95] - GENERATED = print("mryet")
2021-03-12 03:15:14,111 [main:95] - GENERATED = contract({ print("mryet")})
2021-03-12 03:15:14,112 [main:117] - GENERATED CALL = (a3)?.forEachIndexed({a: Int, b: Char -> contract({ print("mryet")})})
2021-03-12 03:15:14,112 [main:114] - replacement of {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    } of type Unit? is (a3)?.forEachIndexed({a: Int, b: Char -> contract({ print("mryet")})})
2021-03-12 03:15:14,269 [main:33] - Trying to replace BLOCK on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 03:15:14,269 [main:66] - Compilation checking started
2021-03-12 03:15:14,277 [main:71] - Wrong syntax or breaks conditions
2021-03-12 03:15:14,277 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) (a3)?.forEachIndexed({a: Int, b: Char -> contract({ print("mryet")})})
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:15:14,280 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 03:15:14,280 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 03:15:14,280 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 03:15:14,441 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 03:15:14,447 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 03:15:14,461 [main:67] - randomType = Kla7
2021-03-12 03:15:14,619 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 03:15:14,622 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 03:15:14,630 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:14,648 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:14,648 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:14,649 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:15:14,679 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:14,679 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:15:14,680 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:14,681 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:15:14,681 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:14,682 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 03:15:14,693 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:15:14,694 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:14,695 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 03:15:14,695 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:14,696 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 03:15:14,697 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:14,697 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:15:14,697 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 03:15:14,697 [main:107] - replacing (prope1, Continuation<*>)
2021-03-12 03:15:14,697 [main:50] - replacing prope1 Continuation<*>
2021-03-12 03:15:14,697 [main:54] - Getting value of type Continuation<*>
2021-03-12 03:15:14,855 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 03:15:15,016 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 03:15:15,021 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 03:15:15,559 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 03:15:15,722 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:15,727 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:16,093 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 03:15:16,321 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:16,326 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:16,863 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 03:15:17,030 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:15:17,035 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:15:17,583 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-12 03:15:17,750 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 03:15:17,754 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 03:15:18,302 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 15
2021-03-12 03:15:18,470 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:15:18,475 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:15:19,038 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 18
2021-03-12 03:15:19,038 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:15:19,038 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 03:15:19,038 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:15:19,038 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:19,038 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:19,038 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 03:15:19,038 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 03:15:19,052 [main:67] - randomType = Kla4
2021-03-12 03:15:19,209 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 03:15:19,212 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}
2021-03-12 03:15:19,371 [main:194] - Type params = []
2021-03-12 03:15:19,525 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 03:15:19,686 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:19,690 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:20,045 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 03:15:20,213 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:20,218 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:20,821 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:20,821 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:20,839 [main:106] - GETTING Continuation<*> from Int
2021-03-12 03:15:20,869 [main:106] - GETTING Continuation<*> from Int
2021-03-12 03:15:20,870 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:20,886 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:20,887 [main:106] - GETTING Continuation<*> from Int
2021-03-12 03:15:20,888 [main:106] - GETTING Continuation<*> from A
2021-03-12 03:15:20,899 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:20,900 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:20,901 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:20,902 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:20,902 [main:106] - GETTING Continuation<*> from A
2021-03-12 03:15:20,903 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:20,904 [main:106] - GETTING Continuation<*> from Int
2021-03-12 03:15:20,905 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:20,906 [main:106] - GETTING Continuation<*> from A
2021-03-12 03:15:20,906 [main:106] - GETTING Continuation<*> from Int
2021-03-12 03:15:20,907 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:20,907 [main:111] - Cant find and generate replacement for prope1 type Continuation<*>
2021-03-12 03:15:20,907 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 03:15:20,907 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 03:15:20,907 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 03:15:21,064 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 03:15:21,070 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 03:15:22,801 [main:67] - randomType = Sequence<Triple<Function2<Sequence<Kla4>, Kla7, Byte>, UByte, ULong?>?>
2021-03-12 03:15:22,802 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 03:15:22,977 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 03:15:22,978 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:15:23,007 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:23,024 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:23,025 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 03:15:23,025 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:15:23,026 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:23,026 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:23,027 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:23,028 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:15:23,028 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:23,029 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:23,030 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:23,030 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:15:23,031 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:15:23,031 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 03:15:23,031 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 03:15:23,032 [main:107] - replacing (let(x), Unit?)
2021-03-12 03:15:23,032 [main:50] - replacing let(x) Unit?
2021-03-12 03:15:23,032 [main:54] - Getting value of type Unit?
2021-03-12 03:15:23,187 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 03:15:23,351 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:15:23,356 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:15:23,907 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 03:15:23,911 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-12 03:15:23,914 [main:302] - generating value of type = Any false depth = 4
2021-03-12 03:15:23,915 [main:95] - GENERATED = check(false, { "xqqkm"})
2021-03-12 03:15:23,915 [main:58] - GENERATED VALUE OF TYPE Unit? = check(false, { "xqqkm"})
2021-03-12 03:15:23,915 [main:61] - GENERATED IS CALL =true
2021-03-12 03:15:24,120 [main:67] - randomType = C?
2021-03-12 03:15:24,282 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:15:24,285 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:15:24,444 [main:194] - Type params = []
2021-03-12 03:15:24,608 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:15:24,620 [main:106] - GETTING Unit? from String
2021-03-12 03:15:24,638 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a51afb]]
2021-03-12 03:15:24,638 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a51afb]
2021-03-12 03:15:24,802 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 03:15:24,805 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:15:24,969 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 03:15:24,973 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 03:15:25,316 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 03:15:25,319 [main:95] - GENERATED = require(false)
2021-03-12 03:15:25,320 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp)?.forEachIndexed({a: Int, b: Char -> require(false)})
2021-03-12 03:15:25,320 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d8b004a]]
2021-03-12 03:15:25,320 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d8b004a]
2021-03-12 03:15:25,519 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 03:15:25,523 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:15:25,690 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:25,694 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:26,234 [main:302] - generating value of type = Int true depth = 4
2021-03-12 03:15:26,238 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 03:15:26,242 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 03:15:26,407 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:26,412 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:26,961 [main:302] - generating value of type = Int true depth = 8
2021-03-12 03:15:26,965 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 03:15:26,968 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 03:15:27,127 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:27,131 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 03:15:27,657 [main:302] - generating value of type = Int true depth = 12
2021-03-12 03:15:27,660 [main:302] - generating value of type = Function1<Int, Unit> false depth = 12
2021-03-12 03:15:27,664 [main:302] - generating value of type = Unit false depth = 13
2021-03-12 03:15:27,822 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:15:27,827 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:15:28,350 [main:302] - generating value of type = Boolean true depth = 16
2021-03-12 03:15:28,350 [main:385] - Cant generate call of fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:15:28,351 [main:95] - GENERATED = repeat(454818509, {a: Int -> })
2021-03-12 03:15:28,351 [main:95] - GENERATED = repeat(550765713, {a: Int -> repeat(454818509, {a: Int -> })})
2021-03-12 03:15:28,351 [main:95] - GENERATED = repeat(1234722177, {a: Int -> repeat(550765713, {a: Int -> repeat(454818509, {a: Int -> })})})
2021-03-12 03:15:28,351 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp)?.forEach({a: Char -> repeat(1234722177, {a: Int -> repeat(550765713, {a: Int -> repeat(454818509, {a: Int -> })})})})
2021-03-12 03:15:28,351 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a51afb]]
2021-03-12 03:15:28,352 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:15:28,352 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a51afb]
2021-03-12 03:15:28,510 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 03:15:28,513 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:15:28,674 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:15:28,679 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:15:29,025 [main:302] - generating value of type = Any false depth = 4
2021-03-12 03:15:29,025 [main:95] - GENERATED = print("ngusx")
2021-03-12 03:15:29,025 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp)?.subSequence(arg, arg1 + arg2).forEachIndexed({a: Int, b: Char -> print("ngusx")})
2021-03-12 03:15:29,025 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d8b004a]]
2021-03-12 03:15:29,025 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:15:29,180 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:29,184 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d8b004a]
2021-03-12 03:15:29,337 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 03:15:29,340 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:15:29,504 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 03:15:29,508 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 03:15:29,848 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 03:15:29,852 [main:95] - GENERATED = require(false)
2021-03-12 03:15:29,852 [main:117] - GENERATED CALL = (C("lvmxc").grandParentProp)?.subSequence(val justForUsageInClosure =.forEach({a: Char -> require(false)})
2021-03-12 03:15:29,852 [main:114] - replacement of let(x) of type Unit? is (C("lvmxc").grandParentProp)?.subSequence(val justForUsageInClosure =.forEach({a: Char -> require(false)})
2021-03-12 03:15:30,004 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 03:15:30,004 [main:66] - Compilation checking started
2021-03-12 03:15:30,012 [main:71] - Wrong syntax or breaks conditions
2021-03-12 03:15:30,012 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.(C("lvmxc").grandParentProp)?.subSequence(val justForUsageInClosure =.forEach({a: Char -> require(false)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:15:30,015 [main:107] - replacing (value, Ty0)
2021-03-12 03:15:30,015 [main:50] - replacing value Ty0
2021-03-12 03:15:30,015 [main:54] - Getting value of type Ty0
2021-03-12 03:15:30,210 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 03:15:30,216 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 03:15:30,223 [main:67] - randomType = Boolean
2021-03-12 03:15:30,378 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:30,391 [main:106] - GETTING Ty0 from Int
2021-03-12 03:15:30,420 [main:106] - GETTING Ty0 from String
2021-03-12 03:15:30,436 [main:106] - GETTING Ty0 from String
2021-03-12 03:15:30,437 [main:106] - GETTING Ty0 from A
2021-03-12 03:15:30,448 [main:106] - GETTING Ty0 from String
2021-03-12 03:15:30,448 [main:106] - GETTING Ty0 from Int
2021-03-12 03:15:30,449 [main:106] - GETTING Ty0 from String
2021-03-12 03:15:30,450 [main:106] - GETTING Ty0 from String
2021-03-12 03:15:30,450 [main:106] - GETTING Ty0 from String
2021-03-12 03:15:30,451 [main:106] - GETTING Ty0 from String
2021-03-12 03:15:30,451 [main:106] - GETTING Ty0 from A
2021-03-12 03:15:30,452 [main:106] - GETTING Ty0 from String
2021-03-12 03:15:30,453 [main:106] - GETTING Ty0 from Int
2021-03-12 03:15:30,453 [main:106] - GETTING Ty0 from A
2021-03-12 03:15:30,454 [main:106] - GETTING Ty0 from Int
2021-03-12 03:15:30,454 [main:106] - GETTING Ty0 from String
2021-03-12 03:15:30,455 [main:106] - GETTING Ty0 from Int
2021-03-12 03:15:30,455 [main:111] - Cant find and generate replacement for value type Ty0
2021-03-12 03:15:30,455 [main:107] - replacing (prope0.isSuccess, Boolean)
2021-03-12 03:15:30,457 [main:50] - replacing prope0.isSuccess Boolean
2021-03-12 03:15:30,457 [main:54] - Getting value of type Boolean
2021-03-12 03:15:30,613 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:15:30,616 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 03:15:30,617 [main:61] - GENERATED IS CALL =false
2021-03-12 03:15:31,163 [main:67] - randomType = Set<Kla9>
2021-03-12 03:15:31,164 [main:106] - GETTING Boolean from Int
2021-03-12 03:15:31,193 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@115f452f]]
2021-03-12 03:15:31,193 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:15:31,194 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@115f452f]
2021-03-12 03:15:31,194 [main:117] - GENERATED CALL = (arg).toChar().isLetter()
2021-03-12 03:15:31,194 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@208ad0ed], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@48e0c143]]
2021-03-12 03:15:31,194 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@208ad0ed]
2021-03-12 03:15:31,350 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:15:31,354 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@48e0c143]
2021-03-12 03:15:31,354 [main:117] - GENERATED CALL = (arg).div(0.05710515495594082).isInfinite()
2021-03-12 03:15:31,354 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a2f20e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@10cf15c0]]
2021-03-12 03:15:31,354 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a2f20e]
2021-03-12 03:15:31,507 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:15:31,511 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@10cf15c0]
2021-03-12 03:15:31,666 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:31,669 [main:117] - GENERATED CALL = (arg).rangeTo(-5).contains(-2004204780)
2021-03-12 03:15:31,670 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c5d3392]]
2021-03-12 03:15:31,670 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:15:31,670 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c5d3392]
2021-03-12 03:15:31,670 [main:117] - GENERATED CALL = (arg).toChar().isTitleCase()
2021-03-12 03:15:31,670 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a2f20e], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@565e1ebe]]
2021-03-12 03:15:31,670 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a2f20e]
2021-03-12 03:15:31,826 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:15:31,829 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@565e1ebe]
2021-03-12 03:15:31,829 [main:117] - GENERATED CALL = (arg).rangeTo(118).isEmpty()
2021-03-12 03:15:31,830 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@528e6647], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@75498945]]
2021-03-12 03:15:31,830 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@528e6647]
2021-03-12 03:15:31,830 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@75498945]
2021-03-12 03:15:31,830 [main:117] - GENERATED CALL = (arg).toDouble().isFinite()
2021-03-12 03:15:31,830 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]]
2021-03-12 03:15:31,830 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:15:31,830 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24aa4c33]
2021-03-12 03:15:31,984 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:15:31,984 [main:117] - GENERATED CALL = (arg).compareTo((arg1 + arg2)).equals("ccdtx")
2021-03-12 03:15:31,984 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a2f20e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@8306a73]]
2021-03-12 03:15:31,984 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a2f20e]
2021-03-12 03:15:32,138 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:15:32,142 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@8306a73]
2021-03-12 03:15:32,297 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:15:32,298 [main:117] - GENERATED CALL = (arg).rangeTo(-82).equals("dreas")
2021-03-12 03:15:32,298 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@528e6647], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@48e0c143]]
2021-03-12 03:15:32,298 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@528e6647]
2021-03-12 03:15:32,298 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@48e0c143]
2021-03-12 03:15:32,298 [main:117] - GENERATED CALL = (arg).toDouble().isInfinite()
2021-03-12 03:15:32,298 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3fdc9]]
2021-03-12 03:15:32,298 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:15:32,298 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa3fdc9]
2021-03-12 03:15:32,298 [main:117] - GENERATED CALL = (arg).toChar().isDefined()
2021-03-12 03:15:32,298 [main:114] - replacement of prope0.isSuccess of type Boolean is (arg).toChar().isDefined()
2021-03-12 03:15:32,452 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:15:32,455 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-12 03:15:32,455 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-12 03:15:32,455 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 03:15:32,610 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 03:15:32,614 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:15:32,772 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 03:15:32,777 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 03:15:33,117 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 03:15:33,121 [main:95] - GENERATED = check(false)
2021-03-12 03:15:33,121 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> check(false)}
2021-03-12 03:15:33,121 [main:61] - GENERATED IS CALL =false
2021-03-12 03:15:34,078 [main:67] - randomType = Function1<Set<Function2<Kla0, Double, Double>>, Kla4>
2021-03-12 03:15:34,079 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:15:34,097 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 03:15:34,127 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 03:15:34,128 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 03:15:34,129 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 03:15:34,130 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:15:34,132 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:15:34,133 [main:106] - GETTING Function1<Throwable, Unit> from A
2021-03-12 03:15:34,145 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:15:34,146 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 03:15:34,147 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:15:34,148 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:15:34,150 [main:106] - GETTING Function1<Throwable, Unit> from A
2021-03-12 03:15:34,151 [main:106] - GETTING Function1<Throwable, Unit> from A
2021-03-12 03:15:34,152 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:15:34,153 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:15:34,154 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 03:15:34,154 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> check(false)}
2021-03-12 03:15:34,308 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 03:15:34,308 [main:66] - Compilation checking started
2021-03-12 03:15:34,791 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let({a: Throwable -> check(false)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:15:34,794 [main:107] - replacing (Kla8(), Kla8)
2021-03-12 03:15:34,794 [main:50] - replacing Kla8() Kla8
2021-03-12 03:15:34,794 [main:54] - Getting value of type Kla8
2021-03-12 03:15:34,949 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 03:15:34,953 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 03:15:34,953 [main:58] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-12 03:15:34,953 [main:61] - GENERATED IS CALL =true
2021-03-12 03:15:35,562 [main:67] - randomType = Function1<ArrayDeque<Kla4>, Triple<Kla5, Kla5, String>>
2021-03-12 03:15:35,563 [main:106] - GETTING Kla8 from String
2021-03-12 03:15:35,580 [main:106] - GETTING Kla8 from Int
2021-03-12 03:15:35,609 [main:106] - GETTING Kla8 from A
2021-03-12 03:15:35,620 [main:106] - GETTING Kla8 from Int
2021-03-12 03:15:35,621 [main:106] - GETTING Kla8 from String
2021-03-12 03:15:35,622 [main:106] - GETTING Kla8 from String
2021-03-12 03:15:35,622 [main:106] - GETTING Kla8 from String
2021-03-12 03:15:35,623 [main:106] - GETTING Kla8 from String
2021-03-12 03:15:35,623 [main:106] - GETTING Kla8 from A
2021-03-12 03:15:35,624 [main:106] - GETTING Kla8 from Int
2021-03-12 03:15:35,624 [main:106] - GETTING Kla8 from String
2021-03-12 03:15:35,625 [main:106] - GETTING Kla8 from String
2021-03-12 03:15:35,626 [main:106] - GETTING Kla8 from String
2021-03-12 03:15:35,626 [main:106] - GETTING Kla8 from Int
2021-03-12 03:15:35,627 [main:106] - GETTING Kla8 from String
2021-03-12 03:15:35,627 [main:106] - GETTING Kla8 from A
2021-03-12 03:15:35,628 [main:106] - GETTING Kla8 from Int
2021-03-12 03:15:35,628 [main:114] - replacement of Kla8() of type Kla8 is Kla8()
2021-03-12 03:15:35,783 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:15:35,786 [main:107] - replacing (prope0, String)
2021-03-12 03:15:35,786 [main:50] - replacing prope0 String
2021-03-12 03:15:35,786 [main:54] - Getting value of type String
2021-03-12 03:15:35,940 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:15:35,943 [main:58] - GENERATED VALUE OF TYPE String = "gdtvy"
2021-03-12 03:15:35,943 [main:61] - GENERATED IS CALL =false
2021-03-12 03:15:36,482 [main:67] - randomType = Collection<Long?>
2021-03-12 03:15:36,482 [main:106] - GETTING String from String
2021-03-12 03:15:36,499 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]]
2021-03-12 03:15:36,499 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@831db09]
2021-03-12 03:15:36,654 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:15:36,813 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:15:36,817 [main:117] - GENERATED CALL = (a1).replaceAfterLast('', "mlkgf", a2)
2021-03-12 03:15:36,817 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:15:36,817 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:15:36,817 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:15:36,817 [main:117] - GENERATED CALL = (a1).get(arg1 + arg2).titlecase()
2021-03-12 03:15:36,817 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]]
2021-03-12 03:15:36,817 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@183b2518]
2021-03-12 03:15:36,818 [main:117] - GENERATED CALL = (a1).dropLast(arg1 + arg2)
2021-03-12 03:15:36,818 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]]
2021-03-12 03:15:36,818 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:15:36,818 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]
2021-03-12 03:15:36,975 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:15:37,133 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 03:15:37,138 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 03:15:37,481 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:15:37,485 [main:95] - GENERATED = Regex("yqtbp")
2021-03-12 03:15:37,637 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 03:15:37,641 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:15:37,647 [main:117] - GENERATED CALL = (a1).subSequence((arg1 + arg2), val justForUsageInClosure =.replace(Regex("yqtbp"), {a: MatchResult -> "qlcds"})
2021-03-12 03:15:37,648 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]]
2021-03-12 03:15:37,648 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]
2021-03-12 03:15:37,800 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:15:37,804 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:15:37,807 [main:117] - GENERATED CALL = (a1).filterNot({a: Char -> true})
2021-03-12 03:15:37,808 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]]
2021-03-12 03:15:37,808 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]
2021-03-12 03:15:37,808 [main:117] - GENERATED CALL = (a1).capitalize()
2021-03-12 03:15:37,808 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]]
2021-03-12 03:15:37,808 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ec72f08]
2021-03-12 03:15:37,961 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:15:38,119 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:15:38,122 [main:117] - GENERATED CALL = (a1).substringBefore('郧', "mdkfs")
2021-03-12 03:15:38,281 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]]
2021-03-12 03:15:38,281 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4674d1ce]
2021-03-12 03:15:38,436 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:15:38,439 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:15:38,443 [main:117] - GENERATED CALL = (a1).dropLastWhile({a: Char -> true})
2021-03-12 03:15:38,443 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:15:38,443 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:15:38,598 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:15:38,604 [main:117] - GENERATED CALL = (a1).removePrefix("zqbsi")
2021-03-12 03:15:38,604 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]]
2021-03-12 03:15:38,604 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0304b5]
2021-03-12 03:15:38,604 [main:117] - GENERATED CALL = (a1).drop(arg1 + arg2)
2021-03-12 03:15:38,604 [main:114] - replacement of prope0 of type String is a1
2021-03-12 03:15:38,759 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 03:15:38,760 [main:66] - Compilation checking started
2021-03-12 03:15:39,195 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (a1 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:15:39,198 [main:107] - replacing (prope0, Any?)
2021-03-12 03:15:39,200 [main:50] - replacing prope0 Any?
2021-03-12 03:15:39,200 [main:54] - Getting value of type Any?
2021-03-12 03:15:39,356 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:15:39,356 [main:58] - GENERATED VALUE OF TYPE Any? = "nhnct"
2021-03-12 03:15:39,356 [main:61] - GENERATED IS CALL =false
2021-03-12 03:15:39,569 [main:67] - randomType = Char
2021-03-12 03:15:39,724 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:15:39,745 [main:106] - GETTING Any? from String
2021-03-12 03:15:39,762 [main:106] - GETTING Any? from Int
2021-03-12 03:15:39,791 [main:106] - GETTING Any? from A
2021-03-12 03:15:39,802 [main:106] - GETTING Any? from A
2021-03-12 03:15:39,803 [main:106] - GETTING Any? from String
2021-03-12 03:15:39,803 [main:106] - GETTING Any? from A
2021-03-12 03:15:39,804 [main:106] - GETTING Any? from Int
2021-03-12 03:15:39,805 [main:106] - GETTING Any? from Int
2021-03-12 03:15:39,805 [main:106] - GETTING Any? from String
2021-03-12 03:15:39,806 [main:106] - GETTING Any? from Int
2021-03-12 03:15:39,807 [main:106] - GETTING Any? from String
2021-03-12 03:15:39,807 [main:106] - GETTING Any? from String
2021-03-12 03:15:39,808 [main:106] - GETTING Any? from String
2021-03-12 03:15:39,809 [main:106] - GETTING Any? from String
2021-03-12 03:15:39,809 [main:106] - GETTING Any? from String
2021-03-12 03:15:39,810 [main:106] - GETTING Any? from String
2021-03-12 03:15:39,811 [main:106] - GETTING Any? from Int
2021-03-12 03:15:39,811 [main:114] - replacement of prope0 of type Any? is "nhnct"
2021-03-12 03:15:39,968 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 03:15:39,968 [main:66] - Compilation checking started
2021-03-12 03:15:40,404 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this."nhnct" = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:15:40,407 [main:107] - replacing (message, String?)
2021-03-12 03:15:40,409 [main:50] - replacing message String?
2021-03-12 03:15:40,409 [main:54] - Getting value of type String?
2021-03-12 03:15:40,573 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:15:40,576 [main:58] - GENERATED VALUE OF TYPE String? = "hlyck"
2021-03-12 03:15:40,577 [main:61] - GENERATED IS CALL =false
2021-03-12 03:15:40,801 [main:67] - randomType = HashMap<Kla0, Kla4>
2021-03-12 03:15:40,961 [main:302] - generating value of type = HashMap<Kla0, Kla4> false depth = 0
2021-03-12 03:15:41,126 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Kla0, Kla4>): HashMap<Kla0, Kla4> = TODO()
2021-03-12 03:15:41,131 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Kla0, Kla4>): HashMap<Kla0, Kla4> = TODO()
2021-03-12 03:15:41,298 [main:302] - generating value of type = Pair<Kla0, Kla4> false depth = 3
2021-03-12 03:15:41,462 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla0, second: Kla4): Pair<Kla0, Kla4> = TODO()
2021-03-12 03:15:41,467 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla0, second: Kla4): Pair<Kla0, Kla4> = TODO()
2021-03-12 03:15:41,632 [main:302] - generating value of type = Kla0 false depth = 6
2021-03-12 03:15:41,635 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 03:15:41,793 [main:194] - Type params = []
2021-03-12 03:15:41,951 [main:302] - generating value of type = String true depth = 8
2021-03-12 03:15:41,955 [main:302] - generating value of type = Kla4 false depth = 6
2021-03-12 03:15:41,958 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}
2021-03-12 03:15:42,122 [main:194] - Type params = []
2021-03-12 03:15:42,280 [main:302] - generating value of type = CoroutineContext false depth = 8
2021-03-12 03:15:42,444 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:42,449 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:42,808 [main:302] - generating value of type = Key<*> false depth = 11
2021-03-12 03:15:42,978 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:42,983 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:43,537 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:43,537 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:43,538 [main:95] - GENERATED = Pair<Kla0, Kla4>(Kla0("ujcyo"), Kla4())
2021-03-12 03:15:43,538 [main:95] - GENERATED = hashMapOf<Kla0, Kla4>(Pair<Kla0, Kla4>(Kla0("ujcyo"), Kla4()))
2021-03-12 03:15:43,642 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:15:43,642 [main:78] - Generated call from random type = (hashMapOf<Kla0, Kla4>(Pair<Kla0, Kla4>(Kla0("ujcyo"), Kla4()))).size.toString((arg1 + arg2))
2021-03-12 03:15:43,643 [main:106] - GETTING String? from A
2021-03-12 03:15:43,654 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@80e1a7b]]
2021-03-12 03:15:43,654 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@80e1a7b]
2021-03-12 03:15:43,654 [main:117] - GENERATED CALL = (A())?.prop.take(arg1)
2021-03-12 03:15:43,654 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]]
2021-03-12 03:15:43,654 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2596caf9]
2021-03-12 03:15:43,814 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:43,818 [main:117] - GENERATED CALL = (A())?.parentProp.removeRange((arg), -954195836)
2021-03-12 03:15:43,818 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]]
2021-03-12 03:15:43,818 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8adefc]
2021-03-12 03:15:43,818 [main:117] - GENERATED CALL = (A())?.prop.takeLast(arg)
2021-03-12 03:15:43,818 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]]
2021-03-12 03:15:43,818 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f820ad7]
2021-03-12 03:15:43,819 [main:117] - GENERATED CALL = (A())?.grandParentProp.replaceIndent(val a2 = A(123).toString()
2021-03-12 03:15:43,819 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]]
2021-03-12 03:15:43,819 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d641c5]
2021-03-12 03:15:43,983 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:15:43,986 [main:117] - GENERATED CALL = (A())?.grandParentProp.substringAfter('', prop)
2021-03-12 03:15:43,987 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34632d00]]
2021-03-12 03:15:43,987 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34632d00]
2021-03-12 03:15:44,188 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:15:44,191 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:15:44,195 [main:117] - GENERATED CALL = (A())?.parentProp.takeWhile({a: Char -> true})
2021-03-12 03:15:44,195 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34632d00]]
2021-03-12 03:15:44,196 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34632d00]
2021-03-12 03:15:44,355 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:15:44,358 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:15:44,362 [main:117] - GENERATED CALL = (A())?.grandParentProp.takeWhile({a: Char -> true})
2021-03-12 03:15:44,362 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]]
2021-03-12 03:15:44,363 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]
2021-03-12 03:15:44,363 [main:117] - GENERATED CALL = (A())?.prop.trimEnd()
2021-03-12 03:15:44,363 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]]
2021-03-12 03:15:44,363 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4155a782]
2021-03-12 03:15:44,522 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:44,683 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:15:44,849 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:15:44,854 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:15:45,201 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:15:45,366 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:15:45,370 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:15:45,719 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 03:15:45,882 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:15:45,887 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:15:46,239 [main:302] - generating value of type = String true depth = 9
2021-03-12 03:15:46,243 [main:95] - GENERATED = StringBuilder("kyusa")
2021-03-12 03:15:46,243 [main:95] - GENERATED = StringBuilder(StringBuilder("kyusa"))
2021-03-12 03:15:46,243 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder("kyusa")))
2021-03-12 03:15:46,243 [main:117] - GENERATED CALL = (A())?.prop.replaceRange((arg), 826662252, StringBuilder(StringBuilder(StringBuilder("kyusa"))))
2021-03-12 03:15:46,244 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]]
2021-03-12 03:15:46,244 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]
2021-03-12 03:15:46,244 [main:117] - GENERATED CALL = (A())?.parentProp.lowercase()
2021-03-12 03:15:46,244 [main:114] - replacement of message of type String? is (A())?.grandParentProp.replaceIndent(val a2 = A(123).toString()
2021-03-12 03:15:46,400 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 03:15:46,400 [main:66] - Compilation checking started
2021-03-12 03:15:46,408 [main:71] - Wrong syntax or breaks conditions
2021-03-12 03:15:46,408 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.(A())?.grandParentProp.replaceIndent(val a2 = A(123).toString()!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:15:46,411 [main:107] - replacing (prope0.exceptionOrNull(), Throwable?)
2021-03-12 03:15:46,411 [main:50] - replacing prope0.exceptionOrNull() Throwable?
2021-03-12 03:15:46,411 [main:54] - Getting value of type Throwable?
2021-03-12 03:15:46,571 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 03:15:46,578 [main:58] - GENERATED VALUE OF TYPE Throwable? = NoSuchElementException()
2021-03-12 03:15:46,578 [main:61] - GENERATED IS CALL =true
2021-03-12 03:15:46,786 [main:67] - randomType = Kla8?
2021-03-12 03:15:46,947 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 03:15:46,951 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 03:15:46,961 [main:106] - GETTING Throwable? from String
2021-03-12 03:15:46,984 [main:106] - GETTING Throwable? from String
2021-03-12 03:15:46,985 [main:106] - GETTING Throwable? from Int
2021-03-12 03:15:47,030 [main:106] - GETTING Throwable? from Int
2021-03-12 03:15:47,030 [main:106] - GETTING Throwable? from Int
2021-03-12 03:15:47,031 [main:106] - GETTING Throwable? from String
2021-03-12 03:15:47,032 [main:106] - GETTING Throwable? from A
2021-03-12 03:15:47,045 [main:106] - GETTING Throwable? from String
2021-03-12 03:15:47,045 [main:106] - GETTING Throwable? from String
2021-03-12 03:15:47,046 [main:106] - GETTING Throwable? from A
2021-03-12 03:15:47,047 [main:106] - GETTING Throwable? from A
2021-03-12 03:15:47,048 [main:106] - GETTING Throwable? from Int
2021-03-12 03:15:47,048 [main:106] - GETTING Throwable? from String
2021-03-12 03:15:47,049 [main:106] - GETTING Throwable? from Int
2021-03-12 03:15:47,050 [main:106] - GETTING Throwable? from String
2021-03-12 03:15:47,050 [main:106] - GETTING Throwable? from String
2021-03-12 03:15:47,051 [main:106] - GETTING Throwable? from String
2021-03-12 03:15:47,051 [main:114] - replacement of prope0.exceptionOrNull() of type Throwable? is NoSuchElementException()
2021-03-12 03:15:47,210 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:15:47,210 [main:66] - Compilation checking started
2021-03-12 03:15:47,647 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
NoSuchElementException()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:15:47,651 [main:107] - replacing ("Continuation " + prope1, String)
2021-03-12 03:15:47,651 [main:50] - replacing "Continuation " + prope1 String
2021-03-12 03:15:47,651 [main:54] - Getting value of type String
2021-03-12 03:15:47,810 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:15:47,814 [main:58] - GENERATED VALUE OF TYPE String = "tzbsf"
2021-03-12 03:15:47,814 [main:61] - GENERATED IS CALL =false
2021-03-12 03:15:47,993 [main:67] - randomType = Long
2021-03-12 03:15:48,152 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:15:48,196 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:15:48,196 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:15:48,197 [main:78] - Generated call from random type = (-3440943460395194176).toInt().toString((arg))
2021-03-12 03:15:48,197 [main:106] - GETTING String from Int
2021-03-12 03:15:48,230 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:15:48,230 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:15:48,399 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:15:48,402 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:15:48,403 [main:117] - GENERATED CALL = (arg).div(-2419814719852368249).toString((arg1 + arg2))
2021-03-12 03:15:48,403 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:15:48,403 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:15:48,403 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:15:48,561 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:48,565 [main:117] - GENERATED CALL = (arg).toInt().toString(12252307)
2021-03-12 03:15:48,565 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:15:48,565 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:15:48,565 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:15:48,721 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:48,725 [main:117] - GENERATED CALL = (arg).toByte().toString(-27362844)
2021-03-12 03:15:48,725 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:15:48,725 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:15:48,725 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:15:48,725 [main:117] - GENERATED CALL = (arg).toShort().toString((arg1 + arg2))
2021-03-12 03:15:48,726 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:15:48,726 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:15:48,726 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:15:48,919 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:48,922 [main:117] - GENERATED CALL = (arg).compareTo(arg1).toString(207981493)
2021-03-12 03:15:48,923 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:15:48,923 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:15:49,080 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:49,084 [main:117] - GENERATED CALL = (arg).toString(-2079446313)
2021-03-12 03:15:49,084 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:15:49,084 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:15:49,084 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:15:49,084 [main:117] - GENERATED CALL = (arg).toChar().uppercase()
2021-03-12 03:15:49,084 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:15:49,084 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:15:49,085 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:15:49,242 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:15:49,245 [main:117] - GENERATED CALL = (arg).toChar().plus("btdjl")
2021-03-12 03:15:49,245 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:15:49,246 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:15:49,246 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:15:49,246 [main:117] - GENERATED CALL = (arg).toChar().titlecase()
2021-03-12 03:15:49,246 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:15:49,246 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:15:49,246 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:15:49,402 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:49,406 [main:117] - GENERATED CALL = (arg).toLong().toString(-1442021245)
2021-03-12 03:15:49,406 [main:114] - replacement of "Continuation " + prope1 of type String is (arg).toString(-2079446313)
2021-03-12 03:15:49,561 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:15:49,561 [main:66] - Compilation checking started
2021-03-12 03:15:49,993 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error((arg).toString(-2079446313) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:15:49,995 [main:107] - replacing (prope1, Continuation<*>)
2021-03-12 03:15:49,996 [main:50] - replacing prope1 Continuation<*>
2021-03-12 03:15:49,996 [main:54] - Getting value of type Continuation<*>
2021-03-12 03:15:50,164 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 03:15:50,328 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 03:15:50,333 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 03:15:50,875 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 03:15:51,038 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:51,043 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:51,406 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 03:15:51,572 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:51,577 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:52,126 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 03:15:52,293 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:15:52,298 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:15:52,847 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 03:15:53,017 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:15:53,022 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:15:53,640 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-12 03:15:53,808 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 03:15:53,813 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 03:15:54,361 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 18
2021-03-12 03:15:54,361 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 03:15:54,361 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:15:54,361 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 03:15:54,361 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:54,361 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:54,362 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 03:15:54,362 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 03:15:54,557 [main:67] - randomType = Kla7?
2021-03-12 03:15:54,715 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 03:15:54,718 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 03:15:54,724 [main:106] - GETTING Continuation<*> from Int
2021-03-12 03:15:54,754 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:54,770 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:54,771 [main:106] - GETTING Continuation<*> from Int
2021-03-12 03:15:54,772 [main:106] - GETTING Continuation<*> from A
2021-03-12 03:15:54,783 [main:106] - GETTING Continuation<*> from A
2021-03-12 03:15:54,784 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:54,784 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:54,785 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:54,786 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:54,787 [main:106] - GETTING Continuation<*> from Int
2021-03-12 03:15:54,788 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:54,789 [main:106] - GETTING Continuation<*> from Int
2021-03-12 03:15:54,789 [main:106] - GETTING Continuation<*> from A
2021-03-12 03:15:54,790 [main:106] - GETTING Continuation<*> from Int
2021-03-12 03:15:54,791 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:54,792 [main:106] - GETTING Continuation<*> from String
2021-03-12 03:15:54,792 [main:111] - Cant find and generate replacement for prope1 type Continuation<*>
2021-03-12 03:15:54,792 [main:107] - replacing (s, String)
2021-03-12 03:15:54,792 [main:50] - replacing s String
2021-03-12 03:15:54,792 [main:54] - Getting value of type String
2021-03-12 03:15:54,951 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:15:54,955 [main:58] - GENERATED VALUE OF TYPE String = "axowk"
2021-03-12 03:15:54,955 [main:61] - GENERATED IS CALL =false
2021-03-12 03:15:54,970 [main:67] - randomType = C
2021-03-12 03:15:55,128 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:15:55,131 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:15:55,288 [main:194] - Type params = []
2021-03-12 03:15:55,443 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:15:55,451 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]
2021-03-12 03:15:55,452 [main:78] - Generated call from random type = (C("vvxzu")).grandParentProp.capitalize()
2021-03-12 03:15:55,453 [main:106] - GETTING String from Int
2021-03-12 03:15:55,481 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:15:55,481 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:15:55,642 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:15:55,646 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:15:55,646 [main:117] - GENERATED CALL = (arg).div(-1110481896103774332).toString((arg))
2021-03-12 03:15:55,646 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:15:55,646 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:15:55,646 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:15:55,647 [main:117] - GENERATED CALL = (arg).toShort().toString((arg1 + arg2))
2021-03-12 03:15:55,647 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:15:55,647 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:15:55,647 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:15:55,647 [main:117] - GENERATED CALL = (arg).toChar().titlecase()
2021-03-12 03:15:55,647 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:15:55,647 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:15:55,647 [main:117] - GENERATED CALL = (arg).toString((arg))
2021-03-12 03:15:55,647 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:15:55,647 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:15:55,647 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:15:55,802 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:55,806 [main:117] - GENERATED CALL = (arg).toLong().toString(1690813394)
2021-03-12 03:15:55,806 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:15:55,807 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:15:55,807 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:15:55,807 [main:117] - GENERATED CALL = (arg).toChar().plus(a3)
2021-03-12 03:15:55,807 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:15:55,807 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:15:55,807 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:15:55,807 [main:117] - GENERATED CALL = (arg).toByte().toString((arg))
2021-03-12 03:15:55,807 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:15:55,807 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:15:55,807 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:15:55,807 [main:117] - GENERATED CALL = (arg).toChar().uppercase()
2021-03-12 03:15:55,807 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:15:55,807 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:15:55,808 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:15:55,808 [main:117] - GENERATED CALL = (arg).toChar().lowercase()
2021-03-12 03:15:55,808 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:15:55,808 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:15:55,967 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:55,971 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:15:55,971 [main:117] - GENERATED CALL = (arg).compareTo(-1288484506).toString((arg1 + arg2))
2021-03-12 03:15:55,971 [main:114] - replacement of s of type String is (arg).div(-1110481896103774332).toString((arg))
2021-03-12 03:15:56,129 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:15:56,130 [main:66] - Compilation checking started
2021-03-12 03:15:56,564 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().(arg).div(-1110481896103774332).toString((arg))
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:15:56,567 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 03:15:56,567 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 03:15:56,567 [main:54] - Getting value of type String
2021-03-12 03:15:56,726 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:15:56,729 [main:58] - GENERATED VALUE OF TYPE String = "dlqum"
2021-03-12 03:15:56,729 [main:61] - GENERATED IS CALL =false
2021-03-12 03:15:56,744 [main:67] - randomType = Kla4
2021-03-12 03:15:56,900 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 03:15:56,903 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}
2021-03-12 03:15:57,062 [main:194] - Type params = []
2021-03-12 03:15:57,220 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 03:15:57,384 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:57,389 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:57,749 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 03:15:57,918 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:57,923 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:58,519 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:15:58,519 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:15:58,534 [main:106] - GETTING String from Int
2021-03-12 03:15:58,562 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:15:58,562 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:15:58,562 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:15:58,562 [main:117] - GENERATED CALL = ((arg1 + arg2)).toChar().plus(parentSideEffects)
2021-03-12 03:15:58,562 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:15:58,562 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:15:58,721 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:58,728 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:15:58,729 [main:117] - GENERATED CALL = ((arg1 + arg2)).compareTo(-260705648).toString(arg1)
2021-03-12 03:15:58,729 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:15:58,729 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:15:58,729 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:15:58,729 [main:117] - GENERATED CALL = ((arg1 + arg2)).toInt().toString(arg)
2021-03-12 03:15:58,729 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:15:58,729 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:15:58,729 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:15:58,729 [main:117] - GENERATED CALL = ((arg1 + arg2)).toLong().toString(val justForUsageInClosure =
2021-03-12 03:15:58,729 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:15:58,729 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:15:58,729 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:15:58,730 [main:117] - GENERATED CALL = ((arg1 + arg2)).toShort().toString(val justForUsageInClosure =
2021-03-12 03:15:58,730 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:15:58,730 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:15:58,889 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:15:58,893 [main:117] - GENERATED CALL = ((arg1 + arg2)).toString(993613456)
2021-03-12 03:15:58,893 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:15:58,893 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:15:59,048 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:15:59,052 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:15:59,052 [main:117] - GENERATED CALL = ((arg1 + arg2)).div(4801430732934979246).toString((arg))
2021-03-12 03:15:59,052 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:15:59,052 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:15:59,052 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:15:59,053 [main:117] - GENERATED CALL = ((arg1 + arg2)).toChar().lowercase()
2021-03-12 03:15:59,053 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:15:59,053 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:15:59,053 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:15:59,053 [main:117] - GENERATED CALL = ((arg1 + arg2)).toChar().titlecase()
2021-03-12 03:15:59,053 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:15:59,053 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:15:59,053 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:15:59,053 [main:117] - GENERATED CALL = ((arg1 + arg2)).toByte().toString((arg1 + arg2))
2021-03-12 03:15:59,053 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is ((arg1 + arg2)).toChar().lowercase()
2021-03-12 03:15:59,209 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:15:59,209 [main:66] - Compilation checking started
2021-03-12 03:15:59,636 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error(((arg1 + arg2)).toChar().lowercase())
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:15:59,639 [main:107] - replacing (value, Ty0)
2021-03-12 03:15:59,639 [main:50] - replacing value Ty0
2021-03-12 03:15:59,639 [main:54] - Getting value of type Ty0
2021-03-12 03:15:59,799 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 03:15:59,805 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 03:15:59,988 [main:67] - randomType = UInt
2021-03-12 03:16:00,148 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 03:16:00,184 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:00,206 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:00,207 [main:106] - GETTING Ty0 from Int
2021-03-12 03:16:00,245 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:00,245 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:00,246 [main:106] - GETTING Ty0 from Int
2021-03-12 03:16:00,247 [main:106] - GETTING Ty0 from Int
2021-03-12 03:16:00,247 [main:106] - GETTING Ty0 from Int
2021-03-12 03:16:00,248 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:00,248 [main:106] - GETTING Ty0 from A
2021-03-12 03:16:00,262 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:00,262 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:00,263 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:00,263 [main:106] - GETTING Ty0 from Int
2021-03-12 03:16:00,264 [main:106] - GETTING Ty0 from A
2021-03-12 03:16:00,265 [main:106] - GETTING Ty0 from A
2021-03-12 03:16:00,265 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:00,265 [main:111] - Cant find and generate replacement for value type Ty0
2021-03-12 03:16:00,265 [main:107] - replacing (fu4(fu1<Kla0>()), Kla0)
2021-03-12 03:16:00,267 [main:50] - replacing fu4(fu1<Kla0>()) Kla0
2021-03-12 03:16:00,267 [main:54] - Getting value of type Kla0
2021-03-12 03:16:00,424 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:16:00,428 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 03:16:00,590 [main:194] - Type params = []
2021-03-12 03:16:00,753 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:16:00,757 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("ceujj")
2021-03-12 03:16:00,757 [main:61] - GENERATED IS CALL =true
2021-03-12 03:16:00,947 [main:67] - randomType = Long
2021-03-12 03:16:01,109 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:16:01,146 [main:106] - GETTING Kla0 from Int
2021-03-12 03:16:01,176 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:01,193 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:01,193 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:01,194 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:01,195 [main:106] - GETTING Kla0 from A
2021-03-12 03:16:01,206 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:01,207 [main:106] - GETTING Kla0 from Int
2021-03-12 03:16:01,207 [main:106] - GETTING Kla0 from A
2021-03-12 03:16:01,208 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:01,208 [main:106] - GETTING Kla0 from Int
2021-03-12 03:16:01,209 [main:106] - GETTING Kla0 from Int
2021-03-12 03:16:01,209 [main:106] - GETTING Kla0 from A
2021-03-12 03:16:01,210 [main:106] - GETTING Kla0 from Int
2021-03-12 03:16:01,211 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:01,211 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:01,212 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:01,212 [main:114] - replacement of fu4(fu1<Kla0>()) of type Kla0 is Kla0("ceujj")
2021-03-12 03:16:01,382 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:16:01,382 [main:66] - Compilation checking started
2021-03-12 03:16:01,830 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return Kla0("ceujj")
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:01,834 [main:107] - replacing (Kla7(), Kla7)
2021-03-12 03:16:01,835 [main:50] - replacing Kla7() Kla7
2021-03-12 03:16:01,835 [main:54] - Getting value of type Kla7
2021-03-12 03:16:01,995 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 03:16:01,998 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 03:16:01,999 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 03:16:01,999 [main:61] - GENERATED IS CALL =true
2021-03-12 03:16:02,014 [main:67] - randomType = C
2021-03-12 03:16:02,173 [main:302] - generating value of type = C false depth = 0
2021-03-12 03:16:02,176 [main:112] - generating klass C text = open class C(val grandParentProp: String)
2021-03-12 03:16:02,338 [main:194] - Type params = []
2021-03-12 03:16:02,497 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:16:02,506 [main:106] - GETTING Kla7 from String
2021-03-12 03:16:02,522 [main:106] - GETTING Kla7 from Int
2021-03-12 03:16:02,550 [main:106] - GETTING Kla7 from String
2021-03-12 03:16:02,551 [main:106] - GETTING Kla7 from String
2021-03-12 03:16:02,551 [main:106] - GETTING Kla7 from Int
2021-03-12 03:16:02,552 [main:106] - GETTING Kla7 from String
2021-03-12 03:16:02,552 [main:106] - GETTING Kla7 from A
2021-03-12 03:16:02,563 [main:106] - GETTING Kla7 from Int
2021-03-12 03:16:02,564 [main:106] - GETTING Kla7 from String
2021-03-12 03:16:02,565 [main:106] - GETTING Kla7 from String
2021-03-12 03:16:02,565 [main:106] - GETTING Kla7 from Int
2021-03-12 03:16:02,566 [main:106] - GETTING Kla7 from A
2021-03-12 03:16:02,566 [main:106] - GETTING Kla7 from String
2021-03-12 03:16:02,567 [main:106] - GETTING Kla7 from Int
2021-03-12 03:16:02,567 [main:106] - GETTING Kla7 from A
2021-03-12 03:16:02,568 [main:106] - GETTING Kla7 from String
2021-03-12 03:16:02,569 [main:106] - GETTING Kla7 from String
2021-03-12 03:16:02,569 [main:114] - replacement of Kla7() of type Kla7 is Kla7()
2021-03-12 03:16:02,752 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:16:02,755 [main:107] - replacing (" has no state-machine ", String)
2021-03-12 03:16:02,757 [main:50] - replacing " has no state-machine " String
2021-03-12 03:16:02,757 [main:54] - Getting value of type String
2021-03-12 03:16:02,915 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:02,919 [main:58] - GENERATED VALUE OF TYPE String = "iqkgx"
2021-03-12 03:16:02,919 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:03,333 [main:67] - randomType = Map<Boolean, Set<Kla8>>
2021-03-12 03:16:03,334 [main:106] - GETTING String from Int
2021-03-12 03:16:03,367 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:16:03,367 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:16:03,367 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:16:03,367 [main:117] - GENERATED CALL = ((arg)).toChar().titlecase()
2021-03-12 03:16:03,367 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:16:03,367 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:16:03,367 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:16:03,528 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:03,532 [main:117] - GENERATED CALL = ((arg)).toChar().plus("nhrhv")
2021-03-12 03:16:03,532 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:16:03,532 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:16:03,690 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:16:03,694 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:16:03,857 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:16:03,861 [main:117] - GENERATED CALL = ((arg)).compareTo(416029916).toString(-266676213)
2021-03-12 03:16:03,861 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:16:03,861 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:16:03,861 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:16:03,861 [main:117] - GENERATED CALL = ((arg)).toChar().lowercase()
2021-03-12 03:16:03,861 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:16:03,861 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:16:03,861 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:16:03,862 [main:117] - GENERATED CALL = ((arg)).toLong().toString(arg)
2021-03-12 03:16:03,862 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:16:03,862 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:16:03,862 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:16:03,862 [main:117] - GENERATED CALL = ((arg)).toChar().uppercase()
2021-03-12 03:16:03,862 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:16:03,862 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:16:03,862 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:16:03,862 [main:117] - GENERATED CALL = ((arg)).toByte().toString((arg1 + arg2))
2021-03-12 03:16:03,862 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:16:03,862 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:16:03,862 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:16:03,863 [main:117] - GENERATED CALL = ((arg)).toInt().toString(arg)
2021-03-12 03:16:03,863 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:16:03,863 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:16:03,863 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:16:04,022 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:16:04,026 [main:117] - GENERATED CALL = ((arg)).toShort().toString(1116759315)
2021-03-12 03:16:04,026 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:16:04,026 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:16:04,188 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:16:04,192 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:16:04,192 [main:117] - GENERATED CALL = ((arg)).div(3029975192001029751).toString(val justForUsageInClosure =
2021-03-12 03:16:04,192 [main:114] - replacement of " has no state-machine " of type String is ((arg)).toChar().titlecase()
2021-03-12 03:16:04,351 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:16:04,352 [main:66] - Compilation checking started
2021-03-12 03:16:04,797 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + ((arg)).toChar().titlecase() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:04,800 [main:107] - replacing (s, String)
2021-03-12 03:16:04,800 [main:50] - replacing s String
2021-03-12 03:16:04,800 [main:54] - Getting value of type String
2021-03-12 03:16:04,964 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:04,967 [main:58] - GENERATED VALUE OF TYPE String = "yubvi"
2021-03-12 03:16:04,968 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:05,154 [main:67] - randomType = Char
2021-03-12 03:16:05,315 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:16:05,341 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:16:05,342 [main:78] - Generated call from random type = ('攍').plus(var parentSideEffects: String =
2021-03-12 03:16:05,343 [main:106] - GETTING String from Int
2021-03-12 03:16:05,371 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:16:05,371 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:16:05,530 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:16:05,534 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:16:05,534 [main:117] - GENERATED CALL = ((arg)).div(3874170812693883560).toString(arg)
2021-03-12 03:16:05,534 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:16:05,534 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:16:05,534 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:16:05,534 [main:117] - GENERATED CALL = ((arg)).toChar().uppercase()
2021-03-12 03:16:05,534 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:16:05,534 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:16:05,534 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:16:05,535 [main:117] - GENERATED CALL = ((arg)).toInt().toString((arg))
2021-03-12 03:16:05,535 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:16:05,535 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:16:05,535 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:16:05,535 [main:117] - GENERATED CALL = ((arg)).toShort().toString(arg)
2021-03-12 03:16:05,535 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:16:05,535 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:16:05,535 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:16:05,535 [main:117] - GENERATED CALL = ((arg)).toLong().toString(arg)
2021-03-12 03:16:05,535 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:16:05,535 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:16:05,535 [main:117] - GENERATED CALL = ((arg)).toString(val justForUsageInClosure =
2021-03-12 03:16:05,536 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:16:05,536 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:16:05,536 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:16:05,695 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:16:05,699 [main:117] - GENERATED CALL = ((arg)).toByte().toString(679953284)
2021-03-12 03:16:05,699 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:16:05,699 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:16:05,699 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:16:05,699 [main:117] - GENERATED CALL = ((arg)).toChar().lowercase()
2021-03-12 03:16:05,699 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:16:05,699 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:16:05,699 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:16:05,700 [main:117] - GENERATED CALL = ((arg)).toChar().titlecase()
2021-03-12 03:16:05,700 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:16:05,700 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:16:05,861 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:16:05,865 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:16:06,025 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:16:06,029 [main:117] - GENERATED CALL = ((arg)).compareTo(-393711547).toString(-45816761)
2021-03-12 03:16:06,029 [main:114] - replacement of s of type String is ((arg)).div(3874170812693883560).toString(arg)
2021-03-12 03:16:06,189 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:16:06,190 [main:66] - Compilation checking started
2021-03-12 03:16:06,629 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.((arg)).div(3874170812693883560).toString(arg))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:06,632 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 03:16:06,632 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 03:16:06,632 [main:54] - Getting value of type Function0<Unit>
2021-03-12 03:16:06,799 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 03:16:06,803 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:16:06,970 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 03:16:06,975 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 03:16:07,342 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 03:16:07,347 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 03:16:07,525 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:16:07,531 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:16:08,118 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 03:16:08,122 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 03:16:08,125 [main:302] - generating value of type = Any false depth = 9
2021-03-12 03:16:08,125 [main:95] - GENERATED = require(true, { "wgyao"})
2021-03-12 03:16:08,126 [main:95] - GENERATED = contract({ require(true, { "wgyao"})})
2021-03-12 03:16:08,126 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(true, { "wgyao"})})}
2021-03-12 03:16:08,126 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:08,333 [main:67] - randomType = Kla8?
2021-03-12 03:16:08,494 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 03:16:08,498 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 03:16:08,505 [main:78] - Generated call from random type = (Kla8())?.prope7
2021-03-12 03:16:08,505 [main:114] - replacement of prope7 of type Function0<Unit> is (Kla8())?.prope7
2021-03-12 03:16:08,672 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 03:16:08,672 [main:66] - Compilation checking started
2021-03-12 03:16:09,104 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        (Kla8())?.prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:09,108 [main:107] - replacing ("OK", String)
2021-03-12 03:16:09,108 [main:50] - replacing "OK" String
2021-03-12 03:16:09,108 [main:54] - Getting value of type String
2021-03-12 03:16:09,274 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:09,278 [main:58] - GENERATED VALUE OF TYPE String = "mmhxu"
2021-03-12 03:16:09,278 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:10,040 [main:67] - randomType = Map<UInt?, UShort>
2021-03-12 03:16:10,041 [main:106] - GETTING String from String
2021-03-12 03:16:10,057 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]]
2021-03-12 03:16:10,057 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46401eca]
2021-03-12 03:16:10,057 [main:117] - GENERATED CALL = (null.toString()).capitalize()
2021-03-12 03:16:10,057 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]]
2021-03-12 03:16:10,058 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]
2021-03-12 03:16:10,219 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:16:10,385 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:10,549 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:10,553 [main:117] - GENERATED CALL = (null.toString()).replaceBeforeLast('ẟ', "ayeau", "iznce")
2021-03-12 03:16:10,554 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]]
2021-03-12 03:16:10,554 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:16:10,554 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]
2021-03-12 03:16:10,713 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:16:10,883 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:16:10,889 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:16:11,245 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:16:11,249 [main:95] - GENERATED = StringBuilder(-2114158775)
2021-03-12 03:16:11,407 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:16:11,411 [main:117] - GENERATED CALL = (null.toString()).subSequence(val justForUsageInClosure =.commonPrefixWith(StringBuilder(-2114158775), true)
2021-03-12 03:16:11,411 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:16:11,411 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:16:11,570 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:11,574 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:16:11,575 [main:117] - GENERATED CALL = (null.toString()).compareTo("exvhr").toString(arg1)
2021-03-12 03:16:11,575 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]]
2021-03-12 03:16:11,575 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]
2021-03-12 03:16:11,735 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:16:11,735 [main:117] - GENERATED CALL = (null.toString()).plus("ypbql")
2021-03-12 03:16:11,735 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:16:11,735 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:16:11,896 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:16:12,061 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:16:12,066 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:16:12,420 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:16:12,424 [main:95] - GENERATED = StringBuilder(-19542402)
2021-03-12 03:16:12,424 [main:117] - GENERATED CALL = (null.toString()).removePrefix(StringBuilder(-19542402))
2021-03-12 03:16:12,424 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:16:12,424 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:16:12,424 [main:117] - GENERATED CALL = (null.toString()).length.toString((arg))
2021-03-12 03:16:12,424 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]]
2021-03-12 03:16:12,424 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]
2021-03-12 03:16:12,611 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:16:12,615 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:16:12,619 [main:117] - GENERATED CALL = (null.toString()).filter({a: Char -> false})
2021-03-12 03:16:12,619 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7c9ff9]]
2021-03-12 03:16:12,619 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7c9ff9]
2021-03-12 03:16:12,779 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:16:12,786 [main:117] - GENERATED CALL = (null.toString()).removeSuffix("eemsk")
2021-03-12 03:16:12,786 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]]
2021-03-12 03:16:12,786 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353efe59]
2021-03-12 03:16:12,786 [main:117] - GENERATED CALL = (null.toString()).trimIndent()
2021-03-12 03:16:12,786 [main:114] - replacement of "OK" of type String is null.toString()
2021-03-12 03:16:12,947 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:16:12,947 [main:66] - Compilation checking started
2021-03-12 03:16:13,386 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != null.toString()) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:13,389 [main:107] - replacing ({ error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-12 03:16:13,390 [main:50] - replacing { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-12 03:16:13,390 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 03:16:13,549 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 03:16:13,553 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 03:16:13,719 [main:43] - GENERATING CALL OF fun error(message: kotlin.Any): Nothg = TODO()
2021-03-12 03:16:13,724 [main:61] - WITHOUT TYPE PARAMS = fun error(message: kotlin.Any): Nothg = TODO()
2021-03-12 03:16:14,080 [main:302] - generating value of type = Any false depth = 4
2021-03-12 03:16:14,081 [main:95] - GENERATED = error("moisx")
2021-03-12 03:16:14,082 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { error("moisx")}
2021-03-12 03:16:14,082 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:14,287 [main:67] - randomType = Kla6<Kla3>
2021-03-12 03:16:14,447 [main:302] - generating value of type = Kla6<Kla3> false depth = 0
2021-03-12 03:16:14,451 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 03:16:15,570 [main:302] - generating value of type = Kla9 false depth = 2
2021-03-12 03:16:15,574 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}
2021-03-12 03:16:15,589 [main:106] - GETTING Function0<Nothing> from Int
2021-03-12 03:16:15,618 [main:106] - GETTING Function0<Nothing> from A
2021-03-12 03:16:15,629 [main:106] - GETTING Function0<Nothing> from A
2021-03-12 03:16:15,630 [main:106] - GETTING Function0<Nothing> from A
2021-03-12 03:16:15,631 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:16:15,648 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:16:15,649 [main:106] - GETTING Function0<Nothing> from Int
2021-03-12 03:16:15,650 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:16:15,651 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:16:15,652 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:16:15,653 [main:106] - GETTING Function0<Nothing> from Int
2021-03-12 03:16:15,654 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:16:15,655 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:16:15,656 [main:106] - GETTING Function0<Nothing> from Int
2021-03-12 03:16:15,657 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:16:15,658 [main:106] - GETTING Function0<Nothing> from Int
2021-03-12 03:16:15,659 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:16:15,659 [main:114] - replacement of { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) } of type Function0<Nothing> is { error("moisx")}
2021-03-12 03:16:15,828 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 03:16:15,828 [main:66] - Compilation checking started
2021-03-12 03:16:16,268 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("moisx")}
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:16,271 [main:107] - replacing (prope5, Int)
2021-03-12 03:16:16,273 [main:50] - replacing prope5 Int
2021-03-12 03:16:16,273 [main:54] - Getting value of type Int
2021-03-12 03:16:16,437 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:16:16,441 [main:58] - GENERATED VALUE OF TYPE Int = 488627266
2021-03-12 03:16:16,441 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:16,828 [main:67] - randomType = Kla6<UInt>
2021-03-12 03:16:16,988 [main:302] - generating value of type = Kla6<UInt> false depth = 0
2021-03-12 03:16:16,992 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 03:16:17,588 [main:302] - generating value of type = Kla9 false depth = 2
2021-03-12 03:16:17,592 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}
2021-03-12 03:16:17,605 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@68da5dee]
2021-03-12 03:16:17,765 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:16:17,765 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]
2021-03-12 03:16:17,926 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:16:17,931 [main:78] - Generated call from random type = (Kla9).equals("bhyli").compareTo(true)
2021-03-12 03:16:17,931 [main:106] - GETTING Int from String
2021-03-12 03:16:17,952 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61a456ce]]
2021-03-12 03:16:17,952 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61a456ce]
2021-03-12 03:16:17,952 [main:117] - GENERATED CALL = (prop).length.rotateRight((arg))
2021-03-12 03:16:17,952 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]]
2021-03-12 03:16:17,952 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]
2021-03-12 03:16:18,114 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:16:18,118 [main:117] - GENERATED CALL = (prop).length.div(127)
2021-03-12 03:16:18,118 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d5ea941]]
2021-03-12 03:16:18,118 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d5ea941]
2021-03-12 03:16:18,118 [main:117] - GENERATED CALL = (prop).length.shr(val justForUsageInClosure =
2021-03-12 03:16:18,118 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31fe20d0]]
2021-03-12 03:16:18,118 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:16:18,118 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31fe20d0]
2021-03-12 03:16:18,119 [main:117] - GENERATED CALL = (prop).compareTo(a2).inv()
2021-03-12 03:16:18,119 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7cead524]]
2021-03-12 03:16:18,119 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7cead524]
2021-03-12 03:16:18,119 [main:117] - GENERATED CALL = (prop).length.takeLowestOneBit()
2021-03-12 03:16:18,119 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@193176e9]]
2021-03-12 03:16:18,119 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:16:18,119 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@193176e9]
2021-03-12 03:16:18,119 [main:117] - GENERATED CALL = (prop).compareTo(parentSideEffects).inc()
2021-03-12 03:16:18,119 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3d55f1]]
2021-03-12 03:16:18,119 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3d55f1]
2021-03-12 03:16:18,283 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:16:18,289 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:16:18,293 [main:117] - GENERATED CALL = (prop).indexOfLast({a: Char -> false})
2021-03-12 03:16:18,293 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]]
2021-03-12 03:16:18,293 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:16:18,293 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]
2021-03-12 03:16:18,461 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:16:18,465 [main:117] - GENERATED CALL = (prop).compareTo(prop).div(2)
2021-03-12 03:16:18,465 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5797f91]]
2021-03-12 03:16:18,465 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5797f91]
2021-03-12 03:16:18,465 [main:117] - GENERATED CALL = (prop).length.or(arg)
2021-03-12 03:16:18,465 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@643c7e7b]]
2021-03-12 03:16:18,465 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@643c7e7b]
2021-03-12 03:16:18,625 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:16:18,791 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:16:18,795 [main:117] - GENERATED CALL = (prop).indexOf('飉', arg, false)
2021-03-12 03:16:18,795 [main:114] - replacement of prope5 of type Int is (prop).compareTo(a2).inv()
2021-03-12 03:16:18,957 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:16:18,958 [main:66] - Compilation checking started
2021-03-12 03:16:19,585 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
(prop).compareTo(a2).inv() = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:19,589 [main:107] - replacing (fu5(fu6()), Kla0)
2021-03-12 03:16:19,591 [main:50] - replacing fu5(fu6()) Kla0
2021-03-12 03:16:19,591 [main:54] - Getting value of type Kla0
2021-03-12 03:16:19,758 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:16:19,762 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 03:16:19,927 [main:194] - Type params = []
2021-03-12 03:16:20,093 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:16:20,097 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("dylhi")
2021-03-12 03:16:20,097 [main:61] - GENERATED IS CALL =true
2021-03-12 03:16:21,729 [main:67] - randomType = Function2<UInt, Kla5, LinkedHashMap<Function2<Byte, Long, Byte>, Kla3?>>
2021-03-12 03:16:21,730 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:21,747 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:21,747 [main:106] - GETTING Kla0 from Int
2021-03-12 03:16:21,776 [main:106] - GETTING Kla0 from A
2021-03-12 03:16:21,787 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:21,787 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:21,788 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:21,789 [main:106] - GETTING Kla0 from A
2021-03-12 03:16:21,789 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:21,790 [main:106] - GETTING Kla0 from Int
2021-03-12 03:16:21,790 [main:106] - GETTING Kla0 from Int
2021-03-12 03:16:21,791 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:21,791 [main:106] - GETTING Kla0 from Int
2021-03-12 03:16:21,792 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:21,793 [main:106] - GETTING Kla0 from A
2021-03-12 03:16:21,793 [main:106] - GETTING Kla0 from Int
2021-03-12 03:16:21,794 [main:106] - GETTING Kla0 from String
2021-03-12 03:16:21,794 [main:114] - replacement of fu5(fu6()) of type Kla0 is Kla0("dylhi")
2021-03-12 03:16:21,956 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:16:21,957 [main:66] - Compilation checking started
2021-03-12 03:16:22,428 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(Kla0("dylhi"))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:22,431 [main:107] - replacing (ss.s, String)
2021-03-12 03:16:22,431 [main:50] - replacing ss.s String
2021-03-12 03:16:22,431 [main:54] - Getting value of type String
2021-03-12 03:16:22,594 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:22,598 [main:58] - GENERATED VALUE OF TYPE String = "vknrw"
2021-03-12 03:16:22,599 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:22,793 [main:67] - randomType = Kla9
2021-03-12 03:16:22,955 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 03:16:22,959 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}
2021-03-12 03:16:22,980 [main:106] - GETTING String from Int
2021-03-12 03:16:23,008 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:16:23,008 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:16:23,008 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:16:23,008 [main:117] - GENERATED CALL = (arg1 + arg2).toByte().toString((arg))
2021-03-12 03:16:23,008 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:16:23,008 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:16:23,008 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:16:23,008 [main:117] - GENERATED CALL = (arg1 + arg2).toInt().toString(val justForUsageInClosure =
2021-03-12 03:16:23,009 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:16:23,009 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:16:23,009 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:16:23,009 [main:117] - GENERATED CALL = (arg1 + arg2).toChar().plus(val a2 = A(123).toString()
2021-03-12 03:16:23,009 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:16:23,009 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:16:23,009 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:16:23,009 [main:117] - GENERATED CALL = (arg1 + arg2).toChar().uppercase()
2021-03-12 03:16:23,009 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]]
2021-03-12 03:16:23,009 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:16:23,009 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a36d52a]
2021-03-12 03:16:23,010 [main:117] - GENERATED CALL = (arg1 + arg2).toChar().titlecase()
2021-03-12 03:16:23,010 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:16:23,010 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:16:23,173 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:16:23,177 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:16:23,178 [main:117] - GENERATED CALL = (arg1 + arg2).div(1643620093677620091).toString((arg1 + arg2))
2021-03-12 03:16:23,178 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:16:23,178 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:16:23,178 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:16:23,178 [main:117] - GENERATED CALL = (arg1 + arg2).toLong().toString(arg1 + arg2)
2021-03-12 03:16:23,178 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:16:23,178 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:16:23,178 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:16:23,178 [main:117] - GENERATED CALL = (arg1 + arg2).compareTo((arg1 + arg2)).toString(arg1 + arg2)
2021-03-12 03:16:23,179 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:16:23,179 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:16:23,179 [main:117] - GENERATED CALL = (arg1 + arg2).toString(val justForUsageInClosure =
2021-03-12 03:16:23,179 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:16:23,179 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:16:23,179 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:16:23,179 [main:117] - GENERATED CALL = (arg1 + arg2).toShort().toString(arg1)
2021-03-12 03:16:23,179 [main:114] - replacement of ss.s of type String is (arg1 + arg2).toChar().titlecase()
2021-03-12 03:16:23,343 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:16:23,344 [main:66] - Compilation checking started
2021-03-12 03:16:23,798 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((arg1 + arg2).toChar().titlecase())

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:23,801 [main:107] - replacing (0, Int)
2021-03-12 03:16:23,801 [main:50] - replacing 0 Int
2021-03-12 03:16:23,801 [main:54] - Getting value of type Int
2021-03-12 03:16:23,966 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:16:23,970 [main:58] - GENERATED VALUE OF TYPE Int = 614591378
2021-03-12 03:16:23,970 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:24,349 [main:67] - randomType = UShort?
2021-03-12 03:16:24,511 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 03:16:24,545 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@69bbb73a]
2021-03-12 03:16:24,707 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:16:24,711 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12032e95]
2021-03-12 03:16:24,876 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:16:24,881 [main:78] - Generated call from random type = (14432.toUShort())?.compareTo(45.toUByte()).xor(-671235286)
2021-03-12 03:16:24,881 [main:106] - GETTING Int from String
2021-03-12 03:16:24,903 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@d45fdf6]]
2021-03-12 03:16:24,904 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:16:25,067 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:16:25,071 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@d45fdf6]
2021-03-12 03:16:25,071 [main:117] - GENERATED CALL = (parentSideEffects).get(-1957049295).toInt()
2021-03-12 03:16:25,071 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2e7edda3]]
2021-03-12 03:16:25,071 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:16:25,071 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2e7edda3]
2021-03-12 03:16:25,071 [main:117] - GENERATED CALL = (parentSideEffects).compareTo(a2).countOneBits()
2021-03-12 03:16:25,071 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5797f91]]
2021-03-12 03:16:25,071 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:16:25,071 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5797f91]
2021-03-12 03:16:25,233 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:16:25,237 [main:117] - GENERATED CALL = (parentSideEffects).compareTo(parentSideEffects).or(152468109)
2021-03-12 03:16:25,237 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d302fac]]
2021-03-12 03:16:25,237 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:16:25,237 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d302fac]
2021-03-12 03:16:25,399 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:16:25,403 [main:117] - GENERATED CALL = (parentSideEffects).compareTo(parentSideEffects).times(-118)
2021-03-12 03:16:25,403 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b85727c]]
2021-03-12 03:16:25,403 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b85727c]
2021-03-12 03:16:25,403 [main:117] - GENERATED CALL = (parentSideEffects).length.rotateLeft((arg1 + arg2))
2021-03-12 03:16:25,403 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5797f91]]
2021-03-12 03:16:25,403 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5797f91]
2021-03-12 03:16:25,404 [main:117] - GENERATED CALL = (parentSideEffects).length.or((arg))
2021-03-12 03:16:25,404 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]]
2021-03-12 03:16:25,404 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d3ef26]
2021-03-12 03:16:25,404 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125418c4]
2021-03-12 03:16:25,567 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:16:25,571 [main:117] - GENERATED CALL = (parentSideEffects).compareTo(var prop: String =.rem(-22)
2021-03-12 03:16:25,571 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47c33908]]
2021-03-12 03:16:25,571 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47c33908]
2021-03-12 03:16:25,735 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:16:25,739 [main:117] - GENERATED CALL = (parentSideEffects).length.minus(-67)
2021-03-12 03:16:25,740 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67079661]]
2021-03-12 03:16:25,740 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:16:25,740 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67079661]
2021-03-12 03:16:25,906 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 03:16:25,910 [main:302] - generating value of type = Int true depth = 1
2021-03-12 03:16:25,914 [main:117] - GENERATED CALL = (parentSideEffects).subSequence(arg1 + arg2, arg1).sumOf({a: Char -> 1051003858})
2021-03-12 03:16:25,915 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]]
2021-03-12 03:16:25,915 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f4eb754]
2021-03-12 03:16:26,084 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:16:26,089 [main:117] - GENERATED CALL = (parentSideEffects).length.div(81)
2021-03-12 03:16:26,089 [main:114] - replacement of 0 of type Int is (parentSideEffects).length.or((arg))
2021-03-12 03:16:26,257 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:16:26,257 [main:66] - Compilation checking started
2021-03-12 03:16:26,704 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = (parentSideEffects).length.or((arg))
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:26,707 [main:107] - replacing (prope0, String)
2021-03-12 03:16:26,707 [main:50] - replacing prope0 String
2021-03-12 03:16:26,707 [main:54] - Getting value of type String
2021-03-12 03:16:26,870 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:26,874 [main:58] - GENERATED VALUE OF TYPE String = "khiln"
2021-03-12 03:16:26,874 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:27,691 [main:67] - randomType = Map<UByte, Kla6<Char>>
2021-03-12 03:16:27,691 [main:106] - GETTING String from Int
2021-03-12 03:16:27,720 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:16:27,721 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:16:27,721 [main:117] - GENERATED CALL = ((arg)).toString(arg1)
2021-03-12 03:16:27,721 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:16:27,721 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:16:27,721 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:16:27,721 [main:117] - GENERATED CALL = ((arg)).toChar().plus(var sideEffects: String =
2021-03-12 03:16:27,721 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]]
2021-03-12 03:16:27,721 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b4d79ca]
2021-03-12 03:16:27,721 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:16:27,884 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:16:27,888 [main:117] - GENERATED CALL = ((arg)).toByte().toString(-282677901)
2021-03-12 03:16:27,889 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]]
2021-03-12 03:16:27,889 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14d9a855]
2021-03-12 03:16:27,889 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d01a14c]
2021-03-12 03:16:27,889 [main:117] - GENERATED CALL = ((arg)).toShort().toString(arg)
2021-03-12 03:16:27,889 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:16:27,889 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1221a708]
2021-03-12 03:16:27,889 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:16:27,889 [main:117] - GENERATED CALL = ((arg)).compareTo(arg1).toString(val justForUsageInClosure =
2021-03-12 03:16:27,889 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:16:27,889 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@484976f1]
2021-03-12 03:16:28,054 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:16:28,058 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:16:28,058 [main:117] - GENERATED CALL = ((arg)).div(6046573360708821258).toString((arg1 + arg2))
2021-03-12 03:16:28,058 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]]
2021-03-12 03:16:28,058 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e5e3ed3]
2021-03-12 03:16:28,058 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf73168]
2021-03-12 03:16:28,058 [main:117] - GENERATED CALL = ((arg)).toLong().toString(val justForUsageInClosure =
2021-03-12 03:16:28,058 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:16:28,058 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:16:28,058 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:16:28,059 [main:117] - GENERATED CALL = ((arg)).toChar().uppercase()
2021-03-12 03:16:28,059 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]]
2021-03-12 03:16:28,059 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5943c903]
2021-03-12 03:16:28,059 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:16:28,059 [main:117] - GENERATED CALL = ((arg)).toChar().lowercase()
2021-03-12 03:16:28,059 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]]
2021-03-12 03:16:28,059 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6d20bdd2]
2021-03-12 03:16:28,059 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2221c51c]
2021-03-12 03:16:28,059 [main:117] - GENERATED CALL = ((arg)).toInt().toString((arg))
2021-03-12 03:16:28,059 [main:114] - replacement of prope0 of type String is ((arg)).toLong().toString(val justForUsageInClosure =
2021-03-12 03:16:28,224 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 03:16:28,224 [main:66] - Compilation checking started
2021-03-12 03:16:28,232 [main:71] - Wrong syntax or breaks conditions
2021-03-12 03:16:28,233 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (((arg)).toLong().toString(val justForUsageInClosure = != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:28,236 [main:107] - replacing (prope0.getOrThrow(), Ty0)
2021-03-12 03:16:28,236 [main:50] - replacing prope0.getOrThrow() Ty0
2021-03-12 03:16:28,236 [main:54] - Getting value of type Ty0
2021-03-12 03:16:28,400 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 03:16:28,407 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 03:16:28,604 [main:67] - randomType = Kla9
2021-03-12 03:16:28,768 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 03:16:28,772 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}
2021-03-12 03:16:28,790 [main:106] - GETTING Ty0 from Int
2021-03-12 03:16:28,819 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:28,836 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:28,836 [main:106] - GETTING Ty0 from Int
2021-03-12 03:16:28,837 [main:106] - GETTING Ty0 from Int
2021-03-12 03:16:28,837 [main:106] - GETTING Ty0 from Int
2021-03-12 03:16:28,838 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:28,839 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:28,839 [main:106] - GETTING Ty0 from A
2021-03-12 03:16:28,850 [main:106] - GETTING Ty0 from A
2021-03-12 03:16:28,851 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:28,852 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:28,852 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:28,853 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:28,854 [main:106] - GETTING Ty0 from Int
2021-03-12 03:16:28,854 [main:106] - GETTING Ty0 from String
2021-03-12 03:16:28,855 [main:106] - GETTING Ty0 from A
2021-03-12 03:16:28,855 [main:111] - Cant find and generate replacement for prope0.getOrThrow() type Ty0
2021-03-12 03:16:28,855 [main:107] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-12 03:16:28,855 [main:50] - replacing "tail-call optimization hit: method " + method String
2021-03-12 03:16:28,855 [main:54] - Getting value of type String
2021-03-12 03:16:29,017 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:29,021 [main:58] - GENERATED VALUE OF TYPE String = "vpmmn"
2021-03-12 03:16:29,021 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:29,037 [main:67] - randomType = Kla3
2021-03-12 03:16:29,199 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 03:16:29,203 [main:112] - generating klass Kla3 text = class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}
2021-03-12 03:16:29,211 [main:149] - GENERATING call of type public final suspend fun fu8(): kotlin.String defined in Kla3[SimpleFunctionDescriptorImpl@4ff5746c]
2021-03-12 03:16:29,211 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34632d00]
2021-03-12 03:16:29,375 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:16:29,379 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:16:29,383 [main:78] - Generated call from random type = (Kla3()).fu8().takeWhile({a: Char -> false})
2021-03-12 03:16:29,383 [main:106] - GETTING String from String
2021-03-12 03:16:29,399 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]]
2021-03-12 03:16:29,399 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6494d33a]
2021-03-12 03:16:29,563 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:16:29,567 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:16:29,571 [main:117] - GENERATED CALL = (sideEffects).filter({a: Char -> false})
2021-03-12 03:16:29,571 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]]
2021-03-12 03:16:29,571 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca97a25]
2021-03-12 03:16:29,736 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:16:29,743 [main:117] - GENERATED CALL = (sideEffects).removePrefix("heyhw")
2021-03-12 03:16:29,743 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]]
2021-03-12 03:16:29,743 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:16:29,743 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f5979f]
2021-03-12 03:16:29,743 [main:117] - GENERATED CALL = (sideEffects).get((arg1 + arg2)).uppercase()
2021-03-12 03:16:29,743 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]]
2021-03-12 03:16:29,743 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60a9f236]
2021-03-12 03:16:29,744 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fb30c38]
2021-03-12 03:16:29,907 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:16:30,074 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:16:30,079 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:16:30,637 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:16:30,641 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 03:16:30,645 [main:95] - GENERATED = Regex("cvflf", kotlin.text.RegexOption.MULTILINE)
2021-03-12 03:16:30,808 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 03:16:30,812 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:16:30,820 [main:117] - GENERATED CALL = (sideEffects).subSequence((arg1 + arg2), arg).replace(Regex("cvflf", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> StringBuilder()})
2021-03-12 03:16:30,820 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]]
2021-03-12 03:16:30,820 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c712d2e]
2021-03-12 03:16:30,820 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3728603]
2021-03-12 03:16:30,820 [main:117] - GENERATED CALL = (sideEffects).get(arg1).plus(val a3 = A().toString()
2021-03-12 03:16:30,820 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]]
2021-03-12 03:16:30,821 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6547c5ad]
2021-03-12 03:16:30,984 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:16:30,988 [main:117] - GENERATED CALL = (sideEffects).substringBeforeLast('鴖', sideEffects)
2021-03-12 03:16:30,988 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]]
2021-03-12 03:16:30,988 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0c3e52]
2021-03-12 03:16:31,150 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:16:31,154 [main:117] - GENERATED CALL = (sideEffects).replaceBefore('⿤', sideEffects, a3)
2021-03-12 03:16:31,154 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]]
2021-03-12 03:16:31,154 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a708161]
2021-03-12 03:16:31,316 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:16:31,320 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:16:31,324 [main:117] - GENERATED CALL = (sideEffects).dropWhile({a: Char -> false})
2021-03-12 03:16:31,324 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]]
2021-03-12 03:16:31,324 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@586266fe]
2021-03-12 03:16:31,485 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:16:31,489 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:16:31,493 [main:117] - GENERATED CALL = (sideEffects).filterNot({a: Char -> true})
2021-03-12 03:16:31,494 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]]
2021-03-12 03:16:31,494 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]
2021-03-12 03:16:31,494 [main:117] - GENERATED CALL = (sideEffects).lowercase()
2021-03-12 03:16:31,494 [main:114] - replacement of "tail-call optimization hit: method " + method of type String is (sideEffects).get((arg1 + arg2)).uppercase()
2021-03-12 03:16:31,654 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:16:31,655 [main:66] - Compilation checking started
2021-03-12 03:16:32,145 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((sideEffects).get((arg1 + arg2)).uppercase() + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:32,148 [main:107] - replacing (prope0, Result<Ty0>)
2021-03-12 03:16:32,149 [main:50] - replacing prope0 Result<Ty0>
2021-03-12 03:16:32,149 [main:54] - Getting value of type Result<Ty0>
2021-03-12 03:16:32,316 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 03:16:32,491 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 03:16:32,497 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 03:16:32,863 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 03:16:32,863 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 03:16:32,879 [main:67] - randomType = Kla0
2021-03-12 03:16:33,043 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:16:33,047 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 03:16:33,207 [main:194] - Type params = []
2021-03-12 03:16:33,370 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:16:33,381 [main:106] - GETTING Result<Ty0> from String
2021-03-12 03:16:33,398 [main:106] - GETTING Result<Ty0> from String
2021-03-12 03:16:33,399 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 03:16:33,428 [main:106] - GETTING Result<Ty0> from String
2021-03-12 03:16:33,430 [main:106] - GETTING Result<Ty0> from String
2021-03-12 03:16:33,431 [main:106] - GETTING Result<Ty0> from A
2021-03-12 03:16:33,446 [main:106] - GETTING Result<Ty0> from String
2021-03-12 03:16:33,447 [main:106] - GETTING Result<Ty0> from String
2021-03-12 03:16:33,448 [main:106] - GETTING Result<Ty0> from String
2021-03-12 03:16:33,450 [main:106] - GETTING Result<Ty0> from A
2021-03-12 03:16:33,451 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 03:16:33,452 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 03:16:33,453 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 03:16:33,454 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 03:16:33,455 [main:106] - GETTING Result<Ty0> from A
2021-03-12 03:16:33,456 [main:106] - GETTING Result<Ty0> from String
2021-03-12 03:16:33,457 [main:106] - GETTING Result<Ty0> from String
2021-03-12 03:16:33,458 [main:111] - Cant find and generate replacement for prope0 type Result<Ty0>
2021-03-12 03:16:33,458 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 03:16:33,458 [main:50] - replacing numberOfSuspensions Int
2021-03-12 03:16:33,458 [main:54] - Getting value of type Int
2021-03-12 03:16:33,626 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:16:33,630 [main:58] - GENERATED VALUE OF TYPE Int = -2117113032
2021-03-12 03:16:33,630 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:34,010 [main:67] - randomType = Long?
2021-03-12 03:16:34,173 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:16:34,207 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72943338]
2021-03-12 03:16:34,207 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@768abaa1]
2021-03-12 03:16:34,207 [main:78] - Generated call from random type = (-1077068719360104986)?.toByte().countTrailingZeroBits()
2021-03-12 03:16:34,208 [main:106] - GETTING Int from A
2021-03-12 03:16:34,219 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d]]
2021-03-12 03:16:34,219 [main:117] - GENERATED CALL = (A()).parentProp.length
2021-03-12 03:16:34,219 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in box.A[DeserializedSimpleFunctionDescriptor@65c16ba5], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]]
2021-03-12 03:16:34,219 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in box.A[DeserializedSimpleFunctionDescriptor@65c16ba5]
2021-03-12 03:16:34,382 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:16:34,382 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63d9db68]
2021-03-12 03:16:34,713 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:16:34,717 [main:117] - GENERATED CALL = (A()).equals("vackl").compareTo(true)
2021-03-12 03:16:34,718 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6083fddb]]
2021-03-12 03:16:34,718 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6083fddb]
2021-03-12 03:16:34,718 [main:117] - GENERATED CALL = (A()).parentProp.toInt()
2021-03-12 03:16:34,718 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6083fddb]]
2021-03-12 03:16:34,718 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6083fddb]
2021-03-12 03:16:34,718 [main:117] - GENERATED CALL = (A()).grandParentProp.toInt()
2021-03-12 03:16:34,718 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]]
2021-03-12 03:16:34,718 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]
2021-03-12 03:16:34,882 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:35,049 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:16:35,053 [main:117] - GENERATED CALL = (A()).prop.compareTo("yoatv", true)
2021-03-12 03:16:35,053 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6083fddb]]
2021-03-12 03:16:35,053 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6083fddb]
2021-03-12 03:16:35,053 [main:117] - GENERATED CALL = (A()).prop.toInt()
2021-03-12 03:16:35,053 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]]
2021-03-12 03:16:35,053 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]
2021-03-12 03:16:35,216 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:35,384 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:16:35,389 [main:117] - GENERATED CALL = (A()).grandParentProp.compareTo("rmdul", true)
2021-03-12 03:16:35,389 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]]
2021-03-12 03:16:35,389 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521f31fd]
2021-03-12 03:16:35,551 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:16:35,555 [main:117] - GENERATED CALL = (A()).parentProp.compareTo(val justForUsageInParentClosure =
2021-03-12 03:16:35,555 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d]]
2021-03-12 03:16:35,555 [main:117] - GENERATED CALL = (A()).grandParentProp.length
2021-03-12 03:16:35,555 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@430ca76d]]
2021-03-12 03:16:35,555 [main:117] - GENERATED CALL = (A()).prop.length
2021-03-12 03:16:35,555 [main:114] - replacement of numberOfSuspensions of type Int is (A()).equals("vackl").compareTo(true)
2021-03-12 03:16:35,718 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:16:35,718 [main:66] - Compilation checking started
2021-03-12 03:16:36,175 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (A()).equals("vackl").compareTo(true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:36,179 [main:107] - replacing ({
        prope0.getOrThrow()
    }, Any?)
2021-03-12 03:16:36,181 [main:50] - replacing {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.getOrThrow()
    } Any?
2021-03-12 03:16:36,181 [main:54] - Getting value of type Any?
2021-03-12 03:16:36,344 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:16:36,344 [main:58] - GENERATED VALUE OF TYPE Any? = "zlqbo"
2021-03-12 03:16:36,344 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:36,361 [main:67] - randomType = Kla0
2021-03-12 03:16:36,525 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:16:36,529 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 03:16:36,695 [main:194] - Type params = []
2021-03-12 03:16:36,863 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:16:36,911 [main:106] - GETTING Any? from String
2021-03-12 03:16:36,930 [main:106] - GETTING Any? from Int
2021-03-12 03:16:36,960 [main:106] - GETTING Any? from A
2021-03-12 03:16:36,971 [main:106] - GETTING Any? from String
2021-03-12 03:16:36,972 [main:106] - GETTING Any? from A
2021-03-12 03:16:36,973 [main:106] - GETTING Any? from Int
2021-03-12 03:16:36,974 [main:106] - GETTING Any? from String
2021-03-12 03:16:36,975 [main:106] - GETTING Any? from Int
2021-03-12 03:16:36,976 [main:106] - GETTING Any? from String
2021-03-12 03:16:36,977 [main:106] - GETTING Any? from String
2021-03-12 03:16:36,978 [main:106] - GETTING Any? from String
2021-03-12 03:16:36,979 [main:106] - GETTING Any? from A
2021-03-12 03:16:36,979 [main:106] - GETTING Any? from String
2021-03-12 03:16:36,980 [main:106] - GETTING Any? from String
2021-03-12 03:16:36,981 [main:106] - GETTING Any? from Int
2021-03-12 03:16:36,982 [main:106] - GETTING Any? from String
2021-03-12 03:16:36,983 [main:106] - GETTING Any? from Int
2021-03-12 03:16:36,984 [main:114] - replacement of {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.getOrThrow()
    } of type Any? is "zlqbo"
2021-03-12 03:16:37,149 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 03:16:37,149 [main:66] - Compilation checking started
2021-03-12 03:16:37,158 [main:71] - Wrong syntax or breaks conditions
2021-03-12 03:16:37,158 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) "zlqbo"
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:37,162 [main:107] - replacing (Kla2(), Kla2)
2021-03-12 03:16:37,163 [main:50] - replacing Kla2() Kla2
2021-03-12 03:16:37,163 [main:54] - Getting value of type Kla2
2021-03-12 03:16:37,331 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 03:16:37,335 [main:112] - generating klass Kla2 text = class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}
2021-03-12 03:16:37,335 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-12 03:16:37,335 [main:61] - GENERATED IS CALL =true
2021-03-12 03:16:37,352 [main:67] - randomType = Kla3
2021-03-12 03:16:37,517 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 03:16:37,521 [main:112] - generating klass Kla3 text = class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}
2021-03-12 03:16:37,531 [main:106] - GETTING Kla2 from Int
2021-03-12 03:16:37,559 [main:106] - GETTING Kla2 from String
2021-03-12 03:16:37,575 [main:106] - GETTING Kla2 from String
2021-03-12 03:16:37,576 [main:106] - GETTING Kla2 from String
2021-03-12 03:16:37,577 [main:106] - GETTING Kla2 from String
2021-03-12 03:16:37,577 [main:106] - GETTING Kla2 from Int
2021-03-12 03:16:37,578 [main:106] - GETTING Kla2 from A
2021-03-12 03:16:37,589 [main:106] - GETTING Kla2 from Int
2021-03-12 03:16:37,590 [main:106] - GETTING Kla2 from A
2021-03-12 03:16:37,590 [main:106] - GETTING Kla2 from Int
2021-03-12 03:16:37,591 [main:106] - GETTING Kla2 from String
2021-03-12 03:16:37,591 [main:106] - GETTING Kla2 from String
2021-03-12 03:16:37,592 [main:106] - GETTING Kla2 from A
2021-03-12 03:16:37,593 [main:106] - GETTING Kla2 from String
2021-03-12 03:16:37,593 [main:106] - GETTING Kla2 from String
2021-03-12 03:16:37,594 [main:106] - GETTING Kla2 from String
2021-03-12 03:16:37,594 [main:106] - GETTING Kla2 from Int
2021-03-12 03:16:37,594 [main:114] - replacement of Kla2() of type Kla2 is Kla2()
2021-03-12 03:16:37,763 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:16:37,767 [main:107] - replacing ("FAIL2", String)
2021-03-12 03:16:37,767 [main:50] - replacing "FAIL2" String
2021-03-12 03:16:37,767 [main:54] - Getting value of type String
2021-03-12 03:16:37,930 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:37,934 [main:58] - GENERATED VALUE OF TYPE String = "nwwba"
2021-03-12 03:16:37,934 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:38,127 [main:67] - randomType = Char
2021-03-12 03:16:38,292 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:16:38,314 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@37305dbd]
2021-03-12 03:16:38,314 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@639e281]
2021-03-12 03:16:38,314 [main:78] - Generated call from random type = ('鹏').toByte().toString(arg1 + arg2)
2021-03-12 03:16:38,315 [main:106] - GETTING String from A
2021-03-12 03:16:38,325 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]]
2021-03-12 03:16:38,326 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6c153a]
2021-03-12 03:16:38,326 [main:117] - GENERATED CALL = (A(123)).parentProp.lowercase()
2021-03-12 03:16:38,326 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]]
2021-03-12 03:16:38,326 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8eb762]
2021-03-12 03:16:38,491 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:16:38,496 [main:117] - GENERATED CALL = (A(123)).grandParentProp.padStart((arg), 'ㆪ')
2021-03-12 03:16:38,496 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]]
2021-03-12 03:16:38,496 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd9f6bc]
2021-03-12 03:16:38,496 [main:117] - GENERATED CALL = (A(123)).prop.trimMargin(var parentSideEffects: String =
2021-03-12 03:16:38,496 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]]
2021-03-12 03:16:38,496 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a17b78c]
2021-03-12 03:16:38,496 [main:117] - GENERATED CALL = (A(123)).parentProp.reversed()
2021-03-12 03:16:38,497 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34632d00]]
2021-03-12 03:16:38,497 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34632d00]
2021-03-12 03:16:38,662 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:16:38,666 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:16:38,670 [main:117] - GENERATED CALL = (A(123)).prop.takeWhile({a: Char -> true})
2021-03-12 03:16:38,670 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]]
2021-03-12 03:16:38,670 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4611a950]
2021-03-12 03:16:38,833 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:16:38,833 [main:117] - GENERATED CALL = (A(123)).parentProp.plus("zgmzp")
2021-03-12 03:16:38,833 [main:113] - Case = [public final val grandParentProp: kotlin.String defined in C[PropertyDescriptorImpl@2464e770], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]]
2021-03-12 03:16:38,833 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141dbfc3]
2021-03-12 03:16:38,833 [main:117] - GENERATED CALL = (A(123)).grandParentProp.trimEnd()
2021-03-12 03:16:38,833 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]]
2021-03-12 03:16:38,833 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2a9949]
2021-03-12 03:16:38,998 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:16:39,005 [main:117] - GENERATED CALL = (A(123)).parentProp.removeSurrounding("tdufv")
2021-03-12 03:16:39,005 [main:113] - Case = [public final val parentProp: kotlin.String defined in box.B[PropertyDescriptorImpl@55f0dd59], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]]
2021-03-12 03:16:39,005 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bc15f6]
2021-03-12 03:16:39,006 [main:117] - GENERATED CALL = (A(123)).parentProp.prependIndent(val justForUsageInParentClosure =
2021-03-12 03:16:39,006 [main:113] - Case = [public final var prop: kotlin.String defined in box.A[PropertyDescriptorImpl@6055e32f], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]]
2021-03-12 03:16:39,006 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]
2021-03-12 03:16:39,170 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:16:39,338 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:39,343 [main:117] - GENERATED CALL = (A(123)).prop.replaceBeforeLast('', val parentProp: String
2021-03-12 03:16:39,343 [main:114] - replacement of "FAIL2" of type String is (A(123)).grandParentProp.padStart((arg), 'ㆪ')
2021-03-12 03:16:39,513 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:16:39,632 [main:66] - Compilation checking started
2021-03-12 03:16:40,083 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class C(val grandParentProp: String)
fun box(): String {
    var sideEffects: String = ""
    var parentSideEffects: String = ""
    val justForUsageInClosure = 7
    val justForUsageInParentClosure = "parentCaptured"

    abstract class B : C {
        val parentProp: String
        init {
            sideEffects += "minus-one#"
            parentSideEffects += "1"
        }
        protected constructor(arg: Int): super(justForUsageInParentClosure) {
            parentProp = (arg).toString()
            sideEffects += "0.5#"
            parentSideEffects += "#" + justForUsageInParentClosure
        }
        protected constructor(arg1: Int, arg2: Int): super(justForUsageInParentClosure) {
            parentProp = (arg1 + arg2).toString()
            sideEffects += "0.7#"
            parentSideEffects += "#3"
        }
        init {
            sideEffects += "zero#"
            parentSideEffects += "#4"
        }
    }

    class A : B {
        var prop: String = ""
        init {
            sideEffects += prop + "first"
        }

        constructor(x1: Int, x2: Int): super(x1, x2) {
            prop = x1.toString()
            sideEffects += "#third"
        }

        init {
            sideEffects += prop + "#second"
        }

        constructor(x: Int): super(justForUsageInClosure + x) {
            prop += "${x}#int"
            sideEffects += "#fourth"
        }

        constructor(): this(justForUsageInClosure) {
            sideEffects += "#fifth"
        }

        override fun toString() = "$prop#$parentProp#$grandParentProp"
    }

    val a1 = A(5, 10).toString()
    if (a1 != "5#15#parentCaptured") return "fail1: $a1"
    if (sideEffects != "minus-one#zero#0.7#first#second#third") return "fail2: ${sideEffects}"
    if (parentSideEffects != "1#4#3") return "fail3: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a2 = A(123).toString()
    if (a2 != "123#int#130#parentCaptured") return "fail1: $a2"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth") return "fail4: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail5: ${parentSideEffects}"

    sideEffects = ""
    parentSideEffects = ""
    val a3 = A().toString()
    if (a3 != "7#int#14#parentCaptured") return "fail6: $a3"
    if (sideEffects != "minus-one#zero#0.5#first#second#fourth#fifth") return "fail7: ${sideEffects}"
    if (parentSideEffects != "1#4#parentCaptured") return "fail8: ${parentSideEffects}"

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1<Kla0>())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1<String>()

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
return fu4(fu1<Kla0>())
    }

    suspend fun fu8() = fu7().s
}

fun box316(): String {
    var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = (A(123)).grandParentProp.padStart((arg), 'ㆪ')

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var sideEffects: String = ""
var parentSideEffects: String = ""
val justForUsageInClosure = 7
val justForUsageInParentClosure = "parentCaptured"
val a1 = A(5, 10).toString()
val a2 = A(123).toString()
val a3 = A().toString()
val parentProp: String
var prop: String = ""
throw exception
    }
}


2021-03-12 03:16:40,087 [main:107] - replacing (it.message!!, String)
2021-03-12 03:16:40,087 [main:50] - replacing it.message!! String
2021-03-12 03:16:40,087 [main:54] - Getting value of type String
2021-03-12 03:16:40,259 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:16:40,264 [main:58] - GENERATED VALUE OF TYPE String = "fkpiu"
2021-03-12 03:16:40,264 [main:61] - GENERATED IS CALL =false
2021-03-12 03:16:40,657 [main:67] - randomType = Long?
2021-03-12 03:16:40,827 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:16:40,869 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@12c16090]
2021-03-12 03:16:40,869 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633de255]
2021-03-12 03:16:40,869 [main:78] - Generated call from random type = (4704590387610471660)?.toChar().lowercase()
2021-03-12 03:16:40,870 [main:106] - GETTING String from String
2021-03-12 03:16:40,886 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]]
2021-03-12 03:16:40,886 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e756aea]
2021-03-12 03:16:41,057 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:16:41,232 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:16:41,237 [main:117] - GENERATED CALL = (a1).commonPrefixWith("yayoo", true)
2021-03-12 03:16:41,237 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]]
2021-03-12 03:16:41,237 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c72956]
2021-03-12 03:16:41,407 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:16:41,412 [main:117] - GENERATED CALL = (a1).replaceBeforeLast('㼀', prop, a1)
2021-03-12 03:16:41,412 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]]
2021-03-12 03:16:41,412 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6995e]
2021-03-12 03:16:41,580 [main:302] - generating value of type = Char true depth = 0
