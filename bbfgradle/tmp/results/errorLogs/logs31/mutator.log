2021-03-11 20:28:38,140 [main:66] - Compilation checking started
2021-03-11 20:28:39,549 [main:302] - generating value of type = Exception false depth = 0
2021-03-11 20:28:40,025 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:28:40,040 [main:66] - Compilation checking started
2021-03-11 20:28:40,484 [main:49] - Result = false
Text:
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception = NumberFormatException()) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"
2021-03-11 20:28:40,752 [main:112] - generating klass Color text = enum class Color {
  RED,
  BLUE
}
2021-03-11 20:28:40,754 [main:112] - generating klass RED text = RED,
2021-03-11 20:28:40,754 [main:112] - generating klass BLUE text = BLUE
2021-03-11 20:28:41,029 [main:45] - Trying to change 30 nodes
2021-03-11 20:28:41,031 [main:53] - replacing (true, Boolean)
2021-03-11 20:28:41,032 [main:50] - replacing true Boolean
2021-03-11 20:28:41,032 [main:54] - Getting value of type Boolean
2021-03-11 20:28:41,149 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:41,150 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:28:41,150 [main:61] - GENERATED IS CALL =false
2021-03-11 20:28:41,153 [main:67] - randomType = Color
2021-03-11 20:28:41,306 [main:302] - generating value of type = Color false depth = 0
2021-03-11 20:28:41,307 [main:112] - generating klass Color text = enum class Color {
  RED,
  BLUE
}
2021-03-11 20:28:41,404 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65a80c28]
2021-03-11 20:28:41,505 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:41,508 [main:78] - Generated call from random type = (Color.RED).name.equals("ndzbm")
2021-03-11 20:28:41,508 [main:106] - GETTING Boolean from Boolean
2021-03-11 20:28:41,527 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:28:41,527 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:41,640 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:28:41,641 [main:117] - GENERATED CALL = (throwsOnGreen()).equals(null).xor(throwsOnGreen())
2021-03-11 20:28:41,642 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:28:41,642 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:41,785 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:41,786 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:28:41,787 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("gvtoc").or(throwsOnGreen())
2021-03-11 20:28:41,787 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]]
2021-03-11 20:28:41,787 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:41,915 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:41,916 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]
2021-03-11 20:28:42,030 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:42,031 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("iiopb").equals("jpytj")
2021-03-11 20:28:42,031 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]]
2021-03-11 20:28:42,031 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]
2021-03-11 20:28:42,127 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:42,128 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("btgqe")
2021-03-11 20:28:42,129 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]]
2021-03-11 20:28:42,129 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:42,129 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]
2021-03-11 20:28:42,238 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:42,240 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).equals("ldorx")
2021-03-11 20:28:42,240 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:28:42,240 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:42,343 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:42,344 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:28:42,346 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("jndqb").not()
2021-03-11 20:28:42,346 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:28:42,346 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:28:42,347 [main:117] - GENERATED CALL = (throwsOnGreen()).xor(throwsOnGreen())
2021-03-11 20:28:42,347 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:28:42,347 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:28:42,349 [main:117] - GENERATED CALL = (throwsOnGreen()).and(throwsOnGreen())
2021-03-11 20:28:42,349 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:28:42,349 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:42,454 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:42,455 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:28:42,547 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:42,548 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("hkrho").and(false)
2021-03-11 20:28:42,549 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:28:42,549 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:28:42,657 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:42,659 [main:117] - GENERATED CALL = (throwsOnGreen()).or(false)
2021-03-11 20:28:42,659 [main:61] - replacement of true of type Boolean is (throwsOnGreen()).equals("hkrho").and(false)
2021-03-11 20:28:42,756 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:28:42,756 [main:66] - Compilation checking started
2021-03-11 20:28:43,191 [main:53] - Result = true
Text:
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return (throwsOnGreen()).equals("hkrho").and(false)
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"
2021-03-11 20:28:43,193 [main:53] - replacing (Color.BLUE, Color)
2021-03-11 20:28:43,193 [main:50] - replacing Color.BLUE Color
2021-03-11 20:28:43,193 [main:54] - Getting value of type Color
2021-03-11 20:28:43,297 [main:302] - generating value of type = Color false depth = 0
2021-03-11 20:28:43,297 [main:112] - generating klass Color text = enum class Color {
  RED,
  BLUE
}
2021-03-11 20:28:43,298 [main:58] - GENERATED VALUE OF TYPE Color = Color.RED
2021-03-11 20:28:43,298 [main:61] - GENERATED IS CALL =false
2021-03-11 20:28:43,427 [main:67] - randomType = Byte
2021-03-11 20:28:43,516 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:28:43,608 [main:106] - GETTING Color from Boolean
2021-03-11 20:28:43,623 [main:61] - replacement of Color.BLUE of type Color is Color.RED
2021-03-11 20:28:43,716 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:28:43,717 [main:66] - Compilation checking started
2021-03-11 20:28:44,118 [main:53] - Result = true
Text:
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return (throwsOnGreen()).equals("hkrho").and(false)
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.RED
  && throwsOnGreen()
  ) "OK" else "fail"
2021-03-11 20:28:44,120 [main:53] - replacing (0, Int)
2021-03-11 20:28:44,120 [main:50] - replacing 0 Int
2021-03-11 20:28:44,120 [main:54] - Getting value of type Int
2021-03-11 20:28:44,223 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:28:44,223 [main:58] - GENERATED VALUE OF TYPE Int = 950538979
2021-03-11 20:28:44,223 [main:61] - GENERATED IS CALL =false
2021-03-11 20:28:44,328 [main:67] - randomType = Float
2021-03-11 20:28:44,415 [main:302] - generating value of type = Float true depth = 0
2021-03-11 20:28:44,469 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a8c1916]
2021-03-11 20:28:44,470 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53162e9c]
2021-03-11 20:28:44,558 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:28:44,658 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:28:44,659 [main:78] - Generated call from random type = (0.584013f).toInt().coerceIn(-2126006014, 595134128)
2021-03-11 20:28:44,661 [main:106] - GETTING Int from Boolean
2021-03-11 20:28:44,675 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@156c2fa2]]
2021-03-11 20:28:44,676 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:44,805 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:44,805 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@156c2fa2]
2021-03-11 20:28:44,903 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:28:44,905 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(false).compareTo(113)
2021-03-11 20:28:44,905 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]]
2021-03-11 20:28:44,905 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:44,906 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]
2021-03-11 20:28:44,998 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:28:44,999 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)
2021-03-11 20:28:45,000 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68ab9426]]
2021-03-11 20:28:45,000 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:45,094 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:45,095 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68ab9426]
2021-03-11 20:28:45,213 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:28:45,214 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(true).or(1955973952)
2021-03-11 20:28:45,214 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@10a2f485]]
2021-03-11 20:28:45,214 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:45,215 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@10a2f485]
2021-03-11 20:28:45,215 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).unaryMinus()
2021-03-11 20:28:45,215 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2bde140b]]
2021-03-11 20:28:45,215 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:45,216 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2bde140b]
2021-03-11 20:28:45,344 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:28:45,345 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).plus(10)
2021-03-11 20:28:45,345 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2bca913b]]
2021-03-11 20:28:45,345 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:45,346 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2bca913b]
2021-03-11 20:28:45,434 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:28:45,436 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).coerceAtLeast(536071203)
2021-03-11 20:28:45,437 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5eba1893]]
2021-03-11 20:28:45,437 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:45,438 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5eba1893]
2021-03-11 20:28:45,439 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).countOneBits()
2021-03-11 20:28:45,439 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1ac28535]]
2021-03-11 20:28:45,439 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:45,524 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:45,524 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1ac28535]
2021-03-11 20:28:45,616 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:28:45,618 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(true).and(-996597783)
2021-03-11 20:28:45,618 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@342bb4db]]
2021-03-11 20:28:45,618 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:45,706 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:45,707 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@342bb4db]
2021-03-11 20:28:45,794 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:28:45,795 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(false).xor(-1042401187)
2021-03-11 20:28:45,795 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e22c706]]
2021-03-11 20:28:45,795 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:45,795 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e22c706]
2021-03-11 20:28:45,882 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:28:45,883 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).shl(-1727796255)
2021-03-11 20:28:45,883 [main:61] - replacement of 0 of type Int is (throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)
2021-03-11 20:28:45,976 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:28:45,977 [main:66] - Compilation checking started
2021-03-11 20:28:46,424 [main:53] - Result = true
Text:
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return (throwsOnGreen()).equals("hkrho").and(false)
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)] == Color.RED
  && Color.values()[1] == Color.RED
  && throwsOnGreen()
  ) "OK" else "fail"
2021-03-11 20:28:46,425 [main:53] - replacing (0, Int)
2021-03-11 20:28:46,425 [main:50] - replacing 0 Int
2021-03-11 20:28:46,425 [main:54] - Getting value of type Int
2021-03-11 20:28:46,549 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:28:46,549 [main:58] - GENERATED VALUE OF TYPE Int = 1449809700
2021-03-11 20:28:46,549 [main:61] - GENERATED IS CALL =false
2021-03-11 20:28:46,855 [main:67] - randomType = Map<UShort, Double>
2021-03-11 20:28:46,856 [main:106] - GETTING Int from Boolean
2021-03-11 20:28:46,871 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@156c2fa2]]
2021-03-11 20:28:46,871 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:46,961 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:46,962 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@156c2fa2]
2021-03-11 20:28:47,053 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:28:47,054 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(true).compareTo(-12)
2021-03-11 20:28:47,055 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@7abbff6b]]
2021-03-11 20:28:47,055 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:47,163 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:47,164 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(true).sign
2021-03-11 20:28:47,164 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]]
2021-03-11 20:28:47,164 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:47,291 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:47,292 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:47,381 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:47,383 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("mrcnp").compareTo(false)
2021-03-11 20:28:47,383 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27d40d38]]
2021-03-11 20:28:47,383 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:47,383 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27d40d38]
2021-03-11 20:28:47,384 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).inv()
2021-03-11 20:28:47,384 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]]
2021-03-11 20:28:47,384 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:47,385 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]
2021-03-11 20:28:47,483 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:28:47,484 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).div(9)
2021-03-11 20:28:47,484 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@ec351c8]]
2021-03-11 20:28:47,484 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:47,485 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@ec351c8]
2021-03-11 20:28:47,485 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).toInt()
2021-03-11 20:28:47,485 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]]
2021-03-11 20:28:47,485 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:47,486 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen())
2021-03-11 20:28:47,486 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b73524e]]
2021-03-11 20:28:47,486 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:47,486 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b73524e]
2021-03-11 20:28:47,486 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).unaryPlus()
2021-03-11 20:28:47,487 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@f71a790]]
2021-03-11 20:28:47,487 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:47,487 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@f71a790]
2021-03-11 20:28:47,488 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).takeLowestOneBit()
2021-03-11 20:28:47,488 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]]
2021-03-11 20:28:47,488 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:47,488 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]
2021-03-11 20:28:47,575 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:28:47,576 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).ushr(-1782072702)
2021-03-11 20:28:47,576 [main:61] - replacement of 0 of type Int is (throwsOnGreen()).compareTo(true).sign
2021-03-11 20:28:47,672 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:28:47,675 [main:53] - replacing (Color.valueOf("RED") == Color.RED, Boolean)
2021-03-11 20:28:47,675 [main:50] - replacing Color.valueOf("RED") == Color.RED Boolean
2021-03-11 20:28:47,675 [main:54] - Getting value of type Boolean
2021-03-11 20:28:47,771 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:47,772 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:28:47,772 [main:61] - GENERATED IS CALL =false
2021-03-11 20:28:47,970 [main:67] - randomType = UShort?
2021-03-11 20:28:48,072 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 20:28:48,157 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@319e49d5]
2021-03-11 20:28:48,246 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:48,246 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]
2021-03-11 20:28:48,331 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:48,332 [main:78] - Generated call from random type = (3446.toUShort())?.equals("ayejq").equals("mcggp")
2021-03-11 20:28:48,333 [main:106] - GETTING Boolean from Boolean
2021-03-11 20:28:48,347 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:28:48,348 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:28:48,348 [main:117] - GENERATED CALL = (throwsOnGreen()).and(throwsOnGreen())
2021-03-11 20:28:48,348 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:28:48,348 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:48,441 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:48,441 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:28:48,442 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("snzrh").or(throwsOnGreen())
2021-03-11 20:28:48,442 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:28:48,442 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:28:48,443 [main:117] - GENERATED CALL = (throwsOnGreen()).not()
2021-03-11 20:28:48,443 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:28:48,443 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:28:48,443 [main:117] - GENERATED CALL = (throwsOnGreen()).or(throwsOnGreen())
2021-03-11 20:28:48,444 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:28:48,444 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:48,529 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:48,530 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:28:48,530 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("efmfh").xor(throwsOnGreen())
2021-03-11 20:28:48,530 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:28:48,530 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:48,631 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:48,631 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:28:48,632 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("ncctg").and(throwsOnGreen())
2021-03-11 20:28:48,633 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:28:48,633 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:28:48,633 [main:117] - GENERATED CALL = (throwsOnGreen()).xor(throwsOnGreen())
2021-03-11 20:28:48,634 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]]
2021-03-11 20:28:48,634 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:48,634 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]
2021-03-11 20:28:48,731 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:48,731 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).equals("ivqqf")
2021-03-11 20:28:48,732 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:28:48,732 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:48,815 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:48,815 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:28:48,816 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("xdxyo").not()
2021-03-11 20:28:48,816 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]]
2021-03-11 20:28:48,816 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:48,907 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:48,908 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]
2021-03-11 20:28:49,020 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:49,021 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("ygjkp").equals("bypkn")
2021-03-11 20:28:49,021 [main:61] - replacement of Color.valueOf("RED") == Color.RED of type Boolean is (throwsOnGreen()).equals("efmfh").xor(throwsOnGreen())
2021-03-11 20:28:49,119 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:28:49,119 [main:66] - Compilation checking started
2021-03-11 20:28:49,480 [main:53] - Result = true
Text:
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return (throwsOnGreen()).equals("hkrho").and(false)
    }
}

fun box() = if(
     (throwsOnGreen()).equals("efmfh").xor(throwsOnGreen())
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)] == Color.RED
  && Color.values()[1] == Color.RED
  && throwsOnGreen()
  ) "OK" else "fail"
2021-03-11 20:28:49,480 [main:53] - replacing ("RED", String)
2021-03-11 20:28:49,481 [main:50] - replacing "RED" String
2021-03-11 20:28:49,481 [main:54] - Getting value of type String
2021-03-11 20:28:49,567 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:28:49,568 [main:58] - GENERATED VALUE OF TYPE String = "hojhm"
2021-03-11 20:28:49,568 [main:61] - GENERATED IS CALL =false
2021-03-11 20:28:49,684 [main:67] - randomType = Double
2021-03-11 20:28:49,776 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:28:49,825 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@8a4f94f]
2021-03-11 20:28:49,825 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6de7bd67]
2021-03-11 20:28:49,907 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:28:49,908 [main:78] - Generated call from random type = (0.23867355979451654).toByte().toString(1691986004)
2021-03-11 20:28:49,908 [main:61] - replacement of "RED" of type String is (0.23867355979451654).toByte().toString(1691986004)
2021-03-11 20:28:49,987 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:28:49,988 [main:53] - replacing ("fail", String)
2021-03-11 20:28:49,989 [main:50] - replacing "fail" String
2021-03-11 20:28:49,989 [main:54] - Getting value of type String
2021-03-11 20:28:50,076 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:28:50,076 [main:58] - GENERATED VALUE OF TYPE String = "ksgcj"
2021-03-11 20:28:50,076 [main:61] - GENERATED IS CALL =false
2021-03-11 20:28:50,190 [main:67] - randomType = ArrayDeque<Color>
2021-03-11 20:28:50,272 [main:302] - generating value of type = ArrayDeque<Color> false depth = 0
2021-03-11 20:28:50,364 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Color> = TODO()
2021-03-11 20:28:50,366 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Color> = TODO()
2021-03-11 20:28:50,452 [main:95] - GENERATED = ArrayDeque<Color>()
2021-03-11 20:28:50,717 [main:149] - GENERATING call of type public final fun firstOrNull(): Color? defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@362a4fd6]
2021-03-11 20:28:50,718 [main:78] - Generated call from random type = (ArrayDeque<Color>()).firstOrNull()?.name!!
2021-03-11 20:28:50,718 [main:61] - replacement of "fail"

 of type String is (ArrayDeque<Color>()).firstOrNull()?.name!!
2021-03-11 20:28:50,835 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(POSTFIX_EXPRESSION)
2021-03-11 20:28:50,836 [main:66] - Compilation checking started
2021-03-11 20:28:51,227 [main:53] - Result = true
Text:
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return (throwsOnGreen()).equals("hkrho").and(false)
    }
}

fun box() = if(
     (throwsOnGreen()).equals("efmfh").xor(throwsOnGreen())
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)] == Color.RED
  && Color.values()[1] == Color.RED
  && throwsOnGreen()
  ) "OK" else (ArrayDeque<Color>()).firstOrNull()?.name!!
2021-03-11 20:28:51,228 [main:53] - replacing ("RED", String)
2021-03-11 20:28:51,228 [main:50] - replacing "RED" String
2021-03-11 20:28:51,228 [main:54] - Getting value of type String
2021-03-11 20:28:51,333 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:28:51,333 [main:58] - GENERATED VALUE OF TYPE String = "etxwt"
2021-03-11 20:28:51,334 [main:61] - GENERATED IS CALL =false
2021-03-11 20:28:51,335 [main:67] - randomType = Color
2021-03-11 20:28:51,443 [main:302] - generating value of type = Color false depth = 0
2021-03-11 20:28:51,443 [main:112] - generating klass Color text = enum class Color {
  RED,
  BLUE
}
2021-03-11 20:28:51,477 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41daab18]
2021-03-11 20:28:51,567 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:28:51,568 [main:78] - Generated call from random type = (Color.RED).name.prependIndent("edwqg")
2021-03-11 20:28:51,569 [main:106] - GETTING String from Boolean
2021-03-11 20:28:51,583 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]]
2021-03-11 20:28:51,583 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:51,583 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]
2021-03-11 20:28:51,697 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:28:51,698 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).toString(-854421763)
2021-03-11 20:28:51,698 [main:61] - replacement of "RED" of type String is "etxwt"
2021-03-11 20:28:51,804 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:28:51,805 [main:53] - replacing (Color.BLUE, Color)
2021-03-11 20:28:51,806 [main:50] - replacing Color.BLUE Color
2021-03-11 20:28:51,806 [main:54] - Getting value of type Color
2021-03-11 20:28:51,904 [main:302] - generating value of type = Color false depth = 0
2021-03-11 20:28:51,905 [main:112] - generating klass Color text = enum class Color {
  RED,
  BLUE
}
2021-03-11 20:28:51,905 [main:58] - GENERATED VALUE OF TYPE Color = Color.BLUE
2021-03-11 20:28:51,905 [main:61] - GENERATED IS CALL =false
2021-03-11 20:28:52,552 [main:67] - randomType = Triple<Set<Color?>?, ArrayDeque<UShort>, Color>
2021-03-11 20:28:52,646 [main:302] - generating value of type = Triple<Set<Color?>?, ArrayDeque<UShort>, Color> false depth = 0
2021-03-11 20:28:52,747 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Set<Color?>?, second: ArrayDeque<UShort>, third: Color): Triple<Set<Color?>?, ArrayDeque<UShort>, Color> = TODO()
2021-03-11 20:28:52,749 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Set<Color?>?, second: ArrayDeque<UShort>, third: Color): Triple<Set<Color?>?, ArrayDeque<UShort>, Color> = TODO()
2021-03-11 20:28:52,850 [main:302] - generating value of type = ArrayDeque<UShort> false depth = 3
2021-03-11 20:28:52,941 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UShort> = TODO()
2021-03-11 20:28:52,942 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UShort> = TODO()
2021-03-11 20:28:53,202 [main:302] - generating value of type = Int true depth = 6
2021-03-11 20:28:53,202 [main:95] - GENERATED = ArrayDeque<UShort>(1169924841)
2021-03-11 20:28:53,202 [main:302] - generating value of type = Color false depth = 3
2021-03-11 20:28:53,203 [main:112] - generating klass Color text = enum class Color {
  RED,
  BLUE
}
2021-03-11 20:28:53,203 [main:95] - GENERATED = Triple<Set<Color?>?, ArrayDeque<UShort>, Color>(null, ArrayDeque<UShort>(1169924841), Color.BLUE)
2021-03-11 20:28:53,236 [main:78] - Generated call from random type = (Triple<Set<Color?>?, ArrayDeque<UShort>, Color>(null, ArrayDeque<UShort>(1169924841), Color.BLUE)).third
2021-03-11 20:28:53,237 [main:106] - GETTING Color from Boolean
2021-03-11 20:28:53,250 [main:61] - replacement of Color.BLUE of type Color is (Triple<Set<Color?>?, ArrayDeque<UShort>, Color>(null, ArrayDeque<UShort>(1169924841), Color.BLUE)).third
2021-03-11 20:28:53,334 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:28:53,335 [main:66] - Compilation checking started
2021-03-11 20:28:53,706 [main:53] - Result = true
Text:
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return (throwsOnGreen()).equals("hkrho").and(false)
    }
}

fun box() = if(
     (throwsOnGreen()).equals("efmfh").xor(throwsOnGreen())
  && Color.valueOf("BLUE") == (Triple<Set<Color?>?, ArrayDeque<UShort>, Color>(null, ArrayDeque<UShort>(1169924841), Color.BLUE)).third
  && Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)] == Color.RED
  && Color.values()[1] == Color.RED
  && throwsOnGreen()
  ) "OK" else (ArrayDeque<Color>()).firstOrNull()?.name!!


2021-03-11 20:28:53,707 [main:53] - replacing ("BLUE", String)
2021-03-11 20:28:53,707 [main:50] - replacing "BLUE" String
2021-03-11 20:28:53,707 [main:54] - Getting value of type String
2021-03-11 20:28:53,803 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:28:53,804 [main:58] - GENERATED VALUE OF TYPE String = "rjlas"
2021-03-11 20:28:53,804 [main:61] - GENERATED IS CALL =false
2021-03-11 20:28:54,139 [main:67] - randomType = Set<UShort?>
2021-03-11 20:28:54,140 [main:106] - GETTING String from Boolean
2021-03-11 20:28:54,154 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]]
2021-03-11 20:28:54,154 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:54,245 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:54,245 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]
2021-03-11 20:28:54,334 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:28:54,334 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(false).toString(29662335)
2021-03-11 20:28:54,334 [main:61] - replacement of "BLUE" of type String is "rjlas"
2021-03-11 20:28:54,425 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:28:54,426 [main:66] - Compilation checking started
2021-03-11 20:28:54,771 [main:53] - Result = true
Text:
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return (throwsOnGreen()).equals("hkrho").and(false)
    }
}

fun box() = if(
     (throwsOnGreen()).equals("efmfh").xor(throwsOnGreen())
  && Color.valueOf("rjlas") == (Triple<Set<Color?>?, ArrayDeque<UShort>, Color>(null, ArrayDeque<UShort>(1169924841), Color.BLUE)).third
  && Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)] == Color.RED
  && Color.values()[1] == Color.RED
  && throwsOnGreen()
  ) "OK" else (ArrayDeque<Color>()).firstOrNull()?.name!!


2021-03-11 20:28:54,772 [main:53] - replacing (Color.values()[1] == Color.RED, Boolean)
2021-03-11 20:28:54,772 [main:50] - replacing Color.values()[1] == Color.RED Boolean
2021-03-11 20:28:54,772 [main:54] - Getting value of type Boolean
2021-03-11 20:28:54,894 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:54,895 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:28:54,895 [main:61] - GENERATED IS CALL =false
2021-03-11 20:28:55,333 [main:67] - randomType = LinkedHashMap<Char, Byte?>
2021-03-11 20:28:55,422 [main:302] - generating value of type = LinkedHashMap<Char, Byte?> false depth = 0
2021-03-11 20:28:55,531 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): LinkedHashMap<Char, Byte?> = TODO()
2021-03-11 20:28:55,533 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): LinkedHashMap<Char, Byte?> = TODO()
2021-03-11 20:28:55,642 [main:95] - GENERATED = LinkedHashMap<Char, Byte?>()
2021-03-11 20:28:55,823 [main:149] - GENERATING call of type public open fun containsValue(value: kotlin.Byte?): kotlin.Boolean defined in kotlin.collections.LinkedHashMap[DeserializedSimpleFunctionDescriptor@1e784877]
2021-03-11 20:28:55,912 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:28:55,913 [main:78] - Generated call from random type = (LinkedHashMap<Char, Byte?>()).containsValue(-46)
2021-03-11 20:28:55,913 [main:106] - GETTING Boolean from Boolean
2021-03-11 20:28:55,932 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:28:55,932 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:28:55,933 [main:117] - GENERATED CALL = (throwsOnGreen()).not()
2021-03-11 20:28:55,933 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:28:55,933 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:28:55,933 [main:117] - GENERATED CALL = (throwsOnGreen()).or(throwsOnGreen())
2021-03-11 20:28:55,933 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]]
2021-03-11 20:28:55,933 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:56,033 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:56,033 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]
2021-03-11 20:28:56,134 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:56,135 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("wyora").equals("mdqad")
2021-03-11 20:28:56,135 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:28:56,135 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:56,262 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:56,262 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:28:56,263 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("fjvkp").and(throwsOnGreen())
2021-03-11 20:28:56,263 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:28:56,263 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:56,370 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:56,371 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:28:56,371 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("abrng").or(throwsOnGreen())
2021-03-11 20:28:56,371 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:28:56,371 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:56,459 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:56,460 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:28:56,460 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("wmbaq").not()
2021-03-11 20:28:56,460 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]]
2021-03-11 20:28:56,460 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:56,460 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]
2021-03-11 20:28:56,552 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:56,553 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).equals("yknwr")
2021-03-11 20:28:56,553 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]]
2021-03-11 20:28:56,553 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]
2021-03-11 20:28:56,639 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:56,640 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("sszgc")
2021-03-11 20:28:56,640 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:28:56,640 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:28:56,640 [main:117] - GENERATED CALL = (throwsOnGreen()).and(throwsOnGreen())
2021-03-11 20:28:56,640 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:28:56,640 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:56,755 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:56,756 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:28:56,756 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("ckhmk").xor(throwsOnGreen())
2021-03-11 20:28:56,756 [main:61] - replacement of Color.values()[1] == Color.RED of type Boolean is (throwsOnGreen()).equals("ckhmk").xor(throwsOnGreen())
2021-03-11 20:28:56,847 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:28:56,847 [main:66] - Compilation checking started
2021-03-11 20:28:57,224 [main:53] - Result = true
Text:
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return (throwsOnGreen()).equals("hkrho").and(false)
    }
}

fun box() = if(
     (throwsOnGreen()).equals("efmfh").xor(throwsOnGreen())
  && Color.valueOf("rjlas") == (Triple<Set<Color?>?, ArrayDeque<UShort>, Color>(null, ArrayDeque<UShort>(1169924841), Color.BLUE)).third
  && Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)] == Color.RED
  && (throwsOnGreen()).equals("ckhmk").xor(throwsOnGreen())
  && throwsOnGreen()
  ) "OK" else (ArrayDeque<Color>()).firstOrNull()?.name!!


2021-03-11 20:28:57,225 [main:53] - replacing (Color.valueOf("GREEN"), Color)
2021-03-11 20:28:57,225 [main:50] - replacing Color.valueOf("GREEN") Color
2021-03-11 20:28:57,225 [main:54] - Getting value of type Color
2021-03-11 20:28:57,314 [main:302] - generating value of type = Color false depth = 0
2021-03-11 20:28:57,315 [main:112] - generating klass Color text = enum class Color {
  RED,
  BLUE
}
2021-03-11 20:28:57,315 [main:58] - GENERATED VALUE OF TYPE Color = Color.RED
2021-03-11 20:28:57,315 [main:61] - GENERATED IS CALL =false
2021-03-11 20:28:57,508 [main:67] - randomType = ArrayList<Long>
2021-03-11 20:28:57,644 [main:302] - generating value of type = ArrayList<Long> false depth = 0
2021-03-11 20:28:57,747 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Long> = TODO()
2021-03-11 20:28:57,749 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Long> = TODO()
2021-03-11 20:28:57,838 [main:95] - GENERATED = arrayListOf<Long>()
2021-03-11 20:28:58,022 [main:106] - GETTING Color from Boolean
2021-03-11 20:28:58,036 [main:61] - replacement of Color.valueOf("GREEN") of type Color is Color.RED
2021-03-11 20:28:58,125 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:28:58,125 [main:66] - Compilation checking started
2021-03-11 20:28:58,496 [main:53] - Result = true
Text:
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.RED
        return false
    }
    catch (e: Exception) {
        return (throwsOnGreen()).equals("hkrho").and(false)
    }
}

fun box() = if(
     (throwsOnGreen()).equals("efmfh").xor(throwsOnGreen())
  && Color.valueOf("rjlas") == (Triple<Set<Color?>?, ArrayDeque<UShort>, Color>(null, ArrayDeque<UShort>(1169924841), Color.BLUE)).third
  && Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)] == Color.RED
  && (throwsOnGreen()).equals("ckhmk").xor(throwsOnGreen())
  && throwsOnGreen()
  ) "OK" else (ArrayDeque<Color>()).firstOrNull()?.name!!


2021-03-11 20:28:58,497 [main:53] - replacing ((throwsOnGreen()).equals("efmfh").xor(throwsOnGreen())
  && Color.valueOf("rjlas") == (Triple<Set<Color?>?, ArrayDeque<UShort>, Color>(null, ArrayDeque<UShort>(1169924841), Color.BLUE)).third
  && Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)] == Color.RED
  && (throwsOnGreen()).equals("ckhmk").xor(throwsOnGreen()), Boolean)
2021-03-11 20:28:58,497 [main:50] - replacing (throwsOnGreen()).equals("efmfh").xor(throwsOnGreen())
  && Color.valueOf("rjlas") == (Triple<Set<Color?>?, ArrayDeque<UShort>, Color>(null, ArrayDeque<UShort>(1169924841), Color.BLUE)).third
  && Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)] == Color.RED
  && (throwsOnGreen()).equals("ckhmk").xor(throwsOnGreen()) Boolean
2021-03-11 20:28:58,497 [main:54] - Getting value of type Boolean
2021-03-11 20:28:58,594 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:58,595 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:28:58,595 [main:61] - GENERATED IS CALL =false
2021-03-11 20:28:58,697 [main:67] - randomType = Collection<Color>
2021-03-11 20:28:58,697 [main:106] - GETTING Boolean from Boolean
2021-03-11 20:28:58,710 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:28:58,710 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:58,797 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:58,797 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:28:58,798 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("wfjss").not()
2021-03-11 20:28:58,798 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:28:58,798 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:28:58,798 [main:117] - GENERATED CALL = (throwsOnGreen()).not()
2021-03-11 20:28:58,798 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]]
2021-03-11 20:28:58,798 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:28:58,798 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]
2021-03-11 20:28:58,884 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:58,885 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).equals("mwwpw")
2021-03-11 20:28:58,885 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]]
2021-03-11 20:28:58,885 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:58,979 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:58,979 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]
2021-03-11 20:28:59,104 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:59,105 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("dbqcz").equals("ghblt")
2021-03-11 20:28:59,105 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:28:59,105 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:28:59,106 [main:117] - GENERATED CALL = (throwsOnGreen()).and(throwsOnGreen())
2021-03-11 20:28:59,106 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:28:59,106 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:28:59,106 [main:117] - GENERATED CALL = (throwsOnGreen()).or(throwsOnGreen())
2021-03-11 20:28:59,106 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:28:59,106 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:59,230 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:59,231 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:28:59,231 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("auqoj").xor(throwsOnGreen())
2021-03-11 20:28:59,231 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:28:59,231 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:59,317 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:59,317 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:28:59,404 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:59,405 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("jxxoa").and(true)
2021-03-11 20:28:59,405 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:28:59,405 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:28:59,494 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:28:59,494 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:28:59,495 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("wqdoy").or(throwsOnGreen())
2021-03-11 20:28:59,495 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:28:59,495 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:28:59,495 [main:117] - GENERATED CALL = (throwsOnGreen()).xor(throwsOnGreen())
2021-03-11 20:28:59,495 [main:61] - replacement of (throwsOnGreen()).equals("efmfh").xor(throwsOnGreen())
  && Color.valueOf("rjlas") == (Triple<Set<Color?>?, ArrayDeque<UShort>, Color>(null, ArrayDeque<UShort>(1169924841), Color.BLUE)).third
  && Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)] == Color.RED
  && (throwsOnGreen()).equals("ckhmk").xor(throwsOnGreen()) of type Boolean is (throwsOnGreen()).equals("auqoj").xor(throwsOnGreen())
2021-03-11 20:28:59,580 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:28:59,581 [main:66] - Compilation checking started
2021-03-11 20:28:59,871 [main:53] - Result = true
Text:
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.RED
        return false
    }
    catch (e: Exception) {
        return (throwsOnGreen()).equals("hkrho").and(false)
    }
}

fun box() = if(
     (throwsOnGreen()).equals("auqoj").xor(throwsOnGreen())
  && throwsOnGreen()
  ) "OK" else (ArrayDeque<Color>()).firstOrNull()?.name!!


2021-03-11 20:28:59,872 [main:53] - replacing (Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)] == Color.RED, Boolean)
2021-03-11 20:28:59,873 [main:50] - replacing Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)] == Color.RED Boolean
2021-03-11 20:28:59,873 [main:54] - Getting value of type Boolean
2021-03-11 20:28:59,952 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:28:59,953 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:28:59,953 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:00,041 [main:67] - randomType = Byte
2021-03-11 20:29:00,115 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:29:00,151 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-11 20:29:00,151 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7702e4a]
2021-03-11 20:29:00,152 [main:78] - Generated call from random type = (-43).toDouble().isInfinite()
2021-03-11 20:29:00,152 [main:106] - GETTING Boolean from Boolean
2021-03-11 20:29:00,163 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:29:00,163 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:29:00,236 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:00,237 [main:117] - GENERATED CALL = (throwsOnGreen()).xor(true)
2021-03-11 20:29:00,237 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]]
2021-03-11 20:29:00,237 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]
2021-03-11 20:29:00,309 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:00,309 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("djuez")
2021-03-11 20:29:00,310 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:29:00,310 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:29:00,384 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:00,385 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:29:00,385 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("jjitg").not()
2021-03-11 20:29:00,385 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:29:00,385 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:29:00,386 [main:117] - GENERATED CALL = (throwsOnGreen()).or(throwsOnGreen())
2021-03-11 20:29:00,386 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:29:00,386 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:29:00,472 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:00,473 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:29:00,555 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:00,556 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("bklba").or(true)
2021-03-11 20:29:00,556 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:29:00,556 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:29:00,638 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:00,638 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:29:00,639 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("ogjsk").xor(throwsOnGreen())
2021-03-11 20:29:00,639 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:29:00,639 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:29:00,719 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:00,720 [main:117] - GENERATED CALL = (throwsOnGreen()).and(false)
2021-03-11 20:29:00,721 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]]
2021-03-11 20:29:00,721 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:00,799 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:00,800 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]
2021-03-11 20:29:00,880 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:00,881 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(false).equals("mnblk")
2021-03-11 20:29:00,881 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:29:00,881 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:29:00,881 [main:117] - GENERATED CALL = (throwsOnGreen()).not()
2021-03-11 20:29:00,881 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:29:00,881 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:29:00,969 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:00,970 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:29:00,970 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("cgrkd").and(throwsOnGreen())
2021-03-11 20:29:00,970 [main:61] - replacement of Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).div(-73)] == Color.RED of type Boolean is (throwsOnGreen()).not()
2021-03-11 20:29:01,056 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:29:01,057 [main:53] - replacing (1, Int)
2021-03-11 20:29:01,057 [main:50] - replacing 1 Int
2021-03-11 20:29:01,057 [main:54] - Getting value of type Int
2021-03-11 20:29:01,130 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:01,130 [main:58] - GENERATED VALUE OF TYPE Int = -56590153
2021-03-11 20:29:01,130 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:01,208 [main:67] - randomType = Int
2021-03-11 20:29:01,292 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:01,342 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@18aaf452]
2021-03-11 20:29:01,416 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:01,416 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2db3ebe6]
2021-03-11 20:29:01,417 [main:78] - Generated call from random type = (373614935).compareTo(-378622497).countLeadingZeroBits()
2021-03-11 20:29:01,418 [main:106] - GETTING Int from Boolean
2021-03-11 20:29:01,429 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6fa9cf83]]
2021-03-11 20:29:01,430 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:01,545 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:01,546 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6fa9cf83]
2021-03-11 20:29:01,546 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(true).inc()
2021-03-11 20:29:01,546 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5eba1893]]
2021-03-11 20:29:01,546 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:01,547 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5eba1893]
2021-03-11 20:29:01,547 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).countOneBits()
2021-03-11 20:29:01,547 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@f71a790]]
2021-03-11 20:29:01,547 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:01,636 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:01,636 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@f71a790]
2021-03-11 20:29:01,637 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(true).takeLowestOneBit()
2021-03-11 20:29:01,637 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f314302]]
2021-03-11 20:29:01,637 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:01,637 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f314302]
2021-03-11 20:29:01,712 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:29:01,713 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).rem(87)
2021-03-11 20:29:01,713 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@558519a7]]
2021-03-11 20:29:01,713 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:01,713 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@558519a7]
2021-03-11 20:29:01,714 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).dec()
2021-03-11 20:29:01,714 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b73524e]]
2021-03-11 20:29:01,714 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:01,714 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b73524e]
2021-03-11 20:29:01,714 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).unaryPlus()
2021-03-11 20:29:01,714 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1ac28535]]
2021-03-11 20:29:01,715 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:01,715 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1ac28535]
2021-03-11 20:29:01,791 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:01,792 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).and(2032711802)
2021-03-11 20:29:01,792 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28791945]]
2021-03-11 20:29:01,792 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:01,792 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28791945]
2021-03-11 20:29:01,868 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:29:01,869 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).times(-4)
2021-03-11 20:29:01,869 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@7abbff6b]]
2021-03-11 20:29:01,869 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:01,869 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).sign
2021-03-11 20:29:01,869 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@37ad8e66]]
2021-03-11 20:29:01,869 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:01,870 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@37ad8e66]
2021-03-11 20:29:01,870 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).takeHighestOneBit()
2021-03-11 20:29:01,870 [main:61] - replacement of 1 of type Int is (throwsOnGreen()).compareTo(throwsOnGreen()).countOneBits()
2021-03-11 20:29:01,956 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:29:01,957 [main:53] - replacing ("fail"

, String)
2021-03-11 20:29:01,957 [main:50] - replacing "fail"

 String
2021-03-11 20:29:01,957 [main:54] - Getting value of type String
2021-03-11 20:29:02,042 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:29:02,042 [main:58] - GENERATED VALUE OF TYPE String = "usnix"
2021-03-11 20:29:02,042 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:02,213 [main:67] - randomType = List<UByte>
2021-03-11 20:29:02,215 [main:106] - GETTING String from Boolean
2021-03-11 20:29:02,228 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]]
2021-03-11 20:29:02,228 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:02,308 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:02,309 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]
2021-03-11 20:29:02,392 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:02,393 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(true).toString(806052855)
2021-03-11 20:29:02,393 [main:61] - replacement of "fail"

 of type String is "usnix"
2021-03-11 20:29:02,489 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:29:02,489 [main:53] - replacing (throwsOnGreen(), Boolean)
2021-03-11 20:29:02,489 [main:50] - replacing throwsOnGreen() Boolean
2021-03-11 20:29:02,489 [main:54] - Getting value of type Boolean
2021-03-11 20:29:02,572 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:02,572 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:29:02,573 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:02,729 [main:67] - randomType = Long?
2021-03-11 20:29:02,807 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:29:02,857 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@74a3964e]
2021-03-11 20:29:02,857 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eaec8d]
2021-03-11 20:29:02,857 [main:78] - Generated call from random type = (2645678622599017836)?.toChar().isSurrogate()
2021-03-11 20:29:02,858 [main:61] - replacement of throwsOnGreen() of type Boolean is (2645678622599017836)?.toChar().isSurrogate()
2021-03-11 20:29:02,944 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:29:02,944 [main:66] - Compilation checking started
2021-03-11 20:29:03,276 [main:53] - Result = true
Text:
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.RED
        return false
    }
    catch (e: Exception) {
        return (throwsOnGreen()).equals("hkrho").and(false)
    }
}

fun box() = if(
     (throwsOnGreen()).equals("auqoj").xor(throwsOnGreen())
  && (2645678622599017836)?.toChar().isSurrogate()
  ) "OK" else (ArrayDeque<Color>()).firstOrNull()?.name!!


2021-03-11 20:29:03,277 [main:53] - replacing (Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).countOneBits()] == Color.RED, Boolean)
2021-03-11 20:29:03,277 [main:50] - replacing Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).countOneBits()] == Color.RED Boolean
2021-03-11 20:29:03,277 [main:54] - Getting value of type Boolean
2021-03-11 20:29:03,360 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:03,438 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:29:03,438 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:03,595 [main:67] - randomType = Array<Color>
2021-03-11 20:29:03,669 [main:302] - generating value of type = Array<Color> false depth = 0
2021-03-11 20:29:03,760 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Color> = TODO()
2021-03-11 20:29:03,761 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Color> = TODO()
2021-03-11 20:29:03,840 [main:95] - GENERATED = emptyArray<Color>()
2021-03-11 20:29:03,855 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]
2021-03-11 20:29:03,928 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:03,929 [main:78] - Generated call from random type = (emptyArray<Color>()).size.equals("jvtzn")
2021-03-11 20:29:03,929 [main:106] - GETTING Boolean from Boolean
2021-03-11 20:29:03,940 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]]
2021-03-11 20:29:03,940 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]
2021-03-11 20:29:04,014 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:04,015 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("zcijg")
2021-03-11 20:29:04,015 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]]
2021-03-11 20:29:04,015 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:29:04,091 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:04,092 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]
2021-03-11 20:29:04,180 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:04,180 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("remzc").equals("cqduo")
2021-03-11 20:29:04,180 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:29:04,180 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:29:04,262 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:04,262 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:29:04,339 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:04,339 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("nqkcv").and(true)
2021-03-11 20:29:04,339 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:29:04,340 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:29:04,340 [main:117] - GENERATED CALL = (throwsOnGreen()).and(throwsOnGreen())
2021-03-11 20:29:04,340 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:29:04,340 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:29:04,416 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:04,417 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:29:04,417 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("mckaz").not()
2021-03-11 20:29:04,417 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:29:04,417 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:29:04,492 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:04,492 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:29:04,565 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:04,566 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("kzjur").xor(false)
2021-03-11 20:29:04,566 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:29:04,566 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:29:04,566 [main:117] - GENERATED CALL = (throwsOnGreen()).or(throwsOnGreen())
2021-03-11 20:29:04,566 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:29:04,566 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:29:04,567 [main:117] - GENERATED CALL = (throwsOnGreen()).xor(throwsOnGreen())
2021-03-11 20:29:04,567 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:29:04,567 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:29:04,567 [main:117] - GENERATED CALL = (throwsOnGreen()).not()
2021-03-11 20:29:04,567 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:29:04,567 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:29:04,656 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:04,657 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:29:04,745 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:04,746 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("vbnjo").or(true)
2021-03-11 20:29:04,746 [main:61] - replacement of Color.values()[(throwsOnGreen()).compareTo(throwsOnGreen()).countOneBits()] == Color.RED of type Boolean is (emptyArray<Color>()).size.equals("jvtzn")
2021-03-11 20:29:04,819 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:29:04,819 [main:53] - replacing ("fail"

, String)
2021-03-11 20:29:04,819 [main:50] - replacing "fail"

 String
2021-03-11 20:29:04,819 [main:54] - Getting value of type String
2021-03-11 20:29:04,892 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:29:04,892 [main:58] - GENERATED VALUE OF TYPE String = "rpyjb"
2021-03-11 20:29:04,893 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:04,893 [main:67] - randomType = Color
2021-03-11 20:29:04,966 [main:302] - generating value of type = Color false depth = 0
2021-03-11 20:29:04,966 [main:112] - generating klass Color text = enum class Color {
  RED,
  BLUE
}
2021-03-11 20:29:04,994 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590131b4]
2021-03-11 20:29:05,110 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:29:05,111 [main:78] - Generated call from random type = (Color.RED).name.replaceIndent("ldobf")
2021-03-11 20:29:05,111 [main:61] - replacement of "fail"

 of type String is (Color.RED).name.replaceIndent("ldobf")
2021-03-11 20:29:05,201 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:29:05,201 [main:53] - replacing ("GREEN", String)
2021-03-11 20:29:05,201 [main:50] - replacing "GREEN" String
2021-03-11 20:29:05,201 [main:54] - Getting value of type String
2021-03-11 20:29:05,275 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:29:05,275 [main:58] - GENERATED VALUE OF TYPE String = "dzlqk"
2021-03-11 20:29:05,275 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:05,510 [main:67] - randomType = Collection<ArrayDeque<Color?>?>
2021-03-11 20:29:05,511 [main:106] - GETTING String from Boolean
2021-03-11 20:29:05,519 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]]
2021-03-11 20:29:05,519 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:05,519 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]
2021-03-11 20:29:05,609 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:05,610 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(throwsOnGreen()).toString(737245013)
2021-03-11 20:29:05,610 [main:61] - replacement of "GREEN" of type String is (throwsOnGreen()).compareTo(throwsOnGreen()).toString(737245013)
2021-03-11 20:29:05,698 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:29:05,783 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-11 20:29:05,855 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 20:29:05,856 [main:66] - Compilation checking started
2021-03-11 20:29:06,157 [main:53] - Result = true
Text:
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.RED
        return false
    }
    catch (e: Exception) {
        return (throwsOnGreen()).equals("hkrho").and((throwsOnGreen()))
    }
}

fun box() = if(
     (throwsOnGreen()).equals("auqoj").xor(throwsOnGreen())
  && (2645678622599017836)?.toChar().isSurrogate()
  ) "OK" else (ArrayDeque<Color>()).firstOrNull()?.name!!


2021-03-11 20:29:06,157 [main:119] - TRYING TO REPLACE CONSTANT 2645678622599017836
2021-03-11 20:29:06,231 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:29:06,231 [main:66] - Compilation checking started
2021-03-11 20:29:06,566 [main:41] - AFTER TRY 0 res = enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"
2021-03-11 20:29:06,719 [main:112] - generating klass Color text = enum class Color {
  RED,
  BLUE
}
2021-03-11 20:29:06,720 [main:112] - generating klass RED text = RED,
2021-03-11 20:29:06,720 [main:112] - generating klass BLUE text = BLUE
2021-03-11 20:29:06,876 [main:43] - Try №0
2021-03-11 20:29:23,406 [main:48] - Already checked
2021-03-11 20:29:28,576 [main:69] - Trying to insert suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }
2021-03-11 20:29:28,721 [main:66] - Compilation checking started
2021-03-11 20:29:29,863 [main:103] - Trying to change 273 nodes
2021-03-11 20:29:29,863 [main:107] - replacing (prope2, String)
2021-03-11 20:29:29,864 [main:50] - replacing prope2 String
2021-03-11 20:29:29,865 [main:54] - Getting value of type String
2021-03-11 20:29:30,037 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:29:30,042 [main:58] - GENERATED VALUE OF TYPE String = "zemlc"
2021-03-11 20:29:30,042 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:30,603 [main:67] - randomType = LinkedHashSet<UShort>
2021-03-11 20:29:30,752 [main:302] - generating value of type = LinkedHashSet<UShort> false depth = 0
2021-03-11 20:29:30,934 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<UShort> = TODO()
2021-03-11 20:29:30,940 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<UShort> = TODO()
2021-03-11 20:29:31,442 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:29:31,446 [main:302] - generating value of type = Float true depth = 3
2021-03-11 20:29:31,450 [main:95] - GENERATED = LinkedHashSet<UShort>(540131778, 0.50994307f)
2021-03-11 20:29:31,589 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@2bd5d24b]
2021-03-11 20:29:31,589 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@671d19c8]
2021-03-11 20:29:31,589 [main:78] - Generated call from random type = (LinkedHashSet<UShort>(540131778, 0.50994307f)).toArray().contentDeepToString()
2021-03-11 20:29:31,591 [main:106] - GETTING String from Color
2021-03-11 20:29:31,612 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c1f489]]
2021-03-11 20:29:31,612 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c1f489]
2021-03-11 20:29:31,751 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:31,893 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:32,035 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:29:32,183 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:29:32,189 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:29:32,532 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:29:32,536 [main:95] - GENERATED = StringBuilder("ynsfd")
2021-03-11 20:29:32,536 [main:117] - GENERATED CALL = (Color.valueOf("RED")).name.replaceRange(1017318005, -1492183173, StringBuilder("ynsfd"))
2021-03-11 20:29:32,537 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2047d4c7]]
2021-03-11 20:29:32,537 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2047d4c7]
2021-03-11 20:29:32,679 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:29:32,819 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:29:32,824 [main:117] - GENERATED CALL = (Color.valueOf("RED")).name.substringAfterLast('⛈', "vtidc")
2021-03-11 20:29:32,824 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@342ad7e0]]
2021-03-11 20:29:32,824 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@342ad7e0]
2021-03-11 20:29:32,825 [main:117] - GENERATED CALL = (Color.valueOf("RED")).name.uppercase()
2021-03-11 20:29:32,825 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a4259db]]
2021-03-11 20:29:32,825 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a4259db]
2021-03-11 20:29:32,965 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:33,107 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:29:33,111 [main:117] - GENERATED CALL = (Color.valueOf("RED")).name.padStart(-1591168026, '斖')
2021-03-11 20:29:33,111 [main:113] - Case = [public final val ordinal: kotlin.Int defined in Color[DeserializedPropertyDescriptor@6165581d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]]
2021-03-11 20:29:33,111 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]
2021-03-11 20:29:33,249 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:33,253 [main:117] - GENERATED CALL = (Color.valueOf("RED")).ordinal.toString(1744642648)
2021-03-11 20:29:33,253 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d]]
2021-03-11 20:29:33,253 [main:117] - GENERATED CALL = (Color.valueOf("RED")).name
2021-03-11 20:29:33,253 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@221d06ae]]
2021-03-11 20:29:33,253 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@221d06ae]
2021-03-11 20:29:33,254 [main:117] - GENERATED CALL = (Color.valueOf("RED")).name.trimStart()
2021-03-11 20:29:33,254 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b5448ac]]
2021-03-11 20:29:33,254 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b5448ac]
2021-03-11 20:29:33,393 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:29:33,397 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:29:33,402 [main:117] - GENERATED CALL = (Color.valueOf("RED")).name.filter({a: Char -> false})
2021-03-11 20:29:33,402 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9efdc9f]]
2021-03-11 20:29:33,402 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9efdc9f]
2021-03-11 20:29:33,402 [main:117] - GENERATED CALL = (Color.valueOf("RED")).name.trimEnd()
2021-03-11 20:29:33,402 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d40f2f]]
2021-03-11 20:29:33,402 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d40f2f]
2021-03-11 20:29:33,547 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:29:33,551 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:29:33,556 [main:117] - GENERATED CALL = (Color.valueOf("RED")).name.filterNot({a: Char -> true})
2021-03-11 20:29:33,556 [main:114] - replacement of prope2 of type String is (Color.valueOf("RED")).name.uppercase()
2021-03-11 20:29:33,719 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:29:33,719 [main:66] - Compilation checking started
2021-03-11 20:29:34,134 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.(Color.valueOf("RED")).name.uppercase() = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:29:34,137 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:29:34,137 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:29:34,137 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:29:34,275 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:29:34,282 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:29:35,579 [main:67] - randomType = Function2<ArrayList<Int?>, LinkedHashMap<Kla5, HashMap<Kla3, Int>>, Char?>
2021-03-11 20:29:35,582 [main:106] - GETTING EmptyCoroutineContext from Color
2021-03-11 20:29:35,610 [main:106] - GETTING EmptyCoroutineContext from Color
2021-03-11 20:29:35,611 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 20:29:35,621 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 20:29:35,622 [main:106] - GETTING EmptyCoroutineContext from Array<Color>
2021-03-11 20:29:35,632 [main:106] - GETTING EmptyCoroutineContext from Color
2021-03-11 20:29:35,633 [main:106] - GETTING EmptyCoroutineContext from Color
2021-03-11 20:29:35,633 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 20:29:35,634 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 20:29:35,635 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 20:29:35,635 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 20:29:35,635 [main:107] - replacing (exception, Throwable)
2021-03-11 20:29:35,635 [main:50] - replacing exception Throwable
2021-03-11 20:29:35,635 [main:54] - Getting value of type Throwable
2021-03-11 20:29:35,767 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 20:29:35,912 [main:43] - GENERATING CALL OF fun ArithmeticException(message: kotlin.String?): Throwable = TODO()
2021-03-11 20:29:35,917 [main:61] - WITHOUT TYPE PARAMS = fun ArithmeticException(message: kotlin.String?): Throwable = TODO()
2021-03-11 20:29:36,228 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:29:36,232 [main:95] - GENERATED = ArithmeticException("kblaj")
2021-03-11 20:29:36,232 [main:58] - GENERATED VALUE OF TYPE Throwable = ArithmeticException("kblaj")
2021-03-11 20:29:36,232 [main:61] - GENERATED IS CALL =true
2021-03-11 20:29:36,401 [main:67] - randomType = UInt
2021-03-11 20:29:36,533 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:29:36,565 [main:106] - GETTING Throwable from Boolean
2021-03-11 20:29:36,573 [main:106] - GETTING Throwable from Boolean
2021-03-11 20:29:36,574 [main:106] - GETTING Throwable from Boolean
2021-03-11 20:29:36,574 [main:106] - GETTING Throwable from Color
2021-03-11 20:29:36,610 [main:106] - GETTING Throwable from Color
2021-03-11 20:29:36,611 [main:106] - GETTING Throwable from Array<Color>
2021-03-11 20:29:36,621 [main:106] - GETTING Throwable from Color
2021-03-11 20:29:36,622 [main:106] - GETTING Throwable from Boolean
2021-03-11 20:29:36,623 [main:106] - GETTING Throwable from Boolean
2021-03-11 20:29:36,624 [main:106] - GETTING Throwable from Color
2021-03-11 20:29:36,624 [main:114] - replacement of exception of type Throwable is ArithmeticException("kblaj")
2021-03-11 20:29:36,758 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:29:36,759 [main:66] - Compilation checking started
2021-03-11 20:29:37,518 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:29:37,522 [main:107] - replacing (false, Boolean)
2021-03-11 20:29:37,522 [main:50] - replacing false Boolean
2021-03-11 20:29:37,522 [main:54] - Getting value of type Boolean
2021-03-11 20:29:37,675 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:37,680 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:29:37,680 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:38,564 [main:67] - randomType = Function1<Int, HashMap<UShort, UInt?>>
2021-03-11 20:29:38,565 [main:106] - GETTING Boolean from Array<Color>
2021-03-11 20:29:38,577 [main:113] - Case = [public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@268f9a04]]
2021-03-11 20:29:38,577 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@268f9a04]
2021-03-11 20:29:38,577 [main:117] - GENERATED CALL = (Color.values()).none()
2021-03-11 20:29:38,577 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@18b5be18], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]]
2021-03-11 20:29:38,577 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]
2021-03-11 20:29:38,717 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:38,717 [main:117] - GENERATED CALL = (Color.values()).size.equals("okxsw")
2021-03-11 20:29:38,717 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@4d902ce], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:29:38,717 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@4d902ce]
2021-03-11 20:29:38,863 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:38,863 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:29:38,863 [main:117] - GENERATED CALL = (Color.values()).equals("lsske").or(throwsOnGreen())
2021-03-11 20:29:38,863 [main:113] - Case = [public final operator fun get(index: kotlin.Int): Color defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@64ce0f06], public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513]]
2021-03-11 20:29:38,863 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): Color defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@64ce0f06]
2021-03-11 20:29:38,999 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:39,004 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513]
2021-03-11 20:29:39,152 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:39,153 [main:117] - GENERATED CALL = (Color.values()).get(-779521989).equals("hgwzg")
2021-03-11 20:29:39,153 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<Color> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@21920fe], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@f9394c2]]
2021-03-11 20:29:39,153 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<Color> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@21920fe]
2021-03-11 20:29:39,153 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@f9394c2]
2021-03-11 20:29:39,292 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:39,293 [main:117] - GENERATED CALL = (Color.values()).iterator().equals("aixvd")
2021-03-11 20:29:39,293 [main:113] - Case = [public inline fun <T> kotlin.Array<out T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1ae4c84d]]
2021-03-11 20:29:39,293 [main:149] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1ae4c84d]
2021-03-11 20:29:39,432 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 20:29:39,436 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:29:39,440 [main:117] - GENERATED CALL = (Color.values()).all({a: T -> true})
2021-03-11 20:29:39,440 [main:113] - Case = [public final operator fun set(index: kotlin.Int, value: Color): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@4ef52dc3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@17fe9f5e]]
2021-03-11 20:29:39,440 [main:149] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: Color): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@4ef52dc3]
2021-03-11 20:29:39,572 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:39,577 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@17fe9f5e]
2021-03-11 20:29:39,709 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:39,709 [main:117] - GENERATED CALL = (Color.values()).set(-1203968642, Color.values()[0]).equals("ehryc")
2021-03-11 20:29:39,709 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@4d902ce], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:29:39,709 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@4d902ce]
2021-03-11 20:29:39,865 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:39,865 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:29:39,865 [main:117] - GENERATED CALL = (Color.values()).equals("cakwu").xor(throwsOnGreen())
2021-03-11 20:29:39,866 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@4d902ce]]
2021-03-11 20:29:39,866 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@4d902ce]
2021-03-11 20:29:39,999 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:39,999 [main:117] - GENERATED CALL = (Color.values()).equals("arbof")
2021-03-11 20:29:39,999 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@4d902ce], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:29:39,999 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@4d902ce]
2021-03-11 20:29:40,135 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:40,136 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:29:40,136 [main:117] - GENERATED CALL = (Color.values()).equals("phuhy").not()
2021-03-11 20:29:40,136 [main:114] - replacement of false of type Boolean is (Color.values()).size.equals("okxsw")
2021-03-11 20:29:40,271 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:29:40,271 [main:66] - Compilation checking started
2021-03-11 20:29:41,114 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:29:41,117 [main:107] - replacing (true, Boolean)
2021-03-11 20:29:41,117 [main:50] - replacing true Boolean
2021-03-11 20:29:41,117 [main:54] - Getting value of type Boolean
2021-03-11 20:29:41,259 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:41,263 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:29:41,263 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:41,977 [main:67] - randomType = MutableMap<Sequence<Sequence<Kla6>>, Long>
2021-03-11 20:29:41,978 [main:106] - GETTING Boolean from Color
2021-03-11 20:29:41,996 [main:113] - Case = [public final val ordinal: kotlin.Int defined in Color[DeserializedPropertyDescriptor@6165581d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]]
2021-03-11 20:29:41,996 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]
2021-03-11 20:29:42,127 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:42,128 [main:117] - GENERATED CALL = (Color.values()[1]).ordinal.equals("hiqfq")
2021-03-11 20:29:42,128 [main:113] - Case = [protected final fun clone(): kotlin.Any defined in Color[DeserializedSimpleFunctionDescriptor@5ce45dba], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@654b7497]]
2021-03-11 20:29:42,128 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in Color[DeserializedSimpleFunctionDescriptor@5ce45dba]
2021-03-11 20:29:42,128 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@654b7497]
2021-03-11 20:29:42,261 [main:117] - GENERATED CALL = (Color.values()[1]).clone().equals(null)
2021-03-11 20:29:42,261 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:29:42,261 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513]
2021-03-11 20:29:42,390 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:42,390 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:29:42,390 [main:117] - GENERATED CALL = (Color.values()[1]).equals("acgjc").not()
2021-03-11 20:29:42,390 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513]]
2021-03-11 20:29:42,390 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513]
2021-03-11 20:29:42,520 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:42,520 [main:117] - GENERATED CALL = (Color.values()[1]).equals("vomfk")
2021-03-11 20:29:42,521 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@780c018e]]
2021-03-11 20:29:42,521 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@780c018e]
2021-03-11 20:29:42,653 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:29:42,658 [main:117] - GENERATED CALL = (Color.values()[1]).name.matches("rfehq")
2021-03-11 20:29:42,658 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:29:42,658 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513]
2021-03-11 20:29:42,788 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:42,788 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:29:42,789 [main:117] - GENERATED CALL = (Color.values()[1]).equals("qsixw").xor(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE)
2021-03-11 20:29:42,789 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:29:42,789 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513]
2021-03-11 20:29:42,922 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:42,922 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:29:42,923 [main:117] - GENERATED CALL = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
2021-03-11 20:29:42,923 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a62ca71]]
2021-03-11 20:29:42,923 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a62ca71]
2021-03-11 20:29:42,923 [main:117] - GENERATED CALL = (Color.values()[1]).name.toBoolean()
2021-03-11 20:29:42,923 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65a80c28]]
2021-03-11 20:29:42,923 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65a80c28]
2021-03-11 20:29:43,054 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:43,055 [main:117] - GENERATED CALL = (Color.values()[1]).name.equals("teayf")
2021-03-11 20:29:43,055 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:29:43,055 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513]
2021-03-11 20:29:43,205 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:43,205 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:29:43,206 [main:117] - GENERATED CALL = (Color.values()[1]).equals("hqkvn").or(Color.valueOf("RED") == Color.RED)
2021-03-11 20:29:43,206 [main:114] - replacement of true of type Boolean is (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
2021-03-11 20:29:43,335 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:29:43,335 [main:66] - Compilation checking started
2021-03-11 20:29:44,059 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:29:44,063 [main:107] - replacing (prope4.isSuccess, Boolean)
2021-03-11 20:29:44,063 [main:50] - replacing prope4.isSuccess Boolean
2021-03-11 20:29:44,063 [main:54] - Getting value of type Boolean
2021-03-11 20:29:44,206 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:44,211 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:29:44,211 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:44,548 [main:67] - randomType = ArrayList<Char>
2021-03-11 20:29:44,680 [main:302] - generating value of type = ArrayList<Char> false depth = 0
2021-03-11 20:29:44,820 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Char): ArrayList<Char> = TODO()
2021-03-11 20:29:44,825 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Char): ArrayList<Char> = TODO()
2021-03-11 20:29:44,988 [main:302] - generating value of type = Char true depth = 3
2021-03-11 20:29:44,992 [main:95] - GENERATED = arrayListOf<Char>('炪')
2021-03-11 20:29:45,126 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@18ade10a]
2021-03-11 20:29:45,276 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:45,281 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d371c1e]
2021-03-11 20:29:45,281 [main:78] - Generated call from random type = (arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()
2021-03-11 20:29:45,281 [main:114] - replacement of prope4.isSuccess of type Boolean is (arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()
2021-03-11 20:29:45,427 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:29:45,428 [main:66] - Compilation checking started
2021-03-11 20:29:46,240 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:29:46,244 [main:107] - replacing (method, String)
2021-03-11 20:29:46,244 [main:50] - replacing method String
2021-03-11 20:29:46,244 [main:54] - Getting value of type String
2021-03-11 20:29:46,409 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:29:46,413 [main:58] - GENERATED VALUE OF TYPE String = "uowks"
2021-03-11 20:29:46,414 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:46,604 [main:67] - randomType = Color?
2021-03-11 20:29:46,771 [main:302] - generating value of type = Color false depth = 0
2021-03-11 20:29:46,775 [main:112] - generating klass Color text = enum class Color {
  RED,
  BLUE
}
2021-03-11 20:29:46,804 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa9bf1d]
2021-03-11 20:29:46,942 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:46,946 [main:78] - Generated call from random type = (Color.BLUE)?.name.substring(45906612)
2021-03-11 20:29:46,947 [main:106] - GETTING String from Boolean
2021-03-11 20:29:46,959 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]]
2021-03-11 20:29:46,959 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:46,960 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]
2021-03-11 20:29:47,096 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:47,101 [main:117] - GENERATED CALL = (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682)
2021-03-11 20:29:47,101 [main:114] - replacement of method of type String is (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682)
2021-03-11 20:29:47,240 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:29:47,241 [main:66] - Compilation checking started
2021-03-11 20:29:48,069 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:29:48,075 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 20:29:48,075 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 20:29:48,076 [main:54] - Getting value of type Function0<Boolean>
2021-03-11 20:29:48,260 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 20:29:48,265 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:29:48,269 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 20:29:48,269 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:48,692 [main:67] - randomType = MutableMap<Boolean, Kla0>
2021-03-11 20:29:48,693 [main:106] - GETTING Function0<Boolean> from Color
2021-03-11 20:29:48,719 [main:106] - GETTING Function0<Boolean> from Color
2021-03-11 20:29:48,720 [main:106] - GETTING Function0<Boolean> from Color
2021-03-11 20:29:48,721 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-11 20:29:48,730 [main:106] - GETTING Function0<Boolean> from Array<Color>
2021-03-11 20:29:48,740 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-11 20:29:48,741 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-11 20:29:48,742 [main:106] - GETTING Function0<Boolean> from Color
2021-03-11 20:29:48,744 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-11 20:29:48,745 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-11 20:29:48,745 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-11 20:29:48,889 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:29:48,890 [main:66] - Compilation checking started
2021-03-11 20:29:49,590 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:29:49,594 [main:107] - replacing (0, Int)
2021-03-11 20:29:49,594 [main:50] - replacing 0 Int
2021-03-11 20:29:49,594 [main:54] - Getting value of type Int
2021-03-11 20:29:49,737 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:49,742 [main:58] - GENERATED VALUE OF TYPE Int = -177435640
2021-03-11 20:29:49,742 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:49,761 [main:67] - randomType = Kla2
2021-03-11 20:29:49,906 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 20:29:49,910 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 20:29:50,049 [main:194] - Type params = []
2021-03-11 20:29:50,190 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 20:29:50,339 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:29:50,344 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:29:50,721 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 20:29:50,877 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:29:50,883 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:29:51,412 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:29:51,412 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:29:51,433 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@7b71660]
2021-03-11 20:29:51,582 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:51,582 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:51,583 [main:78] - Generated call from random type = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
2021-03-11 20:29:51,583 [main:114] - replacement of 0 of type Int is (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
2021-03-11 20:29:51,732 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:29:51,732 [main:66] - Compilation checking started
2021-03-11 20:29:52,512 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:29:52,516 [main:107] - replacing ("Continuation " + c, String)
2021-03-11 20:29:52,516 [main:50] - replacing "Continuation " + c String
2021-03-11 20:29:52,516 [main:54] - Getting value of type String
2021-03-11 20:29:52,656 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:29:52,660 [main:58] - GENERATED VALUE OF TYPE String = "vvqdl"
2021-03-11 20:29:52,661 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:52,851 [main:67] - randomType = Color?
2021-03-11 20:29:52,996 [main:302] - generating value of type = Color false depth = 0
2021-03-11 20:29:53,000 [main:112] - generating klass Color text = enum class Color {
  RED,
  BLUE
}
2021-03-11 20:29:53,026 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18aa94ca]
2021-03-11 20:29:53,165 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:29:53,170 [main:78] - Generated call from random type = (Color.BLUE)?.name.trimMargin("bkrbh")
2021-03-11 20:29:53,171 [main:106] - GETTING String from Boolean
2021-03-11 20:29:53,180 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]]
2021-03-11 20:29:53,180 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:29:53,180 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]
2021-03-11 20:29:53,322 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:29:53,327 [main:117] - GENERATED CALL = (Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE).compareTo(throwsOnGreen()).toString(-608167438)
2021-03-11 20:29:53,327 [main:114] - replacement of "Continuation " + c of type String is "vvqdl"
2021-03-11 20:29:53,465 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:29:53,466 [main:66] - Compilation checking started
2021-03-11 20:29:54,176 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:29:54,180 [main:107] - replacing ({
        prope4.getOrThrow()
    }, Any?)
2021-03-11 20:29:54,180 [main:50] - replacing {
        prope4.getOrThrow()
    } Any?
2021-03-11 20:29:54,180 [main:54] - Getting value of type Any?
2021-03-11 20:29:54,320 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:29:54,321 [main:58] - GENERATED VALUE OF TYPE Any? = "meqki"
2021-03-11 20:29:54,321 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:54,488 [main:67] - randomType = UByte
2021-03-11 20:29:54,629 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:29:54,672 [main:106] - GETTING Any? from Boolean
2021-03-11 20:29:54,686 [main:106] - GETTING Any? from Boolean
2021-03-11 20:29:54,687 [main:106] - GETTING Any? from Boolean
2021-03-11 20:29:54,689 [main:106] - GETTING Any? from Color
2021-03-11 20:29:54,717 [main:113] - Case = [protected final fun clone(): kotlin.Any defined in Color[DeserializedSimpleFunctionDescriptor@5ce45dba]]
2021-03-11 20:29:54,717 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in Color[DeserializedSimpleFunctionDescriptor@5ce45dba]
2021-03-11 20:29:54,718 [main:117] - GENERATED CALL = (Color.values()[1])?.clone()
2021-03-11 20:29:54,718 [main:114] - replacement of {
        prope4.getOrThrow()
    } of type Any? is (Color.values()[1])?.clone()
2021-03-11 20:29:54,856 [main:33] - Trying to replace BLOCK on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:29:54,857 [main:66] - Compilation checking started
2021-03-11 20:29:54,865 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:29:54,865 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) (Color.values()[1])?.clone()
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:29:54,869 [main:107] - replacing ({ prope9() }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit>)
2021-03-11 20:29:54,869 [main:50] - replacing { prope9() } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit>
2021-03-11 20:29:54,869 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit>
2021-03-11 20:29:55,014 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> false depth = 0
2021-03-11 20:29:55,019 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:29:55,029 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> = {a: Kla1 -> println()}
2021-03-11 20:29:55,029 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:55,039 [main:67] - randomType = Boolean
2021-03-11 20:29:55,182 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:29:55,200 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:29:55,212 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Color
2021-03-11 20:29:55,233 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:29:55,237 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:29:55,241 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Array<Color>
2021-03-11 20:29:55,254 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Color
2021-03-11 20:29:55,258 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:29:55,262 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Color
2021-03-11 20:29:55,265 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Color
2021-03-11 20:29:55,269 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:29:55,269 [main:114] - replacement of { prope9() } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> is {a: Kla1 -> println()}
2021-03-11 20:29:55,405 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:29:55,405 [main:66] - Compilation checking started
2021-03-11 20:29:55,855 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) {a: Kla1 -> println()}
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:29:55,858 [main:107] - replacing ({ c() }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit>)
2021-03-11 20:29:55,859 [main:50] - replacing { c() } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit>
2021-03-11 20:29:55,859 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit>
2021-03-11 20:29:56,000 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> false depth = 0
2021-03-11 20:29:56,005 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:29:56,162 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:29:56,168 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:29:56,657 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:29:56,662 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:29:56,666 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:29:56,667 [main:95] - GENERATED = check(false, { "kokby"})
2021-03-11 20:29:56,667 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> = {a: Kla1 -> check(false, { "kokby"})}
2021-03-11 20:29:56,667 [main:61] - GENERATED IS CALL =false
2021-03-11 20:29:57,729 [main:67] - randomType = Function1<MutableMap<Float, UShort?>, Byte>
2021-03-11 20:29:57,733 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:29:57,746 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Array<Color>
2021-03-11 20:29:57,759 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:29:57,763 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:29:57,767 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:29:57,771 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:29:57,774 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Color
2021-03-11 20:29:57,806 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Color
2021-03-11 20:29:57,810 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Color
2021-03-11 20:29:57,813 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Color
2021-03-11 20:29:57,813 [main:114] - replacement of { c() } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> is {a: Kla1 -> check(false, { "kokby"})}
2021-03-11 20:29:57,950 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:29:57,951 [main:66] - Compilation checking started
2021-03-11 20:29:58,388 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = {a: Kla1 -> check(false, { "kokby"})}
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:29:58,391 [main:107] - replacing (c, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit>)
2021-03-11 20:29:58,391 [main:50] - replacing c [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit>
2021-03-11 20:29:58,392 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit>
2021-03-11 20:29:58,537 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> false depth = 0
2021-03-11 20:29:58,542 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:29:58,694 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:29:58,700 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:29:59,034 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:29:59,039 [main:95] - GENERATED = check(false)
2021-03-11 20:29:59,039 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> = {a: Kla1 -> check(false)}
2021-03-11 20:29:59,039 [main:61] - GENERATED IS CALL =false
2021-03-11 20:30:00,756 [main:67] - randomType = Pair<Pair<Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, String>?, Float>
2021-03-11 20:30:00,891 [main:302] - generating value of type = Pair<Pair<Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, String>?, Float> false depth = 0
2021-03-11 20:30:01,041 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Pair<Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, String>?, second: Float): Pair<Pair<Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, String>?, Float> = TODO()
2021-03-11 20:30:01,047 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Pair<Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, String>?, second: Float): Pair<Pair<Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, String>?, Float> = TODO()
2021-03-11 20:30:01,193 [main:302] - generating value of type = Pair<Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, String> false depth = 3
2021-03-11 20:30:01,339 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, second: String): Pair<Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, String> = TODO()
2021-03-11 20:30:01,345 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, second: String): Pair<Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, String> = TODO()
2021-03-11 20:30:01,488 [main:302] - generating value of type = Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2> false depth = 6
2021-03-11 20:30:01,493 [main:302] - generating value of type = Kla2 false depth = 7
2021-03-11 20:30:01,498 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 20:30:01,633 [main:194] - Type params = []
2021-03-11 20:30:01,766 [main:302] - generating value of type = CoroutineContext false depth = 9
2021-03-11 20:30:01,909 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:30:01,914 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:30:02,279 [main:302] - generating value of type = Key<*> false depth = 12
2021-03-11 20:30:02,428 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:30:02,434 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:30:02,940 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-11 20:30:03,091 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:30:03,097 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:30:03,586 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:30:03,586 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:30:03,586 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:30:03,587 [main:302] - generating value of type = String true depth = 6
2021-03-11 20:30:03,592 [main:95] - GENERATED = Pair<Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, String>({a: Char, b: LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>> -> Kla2()}, "vndsr")
2021-03-11 20:30:03,592 [main:302] - generating value of type = Float true depth = 3
2021-03-11 20:30:03,597 [main:95] - GENERATED = Pair<Pair<Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, String>?, Float>(Pair<Function2<Char, LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>>, Kla2>, String>({a: Char, b: LinkedHashMap<Kla4<Kla2?>, LinkedHashSet<Kla5>> -> Kla2()}, "vndsr"), 0.15651774f)
2021-03-11 20:30:03,626 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Color
2021-03-11 20:30:03,649 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:30:03,662 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:30:03,666 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:30:03,670 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:30:03,673 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Color
2021-03-11 20:30:03,677 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Boolean
2021-03-11 20:30:03,681 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Color
2021-03-11 20:30:03,684 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Array<Color>
2021-03-11 20:30:03,699 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> from Color
2021-03-11 20:30:03,699 [main:114] - replacement of c of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla1, Unit> is {a: Kla1 -> check(false)}
2021-03-11 20:30:03,853 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:30:03,853 [main:66] - Compilation checking started
2021-03-11 20:30:04,310 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    {a: Kla1 -> check(false)}.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:30:04,315 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:30:04,315 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:30:04,315 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:30:04,474 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:30:04,481 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:30:04,665 [main:67] - randomType = Kla3?
2021-03-11 20:30:04,809 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 20:30:04,813 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 20:30:04,830 [main:78] - Generated call from random type = (Kla3())?.context
2021-03-11 20:30:04,831 [main:106] - GETTING EmptyCoroutineContext from Color
2021-03-11 20:30:04,855 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 20:30:04,866 [main:106] - GETTING EmptyCoroutineContext from Color
2021-03-11 20:30:04,867 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 20:30:04,867 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 20:30:04,868 [main:106] - GETTING EmptyCoroutineContext from Color
2021-03-11 20:30:04,869 [main:106] - GETTING EmptyCoroutineContext from Color
2021-03-11 20:30:04,869 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 20:30:04,870 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 20:30:04,871 [main:106] - GETTING EmptyCoroutineContext from Array<Color>
2021-03-11 20:30:04,886 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is (Kla3())?.context
2021-03-11 20:30:05,034 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:30:05,034 [main:66] - Compilation checking started
2021-03-11 20:30:05,745 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = (Kla3())?.context
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:30:05,749 [main:107] - replacing (prope7, Boolean)
2021-03-11 20:30:05,749 [main:50] - replacing prope7 Boolean
2021-03-11 20:30:05,749 [main:54] - Getting value of type Boolean
2021-03-11 20:30:05,937 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:30:05,942 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:30:05,942 [main:61] - GENERATED IS CALL =false
2021-03-11 20:30:06,121 [main:67] - randomType = Char?
2021-03-11 20:30:06,260 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:30:06,293 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@d9bac0b]
2021-03-11 20:30:06,430 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:30:06,435 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.CharRange.contains(element: kotlin.Char?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5d2e6054]
2021-03-11 20:30:06,570 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:30:06,575 [main:78] - Generated call from random type = ('蕑')?.rangeTo('੽').contains('퀕')
2021-03-11 20:30:06,576 [main:106] - GETTING Boolean from Color
2021-03-11 20:30:06,598 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65a80c28]]
2021-03-11 20:30:06,598 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65a80c28]
2021-03-11 20:30:06,735 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:06,735 [main:117] - GENERATED CALL = (Color.valueOf("RED")).name.equals("inilw")
2021-03-11 20:30:06,735 [main:113] - Case = [public abstract operator fun compareTo(other: Color): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@be7313d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]]
2021-03-11 20:30:06,735 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: Color): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@be7313d]
2021-03-11 20:30:06,736 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]
2021-03-11 20:30:06,879 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:06,879 [main:117] - GENERATED CALL = (Color.valueOf("RED")).compareTo(Color.values()[1]).equals("ppqsw")
2021-03-11 20:30:06,879 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513]]
2021-03-11 20:30:06,879 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513]
2021-03-11 20:30:07,020 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:07,021 [main:117] - GENERATED CALL = (Color.valueOf("RED")).equals("rljfw")
2021-03-11 20:30:07,021 [main:113] - Case = [public final val ordinal: kotlin.Int defined in Color[DeserializedPropertyDescriptor@6165581d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]]
2021-03-11 20:30:07,021 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]
2021-03-11 20:30:07,168 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:07,168 [main:117] - GENERATED CALL = (Color.valueOf("RED")).ordinal.equals("ercgn")
2021-03-11 20:30:07,168 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:30:07,168 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513]
2021-03-11 20:30:07,317 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:07,317 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:30:07,317 [main:117] - GENERATED CALL = (Color.valueOf("RED")).equals("znllp").not()
2021-03-11 20:30:07,317 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:30:07,317 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513]
2021-03-11 20:30:07,457 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:07,457 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:30:07,457 [main:117] - GENERATED CALL = (Color.valueOf("RED")).equals("hcyra").xor(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE)
2021-03-11 20:30:07,457 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@85fc958]]
2021-03-11 20:30:07,458 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@85fc958]
2021-03-11 20:30:07,616 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:07,621 [main:117] - GENERATED CALL = (Color.valueOf("RED")).name.startsWith("gyixc", throwsOnGreen())
2021-03-11 20:30:07,621 [main:113] - Case = [protected final fun clone(): kotlin.Any defined in Color[DeserializedSimpleFunctionDescriptor@5ce45dba], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@654b7497]]
2021-03-11 20:30:07,621 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in Color[DeserializedSimpleFunctionDescriptor@5ce45dba]
2021-03-11 20:30:07,621 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@654b7497]
2021-03-11 20:30:07,755 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:07,755 [main:117] - GENERATED CALL = (Color.valueOf("RED")).clone().equals("tebvd")
2021-03-11 20:30:07,755 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]]
2021-03-11 20:30:07,755 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in Color[DeserializedSimpleFunctionDescriptor@556513]
2021-03-11 20:30:07,890 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:07,891 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]
2021-03-11 20:30:08,027 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:08,028 [main:117] - GENERATED CALL = (Color.valueOf("RED")).equals("grwmd").equals("awodp")
2021-03-11 20:30:08,028 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a5bba41]]
2021-03-11 20:30:08,028 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a5bba41]
2021-03-11 20:30:08,163 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:08,168 [main:117] - GENERATED CALL = (Color.valueOf("RED")).name.endsWith("svztv", Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE)
2021-03-11 20:30:08,168 [main:114] - replacement of prope7 of type Boolean is (Color.valueOf("RED")).ordinal.equals("ercgn")
2021-03-11 20:30:08,303 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:30:08,303 [main:66] - Compilation checking started
2021-03-11 20:30:08,959 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = (Kla3())?.context
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Color.valueOf("RED")).ordinal.equals("ercgn")) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:30:08,962 [main:107] - replacing (prope3, Kla1)
2021-03-11 20:30:08,963 [main:50] - replacing prope3 Kla1
2021-03-11 20:30:08,964 [main:54] - Getting value of type Kla1
2021-03-11 20:30:09,105 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 20:30:09,110 [main:112] - generating klass Kla1 text = class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}
2021-03-11 20:30:09,111 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-11 20:30:09,111 [main:61] - GENERATED IS CALL =true
2021-03-11 20:30:10,617 [main:67] - randomType = Sequence<Function2<Color, Sequence<Char>, Collection<MutableMap<Kla4<UShort>, Kla3>?>>>
2021-03-11 20:30:10,618 [main:106] - GETTING Kla1 from Color
2021-03-11 20:30:10,637 [main:106] - GETTING Kla1 from Color
2021-03-11 20:30:10,638 [main:106] - GETTING Kla1 from Color
2021-03-11 20:30:10,639 [main:106] - GETTING Kla1 from Boolean
2021-03-11 20:30:10,649 [main:106] - GETTING Kla1 from Color
2021-03-11 20:30:10,650 [main:106] - GETTING Kla1 from Boolean
2021-03-11 20:30:10,650 [main:106] - GETTING Kla1 from Array<Color>
2021-03-11 20:30:10,663 [main:106] - GETTING Kla1 from Boolean
2021-03-11 20:30:10,664 [main:106] - GETTING Kla1 from Boolean
2021-03-11 20:30:10,664 [main:106] - GETTING Kla1 from Boolean
2021-03-11 20:30:10,664 [main:114] - replacement of prope3 of type Kla1 is Kla1()
2021-03-11 20:30:10,798 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:30:10,799 [main:66] - Compilation checking started
2021-03-11 20:30:11,497 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return Kla1().prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = (Kla3())?.context
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Color.valueOf("RED")).ordinal.equals("ercgn")) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:30:11,501 [main:107] - replacing (prope3.prope2 != "OK", Boolean)
2021-03-11 20:30:11,501 [main:50] - replacing prope3.prope2 != "OK" Boolean
2021-03-11 20:30:11,502 [main:54] - Getting value of type Boolean
2021-03-11 20:30:11,642 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:30:11,647 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:30:11,647 [main:61] - GENERATED IS CALL =false
2021-03-11 20:30:11,815 [main:67] - randomType = Long
2021-03-11 20:30:11,959 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:30:12,001 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-11 20:30:12,001 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7702e4a]
2021-03-11 20:30:12,001 [main:78] - Generated call from random type = (2679222312771440577).toDouble().isInfinite()
2021-03-11 20:30:12,001 [main:106] - GETTING Boolean from Boolean
2021-03-11 20:30:12,014 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:30:12,014 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:30:12,152 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:12,153 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:30:12,153 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("kxuqc").not()
2021-03-11 20:30:12,153 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:30:12,153 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:30:12,153 [main:117] - GENERATED CALL = (throwsOnGreen()).xor(throwsOnGreen())
2021-03-11 20:30:12,153 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]]
2021-03-11 20:30:12,153 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:30:12,300 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:30:12,305 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d196acf]
2021-03-11 20:30:12,442 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:12,442 [main:117] - GENERATED CALL = (throwsOnGreen()).compareTo(true).equals("bvull")
2021-03-11 20:30:12,442 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:30:12,442 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:30:12,575 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:30:12,580 [main:117] - GENERATED CALL = (throwsOnGreen()).or(true)
2021-03-11 20:30:12,580 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]]
2021-03-11 20:30:12,580 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]
2021-03-11 20:30:12,712 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:12,713 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("wyxcz")
2021-03-11 20:30:12,713 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]]
2021-03-11 20:30:12,713 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:30:12,857 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:12,858 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@445371c0]
2021-03-11 20:30:12,997 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:30:13,002 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("fpbgi").xor(false)
2021-03-11 20:30:13,002 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]]
2021-03-11 20:30:13,002 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:30:13,136 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:13,137 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71653559]
2021-03-11 20:30:13,137 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("nuahi").or(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE)
2021-03-11 20:30:13,137 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]]
2021-03-11 20:30:13,137 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c0a508e]
2021-03-11 20:30:13,137 [main:117] - GENERATED CALL = (throwsOnGreen()).not()
2021-03-11 20:30:13,137 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]]
2021-03-11 20:30:13,137 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:30:13,285 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:13,285 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5bc5098b]
2021-03-11 20:30:13,420 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:13,421 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("pxook").equals("sxnwy")
2021-03-11 20:30:13,421 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]]
2021-03-11 20:30:13,421 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@310d8954]
2021-03-11 20:30:13,555 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:30:13,555 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@225abd1e]
2021-03-11 20:30:13,690 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:30:13,695 [main:117] - GENERATED CALL = (throwsOnGreen()).equals("yhbpa").and(false)
2021-03-11 20:30:13,696 [main:114] - replacement of prope3.prope2 != "OK" of type Boolean is (throwsOnGreen()).compareTo(true).equals("bvull")
2021-03-11 20:30:13,828 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:30:13,829 [main:66] - Compilation checking started
2021-03-11 20:30:14,491 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if ((throwsOnGreen()).compareTo(true).equals("bvull")) return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return Kla1().prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = (Kla3())?.context
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Color.valueOf("RED")).ordinal.equals("ercgn")) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:30:14,495 [main:107] - replacing (prope3.prope2, String)
2021-03-11 20:30:14,495 [main:50] - replacing prope3.prope2 String
2021-03-11 20:30:14,495 [main:54] - Getting value of type String
2021-03-11 20:30:14,641 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:14,645 [main:58] - GENERATED VALUE OF TYPE String = "gyzqi"
2021-03-11 20:30:14,646 [main:61] - GENERATED IS CALL =false
2021-03-11 20:30:15,346 [main:67] - randomType = Triple<Byte?, Short, Boolean>
2021-03-11 20:30:15,483 [main:302] - generating value of type = Triple<Byte?, Short, Boolean> false depth = 0
2021-03-11 20:30:15,626 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Byte?, second: Short, third: Boolean): Triple<Byte?, Short, Boolean> = TODO()
2021-03-11 20:30:15,632 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Byte?, second: Short, third: Boolean): Triple<Byte?, Short, Boolean> = TODO()
2021-03-11 20:30:15,773 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 20:30:15,778 [main:302] - generating value of type = Short true depth = 3
2021-03-11 20:30:15,783 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 20:30:15,788 [main:95] - GENERATED = Triple<Byte?, Short, Boolean>(-60, 29457, true)
2021-03-11 20:30:15,799 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78a3a7a9]
2021-03-11 20:30:15,933 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:30:15,938 [main:78] - Generated call from random type = (Triple<Byte?, Short, Boolean>(-60, 29457, true)).second.toString(1654703312)
2021-03-11 20:30:15,939 [main:106] - GETTING String from Boolean
2021-03-11 20:30:15,948 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]]
2021-03-11 20:30:15,948 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3221ee78]
2021-03-11 20:30:15,948 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bfaaae1]
2021-03-11 20:30:16,081 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:30:16,087 [main:117] - GENERATED CALL = (Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(225894332)
2021-03-11 20:30:16,087 [main:114] - replacement of prope3.prope2 of type String is (Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(225894332)
2021-03-11 20:30:16,220 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:30:16,221 [main:66] - Compilation checking started
2021-03-11 20:30:16,611 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if ((throwsOnGreen()).compareTo(true).equals("bvull")) return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return Kla1().prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    (Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(225894332) = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = (Kla3())?.context
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Color.valueOf("RED")).ordinal.equals("ercgn")) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:30:16,614 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 20:30:16,614 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-11 20:30:16,614 [main:54] - Getting value of type Throwable?
2021-03-11 20:30:16,747 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 20:30:16,888 [main:43] - GENERATING CALL OF fun IndexOutOfBoundsException(message: kotlin.String?): Throwable = TODO()
2021-03-11 20:30:16,894 [main:61] - WITHOUT TYPE PARAMS = fun IndexOutOfBoundsException(message: kotlin.String?): Throwable = TODO()
2021-03-11 20:30:17,213 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:30:17,218 [main:95] - GENERATED = IndexOutOfBoundsException("samwa")
2021-03-11 20:30:17,218 [main:58] - GENERATED VALUE OF TYPE Throwable? = IndexOutOfBoundsException("samwa")
2021-03-11 20:30:17,218 [main:61] - GENERATED IS CALL =true
2021-03-11 20:30:18,247 [main:67] - randomType = Kla4<Function2<Boolean?, Long, Byte>>?
2021-03-11 20:30:18,381 [main:302] - generating value of type = Kla4<Function2<Boolean?, Long, Byte>> false depth = 0
2021-03-11 20:30:18,386 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = (Kla3())?.context
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:30:19,218 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-11 20:30:19,223 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}
2021-03-11 20:30:19,247 [main:106] - GETTING Throwable? from Boolean
2021-03-11 20:30:19,259 [main:106] - GETTING Throwable? from Color
2021-03-11 20:30:19,282 [main:106] - GETTING Throwable? from Boolean
2021-03-11 20:30:19,282 [main:106] - GETTING Throwable? from Boolean
2021-03-11 20:30:19,283 [main:106] - GETTING Throwable? from Boolean
2021-03-11 20:30:19,284 [main:106] - GETTING Throwable? from Color
2021-03-11 20:30:19,285 [main:106] - GETTING Throwable? from Color
2021-03-11 20:30:19,285 [main:106] - GETTING Throwable? from Color
2021-03-11 20:30:19,286 [main:106] - GETTING Throwable? from Boolean
2021-03-11 20:30:19,287 [main:106] - GETTING Throwable? from Array<Color>
2021-03-11 20:30:19,300 [main:114] - replacement of exceptionOrNull() of type Throwable? is IndexOutOfBoundsException("samwa")
2021-03-11 20:30:19,434 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:30:19,434 [main:66] - Compilation checking started
2021-03-11 20:30:19,818 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if ((throwsOnGreen()).compareTo(true).equals("bvull")) return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return Kla1().prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.IndexOutOfBoundsException("samwa")?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = (Kla3())?.context
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Color.valueOf("RED")).ordinal.equals("ercgn")) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:30:19,821 [main:107] - replacing (prope2, String)
2021-03-11 20:30:19,822 [main:50] - replacing prope2 String
2021-03-11 20:30:19,822 [main:54] - Getting value of type String
2021-03-11 20:30:19,957 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:19,962 [main:58] - GENERATED VALUE OF TYPE String = "vhxuj"
2021-03-11 20:30:19,962 [main:61] - GENERATED IS CALL =false
2021-03-11 20:30:20,136 [main:67] - randomType = UShort
2021-03-11 20:30:20,270 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 20:30:20,311 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2bee3328]
2021-03-11 20:30:20,311 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78a3a7a9]
2021-03-11 20:30:20,443 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:30:20,448 [main:78] - Generated call from random type = (30682.toUShort()).toShort().toString(-1265892184)
2021-03-11 20:30:20,449 [main:106] - GETTING String from Color
2021-03-11 20:30:20,467 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a4259db]]
2021-03-11 20:30:20,468 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a4259db]
2021-03-11 20:30:20,621 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:30:20,760 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:30:20,765 [main:117] - GENERATED CALL = (Color.values()[1]).name.padStart(-608374197, '־')
2021-03-11 20:30:20,765 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e2a857]]
2021-03-11 20:30:20,765 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e2a857]
2021-03-11 20:30:20,900 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:30:21,038 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:21,176 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:21,181 [main:117] - GENERATED CALL = (Color.values()[1]).name.replaceBeforeLast('ᤗ', "bpdjw", "fgeuu")
2021-03-11 20:30:21,181 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73dedc2d]]
2021-03-11 20:30:21,181 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73dedc2d]
2021-03-11 20:30:21,313 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:30:21,454 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:30:21,459 [main:117] - GENERATED CALL = (Color.values()[1]).name.replaceFirst('ྶ', '嘜', Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED)
2021-03-11 20:30:21,459 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@291d8afa]]
2021-03-11 20:30:21,459 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@291d8afa]
2021-03-11 20:30:21,592 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:30:21,730 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:21,736 [main:117] - GENERATED CALL = (Color.values()[1]).name.substringBeforeLast('', "eisbj")
2021-03-11 20:30:21,736 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3466e84a]]
2021-03-11 20:30:21,736 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3466e84a]
2021-03-11 20:30:21,871 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:30:22,007 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:22,145 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:22,150 [main:117] - GENERATED CALL = (Color.values()[1]).name.replaceAfter('ꫲ', "hdkoe", "nicil")
2021-03-11 20:30:22,150 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95d018]]
2021-03-11 20:30:22,150 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95d018]
2021-03-11 20:30:22,282 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:22,287 [main:117] - GENERATED CALL = (Color.values()[1]).name.concat("ehmqw")
2021-03-11 20:30:22,287 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d9a2595]]
2021-03-11 20:30:22,287 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d9a2595]
2021-03-11 20:30:22,288 [main:117] - GENERATED CALL = (Color.values()[1]).name.toLowerCase()
2021-03-11 20:30:22,288 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7712d76a]]
2021-03-11 20:30:22,288 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7712d76a]
2021-03-11 20:30:22,443 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:30:22,448 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:30:22,453 [main:117] - GENERATED CALL = (Color.values()[1]).name.takeLastWhile({a: Char -> true})
2021-03-11 20:30:22,453 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@342ad7e0]]
2021-03-11 20:30:22,453 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@342ad7e0]
2021-03-11 20:30:22,453 [main:117] - GENERATED CALL = (Color.values()[1]).name.uppercase()
2021-03-11 20:30:22,453 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79150bc1]]
2021-03-11 20:30:22,453 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79150bc1]
2021-03-11 20:30:22,585 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:30:22,722 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:22,727 [main:117] - GENERATED CALL = (Color.values()[1]).name.substringBefore('烅', "jlltv")
2021-03-11 20:30:22,727 [main:114] - replacement of prope2 of type String is (Color.values()[1]).name.replaceFirst('ྶ', '嘜', Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED)
2021-03-11 20:30:22,857 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:30:22,858 [main:66] - Compilation checking started
2021-03-11 20:30:23,246 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if ((throwsOnGreen()).compareTo(true).equals("bvull")) return prope3.(Color.values()[1]).name.replaceFirst('ྶ', '嘜', Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED)
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return Kla1().prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = (Kla3())?.context
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Color.valueOf("RED")).ordinal.equals("ercgn")) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:30:23,249 [main:107] - replacing (prope2, String)
2021-03-11 20:30:23,250 [main:50] - replacing prope2 String
2021-03-11 20:30:23,250 [main:54] - Getting value of type String
2021-03-11 20:30:23,396 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:23,402 [main:58] - GENERATED VALUE OF TYPE String = "afbcj"
2021-03-11 20:30:23,402 [main:61] - GENERATED IS CALL =false
2021-03-11 20:30:23,421 [main:67] - randomType = Color
2021-03-11 20:30:23,554 [main:302] - generating value of type = Color false depth = 0
2021-03-11 20:30:23,558 [main:112] - generating klass Color text = enum class Color {
  RED,
  BLUE
}
2021-03-11 20:30:23,577 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51b917f4]
2021-03-11 20:30:23,578 [main:78] - Generated call from random type = (Color.BLUE).name.reversed()
2021-03-11 20:30:23,579 [main:106] - GETTING String from Color
2021-03-11 20:30:23,596 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32f7cd35]]
2021-03-11 20:30:23,597 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32f7cd35]
2021-03-11 20:30:23,728 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:23,864 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:23,869 [main:117] - GENERATED CALL = (Color.valueOf("BLUE")).name.replaceIndentByMargin("nzaqk", "rzyqz")
2021-03-11 20:30:23,869 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5677da95]]
2021-03-11 20:30:23,869 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5677da95]
2021-03-11 20:30:24,000 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:30:24,005 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:30:24,010 [main:117] - GENERATED CALL = (Color.valueOf("BLUE")).name.dropWhile({a: Char -> false})
2021-03-11 20:30:24,010 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b5448ac]]
2021-03-11 20:30:24,010 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b5448ac]
2021-03-11 20:30:24,142 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:30:24,147 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:30:24,151 [main:117] - GENERATED CALL = (Color.valueOf("BLUE")).name.filter({a: Char -> true})
2021-03-11 20:30:24,151 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558e9a1e]]
2021-03-11 20:30:24,152 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558e9a1e]
2021-03-11 20:30:24,300 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:30:24,436 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:30:24,441 [main:117] - GENERATED CALL = (Color.valueOf("BLUE")).name.padEnd(1245207789, 'ﻺ')
2021-03-11 20:30:24,441 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ee5f8b8]]
2021-03-11 20:30:24,441 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ee5f8b8]
2021-03-11 20:30:24,572 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:30:24,708 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:24,846 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:24,851 [main:117] - GENERATED CALL = (Color.valueOf("BLUE")).name.replaceBefore('ﴱ', "lnjtn", "tyslg")
2021-03-11 20:30:24,851 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3454b993]]
2021-03-11 20:30:24,851 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3454b993]
2021-03-11 20:30:24,851 [main:117] - GENERATED CALL = (Color.valueOf("BLUE")).name.capitalize()
2021-03-11 20:30:24,851 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95d018]]
2021-03-11 20:30:24,851 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95d018]
2021-03-11 20:30:24,995 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:30:25,000 [main:117] - GENERATED CALL = (Color.valueOf("BLUE")).name.concat("clsmi")
2021-03-11 20:30:25,000 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa9bf1d]]
2021-03-11 20:30:25,000 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aa9bf1d]
2021-03-11 20:30:25,132 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:30:25,137 [main:117] - GENERATED CALL = (Color.valueOf("BLUE")).name.substring(54873762)
2021-03-11 20:30:25,137 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eff4785]]
2021-03-11 20:30:25,137 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eff4785]
2021-03-11 20:30:25,268 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:30:25,273 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:30:25,277 [main:117] - GENERATED CALL = (Color.valueOf("BLUE")).name.dropLastWhile({a: Char -> false})
2021-03-11 20:30:25,278 [main:113] - Case = [public final val name: kotlin.String defined in Color[DeserializedPropertyDescriptor@2e9c778d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aec35ab]]
2021-03-11 20:30:25,278 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aec35ab]
2021-03-11 20:30:25,278 [main:117] - GENERATED CALL = (Color.valueOf("BLUE")).name.lowercase()
2021-03-11 20:30:25,278 [main:114] - replacement of prope2 of type String is (Color.valueOf("BLUE")).name.filter({a: Char -> true})
2021-03-11 20:30:25,409 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:30:25,409 [main:66] - Compilation checking started
2021-03-11 20:30:25,811 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        (Color.valueOf("BLUE")).name.filter({a: Char -> true}) = fu1()
    }
    if ((throwsOnGreen()).compareTo(true).equals("bvull")) return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return Kla1().prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = (Kla3())?.context
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Color.valueOf("RED")).ordinal.equals("ercgn")) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:30:25,814 [main:107] - replacing (this, Kla3)
2021-03-11 20:30:25,814 [main:50] - replacing this Kla3
2021-03-11 20:30:25,814 [main:54] - Getting value of type Kla3
2021-03-11 20:30:25,948 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 20:30:25,953 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 20:30:25,953 [main:58] - GENERATED VALUE OF TYPE Kla3 = Kla3()
2021-03-11 20:30:25,953 [main:61] - GENERATED IS CALL =true
2021-03-11 20:30:26,114 [main:67] - randomType = Float
2021-03-11 20:30:26,266 [main:302] - generating value of type = Float true depth = 0
2021-03-11 20:30:26,315 [main:106] - GETTING Kla3 from Color
2021-03-11 20:30:26,341 [main:106] - GETTING Kla3 from Boolean
2021-03-11 20:30:26,351 [main:106] - GETTING Kla3 from Boolean
2021-03-11 20:30:26,351 [main:106] - GETTING Kla3 from Color
2021-03-11 20:30:26,352 [main:106] - GETTING Kla3 from Boolean
2021-03-11 20:30:26,353 [main:106] - GETTING Kla3 from Boolean
2021-03-11 20:30:26,353 [main:106] - GETTING Kla3 from Boolean
2021-03-11 20:30:26,354 [main:106] - GETTING Kla3 from Array<Color>
2021-03-11 20:30:26,367 [main:106] - GETTING Kla3 from Color
2021-03-11 20:30:26,368 [main:106] - GETTING Kla3 from Color
2021-03-11 20:30:26,368 [main:114] - replacement of this of type Kla3 is Kla3()
2021-03-11 20:30:26,510 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:30:26,510 [main:66] - Compilation checking started
2021-03-11 20:30:27,181 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class Color {
  RED,
  BLUE
}

fun throwsOnGreen(): Boolean {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
}

fun box() = if(
     Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE
  && throwsOnGreen()
  ) "OK" else "fail"

interface Kla0 {
    suspend fun fu4()
}

class Kla1 {
    var prope2 = "FAIL 1"

    inline fun fu5(noinline c: suspend Kla1.() -> Unit)  {
        val prope9 : suspend Kla1.() -> Unit = { c() }
        fu0(this) { prope9() }
    }

    inline fun fu6(noinline c: suspend Kla1.() -> Unit) {
        c.startCoroutine(this, Kla2)
    }

    inline fun fu7(noinline c: suspend Kla1.() -> Unit) {
        val prope10 = object : Kla0 {
            override suspend fun fu4() {
                c()
            }
        }
        fu0(this) { prope10.fu4() }
    }
}

fun fu0(prope3: Kla1, c: suspend Kla1.() -> Unit) {
    c.startCoroutine(prope3, Kla2)
}

suspend fun fu1() = "OK"

fun box499(): String {
    val prope3 = Kla1()
    prope3.fu5 {
        prope2 = fu1()
    }
    if ((throwsOnGreen()).compareTo(true).equals("bvull")) return prope3.prope2
    prope3.prope2 = "FAIL 2"
    prope3.fu6 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 3"
    prope3.fu7 {
        prope2 = "OK"
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 4"
    prope3.fu5 {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return Kla1().prope2
    prope3.prope2 = "FAIL 5"
    prope3.fu6 {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 6"
    prope3.fu7 {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    prope3.prope2 = "FAIL 7"
    prope3.fu5 {
        fu6 {
            fu7 {
                fu5 {
                    fu6 {
                        fu7 {
                            prope2 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = (Kla3())?.context
    override fun resumeWith(prope4: Result<Ty0>) {
        if ((arrayListOf<Char>('炪')).get(2094754879).isHighSurrogate()) {
            resume(prope4.getOrThrow())
        } else {
            fu8(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("vvqdl" + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope5.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope5.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Color.valueOf("RED") == Color.RED).compareTo(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE).toString(-151718682) + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = (Kla2()).equals("ljbrb").compareTo(throwsOnGreen())
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu13() {
        prope6 = 0
        prope7 = (Color.values()).size.equals("okxsw")
        prope8 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Color.valueOf("RED")).ordinal.equals("ercgn")) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (Color.values()[1]).equals("gxeji").and(Color.valueOf("RED") == Color.RED
  && Color.valueOf("BLUE") == Color.BLUE
  && Color.values()[0] == Color.RED
  && Color.values()[1] == Color.BLUE)
        }
    }

    override fun fu8(exception: Throwable) {
        throw ArithmeticException("kblaj")
    }
}


2021-03-11 20:30:27,184 [main:107] - replacing (this, Kla1)
2021-03-11 20:30:27,184 [main:50] - replacing this Kla1
2021-03-11 20:30:27,184 [main:54] - Getting value of type Kla1
