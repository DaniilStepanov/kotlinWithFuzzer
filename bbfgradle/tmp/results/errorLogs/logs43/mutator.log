2021-03-11 23:23:13,911 [main:66] - Compilation checking started
2021-03-11 23:23:14,786 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 23:23:14,787 [main:302] - generating value of type = String true depth = 1
2021-03-11 23:23:14,792 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 23:23:14,793 [main:66] - Compilation checking started
2021-03-11 23:23:15,393 [main:53] - Result = true
Text:


inline fun bar(crossinline y: () -> String = { "rgbdb"}) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}


2021-03-11 23:23:15,394 [main:302] - generating value of type = Function0<T> false depth = 0
2021-03-11 23:23:15,394 [main:302] - generating value of type = T false depth = 1
2021-03-11 23:23:15,632 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: UByte, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 23:23:15,635 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: UByte, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 23:23:15,910 [main:302] - generating value of type = UByte true depth = 4
2021-03-11 23:23:15,911 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 23:23:15,911 [main:302] - generating value of type = Any false depth = 5
2021-03-11 23:23:15,912 [main:95] - GENERATED = checkNotNull<UByte>(103.toUByte(), { "kevlq"})
2021-03-11 23:23:15,913 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 23:23:15,914 [main:66] - Compilation checking started
2021-03-11 23:23:16,329 [main:49] - Result = false
Text:


inline fun bar(crossinline y: () -> String = { "rgbdb"}) = {
    call(y)
}

public inline fun <T> call(f: () -> T = { checkNotNull(103.toUByte(), { "kevlq"})}): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}


2021-03-11 23:23:16,710 [main:43] - GENERATING CALL OF inline fun bar(crossinline y: () -> String) = {
    call(y)
}
2021-03-11 23:23:16,711 [main:61] - WITHOUT TYPE PARAMS = inline fun bar(crossinline y: () -> String) = {
    call(y)
}
2021-03-11 23:23:16,912 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-11 23:23:16,912 [main:302] - generating value of type = String true depth = 2
2021-03-11 23:23:16,913 [main:95] - GENERATED = bar({ "rpvdd"})
2021-03-11 23:23:17,001 [main:43] - GENERATING CALL OF public inline fun <T> call(f: () -> T): T = f()
2021-03-11 23:23:17,004 [main:61] - WITHOUT TYPE PARAMS = public inline fun <T> call(f: () -> String): String = f()
2021-03-11 23:23:17,183 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-11 23:23:17,183 [main:302] - generating value of type = String true depth = 2
2021-03-11 23:23:17,184 [main:95] - GENERATED = call<String>({ "ongdx"})
2021-03-11 23:23:17,309 [main:45] - Trying to change 9 nodes
2021-03-11 23:23:17,311 [main:53] - replacing (bar {"OK"} (), String)
2021-03-11 23:23:17,311 [main:50] - replacing bar {"OK"} () String
2021-03-11 23:23:17,311 [main:54] - Getting value of type String
2021-03-11 23:23:17,404 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:23:17,404 [main:58] - GENERATED VALUE OF TYPE String = "ydpht"
2021-03-11 23:23:17,405 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:17,604 [main:67] - randomType = ArrayDeque<String>
2021-03-11 23:23:17,684 [main:302] - generating value of type = ArrayDeque<String> false depth = 0
2021-03-11 23:23:17,774 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<String> = TODO()
2021-03-11 23:23:17,776 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<String> = TODO()
2021-03-11 23:23:17,862 [main:95] - GENERATED = ArrayDeque<String>()
2021-03-11 23:23:18,180 [main:149] - GENERATING call of type public final fun first(): kotlin.String defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@10211d9e]
2021-03-11 23:23:18,182 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bd5ed6]
2021-03-11 23:23:18,297 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:18,298 [main:78] - Generated call from random type = (ArrayDeque<String>()).first().takeLast(-2143302306)
2021-03-11 23:23:18,298 [main:106] - GETTING String from String
2021-03-11 23:23:18,344 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@413de39d]]
2021-03-11 23:23:18,345 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@413de39d]
2021-03-11 23:23:18,346 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).trimStart()
2021-03-11 23:23:18,346 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30551a45]]
2021-03-11 23:23:18,346 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30551a45]
2021-03-11 23:23:18,349 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).replaceIndentByMargin(call<String>({ "ongdx"}), call<String>({ "ongdx"}))
2021-03-11 23:23:18,349 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2667e0]]
2021-03-11 23:23:18,350 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2667e0]
2021-03-11 23:23:18,457 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:23:18,568 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:23:18,570 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).substringAfterLast('㪅', "aenvb")
2021-03-11 23:23:18,570 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6480fece], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78ceb0a4]]
2021-03-11 23:23:18,570 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6480fece]
2021-03-11 23:23:18,686 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:18,686 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78ceb0a4]
2021-03-11 23:23:18,689 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).get(1318604879).plus(call<String>({ "ongdx"}))
2021-03-11 23:23:18,689 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@57c4738e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fea991d]]
2021-03-11 23:23:18,689 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fea991d]
2021-03-11 23:23:18,781 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:18,783 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).length.toString(-1047510430)
2021-03-11 23:23:18,784 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614c226f]]
2021-03-11 23:23:18,784 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614c226f]
2021-03-11 23:23:18,866 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:23:18,866 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:23:18,868 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).takeLastWhile({a: Char -> false})
2021-03-11 23:23:18,868 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19678f3c]]
2021-03-11 23:23:18,868 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19678f3c]
2021-03-11 23:23:18,970 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:23:18,972 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).replaceAfterLast('牾', call<String>({ "ongdx"}), call<String>({ "ongdx"}))
2021-03-11 23:23:18,973 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5356476a]]
2021-03-11 23:23:18,973 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5356476a]
2021-03-11 23:23:19,057 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:19,146 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:23:19,148 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).padEnd(-1309654912, '娇')
2021-03-11 23:23:19,148 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f7d270f]]
2021-03-11 23:23:19,148 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f7d270f]
2021-03-11 23:23:19,233 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:23:19,233 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:23:19,234 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).dropLastWhile({a: Char -> true})
2021-03-11 23:23:19,234 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15524613]]
2021-03-11 23:23:19,234 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15524613]
2021-03-11 23:23:19,235 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).toUpperCase()
2021-03-11 23:23:19,235 [main:61] - replacement of bar {"OK"} () of type String is (call<String>({ "ongdx"})).get(1318604879).plus(call<String>({ "ongdx"}))
2021-03-11 23:23:19,358 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:19,359 [main:66] - Compilation checking started
2021-03-11 23:23:19,814 [main:53] - Result = true
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return (call<String>({ "ongdx"})).get(1318604879).plus(call<String>({ "ongdx"}))
}


2021-03-11 23:23:19,815 [main:53] - replacing ({
    call(y)
}, Function0<String>)
2021-03-11 23:23:19,815 [main:50] - replacing {
    call(y)
} Function0<String>
2021-03-11 23:23:19,815 [main:54] - Getting value of type Function0<String>
2021-03-11 23:23:19,955 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 23:23:19,955 [main:302] - generating value of type = String true depth = 1
2021-03-11 23:23:19,956 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "zsmgi"}
2021-03-11 23:23:19,956 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:20,418 [main:67] - randomType = ArrayList<Array<Int>>
2021-03-11 23:23:20,537 [main:302] - generating value of type = ArrayList<Array<Int>> false depth = 0
2021-03-11 23:23:20,667 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Array<Int>> = TODO()
2021-03-11 23:23:20,669 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Array<Int>> = TODO()
2021-03-11 23:23:20,777 [main:95] - GENERATED = arrayListOf<Array<Int>>()
2021-03-11 23:23:21,022 [main:106] - GETTING Function0<String> from Function0<String>
2021-03-11 23:23:21,031 [main:61] - replacement of {
    call(y)
} of type Function0<String> is { "zsmgi"}
2021-03-11 23:23:21,134 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:23:21,134 [main:66] - Compilation checking started
2021-03-11 23:23:21,480 [main:53] - Result = true
Text:


inline fun bar(crossinline y: () -> String) = { "zsmgi"}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return (call<String>({ "ongdx"})).get(1318604879).plus(call<String>({ "ongdx"}))
}


2021-03-11 23:23:21,481 [main:53] - replacing (f(), T)
2021-03-11 23:23:21,481 [main:50] - replacing f() T
2021-03-11 23:23:21,481 [main:54] - Getting value of type T
2021-03-11 23:23:21,649 [main:58] - GENERATED VALUE OF TYPE T = null
2021-03-11 23:23:21,650 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:21,797 [main:67] - randomType = UShort
2021-03-11 23:23:21,909 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 23:23:21,981 [main:106] - GETTING T from String
2021-03-11 23:23:22,014 [main:106] - GETTING T from Function0<String>
2021-03-11 23:23:22,029 [main:106] - GETTING T from Function0<T>
2021-03-11 23:23:22,043 [main:113] - Case = [public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70], @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T : kotlin.text.Appendable> T.appendRange(value: kotlin.CharSequence, startIndex: kotlin.Int, endIndex: kotlin.Int): T defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab274a0]]
2021-03-11 23:23:22,043 [main:149] - GENERATING call of type public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70]
2021-03-11 23:23:22,043 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T : kotlin.text.Appendable> T.appendRange(value: kotlin.CharSequence, startIndex: kotlin.Int, endIndex: kotlin.Int): T defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab274a0]
2021-03-11 23:23:22,169 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:23:22,277 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:22,378 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:22,381 [main:117] - GENERATED CALL = (f)?.invoke()?.appendRange("ejxhp", -1287797693, -1984490008)
2021-03-11 23:23:22,381 [main:113] - Case = [public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70], @kotlin.internal.InlineOnly public inline fun <T> T.apply(block: T.() -> kotlin.Unit): T defined in kotlin[DeserializedSimpleFunctionDescriptor@3f559822]]
2021-03-11 23:23:22,381 [main:149] - GENERATING call of type public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70]
2021-03-11 23:23:22,382 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> T.apply(block: T.() -> kotlin.Unit): T defined in kotlin[DeserializedSimpleFunctionDescriptor@3f559822]
2021-03-11 23:23:22,500 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, Unit> false depth = 0
2021-03-11 23:23:22,501 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:23:22,610 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:23:22,612 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:23:22,982 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:23:22,982 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 23:23:22,982 [main:302] - generating value of type = Any false depth = 5
2021-03-11 23:23:22,983 [main:95] - GENERATED = check(true, { "ekfeg"})
2021-03-11 23:23:22,984 [main:117] - GENERATED CALL = (f)?.invoke()?.apply({ check(true, { "ekfeg"})})
2021-03-11 23:23:22,985 [main:113] - Case = [public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70], public fun <T : kotlin.Comparable<T>> T.coerceIn(minimumValue: T?, maximumValue: T?): T defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4db6794c]]
2021-03-11 23:23:22,985 [main:149] - GENERATING call of type public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70]
2021-03-11 23:23:22,985 [main:149] - GENERATING call of type public fun <T : kotlin.Comparable<T>> T.coerceIn(minimumValue: T?, maximumValue: T?): T defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4db6794c]
2021-03-11 23:23:23,078 [main:302] - generating value of type = T false depth = 0
2021-03-11 23:23:23,343 [main:43] - GENERATING CALL OF fun <T> minOf(a: UByte, b: UByte, comparator: kotlin.Comparator<UByte>): T = TODO()
2021-03-11 23:23:23,346 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UByte, b: UByte, comparator: kotlin.Comparator<UByte>): T = TODO()
2021-03-11 23:23:23,560 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 23:23:23,560 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 23:23:23,560 [main:302] - generating value of type = Comparator<UByte> false depth = 3
2021-03-11 23:23:24,249 [main:43] - GENERATING CALL OF fun <T, K> compareBy(comparator: kotlin.Comparator<MutableMap<Short, Array<UByte?>>>, selector: (UByte)->MutableMap<Short, Array<UByte?>>): Comparator<UByte> = TODO()
2021-03-11 23:23:24,252 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareBy(comparator: kotlin.Comparator<MutableMap<Short, Array<UByte?>>>, selector: (UByte)->MutableMap<Short, Array<UByte?>>): Comparator<UByte> = TODO()
2021-03-11 23:23:24,658 [main:302] - generating value of type = Comparator<MutableMap<Short, Array<UByte?>>> false depth = 6
2021-03-11 23:23:24,777 [main:43] - GENERATING CALL OF fun <T> nullsFirst(): Comparator<MutableMap<Short, Array<UByte?>>> = TODO()
2021-03-11 23:23:24,779 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(): Comparator<MutableMap<Short, Array<UByte?>>> = TODO()
2021-03-11 23:23:24,899 [main:95] - GENERATED = nullsFirst<MutableMap<Short, Array<UByte?>>>()
2021-03-11 23:23:24,899 [main:302] - generating value of type = Function1<UByte, MutableMap<Short, Array<UByte?>>> false depth = 6
2021-03-11 23:23:24,900 [main:302] - generating value of type = MutableMap<Short, Array<UByte?>> false depth = 7
2021-03-11 23:23:25,033 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(pairs: Pair<Short, Array<UByte?>>): MutableMap<Short, Array<UByte?>> = TODO()
2021-03-11 23:23:25,041 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(pairs: Pair<Short, Array<UByte?>>): MutableMap<Short, Array<UByte?>> = TODO()
2021-03-11 23:23:25,148 [main:302] - generating value of type = Pair<Short, Array<UByte?>> false depth = 10
2021-03-11 23:23:25,260 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Short, second: Array<UByte?>): Pair<Short, Array<UByte?>> = TODO()
2021-03-11 23:23:25,262 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Short, second: Array<UByte?>): Pair<Short, Array<UByte?>> = TODO()
2021-03-11 23:23:25,354 [main:302] - generating value of type = Short true depth = 13
2021-03-11 23:23:25,354 [main:302] - generating value of type = Array<UByte?> false depth = 13
2021-03-11 23:23:25,466 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: UByte?): Array<UByte?> = TODO()
2021-03-11 23:23:25,468 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: UByte?): Array<UByte?> = TODO()
2021-03-11 23:23:25,572 [main:302] - generating value of type = UByte true depth = 16
2021-03-11 23:23:25,572 [main:385] - Cant generate call of fun <T> arrayOf(elements: UByte?): Array<UByte?> = TODO()
2021-03-11 23:23:25,572 [main:385] - Cant generate call of fun <A, B> Pair(first: Short, second: Array<UByte?>): Pair<Short, Array<UByte?>> = TODO()
2021-03-11 23:23:25,572 [main:385] - Cant generate call of fun <K, V> mutableMapOf(pairs: Pair<Short, Array<UByte?>>): MutableMap<Short, Array<UByte?>> = TODO()
2021-03-11 23:23:25,573 [main:95] - GENERATED = compareBy<UByte, MutableMap<Short, Array<UByte?>>>(nullsFirst<MutableMap<Short, Array<UByte?>>>(), {a: UByte -> })
2021-03-11 23:23:25,573 [main:95] - GENERATED = minOf<UByte>(127.toUByte(), 32.toUByte(), compareBy<UByte, MutableMap<Short, Array<UByte?>>>(nullsFirst<MutableMap<Short, Array<UByte?>>>(), {a: UByte -> }))
2021-03-11 23:23:25,676 [main:302] - generating value of type = T false depth = 0
2021-03-11 23:23:26,068 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Set<Pair<Int, Char>>?, b: Set<Pair<Int, Char>>?, c: Set<Pair<Int, Char>>?, comparator: kotlin.Comparator<Set<Pair<Int, Char>>?>): T = TODO()
2021-03-11 23:23:26,070 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Set<Pair<Int, Char>>?, b: Set<Pair<Int, Char>>?, c: Set<Pair<Int, Char>>?, comparator: kotlin.Comparator<Set<Pair<Int, Char>>?>): T = TODO()
2021-03-11 23:23:26,250 [main:302] - generating value of type = Set<Pair<Int, Char>> false depth = 3
2021-03-11 23:23:26,385 [main:43] - GENERATING CALL OF fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Pair<Int, Char>>.()->kotlin.Unit): Set<Pair<Int, Char>> = TODO()
2021-03-11 23:23:26,386 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Pair<Int, Char>>.()->kotlin.Unit): Set<Pair<Int, Char>> = TODO()
2021-03-11 23:23:26,594 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Pair<Int, Char>>, Unit> false depth = 6
2021-03-11 23:23:26,594 [main:302] - generating value of type = Unit false depth = 7
2021-03-11 23:23:26,603 [main:95] - GENERATED = buildSet<Pair<Int, Char>>({ println()})
2021-03-11 23:23:26,603 [main:302] - generating value of type = Set<Pair<Int, Char>> false depth = 3
2021-03-11 23:23:26,711 [main:43] - GENERATING CALL OF fun <E> HashSet(elements: kotlin.collections.Collection<Pair<Int, Char>>): Set<Pair<Int, Char>> = TODO()
2021-03-11 23:23:26,713 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(elements: kotlin.collections.Collection<Pair<Int, Char>>): Set<Pair<Int, Char>> = TODO()
2021-03-11 23:23:26,907 [main:302] - generating value of type = Collection<Pair<Int, Char>> false depth = 6
2021-03-11 23:23:27,017 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(): Collection<Pair<Int, Char>> = TODO()
2021-03-11 23:23:27,018 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(): Collection<Pair<Int, Char>> = TODO()
2021-03-11 23:23:27,116 [main:95] - GENERATED = mutableSetOf<Pair<Int, Char>>()
2021-03-11 23:23:27,116 [main:95] - GENERATED = HashSet<Pair<Int, Char>>(mutableSetOf<Pair<Int, Char>>())
2021-03-11 23:23:27,116 [main:302] - generating value of type = Set<Pair<Int, Char>> false depth = 3
2021-03-11 23:23:27,215 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): Set<Pair<Int, Char>> = TODO()
2021-03-11 23:23:27,217 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): Set<Pair<Int, Char>> = TODO()
2021-03-11 23:23:27,314 [main:95] - GENERATED = LinkedHashSet<Pair<Int, Char>>()
2021-03-11 23:23:27,315 [main:302] - generating value of type = Comparator<Set<Pair<Int, Char>>?> false depth = 3
2021-03-11 23:23:27,417 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<Set<Pair<Int, Char>>?>): Comparator<Set<Pair<Int, Char>>?> = TODO()
2021-03-11 23:23:27,419 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<Set<Pair<Int, Char>>?>): Comparator<Set<Pair<Int, Char>>?> = TODO()
2021-03-11 23:23:27,609 [main:302] - generating value of type = Comparator<Set<Pair<Int, Char>>?> false depth = 6
2021-03-11 23:23:27,691 [main:43] - GENERATING CALL OF fun <T> nullsLast(): Comparator<Set<Pair<Int, Char>>?> = TODO()
2021-03-11 23:23:27,693 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(): Comparator<Set<Pair<Int, Char>>?> = TODO()
2021-03-11 23:23:27,773 [main:95] - GENERATED = nullsLast<Set<Pair<Int, Char>>?>()
2021-03-11 23:23:27,773 [main:95] - GENERATED = nullsFirst<Set<Pair<Int, Char>>?>(nullsLast<Set<Pair<Int, Char>>?>())
2021-03-11 23:23:27,773 [main:95] - GENERATED = maxOf<Set<Pair<Int, Char>>?>(buildSet<Pair<Int, Char>>({ println()}), HashSet<Pair<Int, Char>>(mutableSetOf<Pair<Int, Char>>()), LinkedHashSet<Pair<Int, Char>>(), nullsFirst<Set<Pair<Int, Char>>?>(nullsLast<Set<Pair<Int, Char>>?>()))
2021-03-11 23:23:27,775 [main:117] - GENERATED CALL = (f)?.invoke()?.coerceIn(minOf<UByte>(127.toUByte(), 32.toUByte(), compareBy<UByte, MutableMap<Short, Array<UByte?>>>(nullsFirst<MutableMap<Short, Array<UByte?>>>(), {a: UByte -> })), maxOf<Set<Pair<Int, Char>>?>(buildSet<Pair<Int, Char>>({ println()}), HashSet<Pair<Int, Char>>(mutableSetOf<Pair<Int, Char>>()), LinkedHashSet<Pair<Int, Char>>(), nullsFirst<Set<Pair<Int, Char>>?>(nullsLast<Set<Pair<Int, Char>>?>())))
2021-03-11 23:23:27,776 [main:113] - Case = [public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70], @kotlin.internal.InlineOnly @kotlin.SinceKotlin public inline fun <T> T.also(block: (T) -> kotlin.Unit): T defined in kotlin[DeserializedSimpleFunctionDescriptor@7499df3a]]
2021-03-11 23:23:27,776 [main:149] - GENERATING call of type public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70]
2021-03-11 23:23:27,776 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly @kotlin.SinceKotlin public inline fun <T> T.also(block: (T) -> kotlin.Unit): T defined in kotlin[DeserializedSimpleFunctionDescriptor@7499df3a]
2021-03-11 23:23:27,879 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-11 23:23:27,880 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:23:28,001 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:23:28,002 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:23:28,161 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:23:28,161 [main:95] - GENERATED = check(true)
2021-03-11 23:23:28,162 [main:117] - GENERATED CALL = (f)?.invoke()?.also({a: T -> check(true)})
2021-03-11 23:23:28,163 [main:113] - Case = [public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70], public fun <T : kotlin.Comparable<T>> T.coerceAtLeast(minimumValue: T): T defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5c4f1961]]
2021-03-11 23:23:28,163 [main:149] - GENERATING call of type public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70]
2021-03-11 23:23:28,163 [main:149] - GENERATING call of type public fun <T : kotlin.Comparable<T>> T.coerceAtLeast(minimumValue: T): T defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5c4f1961]
2021-03-11 23:23:28,241 [main:302] - generating value of type = T false depth = 0
2021-03-11 23:23:28,401 [main:43] - GENERATING CALL OF fun <T> minOf(a: UInt, other: UInt, comparator: kotlin.Comparator<UInt>): T = TODO()
2021-03-11 23:23:28,402 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UInt, other: UInt, comparator: kotlin.Comparator<UInt>): T = TODO()
2021-03-11 23:23:28,602 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 23:23:28,602 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 23:23:28,602 [main:302] - generating value of type = Comparator<UInt> false depth = 3
2021-03-11 23:23:28,683 [main:43] - GENERATING CALL OF fun <T> nullsFirst(): Comparator<UInt> = TODO()
2021-03-11 23:23:28,684 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(): Comparator<UInt> = TODO()
2021-03-11 23:23:28,765 [main:95] - GENERATED = nullsFirst<UInt>()
2021-03-11 23:23:28,765 [main:95] - GENERATED = minOf<UInt>(996341699.toUInt(), 1480806122.toUInt(), nullsFirst<UInt>())
2021-03-11 23:23:28,765 [main:117] - GENERATED CALL = (f)?.invoke()?.coerceAtLeast(minOf<UInt>(996341699.toUInt(), 1480806122.toUInt(), nullsFirst<UInt>()))
2021-03-11 23:23:28,766 [main:113] - Case = [public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70], public fun <T : kotlin.text.Appendable> T.append(vararg value: kotlin.CharSequence?): T defined in kotlin.text[DeserializedSimpleFunctionDescriptor@262aec01]]
2021-03-11 23:23:28,766 [main:149] - GENERATING call of type public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70]
2021-03-11 23:23:28,766 [main:149] - GENERATING call of type public fun <T : kotlin.text.Appendable> T.append(vararg value: kotlin.CharSequence?): T defined in kotlin.text[DeserializedSimpleFunctionDescriptor@262aec01]
2021-03-11 23:23:28,840 [main:302] - generating value of type = Array<out CharSequence?> false depth = 0
2021-03-11 23:23:28,920 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out CharSequence?
2021-03-11 23:23:28,921 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out CharSequence?
2021-03-11 23:23:29,155 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out CharSequence?
2021-03-11 23:23:29,155 [main:158] - CANT GENERATE PARAMS FOR public fun <T : kotlin.text.Appendable> T.append(vararg value: kotlin.CharSequence?): T defined in kotlin.text[DeserializedSimpleFunctionDescriptor@262aec01]
2021-03-11 23:23:29,155 [main:113] - Case = [public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70], public fun <T : kotlin.Comparable<T>> T.coerceAtMost(maximumValue: T): T defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74e8f4a3]]
2021-03-11 23:23:29,155 [main:149] - GENERATING call of type public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70]
2021-03-11 23:23:29,156 [main:149] - GENERATING call of type public fun <T : kotlin.Comparable<T>> T.coerceAtMost(maximumValue: T): T defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74e8f4a3]
2021-03-11 23:23:29,230 [main:302] - generating value of type = T false depth = 0
2021-03-11 23:23:29,519 [main:43] - GENERATING CALL OF fun <T> maxOf(a: UShort?, other: UShort?, comparator: kotlin.Comparator<UShort?>): T = TODO()
2021-03-11 23:23:29,520 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: UShort?, other: UShort?, comparator: kotlin.Comparator<UShort?>): T = TODO()
2021-03-11 23:23:29,707 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 23:23:29,707 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 23:23:29,707 [main:302] - generating value of type = Comparator<UShort?> false depth = 3
2021-03-11 23:23:29,811 [main:43] - GENERATING CALL OF fun <T> nullsLast(): Comparator<UShort?> = TODO()
2021-03-11 23:23:29,812 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(): Comparator<UShort?> = TODO()
2021-03-11 23:23:29,903 [main:95] - GENERATED = nullsLast<UShort?>()
2021-03-11 23:23:29,903 [main:95] - GENERATED = maxOf<UShort?>(17380.toUShort(), 18391.toUShort(), nullsLast<UShort?>())
2021-03-11 23:23:29,903 [main:117] - GENERATED CALL = (f)?.invoke()?.coerceAtMost(maxOf<UShort?>(17380.toUShort(), 18391.toUShort(), nullsLast<UShort?>()))
2021-03-11 23:23:29,903 [main:113] - Case = [public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70]]
2021-03-11 23:23:29,904 [main:149] - GENERATING call of type public abstract operator fun invoke(): T defined in kotlin.Function0[FunctionInvokeDescriptor@553c2c70]
2021-03-11 23:23:29,904 [main:117] - GENERATED CALL = (f)?.invoke()
2021-03-11 23:23:29,904 [main:61] - replacement of f() of type T is (f)?.invoke()
2021-03-11 23:23:29,991 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 23:23:29,992 [main:66] - Compilation checking started
2021-03-11 23:23:30,252 [main:49] - Result = false
Text:


inline fun bar(crossinline y: () -> String) = { "zsmgi"}

public inline fun <T> call(f: () -> T): T = (f)?.invoke()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return (call<String>({ "ongdx"})).get(1318604879).plus(call<String>({ "ongdx"}))
}


2021-03-11 23:23:30,252 [main:53] - replacing (call(y), String)
2021-03-11 23:23:30,253 [main:50] - replacing call(y) String
2021-03-11 23:23:30,253 [main:54] - Getting value of type String
2021-03-11 23:23:30,351 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:23:30,351 [main:58] - GENERATED VALUE OF TYPE String = "ryqcz"
2021-03-11 23:23:30,351 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:30,623 [main:67] - randomType = ArrayList<UByte>
2021-03-11 23:23:30,722 [main:302] - generating value of type = ArrayList<UByte> false depth = 0
2021-03-11 23:23:30,827 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UByte): ArrayList<UByte> = TODO()
2021-03-11 23:23:30,828 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UByte): ArrayList<UByte> = TODO()
2021-03-11 23:23:30,922 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 23:23:30,923 [main:95] - GENERATED = arrayListOf<UByte>(66.toUByte())
2021-03-11 23:23:31,113 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UByte defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@718c2f43]
2021-03-11 23:23:31,205 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:31,206 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@419fe75d]
2021-03-11 23:23:31,302 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:31,303 [main:78] - Generated call from random type = (arrayListOf<UByte>(66.toUByte())).get(1881192593).toString(1669329087)
2021-03-11 23:23:31,304 [main:106] - GETTING String from Function0<String>
2021-03-11 23:23:31,317 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bb58446]]
2021-03-11 23:23:31,318 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:31,318 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bb58446]
2021-03-11 23:23:31,318 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().lowercase()
2021-03-11 23:23:31,318 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57a2bd2e]]
2021-03-11 23:23:31,319 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:31,319 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57a2bd2e]
2021-03-11 23:23:31,319 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().trimEnd()
2021-03-11 23:23:31,319 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30551a45]]
2021-03-11 23:23:31,319 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:31,319 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30551a45]
2021-03-11 23:23:31,444 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:23:31,523 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:23:31,524 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().replaceIndentByMargin("eoufe", "hxsgg")
2021-03-11 23:23:31,524 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16fa02e0]]
2021-03-11 23:23:31,524 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:31,524 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16fa02e0]
2021-03-11 23:23:31,525 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().trimMargin(call<String>({ "ongdx"}))
2021-03-11 23:23:31,525 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3905d7d0]]
2021-03-11 23:23:31,525 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:31,525 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3905d7d0]
2021-03-11 23:23:31,614 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:23:31,615 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().prependIndent("fyzik")
2021-03-11 23:23:31,615 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d26b95e]]
2021-03-11 23:23:31,615 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:31,615 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d26b95e]
2021-03-11 23:23:31,697 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:23:31,698 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().concat("wnhkb")
2021-03-11 23:23:31,698 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@512d0e7c]]
2021-03-11 23:23:31,698 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:31,698 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@512d0e7c]
2021-03-11 23:23:31,786 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:23:31,787 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:23:31,787 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().takeWhile({a: Char -> false})
2021-03-11 23:23:31,788 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2667e0]]
2021-03-11 23:23:31,788 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:31,788 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2667e0]
2021-03-11 23:23:31,868 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:23:31,869 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().substringAfterLast('뇍', call<String>({ "ongdx"}))
2021-03-11 23:23:31,869 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@169d1b71]]
2021-03-11 23:23:31,869 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:31,870 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@169d1b71]
2021-03-11 23:23:31,870 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().uppercase()
2021-03-11 23:23:31,870 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58d6b6b3]]
2021-03-11 23:23:31,870 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:31,870 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58d6b6b3]
2021-03-11 23:23:31,959 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:23:31,960 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().substringAfter('?', call<String>({ "ongdx"}))
2021-03-11 23:23:31,961 [main:61] - replacement of call(y) of type String is "ryqcz"
2021-03-11 23:23:32,071 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 23:23:32,072 [main:53] - replacing ("OK", String)
2021-03-11 23:23:32,072 [main:50] - replacing "OK" String
2021-03-11 23:23:32,072 [main:54] - Getting value of type String
2021-03-11 23:23:32,169 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:23:32,169 [main:58] - GENERATED VALUE OF TYPE String = "kuuml"
2021-03-11 23:23:32,169 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:32,384 [main:67] - randomType = Long?
2021-03-11 23:23:32,466 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:32,540 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5d102129]
2021-03-11 23:23:32,541 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aafc1e4]
2021-03-11 23:23:32,541 [main:78] - Generated call from random type = (8066519649084568168)?.toChar().titlecase()
2021-03-11 23:23:32,542 [main:106] - GETTING String from Function0<String>
2021-03-11 23:23:32,551 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df67a45]]
2021-03-11 23:23:32,551 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:32,552 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df67a45]
2021-03-11 23:23:32,635 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:32,636 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().take(1139103811)
2021-03-11 23:23:32,636 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57a2bd2e]]
2021-03-11 23:23:32,636 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:32,636 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57a2bd2e]
2021-03-11 23:23:32,637 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().trimEnd()
2021-03-11 23:23:32,637 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c443336]]
2021-03-11 23:23:32,637 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:32,637 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c443336]
2021-03-11 23:23:32,637 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().decapitalize()
2021-03-11 23:23:32,638 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19678f3c]]
2021-03-11 23:23:32,638 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:32,638 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19678f3c]
2021-03-11 23:23:32,718 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:23:32,814 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:23:32,815 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().replaceAfterLast('ᙒ', call<String>({ "ongdx"}), "wpnxr")
2021-03-11 23:23:32,815 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8773b9f]]
2021-03-11 23:23:32,815 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:32,816 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8773b9f]
2021-03-11 23:23:32,898 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:23:32,899 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:23:32,899 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().filterNot({a: Char -> false})
2021-03-11 23:23:32,899 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]]
2021-03-11 23:23:32,899 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:32,900 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke()
2021-03-11 23:23:32,900 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e362853]]
2021-03-11 23:23:32,900 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:32,900 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e362853]
2021-03-11 23:23:32,993 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:23:32,994 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:23:32,994 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().filter({a: Char -> true})
2021-03-11 23:23:32,995 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614c226f]]
2021-03-11 23:23:32,995 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:32,995 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614c226f]
2021-03-11 23:23:33,075 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:23:33,075 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:23:33,076 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().takeLastWhile({a: Char -> false})
2021-03-11 23:23:33,076 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@200b49f5]]
2021-03-11 23:23:33,076 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:33,076 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@200b49f5]
2021-03-11 23:23:33,180 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:23:33,182 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().replaceAfter('̀', call<String>({ "ongdx"}), call<String>({ "ongdx"}))
2021-03-11 23:23:33,182 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5356476a]]
2021-03-11 23:23:33,182 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@7be11bb0]
2021-03-11 23:23:33,182 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5356476a]
2021-03-11 23:23:33,261 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:33,347 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:23:33,348 [main:117] - GENERATED CALL = (bar({ "rpvdd"})).invoke().padEnd(-213074616, '㒂')
2021-03-11 23:23:33,348 [main:61] - replacement of "OK" of type String is (bar({ "rpvdd"})).invoke().replaceAfter('̀', call<String>({ "ongdx"}), call<String>({ "ongdx"}))
2021-03-11 23:23:33,431 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:33,432 [main:53] - replacing ({(bar({ "rpvdd"})).invoke().replaceAfter('̀', call<String>({ "ongdx"}), call<String>({ "ongdx"}))}, Function0<String>)
2021-03-11 23:23:33,432 [main:50] - replacing {(bar({ "rpvdd"})).invoke().replaceAfter('̀', call<String>({ "ongdx"}), call<String>({ "ongdx"}))} Function0<String>
2021-03-11 23:23:33,432 [main:54] - Getting value of type Function0<String>
2021-03-11 23:23:33,521 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 23:23:33,521 [main:302] - generating value of type = String true depth = 1
2021-03-11 23:23:33,522 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "burcq"}
2021-03-11 23:23:33,522 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:34,145 [main:67] - randomType = Map<Map<Triple<Float, Int, UShort>, UShort>?, String>
2021-03-11 23:23:34,145 [main:106] - GETTING Function0<String> from Function0<String>
2021-03-11 23:23:34,155 [main:61] - replacement of {(bar({ "rpvdd"})).invoke().replaceAfter('̀', call<String>({ "ongdx"}), call<String>({ "ongdx"}))} of type Function0<String> is { "burcq"}
2021-03-11 23:23:34,228 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:23:34,228 [main:53] - replacing (call(y), String)
2021-03-11 23:23:34,228 [main:50] - replacing call(y) String
2021-03-11 23:23:34,228 [main:54] - Getting value of type String
2021-03-11 23:23:34,317 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:23:34,318 [main:58] - GENERATED VALUE OF TYPE String = "brmnp"
2021-03-11 23:23:34,318 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:34,318 [main:67] - randomType = String
2021-03-11 23:23:34,396 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:23:34,425 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6a6dd3d6]
2021-03-11 23:23:34,425 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fea991d]
2021-03-11 23:23:34,502 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:34,503 [main:78] - Generated call from random type = ("nmaum").compareTo(call<String>({ "ongdx"})).toString(1793064310)
2021-03-11 23:23:34,503 [main:106] - GETTING String from String
2021-03-11 23:23:34,528 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5213e8db]]
2021-03-11 23:23:34,528 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5213e8db]
2021-03-11 23:23:34,602 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:34,602 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).drop(494464650)
2021-03-11 23:23:34,603 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15524613]]
2021-03-11 23:23:34,603 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15524613]
2021-03-11 23:23:34,603 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).toUpperCase()
2021-03-11 23:23:34,603 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bff190b]]
2021-03-11 23:23:34,603 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bff190b]
2021-03-11 23:23:34,603 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).toLowerCase()
2021-03-11 23:23:34,603 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@335d7636]]
2021-03-11 23:23:34,603 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d]
2021-03-11 23:23:34,677 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:34,749 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:34,750 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@335d7636]
2021-03-11 23:23:34,851 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:23:34,967 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:23:34,967 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).subSequence(-711260513, -1434284209).commonPrefixWith("siwva", true)
2021-03-11 23:23:34,967 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bd5ed6]]
2021-03-11 23:23:34,968 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bd5ed6]
2021-03-11 23:23:35,054 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:35,054 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).takeLast(427424468)
2021-03-11 23:23:35,055 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5356476a]]
2021-03-11 23:23:35,055 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5356476a]
2021-03-11 23:23:35,128 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:35,201 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:23:35,202 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).padEnd(61029569, '뮖')
2021-03-11 23:23:35,202 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30551a45]]
2021-03-11 23:23:35,202 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30551a45]
2021-03-11 23:23:35,282 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:23:35,283 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).replaceIndentByMargin("sqyvs", call<String>({ "ongdx"}))
2021-03-11 23:23:35,283 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57a2bd2e]]
2021-03-11 23:23:35,283 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57a2bd2e]
2021-03-11 23:23:35,283 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).trimEnd()
2021-03-11 23:23:35,284 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6480fece], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aafc1e4]]
2021-03-11 23:23:35,284 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6480fece]
2021-03-11 23:23:35,356 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:35,356 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aafc1e4]
2021-03-11 23:23:35,356 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).get(1851074557).titlecase()
2021-03-11 23:23:35,357 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@512d0e7c]]
2021-03-11 23:23:35,357 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@512d0e7c]
2021-03-11 23:23:35,429 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:23:35,429 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:23:35,430 [main:117] - GENERATED CALL = (call<String>({ "ongdx"})).takeWhile({a: Char -> false})
2021-03-11 23:23:35,430 [main:61] - replacement of call(y) of type String is (call<String>({ "ongdx"})).takeWhile({a: Char -> false})
2021-03-11 23:23:35,509 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:35,509 [main:53] - replacing ({
    "ryqcz"
}, Function0<String>)
2021-03-11 23:23:35,509 [main:50] - replacing {
    "ryqcz"
} Function0<String>
2021-03-11 23:23:35,509 [main:54] - Getting value of type Function0<String>
2021-03-11 23:23:35,605 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 23:23:35,605 [main:302] - generating value of type = String true depth = 1
2021-03-11 23:23:35,605 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "tvinz"}
2021-03-11 23:23:35,605 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:35,688 [main:67] - randomType = Long
2021-03-11 23:23:35,762 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:35,800 [main:106] - GETTING Function0<String> from Function0<String>
2021-03-11 23:23:35,810 [main:61] - replacement of {
    "ryqcz"
} of type Function0<String> is { "tvinz"}
2021-03-11 23:23:35,884 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:23:35,957 [main:119] - TRYING TO REPLACE CONSTANT 1318604879
2021-03-11 23:23:36,031 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 23:23:36,031 [main:66] - Compilation checking started
2021-03-11 23:23:36,301 [main:66] - Compilation checking started
2021-03-11 23:23:36,609 [main:41] - AFTER TRY 0 res = 

inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}


2021-03-11 23:23:36,941 [main:43] - GENERATING CALL OF inline fun bar(crossinline y: () -> String) = {
    call(y)
}
2021-03-11 23:23:36,941 [main:61] - WITHOUT TYPE PARAMS = inline fun bar(crossinline y: () -> String) = {
    call(y)
}
2021-03-11 23:23:37,135 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-11 23:23:37,135 [main:302] - generating value of type = String true depth = 2
2021-03-11 23:23:37,136 [main:95] - GENERATED = bar({ "wjfmy"})
2021-03-11 23:23:37,255 [main:43] - GENERATING CALL OF public inline fun <T> call(f: () -> T): T = f()
2021-03-11 23:23:37,347 [main:61] - WITHOUT TYPE PARAMS = public inline fun <T> call(f: () -> Char): Char = f()
2021-03-11 23:23:37,523 [main:302] - generating value of type = Function0<Char> false depth = 1
2021-03-11 23:23:37,523 [main:302] - generating value of type = Char true depth = 2
2021-03-11 23:23:37,524 [main:95] - GENERATED = call<Char>({ '럜'})
2021-03-11 23:23:37,648 [main:43] - Try №0
2021-03-11 23:23:38,359 [main:69] - Trying to insert fun box235() : String {
  val prope0  : Double = 1.toDouble()
  var prope1 : Long
  {
    if ((prope0.toInt() == 0))
      prope1 = 0
    else
      prope1 = (((1000.0 / prope0)).toLong())
  }
  return "OK"
}
2021-03-11 23:23:38,450 [main:66] - Compilation checking started
2021-03-11 23:23:38,969 [main:103] - Trying to change 22 nodes
2021-03-11 23:23:38,970 [main:107] - replacing (((1000.0 / prope0)), Double)
2021-03-11 23:23:38,970 [main:50] - replacing ((1000.0 / prope0)) Double
2021-03-11 23:23:38,970 [main:54] - Getting value of type Double
2021-03-11 23:23:39,098 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:23:39,100 [main:58] - GENERATED VALUE OF TYPE Double = 0.46022765310425706
2021-03-11 23:23:39,100 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:39,394 [main:67] - randomType = Function1<ULong, Byte>
2021-03-11 23:23:39,396 [main:106] - GETTING Double from Function0<String>
2021-03-11 23:23:39,409 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@92e4284], public fun kotlin.String.toDouble(): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53ffbc56]]
2021-03-11 23:23:39,409 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@92e4284]
2021-03-11 23:23:39,410 [main:149] - GENERATING call of type public fun kotlin.String.toDouble(): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53ffbc56]
2021-03-11 23:23:39,410 [main:117] - GENERATED CALL = (bar({ "wjfmy"})).invoke().toDouble()
2021-03-11 23:23:39,410 [main:114] - replacement of ((1000.0 / prope0)) of type Double is (bar({ "wjfmy"})).invoke().toDouble()
2021-03-11 23:23:39,499 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:39,500 [main:66] - Compilation checking started
2021-03-11 23:23:39,808 [main:53] - Result = true
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = 1.toDouble()
  var prope1 : Long
  {
    if ((prope0.toInt() == 0))
      prope1 = 0
    else
      prope1 = ((bar({ "wjfmy"})).invoke().toDouble().toLong())
  }
  return "OK"
}


2021-03-11 23:23:39,808 [main:107] - replacing (toInt(), Int)
2021-03-11 23:23:39,808 [main:50] - replacing toInt() Int
2021-03-11 23:23:39,809 [main:54] - Getting value of type Int
2021-03-11 23:23:39,901 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:39,902 [main:58] - GENERATED VALUE OF TYPE Int = 962962083
2021-03-11 23:23:39,902 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:40,025 [main:67] - randomType = UShort
2021-03-11 23:23:40,134 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 23:23:40,197 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@25bdbb37]
2021-03-11 23:23:40,198 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6315b3f7]
2021-03-11 23:23:40,198 [main:78] - Generated call from random type = (5260.toUShort()).toShort().countLeadingZeroBits()
2021-03-11 23:23:40,199 [main:106] - GETTING Int from Char
2021-03-11 23:23:40,234 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@59650483]]
2021-03-11 23:23:40,234 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:23:40,234 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@59650483]
2021-03-11 23:23:40,235 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).compareTo(call<Char>({ '럜'})).takeHighestOneBit()
2021-03-11 23:23:40,235 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@59f9a634]]
2021-03-11 23:23:40,235 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:23:40,235 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@59f9a634]
2021-03-11 23:23:40,319 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:40,447 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:40,448 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).compareTo(call<Char>({ '럜'})).coerceIn(254408744, 411100789)
2021-03-11 23:23:40,448 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65ba7bf2]]
2021-03-11 23:23:40,449 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:23:40,572 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:23:40,572 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65ba7bf2]
2021-03-11 23:23:40,671 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:40,672 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).compareTo('Ҿ').or(-114950730)
2021-03-11 23:23:40,672 [main:113] - Case = [@kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@5a5e0a85]]
2021-03-11 23:23:40,673 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).code
2021-03-11 23:23:40,673 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6c77afa7]]
2021-03-11 23:23:40,673 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67]
2021-03-11 23:23:40,673 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6c77afa7]
2021-03-11 23:23:40,764 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:23:40,765 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toByte().div(39)
2021-03-11 23:23:40,765 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]]
2021-03-11 23:23:40,765 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:23:40,766 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).compareTo(call<Char>({ '럜'}))
2021-03-11 23:23:40,766 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5342c626]]
2021-03-11 23:23:40,766 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:23:40,766 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5342c626]
2021-03-11 23:23:40,767 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toLong().countOneBits()
2021-03-11 23:23:40,767 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5c962ec8]]
2021-03-11 23:23:40,767 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67]
2021-03-11 23:23:40,767 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5c962ec8]
2021-03-11 23:23:40,768 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toByte().countOneBits()
2021-03-11 23:23:40,768 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@39568c9]]
2021-03-11 23:23:40,768 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:23:40,769 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).compareTo(call<Char>({ '럜'})).absoluteValue
2021-03-11 23:23:40,769 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@45465840]]
2021-03-11 23:23:40,769 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:23:40,769 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@45465840]
2021-03-11 23:23:40,769 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toLong().toInt()
2021-03-11 23:23:40,770 [main:114] - replacement of toInt() of type Int is (call<Char>({ '럜'})).toLong().countOneBits()
2021-03-11 23:23:40,897 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:40,897 [main:66] - Compilation checking started
2021-03-11 23:23:41,137 [main:49] - Result = false
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = 1.toDouble()
  var prope1 : Long
  {
    if ((prope0.(call<Char>({ '럜'})).toLong().countOneBits() == 0))
      prope1 = 0
    else
      prope1 = ((bar({ "wjfmy"})).invoke().toDouble().toLong())
  }
  return "OK"
}


2021-03-11 23:23:41,138 [main:107] - replacing (prope1, Long)
2021-03-11 23:23:41,138 [main:50] - replacing prope1 Long
2021-03-11 23:23:41,138 [main:54] - Getting value of type Long
2021-03-11 23:23:41,237 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:41,238 [main:58] - GENERATED VALUE OF TYPE Long = 8564430664917574681
2021-03-11 23:23:41,238 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:41,239 [main:67] - randomType = Long
2021-03-11 23:23:41,344 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:41,392 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12b1dcec]
2021-03-11 23:23:41,393 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6421d9dc]
2021-03-11 23:23:41,393 [main:78] - Generated call from random type = (-5848838842242697305).toFloat().toLong()
2021-03-11 23:23:41,394 [main:106] - GETTING Long from Char
2021-03-11 23:23:41,422 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@36279dab]]
2021-03-11 23:23:41,422 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67]
2021-03-11 23:23:41,422 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@36279dab]
2021-03-11 23:23:41,512 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:41,512 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toByte().minus(5143856788503025430)
2021-03-11 23:23:41,513 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], public fun kotlin.Long.coerceAtLeast(minimumValue: kotlin.Long): kotlin.Long defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3a5aa359]]
2021-03-11 23:23:41,513 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:23:41,513 [main:149] - GENERATING call of type public fun kotlin.Long.coerceAtLeast(minimumValue: kotlin.Long): kotlin.Long defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3a5aa359]
2021-03-11 23:23:41,597 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:41,598 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toLong().coerceAtLeast(-3441155580216851561)
2021-03-11 23:23:41,598 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a4ea586]]
2021-03-11 23:23:41,598 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:23:41,598 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a4ea586]
2021-03-11 23:23:41,692 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:41,693 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).compareTo(call<Char>({ '럜'})).plus(9070738452351245448)
2021-03-11 23:23:41,693 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5ef7936b]]
2021-03-11 23:23:41,694 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67]
2021-03-11 23:23:41,694 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5ef7936b]
2021-03-11 23:23:41,818 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:41,819 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toByte().plus(-7345378243578783171)
2021-03-11 23:23:41,820 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], public final infix fun and(other: kotlin.Long): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3a215a1c]]
2021-03-11 23:23:41,820 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:23:41,820 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Long): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3a215a1c]
2021-03-11 23:23:41,924 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:41,926 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toLong().and(3710765000049079814)
2021-03-11 23:23:41,926 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], public open fun toLong(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@198320a8]]
2021-03-11 23:23:41,926 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:23:41,926 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@198320a8]
2021-03-11 23:23:41,927 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toLong().toLong()
2021-03-11 23:23:41,927 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.takeHighestOneBit(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@7e4bd9b4]]
2021-03-11 23:23:41,927 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:23:41,927 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.takeHighestOneBit(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@7e4bd9b4]
2021-03-11 23:23:41,928 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toLong().takeHighestOneBit()
2021-03-11 23:23:41,928 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], public final operator fun unaryPlus(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@70190c3a]]
2021-03-11 23:23:41,928 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:23:41,928 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@70190c3a]
2021-03-11 23:23:41,929 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toLong().unaryPlus()
2021-03-11 23:23:41,929 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Long.absoluteValue: kotlin.Long defined in kotlin.math[DeserializedPropertyDescriptor@324740e3]]
2021-03-11 23:23:41,929 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:23:41,930 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toLong().absoluteValue
2021-03-11 23:23:41,930 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13c3a3e1]]
2021-03-11 23:23:41,930 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:23:41,930 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13c3a3e1]
2021-03-11 23:23:42,038 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:42,039 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).compareTo(call<Char>({ '럜'})).times(-2880727483848705550)
2021-03-11 23:23:42,040 [main:114] - replacement of prope1 of type Long is (call<Char>({ '럜'})).toLong().unaryPlus()
2021-03-11 23:23:42,137 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:42,137 [main:66] - Compilation checking started
2021-03-11 23:23:42,377 [main:49] - Result = false
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = 1.toDouble()
  var prope1 : Long
  {
    if ((prope0.toInt() == 0))
      prope1 = 0
    else
      (call<Char>({ '럜'})).toLong().unaryPlus() = ((bar({ "wjfmy"})).invoke().toDouble().toLong())
  }
  return "OK"
}


2021-03-11 23:23:42,378 [main:107] - replacing (0, Long)
2021-03-11 23:23:42,378 [main:50] - replacing 0 Long
2021-03-11 23:23:42,379 [main:54] - Getting value of type Long
2021-03-11 23:23:42,496 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:42,497 [main:58] - GENERATED VALUE OF TYPE Long = 2705773825199327387
2021-03-11 23:23:42,497 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:42,498 [main:67] - randomType = Double
2021-03-11 23:23:42,604 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:23:42,635 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2dc6f639]
2021-03-11 23:23:42,636 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Long.rotateRight(bitCount: kotlin.Int): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@7629902]
2021-03-11 23:23:42,740 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:42,741 [main:78] - Generated call from random type = (0.4901311917431418).toLong().rotateRight(72108277)
2021-03-11 23:23:42,743 [main:106] - GETTING Long from Function0<String>
2021-03-11 23:23:42,756 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@92e4284], public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714d9280]]
2021-03-11 23:23:42,757 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@92e4284]
2021-03-11 23:23:42,757 [main:149] - GENERATING call of type public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714d9280]
2021-03-11 23:23:42,757 [main:117] - GENERATED CALL = (bar({ "wjfmy"})).invoke().toLong()
2021-03-11 23:23:42,757 [main:114] - replacement of 0 of type Long is 2705773825199327387
2021-03-11 23:23:42,843 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 23:23:42,843 [main:66] - Compilation checking started
2021-03-11 23:23:43,138 [main:53] - Result = true
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = 1.toDouble()
  var prope1 : Long
  {
    if ((prope0.toInt() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = ((bar({ "wjfmy"})).invoke().toDouble().toLong())
  }
  return "OK"
}


2021-03-11 23:23:43,139 [main:107] - replacing (((bar({ "wjfmy"})).invoke().toDouble().toLong()), Long)
2021-03-11 23:23:43,139 [main:50] - replacing ((bar({ "wjfmy"})).invoke().toDouble().toLong()) Long
2021-03-11 23:23:43,139 [main:54] - Getting value of type Long
2021-03-11 23:23:43,231 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:43,231 [main:58] - GENERATED VALUE OF TYPE Long = 302087774934691022
2021-03-11 23:23:43,232 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:43,439 [main:67] - randomType = HashSet<Short>
2021-03-11 23:23:43,528 [main:302] - generating value of type = HashSet<Short> false depth = 0
2021-03-11 23:23:43,639 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Short> = TODO()
2021-03-11 23:23:43,642 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Short> = TODO()
2021-03-11 23:23:43,733 [main:95] - GENERATED = linkedSetOf<Short>()
2021-03-11 23:23:43,873 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@66de563a]
2021-03-11 23:23:43,874 [main:78] - Generated call from random type = (linkedSetOf<Short>()).size.toLong()
2021-03-11 23:23:43,874 [main:114] - replacement of ((bar({ "wjfmy"})).invoke().toDouble().toLong()) of type Long is (linkedSetOf<Short>()).size.toLong()
2021-03-11 23:23:43,958 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:43,958 [main:66] - Compilation checking started
2021-03-11 23:23:44,314 [main:53] - Result = true
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = 1.toDouble()
  var prope1 : Long
  {
    if ((prope0.toInt() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}


2021-03-11 23:23:44,315 [main:107] - replacing (prope1, Long)
2021-03-11 23:23:44,315 [main:50] - replacing prope1 Long
2021-03-11 23:23:44,315 [main:54] - Getting value of type Long
2021-03-11 23:23:44,429 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:44,430 [main:58] - GENERATED VALUE OF TYPE Long = 5498771590345449716
2021-03-11 23:23:44,430 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:44,802 [main:67] - randomType = Array<ULong>
2021-03-11 23:23:44,898 [main:302] - generating value of type = Array<ULong> false depth = 0
2021-03-11 23:23:45,000 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: ULong): Array<ULong> = TODO()
2021-03-11 23:23:45,002 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: ULong): Array<ULong> = TODO()
2021-03-11 23:23:45,135 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 23:23:45,136 [main:95] - GENERATED = arrayOf<ULong>(3290969107279509044.toULong())
2021-03-11 23:23:45,162 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2f780d5]
2021-03-11 23:23:45,273 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:45,274 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7943f6a7]
2021-03-11 23:23:45,274 [main:78] - Generated call from random type = (arrayOf<ULong>(3290969107279509044.toULong())).get(1619614531).toLong()
2021-03-11 23:23:45,276 [main:106] - GETTING Long from Char
2021-03-11 23:23:45,310 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@66de563a]]
2021-03-11 23:23:45,310 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:23:45,311 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@66de563a]
2021-03-11 23:23:45,311 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).compareTo(call<Char>({ '럜'})).toLong()
2021-03-11 23:23:45,311 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6a7909db]]
2021-03-11 23:23:45,311 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67]
2021-03-11 23:23:45,312 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6a7909db]
2021-03-11 23:23:45,409 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:45,410 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toByte().rem(-2047992967819196069)
2021-03-11 23:23:45,411 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@54a2f20e]]
2021-03-11 23:23:45,411 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67]
2021-03-11 23:23:45,411 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@54a2f20e]
2021-03-11 23:23:45,515 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:45,516 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toByte().div(2165666274526683650)
2021-03-11 23:23:45,516 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], public final operator fun times(other: kotlin.Byte): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@65bd587b]]
2021-03-11 23:23:45,516 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:23:45,516 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@65bd587b]
2021-03-11 23:23:45,615 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:23:45,616 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toLong().times(108)
2021-03-11 23:23:45,616 [main:113] - Case = [public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@66e35af9], public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2dc6f639]]
2021-03-11 23:23:45,616 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@66e35af9]
2021-03-11 23:23:45,616 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2dc6f639]
2021-03-11 23:23:45,616 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toDouble().toLong()
2021-03-11 23:23:45,616 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1161beb2], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@38603f6c]]
2021-03-11 23:23:45,617 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1161beb2]
2021-03-11 23:23:45,617 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@38603f6c]
2021-03-11 23:23:45,707 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:45,708 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toShort().times(-4983488312566387697)
2021-03-11 23:23:45,708 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a4ea586]]
2021-03-11 23:23:45,709 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:23:45,815 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:23:45,815 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a4ea586]
2021-03-11 23:23:45,909 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:45,910 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).compareTo('㻇').plus(5022169502636398443)
2021-03-11 23:23:45,910 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.takeHighestOneBit(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@7e4bd9b4]]
2021-03-11 23:23:45,910 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:23:45,910 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.takeHighestOneBit(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@7e4bd9b4]
2021-03-11 23:23:45,910 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toLong().takeHighestOneBit()
2021-03-11 23:23:45,910 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Long.absoluteValue: kotlin.Long defined in kotlin.math[DeserializedPropertyDescriptor@324740e3]]
2021-03-11 23:23:45,911 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:23:45,911 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toLong().absoluteValue
2021-03-11 23:23:45,911 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], public final operator fun minus(other: kotlin.Byte): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2147460]]
2021-03-11 23:23:45,911 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:23:45,911 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2147460]
2021-03-11 23:23:45,995 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:23:45,996 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toLong().minus(-107)
2021-03-11 23:23:45,996 [main:114] - replacement of prope1 of type Long is (call<Char>({ '럜'})).toShort().times(-4983488312566387697)
2021-03-11 23:23:46,118 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:46,119 [main:66] - Compilation checking started
2021-03-11 23:23:46,393 [main:49] - Result = false
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = 1.toDouble()
  var prope1 : Long
  {
    if ((prope0.toInt() == 0))
      prope1 = 2705773825199327387
    else
      (call<Char>({ '럜'})).toShort().times(-4983488312566387697) = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}


2021-03-11 23:23:46,394 [main:107] - replacing (prope0, Double)
2021-03-11 23:23:46,394 [main:50] - replacing prope0 Double
2021-03-11 23:23:46,394 [main:54] - Getting value of type Double
2021-03-11 23:23:46,489 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:23:46,489 [main:58] - GENERATED VALUE OF TYPE Double = 0.7258421779299434
2021-03-11 23:23:46,490 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:46,593 [main:67] - randomType = UShort
2021-03-11 23:23:46,677 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 23:23:46,719 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7676d4be]
2021-03-11 23:23:46,816 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:23:46,817 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67edf70a]
2021-03-11 23:23:46,912 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:23:46,913 [main:78] - Generated call from random type = (20411.toUShort()).compareTo(48.toUByte()).times(0.26981140303431506)
2021-03-11 23:23:46,913 [main:114] - replacement of prope0 of type Double is (20411.toUShort()).compareTo(48.toUByte()).times(0.26981140303431506)
2021-03-11 23:23:46,994 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:46,995 [main:66] - Compilation checking started
2021-03-11 23:23:47,323 [main:53] - Result = true
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = 1.toDouble()
  var prope1 : Long
  {
    if (((20411.toUShort()).compareTo(48.toUByte()).times(0.26981140303431506).toInt() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}


2021-03-11 23:23:47,324 [main:107] - replacing (toDouble(), Double)
2021-03-11 23:23:47,324 [main:50] - replacing toDouble() Double
2021-03-11 23:23:47,324 [main:54] - Getting value of type Double
2021-03-11 23:23:47,425 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:23:47,425 [main:58] - GENERATED VALUE OF TYPE Double = 0.3936370139039468
2021-03-11 23:23:47,426 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:47,631 [main:67] - randomType = Char?
2021-03-11 23:23:47,729 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:23:47,774 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Char defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@74b39466]
2021-03-11 23:23:47,774 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@66e35af9]
2021-03-11 23:23:47,775 [main:78] - Generated call from random type = ('퀢')?.dec().toDouble()
2021-03-11 23:23:47,776 [main:106] - GETTING Double from Function0<String>
2021-03-11 23:23:47,791 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@92e4284], public fun kotlin.String.toDouble(): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53ffbc56]]
2021-03-11 23:23:47,791 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@92e4284]
2021-03-11 23:23:47,792 [main:149] - GENERATING call of type public fun kotlin.String.toDouble(): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53ffbc56]
2021-03-11 23:23:47,792 [main:117] - GENERATED CALL = (bar({ "wjfmy"})).invoke().toDouble()
2021-03-11 23:23:47,793 [main:114] - replacement of toDouble() of type Double is ('퀢')?.dec().toDouble()
2021-03-11 23:23:47,889 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:47,890 [main:66] - Compilation checking started
2021-03-11 23:23:48,115 [main:49] - Result = false
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = 1.('퀢')?.dec().toDouble()
  var prope1 : Long
  {
    if (((20411.toUShort()).compareTo(48.toUByte()).times(0.26981140303431506).toInt() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}


2021-03-11 23:23:48,116 [main:107] - replacing (1, Int)
2021-03-11 23:23:48,116 [main:50] - replacing 1 Int
2021-03-11 23:23:48,116 [main:54] - Getting value of type Int
2021-03-11 23:23:48,220 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:48,221 [main:58] - GENERATED VALUE OF TYPE Int = 883135931
2021-03-11 23:23:48,221 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:48,224 [main:67] - randomType = Short
2021-03-11 23:23:48,343 [main:302] - generating value of type = Short true depth = 0
2021-03-11 23:23:48,403 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@301b5dde]
2021-03-11 23:23:48,404 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77ccd734]
2021-03-11 23:23:48,505 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:48,506 [main:78] - Generated call from random type = (23610).toInt().and(-1012233323)
2021-03-11 23:23:48,506 [main:114] - replacement of 1 of type Int is (23610).toInt().and(-1012233323)
2021-03-11 23:23:48,627 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:48,627 [main:66] - Compilation checking started
2021-03-11 23:23:48,938 [main:53] - Result = true
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(-1012233323).toDouble()
  var prope1 : Long
  {
    if (((20411.toUShort()).compareTo(48.toUByte()).times(0.26981140303431506).toInt() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}


2021-03-11 23:23:48,938 [main:107] - replacing (toInt(), Int)
2021-03-11 23:23:48,938 [main:50] - replacing toInt() Int
2021-03-11 23:23:48,938 [main:54] - Getting value of type Int
2021-03-11 23:23:49,056 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:49,056 [main:58] - GENERATED VALUE OF TYPE Int = -1383841742
2021-03-11 23:23:49,057 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:49,150 [main:67] - randomType = Byte
2021-03-11 23:23:49,246 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:23:49,292 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@56f73a03]
2021-03-11 23:23:49,383 [main:302] - generating value of type = Float true depth = 0
2021-03-11 23:23:49,383 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@44ca73af]
2021-03-11 23:23:49,384 [main:78] - Generated call from random type = (-53).div(0.30271614f).toRawBits()
2021-03-11 23:23:49,385 [main:106] - GETTING Int from Function0<String>
2021-03-11 23:23:49,395 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@76ea70d2], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37c6695d]]
2021-03-11 23:23:49,395 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@76ea70d2]
2021-03-11 23:23:49,395 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37c6695d]
2021-03-11 23:23:49,487 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:23:49,575 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:23:49,575 [main:117] - GENERATED CALL = (bar {"OK"}).invoke().compareTo("mgrbi", true)
2021-03-11 23:23:49,576 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@76ea70d2], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24407538]]
2021-03-11 23:23:49,576 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@76ea70d2]
2021-03-11 23:23:49,576 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24407538]
2021-03-11 23:23:49,576 [main:117] - GENERATED CALL = (bar {"OK"}).invoke().toInt()
2021-03-11 23:23:49,576 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@6145a3a5], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1faaa7e1]]
2021-03-11 23:23:49,576 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@6145a3a5]
2021-03-11 23:23:49,655 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:23:49,655 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1faaa7e1]
2021-03-11 23:23:49,757 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:23:49,758 [main:117] - GENERATED CALL = (bar {"OK"}).equals("qgmwr").compareTo(true)
2021-03-11 23:23:49,758 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@76ea70d2], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@57c4738e]]
2021-03-11 23:23:49,758 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@76ea70d2]
2021-03-11 23:23:49,758 [main:117] - GENERATED CALL = (bar {"OK"}).invoke().length
2021-03-11 23:23:49,758 [main:114] - replacement of toInt() of type Int is (-53).div(0.30271614f).toRawBits()
2021-03-11 23:23:49,857 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:49,857 [main:66] - Compilation checking started
2021-03-11 23:23:50,062 [main:49] - Result = false
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(-1012233323).toDouble()
  var prope1 : Long
  {
    if (((20411.toUShort()).compareTo(48.toUByte()).times(0.26981140303431506).(-53).div(0.30271614f).toRawBits() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}


2021-03-11 23:23:50,063 [main:107] - replacing ((20411.toUShort()).compareTo(48.toUByte()).times(0.26981140303431506).toInt(), Int)
2021-03-11 23:23:50,063 [main:50] - replacing (20411.toUShort()).compareTo(48.toUByte()).times(0.26981140303431506).toInt() Int
2021-03-11 23:23:50,063 [main:54] - Getting value of type Int
2021-03-11 23:23:50,156 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:23:50,156 [main:58] - GENERATED VALUE OF TYPE Int = -1584170882
2021-03-11 23:23:50,157 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:50,268 [main:67] - randomType = Sequence<Long>
2021-03-11 23:23:50,269 [main:106] - GETTING Int from Char
2021-03-11 23:23:50,297 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@203855c2]]
2021-03-11 23:23:50,297 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:23:50,297 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@203855c2]
2021-03-11 23:23:50,298 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).compareTo(call<Char>({ '럜'})).dec()
2021-03-11 23:23:50,298 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@39568c9]]
2021-03-11 23:23:50,298 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:23:50,298 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).compareTo(call<Char>({ '럜'})).absoluteValue
2021-03-11 23:23:50,298 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5c962ec8]]
2021-03-11 23:23:50,298 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67]
2021-03-11 23:23:50,298 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5c962ec8]
2021-03-11 23:23:50,299 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toByte().countOneBits()
2021-03-11 23:23:50,299 [main:113] - Case = [public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@595f32d0]]
2021-03-11 23:23:50,299 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@595f32d0]
2021-03-11 23:23:50,299 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).minus(call<Char>({ '럜'}))
2021-03-11 23:23:50,299 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3c8d38f5]]
2021-03-11 23:23:50,299 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67]
2021-03-11 23:23:50,299 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3c8d38f5]
2021-03-11 23:23:50,300 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toByte().unaryMinus()
2021-03-11 23:23:50,300 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1161beb2], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@38514b24]]
2021-03-11 23:23:50,300 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1161beb2]
2021-03-11 23:23:50,300 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@38514b24]
2021-03-11 23:23:50,300 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toShort().unaryPlus()
2021-03-11 23:23:50,300 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@310d3b4c]]
2021-03-11 23:23:50,300 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:23:50,301 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).toLong().sign
2021-03-11 23:23:50,301 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76fee3de]]
2021-03-11 23:23:50,301 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:23:50,393 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:23:50,393 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76fee3de]
2021-03-11 23:23:50,394 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).compareTo('櫠').takeLowestOneBit()
2021-03-11 23:23:50,394 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@21b17433], public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@356a4aef]]
2021-03-11 23:23:50,394 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@21b17433]
2021-03-11 23:23:50,394 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).rangeTo(call<Char>({ '럜'})).step
2021-03-11 23:23:50,394 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3feeaea8]]
2021-03-11 23:23:50,395 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:23:50,395 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3feeaea8]
2021-03-11 23:23:50,486 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:23:50,487 [main:117] - GENERATED CALL = (call<Char>({ '럜'})).compareTo(call<Char>({ '럜'})).div(127)
2021-03-11 23:23:50,487 [main:114] - replacement of (20411.toUShort()).compareTo(48.toUByte()).times(0.26981140303431506).toInt() of type Int is (call<Char>({ '럜'})).compareTo('櫠').takeLowestOneBit()
2021-03-11 23:23:50,569 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:50,570 [main:66] - Compilation checking started
2021-03-11 23:23:50,863 [main:53] - Result = true
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(-1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ '럜'})).compareTo('櫠').takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}


2021-03-11 23:23:50,863 [main:107] - replacing (prope1, Long)
2021-03-11 23:23:50,864 [main:50] - replacing prope1 Long
2021-03-11 23:23:50,864 [main:54] - Getting value of type Long
2021-03-11 23:23:50,986 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:50,986 [main:58] - GENERATED VALUE OF TYPE Long = 2710201033007021297
2021-03-11 23:23:50,986 [main:61] - GENERATED IS CALL =false
2021-03-11 23:23:50,987 [main:67] - randomType = Long
2021-03-11 23:23:51,088 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:51,141 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5d073f6e]
2021-03-11 23:23:51,229 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:23:51,230 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13c3a3e1]
2021-03-11 23:23:51,328 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:23:51,329 [main:78] - Generated call from random type = (-1538162733530773054).compareTo(63).times(-2145405364334482661)
2021-03-11 23:23:51,330 [main:106] - GETTING Long from Function0<String>
2021-03-11 23:23:51,346 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@92e4284], public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714d9280]]
2021-03-11 23:23:51,346 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@92e4284]
2021-03-11 23:23:51,346 [main:149] - GENERATING call of type public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714d9280]
2021-03-11 23:23:51,347 [main:117] - GENERATED CALL = (bar({ "wjfmy"})).invoke().toLong()
2021-03-11 23:23:51,347 [main:114] - replacement of prope1 of type Long is (bar({ "wjfmy"})).invoke().toLong()
2021-03-11 23:23:51,426 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:23:51,427 [main:66] - Compilation checking started
2021-03-11 23:23:51,637 [main:49] - Result = false
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(-1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ '럜'})).compareTo('櫠').takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      (bar({ "wjfmy"})).invoke().toLong() = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}


2021-03-11 23:23:51,743 [main:141] - TRYING TO REPLACE CONSTANT 23610
2021-03-11 23:23:51,842 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 23:23:51,842 [main:66] - Compilation checking started
2021-03-11 23:23:52,043 [main:49] - Result = false
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (compareTo('櫠')).toInt().and(-1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ '럜'})).compareTo('櫠').takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}


2021-03-11 23:23:52,043 [main:141] - TRYING TO REPLACE CONSTANT 1012233323
2021-03-11 23:23:52,140 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 23:23:52,141 [main:66] - Compilation checking started
2021-03-11 23:23:52,503 [main:53] - Result = true
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ '럜'})).compareTo('櫠').takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}


2021-03-11 23:23:52,503 [main:141] - TRYING TO REPLACE CONSTANT '櫠'
2021-03-11 23:23:52,608 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 23:23:52,608 [main:66] - Compilation checking started
2021-03-11 23:23:52,924 [main:53] - Result = true
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ '럜'})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}


2021-03-11 23:23:52,924 [main:141] - TRYING TO REPLACE CONSTANT '럜'
2021-03-11 23:23:53,043 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 23:23:53,044 [main:66] - Compilation checking started
2021-03-11 23:23:53,381 [main:53] - Result = true
Text:


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}


2021-03-11 23:23:53,381 [main:41] - AFTER TRY 1 res = 

inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}


2021-03-11 23:23:53,776 [main:43] - GENERATING CALL OF inline fun bar(crossinline y: () -> String) = {
    call(y)
}
2021-03-11 23:23:53,776 [main:61] - WITHOUT TYPE PARAMS = inline fun bar(crossinline y: () -> String) = {
    call(y)
}
2021-03-11 23:23:54,011 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-11 23:23:54,011 [main:302] - generating value of type = String true depth = 2
2021-03-11 23:23:54,012 [main:95] - GENERATED = bar({ "dxwca"})
2021-03-11 23:23:54,104 [main:43] - GENERATING CALL OF public inline fun <T> call(f: () -> T): T = f()
2021-03-11 23:23:54,106 [main:61] - WITHOUT TYPE PARAMS = public inline fun <T> call(f: () -> String): String = f()
2021-03-11 23:23:54,317 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-11 23:23:54,318 [main:302] - generating value of type = String true depth = 2
2021-03-11 23:23:54,318 [main:95] - GENERATED = call<String>({ "hklwf"})
2021-03-11 23:23:54,428 [main:43] - Try №1
2021-03-11 23:24:08,503 [main:48] - Already checked
2021-03-11 23:24:12,240 [main:69] - Trying to insert override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
2021-03-11 23:24:12,368 [main:66] - Compilation checking started
2021-03-11 23:24:13,625 [main:103] - Trying to change 151 nodes
2021-03-11 23:24:13,625 [main:107] - replacing (prope7, Int)
2021-03-11 23:24:13,626 [main:50] - replacing prope7 Int
2021-03-11 23:24:13,626 [main:54] - Getting value of type Int
2021-03-11 23:24:13,828 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:24:13,833 [main:58] - GENERATED VALUE OF TYPE Int = -918979150
2021-03-11 23:24:13,833 [main:61] - GENERATED IS CALL =false
2021-03-11 23:24:13,853 [main:67] - randomType = Kla5
2021-03-11 23:24:14,064 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 23:24:14,079 [main:112] - generating klass Kla5 text = class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}
2021-03-11 23:24:14,091 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@3f09629f]
2021-03-11 23:24:14,256 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:24:14,257 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1faaa7e1]
2021-03-11 23:24:14,257 [main:78] - Generated call from random type = (Kla5()).equals("ilcub").compareTo((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
2021-03-11 23:24:14,257 [main:106] - GETTING Int from Int
2021-03-11 23:24:14,313 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4c57e410], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c441b38]]
2021-03-11 23:24:14,313 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4c57e410]
2021-03-11 23:24:14,484 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:24:14,487 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c441b38]
2021-03-11 23:24:14,638 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:24:14,641 [main:117] - GENERATED CALL = ((23610)).compareTo(290970444).compareTo(104)
2021-03-11 23:24:14,641 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e9d0443], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@5a5e0a85]]
2021-03-11 23:24:14,641 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e9d0443]
2021-03-11 23:24:14,641 [main:117] - GENERATED CALL = ((23610)).toChar().code
2021-03-11 23:24:14,641 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f8da26], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@678cbfb6]]
2021-03-11 23:24:14,642 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f8da26]
2021-03-11 23:24:14,642 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@678cbfb6]
2021-03-11 23:24:14,642 [main:117] - GENERATED CALL = ((23610)).div(val prope0  : Double = (23610).toInt().and(1012233323).toDouble().toInt()
2021-03-11 23:24:14,643 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@301b5dde], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ff81b13]]
2021-03-11 23:24:14,643 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@301b5dde]
2021-03-11 23:24:14,643 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ff81b13]
2021-03-11 23:24:14,643 [main:117] - GENERATED CALL = ((23610)).toInt().shl((23610))
2021-03-11 23:24:14,643 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12b1dcec], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@71efa55d]]
2021-03-11 23:24:14,643 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12b1dcec]
2021-03-11 23:24:14,643 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@71efa55d]
2021-03-11 23:24:14,644 [main:117] - GENERATED CALL = ((23610)).toFloat().toBits()
2021-03-11 23:24:14,644 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4c57e410], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20a7e171]]
2021-03-11 23:24:14,644 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4c57e410]
2021-03-11 23:24:14,644 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20a7e171]
2021-03-11 23:24:14,645 [main:117] - GENERATED CALL = ((23610)).compareTo((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit()).toInt()
2021-03-11 23:24:14,645 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41e51140], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3a6b12d2]]
2021-03-11 23:24:14,645 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41e51140]
2021-03-11 23:24:14,645 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3a6b12d2]
2021-03-11 23:24:14,645 [main:117] - GENERATED CALL = ((23610)).toByte().unaryPlus()
2021-03-11 23:24:14,645 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@734e5cd6], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20bb5d7f]]
2021-03-11 23:24:14,645 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@734e5cd6]
2021-03-11 23:24:14,815 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:24:14,819 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20bb5d7f]
2021-03-11 23:24:14,819 [main:117] - GENERATED CALL = ((23610)).div(3067054108542856192).countTrailingZeroBits()
2021-03-11 23:24:14,819 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e9d0443], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6673b82f]]
2021-03-11 23:24:14,819 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e9d0443]
2021-03-11 23:24:14,820 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6673b82f]
2021-03-11 23:24:14,820 [main:117] - GENERATED CALL = ((23610)).toChar().digitToInt()
2021-03-11 23:24:14,820 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4c57e410], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@59650483]]
2021-03-11 23:24:14,820 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4c57e410]
2021-03-11 23:24:14,992 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:24:14,995 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@59650483]
2021-03-11 23:24:14,995 [main:117] - GENERATED CALL = ((23610)).compareTo(546038096).takeHighestOneBit()
2021-03-11 23:24:14,995 [main:114] - replacement of prope7 of type Int is ((23610)).compareTo((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit()).toInt()
2021-03-11 23:24:15,185 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:24:15,185 [main:66] - Compilation checking started
2021-03-11 23:24:15,879 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    fu3 {
        fu4()
    }
    return "OK"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu13() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (((23610)).compareTo((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit()).toInt() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope9 = {
            prope3.prope8 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:24:15,883 [main:107] - replacing (c, Continuation<*>)
2021-03-11 23:24:15,885 [main:50] - replacing c Continuation<*>
2021-03-11 23:24:15,885 [main:54] - Getting value of type Continuation<*>
2021-03-11 23:24:16,094 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 23:24:16,263 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 23:24:16,270 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 23:24:16,851 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 23:24:16,997 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:24:17,002 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:24:17,387 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 23:24:17,581 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:24:17,596 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:24:18,293 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:24:18,293 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:24:18,293 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 23:24:18,293 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 23:24:18,494 [main:67] - randomType = UInt
2021-03-11 23:24:18,693 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 23:24:18,756 [main:106] - GETTING Continuation<*> from Function0<String>
2021-03-11 23:24:18,776 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:18,821 [main:106] - GETTING Continuation<*> from Char
2021-03-11 23:24:18,848 [main:106] - GETTING Continuation<*> from Boolean
2021-03-11 23:24:18,859 [main:106] - GETTING Continuation<*> from Char
2021-03-11 23:24:18,860 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:18,861 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-11 23:24:18,873 [main:106] - GETTING Continuation<*> from Function0<String>
2021-03-11 23:24:18,874 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:18,875 [main:106] - GETTING Continuation<*> from String
2021-03-11 23:24:18,899 [main:106] - GETTING Continuation<*> from LinkedHashSet<Short>
2021-03-11 23:24:19,049 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:19,050 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:19,051 [main:106] - GETTING Continuation<*> from Long
2021-03-11 23:24:19,088 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:19,089 [main:106] - GETTING Continuation<*> from LinkedHashSet<Short>
2021-03-11 23:24:19,089 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 23:24:19,089 [main:107] - replacing ({
            prope3.prope8 = true
        }, Function0<Unit>)
2021-03-11 23:24:19,090 [main:50] - replacing {
            prope3.prope8 = true
        } Function0<Unit>
2021-03-11 23:24:19,090 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:24:19,242 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:24:19,246 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:24:19,407 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:24:19,412 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:24:19,989 [main:302] - generating value of type = Int true depth = 4
2021-03-11 23:24:19,993 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 23:24:19,997 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 23:24:20,004 [main:95] - GENERATED = repeat(1113491213, {a: Int -> println()})
2021-03-11 23:24:20,004 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(1113491213, {a: Int -> println()})}
2021-03-11 23:24:20,005 [main:61] - GENERATED IS CALL =false
2021-03-11 23:24:20,609 [main:67] - randomType = Kla4<Byte>
2021-03-11 23:24:20,791 [main:302] - generating value of type = Kla4<Byte> false depth = 0
2021-03-11 23:24:20,796 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 23:24:21,507 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-11 23:24:21,511 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = {
            prope3.prope8 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-11 23:24:21,545 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:24:21,578 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:24:21,632 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:24:21,633 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-11 23:24:21,643 [main:106] - GETTING Function0<Unit> from LinkedHashSet<Short>
2021-03-11 23:24:21,750 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:24:21,751 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:24:21,752 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-11 23:24:21,760 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 23:24:21,768 [main:114] - replacement of {
            prope3.prope8 = true
        } of type Function0<Unit> is { repeat(1113491213, {a: Int -> println()})}
2021-03-11 23:24:21,929 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:24:21,929 [main:66] - Compilation checking started
2021-03-11 23:24:22,607 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    fu3 {
        fu4()
    }
    return "OK"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu13() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (((23610)).compareTo((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit()).toInt() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:24:22,611 [main:107] - replacing (((23610)).compareTo((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit()).toInt() != numberOfSuspensions, Boolean)
2021-03-11 23:24:22,612 [main:50] - replacing ((23610)).compareTo((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit()).toInt() != numberOfSuspensions Boolean
2021-03-11 23:24:22,612 [main:54] - Getting value of type Boolean
2021-03-11 23:24:22,802 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:24:22,805 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:24:22,806 [main:61] - GENERATED IS CALL =false
2021-03-11 23:24:22,830 [main:67] - randomType = Kla5
2021-03-11 23:24:22,968 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 23:24:22,971 [main:112] - generating klass Kla5 text = class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}
2021-03-11 23:24:22,979 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@79a2ada6]
2021-03-11 23:24:23,132 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:24:23,133 [main:78] - Generated call from random type = (Kla5()).equals("jnzhl")
2021-03-11 23:24:23,133 [main:114] - replacement of ((23610)).compareTo((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit()).toInt() != numberOfSuspensions of type Boolean is (Kla5()).equals("jnzhl")
2021-03-11 23:24:23,277 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:24:23,277 [main:66] - Compilation checking started
2021-03-11 23:24:23,940 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    fu3 {
        fu4()
    }
    return "OK"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu13() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:24:23,944 [main:107] - replacing (checkFinished && !prope8, Boolean)
2021-03-11 23:24:23,944 [main:50] - replacing checkFinished && !prope8 Boolean
2021-03-11 23:24:23,944 [main:54] - Getting value of type Boolean
2021-03-11 23:24:24,189 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:24:24,194 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:24:24,194 [main:61] - GENERATED IS CALL =false
2021-03-11 23:24:24,204 [main:67] - randomType = Long
2021-03-11 23:24:24,360 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:24:24,403 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5d102129]
2021-03-11 23:24:24,404 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b8fce77]
2021-03-11 23:24:24,404 [main:78] - Generated call from random type = (9081214521461739887).toChar().isDefined()
2021-03-11 23:24:24,404 [main:114] - replacement of checkFinished && !prope8 of type Boolean is (9081214521461739887).toChar().isDefined()
2021-03-11 23:24:24,553 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:24:24,554 [main:66] - Compilation checking started
2021-03-11 23:24:25,254 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    fu3 {
        fu4()
    }
    return "OK"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu13() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:24:25,258 [main:107] - replacing (Kla6(), Kla6)
2021-03-11 23:24:25,258 [main:50] - replacing Kla6() Kla6
2021-03-11 23:24:25,258 [main:54] - Getting value of type Kla6
2021-03-11 23:24:25,449 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 23:24:25,453 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu13() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 23:24:25,453 [main:58] - GENERATED VALUE OF TYPE Kla6 = Kla6()
2021-03-11 23:24:25,453 [main:61] - GENERATED IS CALL =true
2021-03-11 23:24:25,466 [main:67] - randomType = Kla3
2021-03-11 23:24:25,645 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 23:24:25,648 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}
2021-03-11 23:24:25,670 [main:106] - GETTING Kla6 from Int
2021-03-11 23:24:25,723 [main:106] - GETTING Kla6 from Function0<String>
2021-03-11 23:24:25,736 [main:106] - GETTING Kla6 from Int
2021-03-11 23:24:25,737 [main:106] - GETTING Kla6 from Long
2021-03-11 23:24:25,770 [main:106] - GETTING Kla6 from Boolean
2021-03-11 23:24:25,780 [main:106] - GETTING Kla6 from Char
2021-03-11 23:24:25,811 [main:106] - GETTING Kla6 from Function0<Unit>
2021-03-11 23:24:25,825 [main:106] - GETTING Kla6 from Char
2021-03-11 23:24:25,826 [main:106] - GETTING Kla6 from Function0<String>
2021-03-11 23:24:25,827 [main:106] - GETTING Kla6 from Int
2021-03-11 23:24:25,828 [main:106] - GETTING Kla6 from Int
2021-03-11 23:24:25,828 [main:106] - GETTING Kla6 from String
2021-03-11 23:24:25,860 [main:106] - GETTING Kla6 from Int
2021-03-11 23:24:25,861 [main:106] - GETTING Kla6 from LinkedHashSet<Short>
2021-03-11 23:24:26,044 [main:106] - GETTING Kla6 from LinkedHashSet<Short>
2021-03-11 23:24:26,045 [main:106] - GETTING Kla6 from Int
2021-03-11 23:24:26,045 [main:114] - replacement of Kla6() of type Kla6 is Kla6()
2021-03-11 23:24:26,259 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:24:26,263 [main:107] - replacing ("OK", String)
2021-03-11 23:24:26,265 [main:50] - replacing "OK" String
2021-03-11 23:24:26,265 [main:54] - Getting value of type String
2021-03-11 23:24:26,455 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:24:26,458 [main:58] - GENERATED VALUE OF TYPE String = "ndmjf"
2021-03-11 23:24:26,458 [main:61] - GENERATED IS CALL =false
2021-03-11 23:24:26,806 [main:67] - randomType = UByte?
2021-03-11 23:24:27,011 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:24:27,092 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2cd2bfb4]
2021-03-11 23:24:27,269 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:24:27,274 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fea991d]
2021-03-11 23:24:27,275 [main:78] - Generated call from random type = (128.toUByte())?.compareTo(32.toUByte()).toString((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit())
2021-03-11 23:24:27,275 [main:106] - GETTING String from String
2021-03-11 23:24:27,295 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1699cd2e]]
2021-03-11 23:24:27,295 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d]
2021-03-11 23:24:27,457 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:24:27,460 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1699cd2e]
2021-03-11 23:24:27,461 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).subSequence((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})), 1086962775).substring((23610), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit())
2021-03-11 23:24:27,461 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2667e0]]
2021-03-11 23:24:27,461 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2667e0]
2021-03-11 23:24:27,462 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).substringAfterLast((call<Char>({ (call<Char>({ '럜'}))})), call<String>({ "hklwf"}))
2021-03-11 23:24:27,470 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bb58446]]
2021-03-11 23:24:27,470 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bb58446]
2021-03-11 23:24:27,470 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).lowercase()
2021-03-11 23:24:27,471 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@273f7e79]]
2021-03-11 23:24:27,471 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@273f7e79]
2021-03-11 23:24:27,601 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:24:27,605 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).replaceFirst('', (call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
2021-03-11 23:24:27,606 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f3ca9a2]]
2021-03-11 23:24:27,606 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f3ca9a2]
2021-03-11 23:24:27,606 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).reversed()
2021-03-11 23:24:27,606 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ecda7d]]
2021-03-11 23:24:27,606 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ecda7d]
2021-03-11 23:24:27,606 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).trim()
2021-03-11 23:24:27,606 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c443336]]
2021-03-11 23:24:27,606 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c443336]
2021-03-11 23:24:27,606 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).decapitalize()
2021-03-11 23:24:27,606 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e2f0f48]]
2021-03-11 23:24:27,607 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e2f0f48]
2021-03-11 23:24:27,777 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:24:27,939 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:24:27,943 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).replaceBefore('䣅', "brteq", call<String>({ "hklwf"}))
2021-03-11 23:24:27,943 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f5c6435]]
2021-03-11 23:24:27,943 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f5c6435]
2021-03-11 23:24:28,096 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:24:28,110 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).substringBeforeLast((call<Char>({ (call<Char>({ '럜'}))})), "lmcqh")
2021-03-11 23:24:28,110 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf0e7fb]]
2021-03-11 23:24:28,110 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf0e7fb]
2021-03-11 23:24:28,241 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:24:28,409 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:24:28,413 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).replace('䋦', call<Char>({ (call<Char>({ '럜'}))}), true)
2021-03-11 23:24:28,413 [main:114] - replacement of "OK" of type String is "ndmjf"
2021-03-11 23:24:28,553 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 23:24:28,554 [main:66] - Compilation checking started
2021-03-11 23:24:29,173 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu13() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:24:29,177 [main:107] - replacing (false, Boolean)
2021-03-11 23:24:29,177 [main:50] - replacing false Boolean
2021-03-11 23:24:29,177 [main:54] - Getting value of type Boolean
2021-03-11 23:24:29,407 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:24:29,412 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:24:29,412 [main:61] - GENERATED IS CALL =false
2021-03-11 23:24:29,423 [main:67] - randomType = String
2021-03-11 23:24:29,567 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:24:29,587 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d]
2021-03-11 23:24:29,587 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17d72c3a]
2021-03-11 23:24:29,726 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:24:29,730 [main:78] - Generated call from random type = ("bdkgh").subSequence((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})), (23610).toInt().and(1012233323)).startsWith(call<Char>({ (call<Char>({ '럜'}))}), true)
2021-03-11 23:24:29,731 [main:106] - GETTING Boolean from String
2021-03-11 23:24:29,760 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6480fece], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3db12cf4]]
2021-03-11 23:24:29,760 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6480fece]
2021-03-11 23:24:29,760 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3db12cf4]
2021-03-11 23:24:29,761 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).get((23610)).isLowerCase()
2021-03-11 23:24:29,761 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a9791b6]]
2021-03-11 23:24:29,761 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d]
2021-03-11 23:24:29,761 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a9791b6]
2021-03-11 23:24:29,761 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).subSequence((linkedSetOf<Short>()).size, (23610).toInt().and(1012233323)).isNotBlank()
2021-03-11 23:24:29,762 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6036bb36]]
2021-03-11 23:24:29,762 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6036bb36]
2021-03-11 23:24:29,762 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).toBoolean()
2021-03-11 23:24:29,762 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6480fece], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d216630]]
2021-03-11 23:24:29,762 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6480fece]
2021-03-11 23:24:29,762 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d216630]
2021-03-11 23:24:29,762 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).get((23610).toInt()).isISOControl()
2021-03-11 23:24:29,762 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62007140]]
2021-03-11 23:24:29,762 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d]
2021-03-11 23:24:29,888 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:24:29,891 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62007140]
2021-03-11 23:24:29,891 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).subSequence(1382112217, (23610).toInt()).isBlank()
2021-03-11 23:24:29,891 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17d72c3a]]
2021-03-11 23:24:29,891 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d]
2021-03-11 23:24:30,031 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:24:30,034 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17d72c3a]
2021-03-11 23:24:30,035 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
2021-03-11 23:24:30,035 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b49519e]]
2021-03-11 23:24:30,036 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d]
2021-03-11 23:24:30,172 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:24:30,315 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:24:30,318 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b49519e]
2021-03-11 23:24:30,486 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:24:30,489 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:24:30,493 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).subSequence(-1044809492, 985908778).all({a: Char -> false})
2021-03-11 23:24:30,493 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea13b1]]
2021-03-11 23:24:30,493 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7a72e18d]
2021-03-11 23:24:30,634 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:24:30,637 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea13b1]
2021-03-11 23:24:30,638 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).subSequence((23610).toInt(), -1184463441).endsWith(call<Char>({ (call<Char>({ '럜'}))}), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
2021-03-11 23:24:30,639 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6480fece], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea95f35]]
2021-03-11 23:24:30,639 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6480fece]
2021-03-11 23:24:30,639 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea95f35]
2021-03-11 23:24:30,639 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).get((23610).toInt()).isLetter()
2021-03-11 23:24:30,639 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@57c4738e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27eae2f2]]
2021-03-11 23:24:30,639 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27eae2f2]
2021-03-11 23:24:30,782 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:24:30,782 [main:117] - GENERATED CALL = (call<String>({ "hklwf"})).length.equals("jwkkn")
2021-03-11 23:24:30,782 [main:114] - replacement of false of type Boolean is (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
2021-03-11 23:24:30,924 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:24:30,925 [main:66] - Compilation checking started
2021-03-11 23:24:31,604 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:24:31,607 [main:107] - replacing (prope8, Boolean)
2021-03-11 23:24:31,608 [main:50] - replacing prope8 Boolean
2021-03-11 23:24:31,608 [main:54] - Getting value of type Boolean
2021-03-11 23:24:31,766 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:24:31,769 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:24:31,770 [main:61] - GENERATED IS CALL =false
2021-03-11 23:24:32,761 [main:67] - randomType = ArrayDeque<MutableMap<ULong, Float?>>
2021-03-11 23:24:32,921 [main:302] - generating value of type = ArrayDeque<MutableMap<ULong, Float?>> false depth = 0
2021-03-11 23:24:33,081 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<MutableMap<ULong, Float?>> = TODO()
2021-03-11 23:24:33,086 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<MutableMap<ULong, Float?>> = TODO()
2021-03-11 23:24:33,416 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:24:33,420 [main:95] - GENERATED = ArrayDeque<MutableMap<ULong, Float?>>(627581613)
2021-03-11 23:24:33,645 [main:149] - GENERATING call of type public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.collections.MutableMap<kotlin.ULong, kotlin.Float?>> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@334c345b]
2021-03-11 23:24:33,646 [main:149] - GENERATING call of type public abstract fun hasPrevious(): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@1ba3e008]
2021-03-11 23:24:33,646 [main:78] - Generated call from random type = (ArrayDeque<MutableMap<ULong, Float?>>(627581613)).listIterator().hasPrevious()
2021-03-11 23:24:33,646 [main:114] - replacement of prope8 of type Boolean is (ArrayDeque<MutableMap<ULong, Float?>>(627581613)).listIterator().hasPrevious()
2021-03-11 23:24:33,857 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:24:33,858 [main:66] - Compilation checking started
2021-03-11 23:24:34,282 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope7 = 0
        (ArrayDeque<MutableMap<ULong, Float?>>(627581613)).listIterator().hasPrevious() = false
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:24:34,284 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 23:24:34,285 [main:50] - replacing getOrThrow() Any?
2021-03-11 23:24:34,285 [main:54] - Getting value of type Any?
2021-03-11 23:24:34,478 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:24:34,478 [main:58] - GENERATED VALUE OF TYPE Any? = "hgsnq"
2021-03-11 23:24:34,478 [main:61] - GENERATED IS CALL =false
2021-03-11 23:24:34,632 [main:67] - randomType = UByte
2021-03-11 23:24:34,794 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:24:34,850 [main:106] - GETTING Any? from LinkedHashSet<Short>
2021-03-11 23:24:34,996 [main:113] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@7192c145], public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@8a05a4d]]
2021-03-11 23:24:34,996 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@7192c145]
2021-03-11 23:24:34,996 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@8a05a4d]
2021-03-11 23:24:34,996 [main:117] - GENERATED CALL = (linkedSetOf<Short>())?.toArray().get((23610))
2021-03-11 23:24:34,996 [main:113] - Case = [@kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@3502f080]]
2021-03-11 23:24:34,996 [main:149] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@3502f080]
2021-03-11 23:24:34,996 [main:117] - GENERATED CALL = (linkedSetOf<Short>())?.toJSON()
2021-03-11 23:24:34,997 [main:114] - replacement of getOrThrow() of type Any? is (linkedSetOf<Short>())?.toJSON()
2021-03-11 23:24:35,146 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 23:24:35,146 [main:66] - Compilation checking started
2021-03-11 23:24:35,560 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.(linkedSetOf<Short>())?.toJSON()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:24:35,563 [main:107] - replacing (c, Continuation<*>)
2021-03-11 23:24:35,563 [main:50] - replacing c Continuation<*>
2021-03-11 23:24:35,563 [main:54] - Getting value of type Continuation<*>
2021-03-11 23:24:35,780 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 23:24:35,930 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 23:24:35,935 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 23:24:36,499 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 23:24:36,638 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:24:36,642 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:24:36,992 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 23:24:37,166 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:24:37,171 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:24:37,742 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 23:24:37,928 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 23:24:37,933 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 23:24:38,518 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 23:24:38,518 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:24:38,518 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:24:38,518 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 23:24:38,518 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 23:24:38,531 [main:67] - randomType = Kla2
2021-03-11 23:24:38,682 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 23:24:38,686 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}
2021-03-11 23:24:38,832 [main:194] - Type params = []
2021-03-11 23:24:38,980 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 23:24:39,132 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:24:39,139 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:24:39,483 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 23:24:39,672 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:24:39,678 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:24:40,251 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:24:40,251 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:24:40,264 [main:106] - GETTING Continuation<*> from Char
2021-03-11 23:24:40,282 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-11 23:24:40,291 [main:106] - GETTING Continuation<*> from Boolean
2021-03-11 23:24:40,299 [main:106] - GETTING Continuation<*> from Function0<String>
2021-03-11 23:24:40,308 [main:106] - GETTING Continuation<*> from Long
2021-03-11 23:24:40,338 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:40,368 [main:106] - GETTING Continuation<*> from LinkedHashSet<Short>
2021-03-11 23:24:40,498 [main:106] - GETTING Continuation<*> from Function0<String>
2021-03-11 23:24:40,499 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:40,499 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:40,500 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:40,501 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:40,502 [main:106] - GETTING Continuation<*> from LinkedHashSet<Short>
2021-03-11 23:24:40,503 [main:106] - GETTING Continuation<*> from Char
2021-03-11 23:24:40,504 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:40,504 [main:106] - GETTING Continuation<*> from String
2021-03-11 23:24:40,529 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 23:24:40,529 [main:107] - replacing (prope7, Int)
2021-03-11 23:24:40,529 [main:50] - replacing prope7 Int
2021-03-11 23:24:40,529 [main:54] - Getting value of type Int
2021-03-11 23:24:40,689 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:24:40,692 [main:58] - GENERATED VALUE OF TYPE Int = 483801320
2021-03-11 23:24:40,692 [main:61] - GENERATED IS CALL =false
2021-03-11 23:24:41,206 [main:67] - randomType = Array<Kla1<UInt>>
2021-03-11 23:24:41,361 [main:302] - generating value of type = Array<Kla1<UInt>> false depth = 0
2021-03-11 23:24:41,514 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Kla1<UInt>> = TODO()
2021-03-11 23:24:41,519 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Kla1<UInt>> = TODO()
2021-03-11 23:24:41,678 [main:95] - GENERATED = emptyArray<Kla1<UInt>>()
2021-03-11 23:24:41,707 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@203855c2]
2021-03-11 23:24:41,707 [main:78] - Generated call from random type = (emptyArray<Kla1<UInt>>()).size.dec()
2021-03-11 23:24:41,708 [main:106] - GETTING Int from Char
2021-03-11 23:24:41,736 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1161beb2], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1eb9b871]]
2021-03-11 23:24:41,736 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1161beb2]
2021-03-11 23:24:41,736 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1eb9b871]
2021-03-11 23:24:41,866 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:24:41,870 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).toShort().div(-56)
2021-03-11 23:24:41,870 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79ca4bff]]
2021-03-11 23:24:41,870 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:24:42,028 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:24:42,031 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79ca4bff]
2021-03-11 23:24:42,032 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).compareTo('').inv()
2021-03-11 23:24:42,032 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73e08a42]]
2021-03-11 23:24:42,032 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:24:42,032 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73e08a42]
2021-03-11 23:24:42,032 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ (call<Char>({ '럜'}))})).unaryPlus()
2021-03-11 23:24:42,032 [main:113] - Case = [@kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6673b82f]]
2021-03-11 23:24:42,032 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6673b82f]
2021-03-11 23:24:42,033 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).digitToInt()
2021-03-11 23:24:42,033 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f45ed22]]
2021-03-11 23:24:42,033 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:24:42,175 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:24:42,179 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f45ed22]
2021-03-11 23:24:42,179 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).compareTo('璦').coerceAtLeast((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})))
2021-03-11 23:24:42,179 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6eb5694b]]
2021-03-11 23:24:42,179 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67]
2021-03-11 23:24:42,179 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6eb5694b]
2021-03-11 23:24:42,180 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).toByte().countLeadingZeroBits()
2021-03-11 23:24:42,180 [main:113] - Case = [public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4c59aafa], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@8cb3c59]]
2021-03-11 23:24:42,180 [main:149] - GENERATING call of type public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4c59aafa]
2021-03-11 23:24:42,180 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@8cb3c59]
2021-03-11 23:24:42,180 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).toFloat().roundToInt()
2021-03-11 23:24:42,180 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@514753f4]]
2021-03-11 23:24:42,180 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67]
2021-03-11 23:24:42,180 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@514753f4]
2021-03-11 23:24:42,180 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).toByte().countTrailingZeroBits()
2021-03-11 23:24:42,180 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@45465840]]
2021-03-11 23:24:42,181 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:24:42,181 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@45465840]
2021-03-11 23:24:42,181 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).toLong().toInt()
2021-03-11 23:24:42,181 [main:113] - Case = [public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4c59aafa], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@44ca73af]]
2021-03-11 23:24:42,181 [main:149] - GENERATING call of type public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4c59aafa]
2021-03-11 23:24:42,181 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@44ca73af]
2021-03-11 23:24:42,182 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).toFloat().toRawBits()
2021-03-11 23:24:42,182 [main:114] - replacement of prope7 of type Int is (call<Char>({ (call<Char>({ '럜'}))})).toByte().countTrailingZeroBits()
2021-03-11 23:24:42,331 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:24:42,332 [main:66] - Compilation checking started
2021-03-11 23:24:42,731 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
(call<Char>({ (call<Char>({ '럜'}))})).toByte().countTrailingZeroBits() = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:24:42,733 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 23:24:42,734 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-11 23:24:42,734 [main:54] - Getting value of type Throwable?
2021-03-11 23:24:42,879 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 23:24:42,887 [main:58] - GENERATED VALUE OF TYPE Throwable? = ConcurrentModificationException()
2021-03-11 23:24:42,887 [main:61] - GENERATED IS CALL =true
2021-03-11 23:24:43,768 [main:67] - randomType = Kla1<Kla4<Kla0<ULong>>>
2021-03-11 23:24:43,769 [main:106] - GETTING Throwable? from Int
2021-03-11 23:24:43,812 [main:106] - GETTING Throwable? from Int
2021-03-11 23:24:43,813 [main:106] - GETTING Throwable? from Int
2021-03-11 23:24:43,814 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-11 23:24:43,826 [main:106] - GETTING Throwable? from String
2021-03-11 23:24:43,847 [main:106] - GETTING Throwable? from Long
2021-03-11 23:24:43,881 [main:106] - GETTING Throwable? from LinkedHashSet<Short>
2021-03-11 23:24:43,997 [main:106] - GETTING Throwable? from Int
2021-03-11 23:24:43,998 [main:106] - GETTING Throwable? from Boolean
2021-03-11 23:24:44,007 [main:106] - GETTING Throwable? from Int
2021-03-11 23:24:44,008 [main:106] - GETTING Throwable? from Int
2021-03-11 23:24:44,008 [main:106] - GETTING Throwable? from Function0<String>
2021-03-11 23:24:44,017 [main:106] - GETTING Throwable? from LinkedHashSet<Short>
2021-03-11 23:24:44,018 [main:106] - GETTING Throwable? from Char
2021-03-11 23:24:44,034 [main:106] - GETTING Throwable? from Function0<String>
2021-03-11 23:24:44,035 [main:106] - GETTING Throwable? from Char
2021-03-11 23:24:44,035 [main:114] - replacement of exceptionOrNull() of type Throwable? is ConcurrentModificationException()
2021-03-11 23:24:44,180 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:24:44,183 [main:107] - replacing (c, Continuation<*>)
2021-03-11 23:24:44,183 [main:50] - replacing c Continuation<*>
2021-03-11 23:24:44,183 [main:54] - Getting value of type Continuation<*>
2021-03-11 23:24:44,324 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 23:24:44,483 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 23:24:44,488 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 23:24:44,983 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 23:24:45,139 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:24:45,144 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:24:45,478 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 23:24:45,629 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:24:45,633 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:24:46,154 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:24:46,154 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:24:46,154 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 23:24:46,154 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 23:24:47,518 [main:67] - randomType = Function1<Function2<ULong, Kla4<Kla5>, Long>, Pair<Float, Kla0<Kla5>>>
2021-03-11 23:24:47,519 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-11 23:24:47,531 [main:106] - GETTING Continuation<*> from Char
2021-03-11 23:24:47,553 [main:106] - GETTING Continuation<*> from Char
2021-03-11 23:24:47,554 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:47,584 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:47,585 [main:106] - GETTING Continuation<*> from Long
2021-03-11 23:24:47,614 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:47,615 [main:106] - GETTING Continuation<*> from LinkedHashSet<Short>
2021-03-11 23:24:47,717 [main:106] - GETTING Continuation<*> from LinkedHashSet<Short>
2021-03-11 23:24:47,718 [main:106] - GETTING Continuation<*> from Boolean
2021-03-11 23:24:47,726 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:47,727 [main:106] - GETTING Continuation<*> from Function0<String>
2021-03-11 23:24:47,736 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:47,737 [main:106] - GETTING Continuation<*> from String
2021-03-11 23:24:47,754 [main:106] - GETTING Continuation<*> from Function0<String>
2021-03-11 23:24:47,754 [main:106] - GETTING Continuation<*> from Int
2021-03-11 23:24:47,755 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 23:24:47,755 [main:107] - replacing (false, Boolean)
2021-03-11 23:24:47,755 [main:50] - replacing false Boolean
2021-03-11 23:24:47,755 [main:54] - Getting value of type Boolean
2021-03-11 23:24:47,898 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:24:47,902 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:24:47,902 [main:61] - GENERATED IS CALL =false
2021-03-11 23:24:48,064 [main:67] - randomType = Float
2021-03-11 23:24:48,233 [main:302] - generating value of type = Float true depth = 0
2021-03-11 23:24:48,291 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12b1dcec]
2021-03-11 23:24:48,291 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3e666559]
2021-03-11 23:24:48,291 [main:78] - Generated call from random type = (0.26329482f).toFloat().isInfinite()
2021-03-11 23:24:48,292 [main:106] - GETTING Boolean from LinkedHashSet<Short>
2021-03-11 23:24:48,423 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@50e52f8b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@c20848b]]
2021-03-11 23:24:48,423 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@50e52f8b]
2021-03-11 23:24:48,563 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:24:48,564 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@c20848b]
2021-03-11 23:24:48,703 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:24:48,703 [main:117] - GENERATED CALL = ((linkedSetOf<Short>())).equals("vgary").equals("aypon")
2021-03-11 23:24:48,703 [main:113] - Case = [public open fun retainAll(elements: kotlin.collections.Collection<kotlin.Short>): kotlin.Boolean defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@29098b06]]
2021-03-11 23:24:48,703 [main:149] - GENERATING call of type public open fun retainAll(elements: kotlin.collections.Collection<kotlin.Short>): kotlin.Boolean defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@29098b06]
2021-03-11 23:24:48,844 [main:302] - generating value of type = Collection<Short> false depth = 0
2021-03-11 23:24:48,993 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Short): Collection<Short> = TODO()
2021-03-11 23:24:48,998 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Short): Collection<Short> = TODO()
2021-03-11 23:24:49,319 [main:302] - generating value of type = Short true depth = 3
2021-03-11 23:24:49,322 [main:95] - GENERATED = linkedSetOf<Short>(-4116)
2021-03-11 23:24:49,323 [main:117] - GENERATED CALL = ((linkedSetOf<Short>())).retainAll(linkedSetOf<Short>(-4116))
2021-03-11 23:24:49,323 [main:113] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@7192c145], public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@68e66fff]]
2021-03-11 23:24:49,323 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@7192c145]
2021-03-11 23:24:49,323 [main:149] - GENERATING call of type public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@68e66fff]
2021-03-11 23:24:49,465 [main:302] - generating value of type = T false depth = 0
2021-03-11 23:24:49,788 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Kla7, other: Kla7, comparator: kotlin.Comparator<Kla7>): T = TODO()
2021-03-11 23:24:49,793 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Kla7, other: Kla7, comparator: kotlin.Comparator<Kla7>): T = TODO()
2021-03-11 23:24:50,112 [main:302] - generating value of type = Kla7 false depth = 3
2021-03-11 23:24:50,115 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-11 23:24:50,116 [main:302] - generating value of type = Kla7 false depth = 3
2021-03-11 23:24:50,119 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-11 23:24:50,119 [main:302] - generating value of type = Comparator<Kla7> false depth = 3
2021-03-11 23:24:50,275 [main:43] - GENERATING CALL OF fun <T> compareBy(selectors: Function1<Kla7, Comparable<*>?>): Comparator<Kla7> = TODO()
2021-03-11 23:24:50,279 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selectors: Function1<Kla7, Comparable<*>?>): Comparator<Kla7> = TODO()
2021-03-11 23:24:50,427 [main:302] - generating value of type = Function1<Kla7, Comparable<*>?> false depth = 6
2021-03-11 23:24:50,430 [main:302] - generating value of type = Comparable<*> false depth = 7
2021-03-11 23:24:50,438 [main:95] - GENERATED = compareBy<Kla7>({a: Kla7 -> true})
2021-03-11 23:24:50,438 [main:95] - GENERATED = maxOf<Kla7>(Kla7, Kla7, compareBy<Kla7>({a: Kla7 -> true}))
2021-03-11 23:24:50,438 [main:117] - GENERATED CALL = ((linkedSetOf<Short>())).toArray().contains(maxOf<Kla7>(Kla7, Kla7, compareBy<Kla7>({a: Kla7 -> true})))
2021-03-11 23:24:50,438 [main:113] - Case = [public open fun add(element: kotlin.Short): kotlin.Boolean defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@898d864], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@c20848b]]
2021-03-11 23:24:50,438 [main:149] - GENERATING call of type public open fun add(element: kotlin.Short): kotlin.Boolean defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@898d864]
2021-03-11 23:24:50,584 [main:302] - generating value of type = Short true depth = 0
2021-03-11 23:24:50,588 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@c20848b]
2021-03-11 23:24:50,727 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:24:50,727 [main:117] - GENERATED CALL = ((linkedSetOf<Short>())).add(11979).equals("savdq")
2021-03-11 23:24:50,727 [main:113] - Case = [public open fun add(element: kotlin.Short): kotlin.Boolean defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@898d864], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@41896c9c]]
2021-03-11 23:24:50,727 [main:149] - GENERATING call of type public open fun add(element: kotlin.Short): kotlin.Boolean defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@898d864]
2021-03-11 23:24:50,868 [main:302] - generating value of type = Short true depth = 0
2021-03-11 23:24:50,871 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@41896c9c]
2021-03-11 23:24:50,872 [main:117] - GENERATED CALL = ((linkedSetOf<Short>())).add(-21538).xor((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
2021-03-11 23:24:50,872 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a428e3b]]
2021-03-11 23:24:50,872 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a428e3b]
2021-03-11 23:24:50,872 [main:117] - GENERATED CALL = ((linkedSetOf<Short>())).isNullOrEmpty()
2021-03-11 23:24:50,872 [main:113] - Case = [public open fun contains(element: kotlin.Short): kotlin.Boolean defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@7dba52e]]
2021-03-11 23:24:50,872 [main:149] - GENERATING call of type public open fun contains(element: kotlin.Short): kotlin.Boolean defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@7dba52e]
2021-03-11 23:24:51,009 [main:302] - generating value of type = Short true depth = 0
2021-03-11 23:24:51,013 [main:117] - GENERATED CALL = ((linkedSetOf<Short>())).contains(20538)
2021-03-11 23:24:51,013 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@55a2cb2a]]
2021-03-11 23:24:51,013 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@55a2cb2a]
2021-03-11 23:24:51,013 [main:117] - GENERATED CALL = ((linkedSetOf<Short>())).isNotEmpty()
2021-03-11 23:24:51,013 [main:113] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@7192c145], @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@64342f87]]
2021-03-11 23:24:51,013 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@7192c145]
2021-03-11 23:24:51,013 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@64342f87]
2021-03-11 23:24:51,154 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 23:24:51,296 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 23:24:51,301 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 23:24:51,800 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 23:24:51,800 [main:158] - CANT GENERATE PARAMS FOR @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@64342f87]
2021-03-11 23:24:51,800 [main:113] - Case = [public open fun contains(element: kotlin.Short): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@59b667], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@58cac2ef]]
2021-03-11 23:24:51,800 [main:149] - GENERATING call of type public open fun contains(element: kotlin.Short): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@59b667]
2021-03-11 23:24:51,939 [main:302] - generating value of type = Short true depth = 0
2021-03-11 23:24:51,942 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@58cac2ef]
2021-03-11 23:24:52,085 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:24:52,089 [main:117] - GENERATED CALL = ((linkedSetOf<Short>())).contains(14695).and(false)
2021-03-11 23:24:52,089 [main:114] - replacement of false of type Boolean is ((linkedSetOf<Short>())).add(-21538).xor((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
2021-03-11 23:24:52,226 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:24:52,227 [main:66] - Compilation checking started
2021-03-11 23:24:52,890 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope7 = 0
        prope8 = ((linkedSetOf<Short>())).add(-21538).xor((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:24:52,895 [main:107] - replacing (method, String)
2021-03-11 23:24:52,896 [main:50] - replacing method String
2021-03-11 23:24:52,896 [main:54] - Getting value of type String
2021-03-11 23:24:53,070 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:24:53,074 [main:58] - GENERATED VALUE OF TYPE String = "ysovk"
2021-03-11 23:24:53,075 [main:61] - GENERATED IS CALL =false
2021-03-11 23:24:53,247 [main:67] - randomType = Float
2021-03-11 23:24:53,398 [main:302] - generating value of type = Float true depth = 0
2021-03-11 23:24:53,453 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3eb85d8f]
2021-03-11 23:24:53,453 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aafc1e4]
2021-03-11 23:24:53,454 [main:78] - Generated call from random type = (0.7750216f).toChar().titlecase()
2021-03-11 23:24:53,454 [main:114] - replacement of method of type String is (0.7750216f).toChar().titlecase()
2021-03-11 23:24:53,588 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:24:53,588 [main:66] - Compilation checking started
2021-03-11 23:24:54,303 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (0.7750216f).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope7 = 0
        prope8 = ((linkedSetOf<Short>())).add(-21538).xor((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:24:54,307 [main:107] - replacing ({ c.resume(Unit) }, Function0<Unit>)
2021-03-11 23:24:54,307 [main:50] - replacing { c.resume(Unit) } Function0<Unit>
2021-03-11 23:24:54,307 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:24:54,490 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:24:54,493 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:24:54,642 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:24:54,647 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:24:55,169 [main:302] - generating value of type = Int true depth = 4
2021-03-11 23:24:55,173 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 23:24:55,176 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 23:24:55,324 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:24:55,329 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:24:55,671 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 23:24:55,675 [main:95] - GENERATED = require(false)
2021-03-11 23:24:55,675 [main:95] - GENERATED = repeat(25029713, {a: Int -> require(false)})
2021-03-11 23:24:55,675 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(25029713, {a: Int -> require(false)})}
2021-03-11 23:24:55,675 [main:61] - GENERATED IS CALL =false
2021-03-11 23:24:56,035 [main:67] - randomType = Map<Int?, Boolean>
2021-03-11 23:24:56,036 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 23:24:56,055 [main:106] - GETTING Function0<Unit> from LinkedHashSet<Short>
2021-03-11 23:24:56,160 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 23:24:56,189 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:24:56,206 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:24:56,235 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-11 23:24:56,244 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:24:56,245 [main:106] - GETTING Function0<Unit> from LinkedHashSet<Short>
2021-03-11 23:24:56,246 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-11 23:24:56,255 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:24:56,256 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 23:24:56,256 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 23:24:56,264 [main:114] - replacement of { c.resume(Unit) } of type Function0<Unit> is { repeat(25029713, {a: Int -> require(false)})}
2021-03-11 23:24:56,411 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:24:56,411 [main:66] - Compilation checking started
2021-03-11 23:24:57,080 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (0.7750216f).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope7 = 0
        prope8 = ((linkedSetOf<Short>())).add(-21538).xor((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { repeat(25029713, {a: Int -> require(false)})}
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:24:57,083 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-11 23:24:57,083 [main:50] - replacing numberOfSuspensions Int
2021-03-11 23:24:57,083 [main:54] - Getting value of type Int
2021-03-11 23:24:57,238 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:24:57,242 [main:58] - GENERATED VALUE OF TYPE Int = -1055857404
2021-03-11 23:24:57,243 [main:61] - GENERATED IS CALL =false
2021-03-11 23:24:57,444 [main:67] - randomType = Short?
2021-03-11 23:24:57,591 [main:302] - generating value of type = Short true depth = 0
2021-03-11 23:24:57,646 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3f670e42]
2021-03-11 23:24:57,647 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6c77afa7]
2021-03-11 23:24:57,775 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:24:57,779 [main:78] - Generated call from random type = (19664)?.toByte().div(39)
2021-03-11 23:24:57,779 [main:106] - GETTING Int from Char
2021-03-11 23:24:57,797 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@514753f4]]
2021-03-11 23:24:57,797 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67]
2021-03-11 23:24:57,797 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@514753f4]
2021-03-11 23:24:57,797 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).toByte().countTrailingZeroBits()
2021-03-11 23:24:57,797 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f45ed22]]
2021-03-11 23:24:57,797 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:24:57,797 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f45ed22]
2021-03-11 23:24:57,798 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ (call<Char>({ '럜'}))})).coerceAtLeast((23610).toInt())
2021-03-11 23:24:57,798 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20bb5d7f]]
2021-03-11 23:24:57,798 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6d29157c]
2021-03-11 23:24:57,798 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20bb5d7f]
2021-03-11 23:24:57,798 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).toLong().countTrailingZeroBits()
2021-03-11 23:24:57,798 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@59f9a634]]
2021-03-11 23:24:57,798 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:24:57,798 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@59f9a634]
2021-03-11 23:24:57,944 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:24:57,948 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ (call<Char>({ '럜'}))})).coerceIn((linkedSetOf<Short>()).size, 899223677)
2021-03-11 23:24:57,948 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13501936]]
2021-03-11 23:24:57,948 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:24:58,090 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:24:58,094 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13501936]
2021-03-11 23:24:58,094 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).compareTo('韂').xor((23610).toInt())
2021-03-11 23:24:58,094 [main:113] - Case = [@kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6673b82f]]
2021-03-11 23:24:58,094 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6673b82f]
2021-03-11 23:24:58,094 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).digitToInt()
2021-03-11 23:24:58,094 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65ba7bf2]]
2021-03-11 23:24:58,094 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@c719019]
2021-03-11 23:24:58,094 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65ba7bf2]
2021-03-11 23:24:58,095 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).compareTo((call<Char>({ (call<Char>({ '럜'}))}))).or((23610))
2021-03-11 23:24:58,095 [main:113] - Case = [public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@66e35af9], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6f06027d]]
2021-03-11 23:24:58,095 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@66e35af9]
2021-03-11 23:24:58,095 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6f06027d]
2021-03-11 23:24:58,244 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:24:58,248 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).toDouble().compareTo(-35)
2021-03-11 23:24:58,248 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1161beb2], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@58b43946]]
2021-03-11 23:24:58,248 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1161beb2]
2021-03-11 23:24:58,248 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@58b43946]
2021-03-11 23:24:58,249 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).toShort().toInt()
2021-03-11 23:24:58,249 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6c77afa7]]
2021-03-11 23:24:58,249 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1580b67]
2021-03-11 23:24:58,249 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6c77afa7]
2021-03-11 23:24:58,398 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:24:58,402 [main:117] - GENERATED CALL = (call<Char>({ (call<Char>({ '럜'}))})).toByte().div(-6)
2021-03-11 23:24:58,402 [main:114] - replacement of numberOfSuspensions of type Int is (call<Char>({ (call<Char>({ '럜'}))})).toByte().countTrailingZeroBits()
2021-03-11 23:24:58,569 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:24:58,569 [main:66] - Compilation checking started
2021-03-11 23:24:59,278 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (0.7750216f).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope7 = 0
        prope8 = ((linkedSetOf<Short>())).add(-21538).xor((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { repeat(25029713, {a: Int -> require(false)})}
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..(call<Char>({ (call<Char>({ '럜'}))})).toByte().countTrailingZeroBits()) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:24:59,281 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 23:24:59,281 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 23:24:59,282 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 23:24:59,463 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 23:24:59,470 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 23:24:59,486 [main:67] - randomType = Kla3
2021-03-11 23:24:59,634 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 23:24:59,637 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}
2021-03-11 23:24:59,655 [main:78] - Generated call from random type = (Kla3()).context
2021-03-11 23:24:59,655 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is (Kla3()).context
2021-03-11 23:24:59,816 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:24:59,816 [main:66] - Compilation checking started
2021-03-11 23:25:00,505 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (0.7750216f).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope7 = 0
        prope8 = ((linkedSetOf<Short>())).add(-21538).xor((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { repeat(25029713, {a: Int -> require(false)})}
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..(call<Char>({ (call<Char>({ '럜'}))})).toByte().countTrailingZeroBits()) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = (Kla3()).context

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:25:00,508 [main:107] - replacing (prope7, Int)
2021-03-11 23:25:00,508 [main:50] - replacing prope7 Int
2021-03-11 23:25:00,508 [main:54] - Getting value of type Int
2021-03-11 23:25:00,676 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:25:00,680 [main:58] - GENERATED VALUE OF TYPE Int = -1434105864
2021-03-11 23:25:00,680 [main:61] - GENERATED IS CALL =false
2021-03-11 23:25:00,871 [main:67] - randomType = UInt
2021-03-11 23:25:01,022 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 23:25:01,074 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@40e1e805]
2021-03-11 23:25:01,208 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 23:25:01,212 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5030dfb8]
2021-03-11 23:25:01,212 [main:78] - Generated call from random type = (1633858793.toUInt()).div(2624639395243249498.toULong()).countOneBits()
2021-03-11 23:25:01,212 [main:114] - replacement of prope7 of type Int is (1633858793.toUInt()).div(2624639395243249498.toULong()).countOneBits()
2021-03-11 23:25:01,365 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:25:01,366 [main:66] - Compilation checking started
2021-03-11 23:25:01,800 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (0.7750216f).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope7 = 0
        prope8 = ((linkedSetOf<Short>())).add(-21538).xor((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        (1633858793.toUInt()).div(2624639395243249498.toULong()).countOneBits()++
        prope9 = { repeat(25029713, {a: Int -> require(false)})}
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..(call<Char>({ (call<Char>({ '럜'}))})).toByte().countTrailingZeroBits()) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = (Kla3()).context

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:25:01,803 [main:107] - replacing ({}, Function0<Unit>)
2021-03-11 23:25:01,804 [main:50] - replacing {} Function0<Unit>
2021-03-11 23:25:01,804 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:25:01,974 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:25:01,978 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:25:02,129 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:25:02,137 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:25:02,639 [main:302] - generating value of type = Int true depth = 4
2021-03-11 23:25:02,643 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 23:25:02,647 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 23:25:02,797 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:25:02,802 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:25:03,174 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 23:25:03,178 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 23:25:03,341 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:25:03,346 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:25:03,858 [main:302] - generating value of type = Boolean true depth = 12
2021-03-11 23:25:03,862 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-11 23:25:03,865 [main:302] - generating value of type = Any false depth = 13
2021-03-11 23:25:03,865 [main:95] - GENERATED = check(true, { "wdlyw"})
2021-03-11 23:25:03,865 [main:95] - GENERATED = contract({ check(true, { "wdlyw"})})
2021-03-11 23:25:03,866 [main:95] - GENERATED = repeat(1261873094, {a: Int -> contract({ check(true, { "wdlyw"})})})
2021-03-11 23:25:03,866 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(1261873094, {a: Int -> contract({ check(true, { "wdlyw"})})})}
2021-03-11 23:25:03,866 [main:61] - GENERATED IS CALL =false
2021-03-11 23:25:04,398 [main:67] - randomType = HashMap<Int?, LinkedHashSet<Kla3>>
2021-03-11 23:25:04,562 [main:302] - generating value of type = HashMap<Int?, LinkedHashSet<Kla3>> false depth = 0
2021-03-11 23:25:04,720 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Int?, LinkedHashSet<Kla3>>): HashMap<Int?, LinkedHashSet<Kla3>> = TODO()
2021-03-11 23:25:04,726 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Int?, LinkedHashSet<Kla3>>): HashMap<Int?, LinkedHashSet<Kla3>> = TODO()
2021-03-11 23:25:05,079 [main:302] - generating value of type = Map<Int?, LinkedHashSet<Kla3>> false depth = 3
2021-03-11 23:25:05,236 [main:43] - GENERATING CALL OF fun <K, V> mapOf(): Map<Int?, LkedHashSet<Kla3>> = TODO()
2021-03-11 23:25:05,241 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mapOf(): Map<Int?, LkedHashSet<Kla3>> = TODO()
2021-03-11 23:25:05,412 [main:95] - GENERATED = mapOf<Int?, LinkedHashSet<Kla3>>()
2021-03-11 23:25:05,412 [main:95] - GENERATED = LinkedHashMap<Int?, LinkedHashSet<Kla3>>(mapOf<Int?, LinkedHashSet<Kla3>>())
2021-03-11 23:25:05,640 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:25:05,661 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 23:25:05,683 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 23:25:05,720 [main:106] - GETTING Function0<Unit> from LinkedHashSet<Short>
2021-03-11 23:25:05,845 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:25:05,878 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 23:25:05,885 [main:114] - replacement of {} of type Function0<Unit> is { repeat(1261873094, {a: Int -> contract({ check(true, { "wdlyw"})})})}
2021-03-11 23:25:06,039 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:25:06,040 [main:66] - Compilation checking started
2021-03-11 23:25:06,479 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (0.7750216f).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope7 = 0
        prope8 = ((linkedSetOf<Short>())).add(-21538).xor((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
        prope9 = { repeat(1261873094, {a: Int -> contract({ check(true, { "wdlyw"})})})}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { repeat(25029713, {a: Int -> require(false)})}
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in 1..(call<Char>({ (call<Char>({ '럜'}))})).toByte().countTrailingZeroBits()) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = (Kla3()).context

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:25:06,484 [main:107] - replacing (1..(call<Char>({ (call<Char>({ '럜'}))})).toByte().countTrailingZeroBits(), IntRange)
2021-03-11 23:25:06,484 [main:50] - replacing 1..(call<Char>({ (call<Char>({ '럜'}))})).toByte().countTrailingZeroBits() IntRange
2021-03-11 23:25:06,484 [main:54] - Getting value of type IntRange
2021-03-11 23:25:06,656 [main:302] - generating value of type = IntRange false depth = 0
2021-03-11 23:25:06,810 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 23:25:06,817 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 23:25:07,349 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:25:07,364 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:25:07,369 [main:95] - GENERATED = IntRange(-294260461, -2029965575)
2021-03-11 23:25:07,370 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-294260461, -2029965575)
2021-03-11 23:25:07,370 [main:61] - GENERATED IS CALL =true
2021-03-11 23:25:08,509 [main:67] - randomType = Kla1<LinkedHashMap<Kla6, Triple<ULong, Float, Kla1<Short>>>>
2021-03-11 23:25:08,510 [main:106] - GETTING IntRange from LinkedHashSet<Short>
2021-03-11 23:25:08,666 [main:113] - Case = [public open val size: kotlin.Int defined in kotlin.collections.LinkedHashSet[DeserializedPropertyDescriptor@3672c7fa], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48b193f0]]
2021-03-11 23:25:08,666 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48b193f0]
2021-03-11 23:25:08,816 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:25:08,821 [main:117] - GENERATED CALL = (linkedSetOf<Short>()).size.rangeTo(70)
2021-03-11 23:25:08,821 [main:113] - Case = [public open val size: kotlin.Int defined in kotlin.collections.LinkedHashSet[DeserializedPropertyDescriptor@3672c7fa], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1378b7cd]]
2021-03-11 23:25:08,821 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1378b7cd]
2021-03-11 23:25:09,000 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:25:09,006 [main:117] - GENERATED CALL = (linkedSetOf<Short>()).size.until(79)
2021-03-11 23:25:09,007 [main:113] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@7192c145], public val <T> kotlin.Array<out T>.indices: kotlin.ranges.IntRange defined in kotlin.collections[DeserializedPropertyDescriptor@5897c246]]
2021-03-11 23:25:09,007 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@7192c145]
2021-03-11 23:25:09,007 [main:117] - GENERATED CALL = (linkedSetOf<Short>()).toArray().indices
2021-03-11 23:25:09,007 [main:113] - Case = [public val kotlin.collections.Collection<*>.indices: kotlin.ranges.IntRange defined in kotlin.collections[DeserializedPropertyDescriptor@77ea2f8a]]
2021-03-11 23:25:09,007 [main:117] - GENERATED CALL = (linkedSetOf<Short>()).indices
2021-03-11 23:25:09,007 [main:114] - replacement of 1..(call<Char>({ (call<Char>({ '럜'}))})).toByte().countTrailingZeroBits() of type IntRange is (linkedSetOf<Short>()).size.rangeTo(70)
2021-03-11 23:25:09,164 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:25:09,165 [main:66] - Compilation checking started
2021-03-11 23:25:09,803 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (0.7750216f).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope7 = 0
        prope8 = ((linkedSetOf<Short>())).add(-21538).xor((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { repeat(25029713, {a: Int -> require(false)})}
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in (linkedSetOf<Short>()).size.rangeTo(70)) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = (Kla3()).context

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:25:09,806 [main:107] - replacing (prope5, Result<Ty0>)
2021-03-11 23:25:09,807 [main:50] - replacing prope5 Result<Ty0>
2021-03-11 23:25:09,807 [main:54] - Getting value of type Result<Ty0>
2021-03-11 23:25:10,001 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 23:25:10,165 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 23:25:10,170 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 23:25:10,500 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 23:25:10,500 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 23:25:10,683 [main:67] - randomType = Kla3?
2021-03-11 23:25:10,826 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 23:25:10,829 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}
2021-03-11 23:25:10,858 [main:106] - GETTING Result<Ty0> from Function0<Unit>
2021-03-11 23:25:10,875 [main:106] - GETTING Result<Ty0> from LinkedHashSet<Short>
2021-03-11 23:25:10,981 [main:106] - GETTING Result<Ty0> from Boolean
2021-03-11 23:25:10,990 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 23:25:11,020 [main:106] - GETTING Result<Ty0> from Function0<String>
2021-03-11 23:25:11,029 [main:106] - GETTING Result<Ty0> from Char
2021-03-11 23:25:11,047 [main:106] - GETTING Result<Ty0> from LinkedHashSet<Short>
2021-03-11 23:25:11,048 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 23:25:11,049 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 23:25:11,050 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 23:25:11,052 [main:106] - GETTING Result<Ty0> from Long
2021-03-11 23:25:11,086 [main:106] - GETTING Result<Ty0> from Char
2021-03-11 23:25:11,087 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 23:25:11,088 [main:106] - GETTING Result<Ty0> from String
2021-03-11 23:25:11,105 [main:106] - GETTING Result<Ty0> from Function0<String>
2021-03-11 23:25:11,106 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 23:25:11,106 [main:111] - Cant find and generate replacement for prope5 type Result<Ty0>
2021-03-11 23:25:11,106 [main:107] - replacing (prope9, Function0<Unit>)
2021-03-11 23:25:11,107 [main:50] - replacing prope9 Function0<Unit>
2021-03-11 23:25:11,107 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:25:11,254 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:25:11,258 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:25:11,265 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 23:25:11,265 [main:61] - GENERATED IS CALL =false
2021-03-11 23:25:12,173 [main:67] - randomType = HashMap<Kla0<Kla6?>, Kla3?>?
2021-03-11 23:25:12,333 [main:302] - generating value of type = HashMap<Kla0<Kla6?>, Kla3?> false depth = 0
2021-03-11 23:25:12,490 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Kla0<Kla6?>, Kla3?>): HashMap<Kla0<Kla6?>, Kla3?> = TODO()
2021-03-11 23:25:12,498 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Kla0<Kla6?>, Kla3?>): HashMap<Kla0<Kla6?>, Kla3?> = TODO()
2021-03-11 23:25:12,658 [main:302] - generating value of type = Pair<Kla0<Kla6?>, Kla3?> false depth = 3
2021-03-11 23:25:12,838 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla0<Kla6?>, second: Kla3?): Pair<Kla0<Kla6?>, Kla3?> = TODO()
2021-03-11 23:25:12,843 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla0<Kla6?>, second: Kla3?): Pair<Kla0<Kla6?>, Kla3?> = TODO()
2021-03-11 23:25:13,018 [main:302] - generating value of type = Kla0<Kla6?> false depth = 6
2021-03-11 23:25:13,024 [main:112] - generating klass Kla0 text = interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}
2021-03-11 23:25:13,721 [main:302] - generating value of type = Kla3 false depth = 6
2021-03-11 23:25:13,725 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}
2021-03-11 23:25:13,725 [main:95] - GENERATED = Pair<Kla0<Kla6?>, Kla3?>(TODO(), Kla3())
2021-03-11 23:25:13,726 [main:95] - GENERATED = hashMapOf<Kla0<Kla6?>, Kla3?>(Pair<Kla0<Kla6?>, Kla3?>(TODO(), Kla3()))
2021-03-11 23:25:13,869 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:25:13,900 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:25:13,901 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 23:25:13,931 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:25:13,932 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:25:13,932 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 23:25:13,940 [main:114] - replacement of prope9 of type Function0<Unit> is {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
2021-03-11 23:25:14,085 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 23:25:14,085 [main:66] - Compilation checking started
2021-03-11 23:25:14,544 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (0.7750216f).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope7 = 0
        prope8 = ((linkedSetOf<Short>())).add(-21538).xor((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { repeat(25029713, {a: Int -> require(false)})}
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in (linkedSetOf<Short>()).size.rangeTo(70)) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }()
        }
        if ((Kla5()).equals("jnzhl"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = (Kla3()).context

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:25:14,549 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7, String)
2021-03-11 23:25:14,549 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7 String
2021-03-11 23:25:14,549 [main:54] - Getting value of type String
2021-03-11 23:25:14,723 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:25:14,727 [main:58] - GENERATED VALUE OF TYPE String = "ddexo"
2021-03-11 23:25:14,727 [main:61] - GENERATED IS CALL =false
2021-03-11 23:25:14,902 [main:67] - randomType = Double?
2021-03-11 23:25:15,055 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:25:15,100 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@226d1dbb]
2021-03-11 23:25:15,100 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10c4346a]
2021-03-11 23:25:15,100 [main:78] - Generated call from random type = (0.8606287986819859)?.toChar().uppercase()
2021-03-11 23:25:15,110 [main:106] - GETTING String from Int
2021-03-11 23:25:15,154 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e9d0443], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10c4346a]]
2021-03-11 23:25:15,154 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e9d0443]
2021-03-11 23:25:15,154 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10c4346a]
2021-03-11 23:25:15,154 [main:117] - GENERATED CALL = ((23610)).toChar().uppercase()
2021-03-11 23:25:15,154 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@697af535], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52764fc0]]
2021-03-11 23:25:15,154 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@697af535]
2021-03-11 23:25:15,154 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52764fc0]
2021-03-11 23:25:15,155 [main:117] - GENERATED CALL = ((23610)).toLong().toString((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})))
2021-03-11 23:25:15,155 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e9d0443], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78ceb0a4]]
2021-03-11 23:25:15,155 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e9d0443]
2021-03-11 23:25:15,155 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78ceb0a4]
2021-03-11 23:25:15,155 [main:117] - GENERATED CALL = ((23610)).toChar().plus(call<String>({ "hklwf"}))
2021-03-11 23:25:15,155 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4c57e410], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fea991d]]
2021-03-11 23:25:15,155 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4c57e410]
2021-03-11 23:25:15,155 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fea991d]
2021-03-11 23:25:15,287 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:25:15,290 [main:117] - GENERATED CALL = ((23610)).compareTo((23610).toInt()).toString(1693805783)
2021-03-11 23:25:15,291 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fea991d]]
2021-03-11 23:25:15,291 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fea991d]
2021-03-11 23:25:15,463 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:25:15,467 [main:117] - GENERATED CALL = ((23610)).toString(1729264361)
2021-03-11 23:25:15,467 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41e51140], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f55cba]]
2021-03-11 23:25:15,467 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41e51140]
2021-03-11 23:25:15,468 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f55cba]
2021-03-11 23:25:15,628 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:25:15,632 [main:117] - GENERATED CALL = ((23610)).toByte().toString(-205802856)
2021-03-11 23:25:15,632 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e9d0443], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aafc1e4]]
2021-03-11 23:25:15,632 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e9d0443]
2021-03-11 23:25:15,632 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aafc1e4]
2021-03-11 23:25:15,632 [main:117] - GENERATED CALL = ((23610)).toChar().titlecase()
2021-03-11 23:25:15,632 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@301b5dde], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fea991d]]
2021-03-11 23:25:15,632 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@301b5dde]
2021-03-11 23:25:15,632 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fea991d]
2021-03-11 23:25:15,785 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:25:15,790 [main:117] - GENERATED CALL = ((23610)).toInt().toString(-546870553)
2021-03-11 23:25:15,790 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e9d0443], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f92ba5c]]
2021-03-11 23:25:15,790 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e9d0443]
2021-03-11 23:25:15,790 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f92ba5c]
2021-03-11 23:25:15,790 [main:117] - GENERATED CALL = ((23610)).toChar().lowercase()
2021-03-11 23:25:15,790 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d7c059d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66f1ddb]]
2021-03-11 23:25:15,790 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d7c059d]
2021-03-11 23:25:15,790 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66f1ddb]
2021-03-11 23:25:15,791 [main:117] - GENERATED CALL = ((23610)).toShort().toString((23610))
2021-03-11 23:25:15,791 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7 of type String is ((23610)).toLong().toString((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})))
2021-03-11 23:25:15,942 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:25:15,942 [main:66] - Compilation checking started
2021-03-11 23:25:16,620 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (0.7750216f).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope7 = 0
        prope8 = ((linkedSetOf<Short>())).add(-21538).xor((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { repeat(25029713, {a: Int -> require(false)})}
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in (linkedSetOf<Short>()).size.rangeTo(70)) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error(((23610)).toLong().toString((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'}))))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = (Kla3()).context

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:25:16,623 [main:107] - replacing (this, Kla3)
2021-03-11 23:25:16,623 [main:50] - replacing this Kla3
2021-03-11 23:25:16,623 [main:54] - Getting value of type Kla3
2021-03-11 23:25:16,816 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 23:25:16,820 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}
2021-03-11 23:25:16,820 [main:58] - GENERATED VALUE OF TYPE Kla3 = Kla3()
2021-03-11 23:25:16,821 [main:61] - GENERATED IS CALL =true
2021-03-11 23:25:17,009 [main:67] - randomType = Kla7
2021-03-11 23:25:17,180 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-11 23:25:17,187 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = (Kla3()).context

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-11 23:25:17,234 [main:106] - GETTING Kla3 from Int
2021-03-11 23:25:17,273 [main:106] - GETTING Kla3 from Int
2021-03-11 23:25:17,274 [main:106] - GETTING Kla3 from Int
2021-03-11 23:25:17,275 [main:106] - GETTING Kla3 from String
2021-03-11 23:25:17,297 [main:106] - GETTING Kla3 from LinkedHashSet<Short>
2021-03-11 23:25:17,417 [main:106] - GETTING Kla3 from LinkedHashSet<Short>
2021-03-11 23:25:17,418 [main:106] - GETTING Kla3 from Boolean
2021-03-11 23:25:17,426 [main:106] - GETTING Kla3 from Function0<Unit>
2021-03-11 23:25:17,434 [main:106] - GETTING Kla3 from Char
2021-03-11 23:25:17,451 [main:106] - GETTING Kla3 from Int
2021-03-11 23:25:17,451 [main:106] - GETTING Kla3 from Function0<String>
2021-03-11 23:25:17,460 [main:106] - GETTING Kla3 from Function0<String>
2021-03-11 23:25:17,461 [main:106] - GETTING Kla3 from Char
2021-03-11 23:25:17,461 [main:106] - GETTING Kla3 from Long
2021-03-11 23:25:17,489 [main:106] - GETTING Kla3 from Int
2021-03-11 23:25:17,490 [main:106] - GETTING Kla3 from Int
2021-03-11 23:25:17,490 [main:114] - replacement of this of type Kla3 is Kla3()
2021-03-11 23:25:17,643 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:25:17,643 [main:66] - Compilation checking started
2021-03-11 23:25:18,315 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun bar(crossinline y: () -> String) = {
    call(y)
}

public inline fun <T> call(f: () -> T): T = f()

//NO_CHECK_LAMBDA_INLINING

fun box(): String {
    return bar {"OK"} ()
}

fun box235() : String {
  val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
  var prope1 : Long
  {
    if (((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0))
      prope1 = 2705773825199327387
    else
      prope1 = (linkedSetOf<Short>()).size.toLong()
  }
  return "OK"
}

interface Kla0<Ty0> {
    suspend fun fu7(value: Ty0)
}

interface Kla1<Ty0 : Any> {
    suspend fun fu1(collector: Kla0<Ty0>)
}

public inline fun <Ty0 : Any> fu0(crossinline block: suspend Kla0<Ty0>.() -> Unit) = object : Kla1<Ty0> {
    override suspend fun fu1(collector: Kla0<Ty0>) = collector.block()
}

suspend inline fun <Ty0 : Any> Kla1<Ty0>.fu1(crossinline action: suspend (Ty0) -> Unit): Unit =
    fu1(object : Kla0<Ty0> {
        override suspend fun fu7(value: Ty0) = action(value)
    })

inline fun <Ty0 : Any, Ty1 : Any> Kla1<Ty0>.fu2(crossinline builderBlock: suspend Kla1<Ty0>.() -> Kla1<Ty1>): Kla1<Ty0> =
    fu0 {
        builderBlock()
    }

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla2)
}

suspend fun fu4() {
    val prope4: Unit = fu0<Int> {
        fu7(1)
    }.fu2 {
        this
    }.fu1 {
        // In this test collect is just terminating operation, which just runs the lazy computations
    }
}

fun box592(): String {
    val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
fu3 {
        fu4()
    }
    return "ndmjf"
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
x(prope5.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
Kla3().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu8(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (0.7750216f).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope2 = Kla5()

class Kla6 {
    private var prope7 = 0
    var prope8 = (call<String>({ "hklwf"})).subSequence(1960640789, (23610).toInt()).startsWith((call<Char>({ (call<Char>({ '럜'}))})), (call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)

    var prope9: () -> Unit = {}

    fun fu13() {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope7 = 0
        prope8 = ((linkedSetOf<Short>())).add(-21538).xor((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'})).takeLowestOneBit() == 0)
        prope9 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { repeat(25029713, {a: Int -> require(false)})}
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
for (i in (linkedSetOf<Short>()).size.rangeTo(70)) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if ((Kla5()).equals("jnzhl"))
            error(((23610)).toLong().toString((call<Char>({ (call<Char>({ '럜'}))})).compareTo(call<Char>({ '럜'}))))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if ((9081214521461739887).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = (Kla3()).context

    override fun resume(value: Unit) {
        val prope0  : Double = (23610).toInt().and(1012233323).toDouble()
var prope1 : Long
prope3.prope9 = { repeat(1113491213, {a: Int -> println()})}
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:25:18,320 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 23:25:18,321 [main:50] - replacing getOrThrow() Any?
2021-03-11 23:25:18,321 [main:54] - Getting value of type Any?
